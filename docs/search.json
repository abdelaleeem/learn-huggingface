[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I‚Äôd like to learn the Hugging Face ecosystem more.\nSo this website is dedicated to documenting my learning journey + creating usable resources and tutorials for others.\nIt‚Äôs made by Daniel Bourke and will be in a similiar style to learnpytorch.io.\nYou can see more of my tutorials on:\n\nYouTube\nGitHub"
  },
  {
    "objectID": "extras/todo.html",
    "href": "extras/todo.html",
    "title": "Learn Hugging Face ü§ó",
    "section": "",
    "text": "Move todo.md into index.md for easier navigation (one file is enough)\nAdd ‚Äúgetting setup‚Äù file to get started locally with the required dependencies\nAdd text classification dataset creation notebook (so people can see where the data comes from)\nAdd a Hugging Face ecosystem overview (transformers, datasets, tokenizers, torch, Hugging Face Hub, Hugging Face Spaces, etc.)\nAdd a fav icon\nMake code-only versions of notebooks? e.g.¬†text stripped away and only code is left"
  },
  {
    "objectID": "extras/todo.html#quarto-misc",
    "href": "extras/todo.html#quarto-misc",
    "title": "Learn Hugging Face ü§ó",
    "section": "Quarto misc",
    "text": "Quarto misc\n\nCreate share cards - https://quarto.org/docs/websites/website-tools.html#twitter-cards\n\nSee here for share image - https://quarto.org/docs/websites/website-tools.html#preview-images"
  },
  {
    "objectID": "extras/setup.html",
    "href": "extras/setup.html",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "The following steps are to help you get started with the Hugging Face ecosystem.\nBest to follow the ‚ÄúStart here‚Äù steps and then go through the other setup steps as necessary.\n\n\n\nCreate a free Hugging Face account at https://huggingface.co/join.\nCreate a Hugging Face access token with read and write access at https://huggingface.co/settings/tokens.\n\nYou can create a read/write token using the fine-grained settings and selecting all the appropriate options.\nRead more on Hugging Face access tokens at https://huggingface.co/docs/hub/en/security-tokens.\n\n\n\n\n\n\nTo read from and write to your Hugging Face Hub account, you‚Äôll need to set up an access token. You can have one token for reading and one for writing. However, I personally use a single token for reading and writing.\n\n\nNote: Do not share your token with others. Always keep it private and avoid saving it in raw text format.\n\n\n\nNote: If you‚Äôre unfamiliar with Google Colab, I‚Äôd recommend going through Sam Witteveen‚Äôs video Colab 101 and then Advanced Colab to learn more.\n\nFollow the steps in Start here.\nAdd your Hugging Face read/write token as a Secret in Google Colab.\n\nNaming this Secret HF_TOKEN will mean that Hugging Face libraries automatically recognize your token for future use.\n\n\n\n\n\n\nFor accessing models and datasets from the Hugging Face Hub (both read and write) inside Google Colab, you‚Äôll need to add your Hugging Face token as a Secret in Google Colab. Once you give your Google Colab notebook access to the token, it can be used by Hugging Face libraries to interact with the Hugging Face Hub.\n\n\nAlternatively, if you need to force relogin for a notebook session, you can run:\nimport huggingface_hub # requires !pip install huggingface_hub\n\n# Login to Hugging Face\nhuggingface_hub.login()\nAnd enter your token in the box that appears (note: this token will only be active for the current notebook session and will delete when your Google Colab instance terminates).\n\n\n\n\nFollow the steps in Start here.\nInstall the Hugging Face CLI with pip install -U \"huggingface_hub[cli]\".\nFollow the setup steps mentioned in https://huggingface.co/docs/huggingface_hub/en/guides/cli.\n\n\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio."
  },
  {
    "objectID": "extras/setup.html#tk---start-here-universal-steps",
    "href": "extras/setup.html#tk---start-here-universal-steps",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "Create a free Hugging Face account at https://huggingface.co/join.\nCreate a Hugging Face access token with read and write access at https://huggingface.co/settings/tokens.\n\nYou can create a read/write token using the fine-grained settings and selecting all the appropriate options.\nRead more on Hugging Face access tokens at https://huggingface.co/docs/hub/en/security-tokens.\n\n\n\n\n\n\nTo read from and write to your Hugging Face Hub account, you‚Äôll need to set up an access token. You can have one token for reading and one for writing. However, I personally use a single token for reading and writing. Note: Do not share your token with others. Always keep it private and avoid saving it in raw text format."
  },
  {
    "objectID": "extras/setup.html#tk---getting-setup-on-google-colab",
    "href": "extras/setup.html#tk---getting-setup-on-google-colab",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "Follow the steps in Start here.\nAdd your Hugging Face read/write token as a Secret in Google Colab.\n\nNaming this Secret HF_TOKEN will mean that Hugging Face libraries automatically recognize your token for future use.\n\n\n\n\n\n\nFor accessing models and datasets from the Hugging Face Hub (both read and write) inside Google Colab, you‚Äôll need to add your Hugging Face token as a Secret in Google Colab. Once you give your Google Colab notebook access to the token, it can be used by Hugging Face libraries to interact with the Hugging Face Hub.\n\n\nAlternatively, if you need to force relogin for a notebook session, you can run:\nimport huggingface_hub # requires !pip install huggingface_hub\n\n# Login to Hugging Face\nhuggingface_hub.login()\nAnd enter your token in the box that appears (note: this token will only be active for the current notebook session and will delete when your Google Colab instance terminates)."
  },
  {
    "objectID": "extras/setup.html#tk---getting-started-locally",
    "href": "extras/setup.html#tk---getting-started-locally",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "Follow the steps in Start here.\nInstall the Hugging Face CLI with pip install -U \"huggingface_hub[cli]\".\nFollow the setup steps mentioned in https://huggingface.co/docs/huggingface_hub/en/guides/cli."
  },
  {
    "objectID": "extras/setup.html#installing-hugging-face-libraries",
    "href": "extras/setup.html#installing-hugging-face-libraries",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "We‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio."
  },
  {
    "objectID": "extras/resources.html",
    "href": "extras/resources.html",
    "title": "Learn Hugging Face ü§ó",
    "section": "",
    "text": "See the Pytorch extra resources for some ideas: https://www.learnpytorch.io/pytorch_extra_resources/\nHugging Face NLP course: https://huggingface.co/learn/nlp-course/chapter0/1\nHugging Face forum: https://discuss.huggingface.co/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learn Hugging Face ü§ó",
    "section": "",
    "text": "Website dedicated to teaching the Hugging Face ecosystem with practical examples.\nEach example will include an end-to-end approach of starting with a dataset (custom or existing), building and evaluating a model and creating a demo to share.\nTeaching style:\nA machine learning cooking show! üë®‚Äçüç≥\nMottos:\nProject style:\nData, model, demo!\nThis will be our (rough) workflow:"
  },
  {
    "objectID": "index.html#faq",
    "href": "index.html#faq",
    "title": "Learn Hugging Face ü§ó",
    "section": "FAQ",
    "text": "FAQ\n\nIs this an official Hugging Face website?\n\nNo, it‚Äôs a personal project by myself (Daniel Bourke) to learn and help others learn the Hugging Face ecosystem.\n\nHow is this website made?\n\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#how-is-this-website-made",
    "href": "index.html#how-is-this-website-made",
    "title": "Learn Hugging Face ü§ó (work in progress)",
    "section": "How is this website made?",
    "text": "How is this website made?\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "extras/glossary.html",
    "href": "extras/glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Glossary\nThis is messy and a work in progress. Will tidy up later.\n\nPredictive vs generative AI = predictive AI -&gt; machine readable outputs, generative AI -&gt; human readable outputs. Predictive style models take in data and map it to a fixed output space (e.g.¬†a text classification model predicting whether an email is spam or not). Generative AI models take in data and generate an unbounded response (though theorectically this response is bounded by the training distribution), such as, a chat system taking in natural language instructions and producing natural language as output. Generative AI models can be turned into predictive-style models, for example a generative LLM could produce JSON outputs if instructed/constrained to do so.\nTransformer = A deep learning model that adopts the attention mechanism to draw global dependencies between input and output\nTokenization = turning a series of data (text or image) into a series of tokens, where a token is a numerical representation of the input data, for example, in the case of text, tokenization could mean turning the words in a sentence into numbers (e.g.¬†‚Äúhello world‚Äù -&gt; [101, 102])\nTokens = a token is a letter, word or word-piece (word) that a model uses to represent input data, for example, in the case of text, a token could be a word (e.g.¬†‚Äúhello‚Äù) or a word-piece (e.g.¬†‚Äúhell‚Äù and ‚Äúo‚Äù), see: https://platform.openai.com/tokenizer for an example\ntransformers = A Python library by Hugging Face that provides a wide range of pre-trained transformer models, fine-tuning tools, and utilities to use them\ndatasets = A Python library by Hugging Face that provides a wide range of datasets for NLP and CV tasks\ntokenizers = A Python library by Hugging Face that provides a wide range of tokenizers for NLP tasks\nevaluate = A Python library by Hugging Face with premade evaluation functions for various tasks\ntorch = PyTorch, an open-source machine learning library\ntransformers.pipeline = an abstraction to get a machine learning pipeline up and running in a few lines of code, handles data preprocessing and device placement behind the scences. For example, transformers.pipeline(\"text-classification\") can be used to tokenize input text and classify it.\ntransfer learning = taking what one model has learned and applying it to another task (e.g.¬†a model which has learned across many millions of words of text from the internet and then adjusting it to work with your smaller dataset)\nfine-tuning = a type of transfer learning where you take the existing patterns of one model (usually trained on a very large dataset) and customize them to work for your smaller dataset\nfull fine-tuning = fine-tune all of a models parameters to your dataset\npartial fine-tuning = only fine-tune a portion of a models parameters to your dataset\nfeature extraction fine-tuning = only fine-tune the final layer(s) of model to your dataset (e.g.¬†the majority of the backbone stays frozen)\nLoRA (Low-Rank Adaptation) = train an adaptor matrix (far fewer parameters than a full model) to apply to your base model weights (base model weights stay frozen)\nhyperparameters = values you can set to adjust training settings, for example, learning rate is a hyperparameter that is adjustable\nHugging Face Hub (or Hub for short) = Place to store datasets, models, and other resources of your own + find existing datasets, models & scripts others have shared. If you are familiar with GitHub, Hugging Face is like the GitHub of machine learning.\nAuto Classes = A series of classes in transformers which enables automatic loading of preprocessor or model classes based on the name or path of the model. For example you can load the processor for microsoft/conditional-detr-resnet-50 with transformers.AutoImageProcessor(microsoft/conditional-detr-resnet-50) or the model architecture with transformers.AutoModelForObjectDetection(microsoft/conditional-detr-resnet-50).\nHugging Face Spaces = A platform to share and run machine learning apps/demos, these can be built with HTML, Gradio or Streamlit\nHF = Hugging Face\nNLP = Natural Language Processing\nCV = Computer Vision\nImage classification = Classify an image in a single or multiple classes (classifying something as multiple items or labels such as [warm, well lit, sunset] is also known as tagging or more specifically, image tagging), for example, is a photo of food or not food.\nObject detection = Detect and locate an item in an image or series of images (e.g.¬†a video). An item can be almost anything in an image, for example, a licence plate, a person, a weed in a garden or a small bug on the body of a bee.\nBounding box = A box, often rectangular in nature, drawn around an item in an image to indicate its location. Can come in several different forms such as XYXY, XYWH and CXCYWH (see more in A Guide to Bounding Box Formats and How to Draw Them).\nTPU = Tensor Processing Unit\nGPU = Graphics Processing Unit\nLearning rate = Often the most important hyperparameter to tune. It is proportional with the amount an optimizer will update a model‚Äôs parameters every update step. A higher amount means larger updates (though sometimes too large) a lower amount means smaller updates (though sometimes not enough). The most ideal learning rate is experimental. Common values include 0.001, 0.0001, 0.0005, 0.00001, 0.00005 (though the learning rate can be any value). Many optimizers have decent default learning rates. For example, the Adam optimizer (a common and generally well performing optimizer) in PyTorch (torch.optim.Adam) has a default learning rate of 0.001. For fine-tuning an already trained model a learning rate of 10x smaller than the default is a good rule of thumb (e.g.¬†if a model was trained with a learning rate of 0.001, fine-tuning with 0.0001 is common). The learning rate does not have to be static and can change dynamcially during training, this practice is referred to as learning rate scheduling.\nInference = using a trained (or untrained) model to make predictions on a given piece of data. The model infers what the output should be based on the inputs. Inference is often much faster than training on a sample per sample basis because no weights get updated during inference. Though, when compared to training, inference can often take more compute in the long run. Because a model can be trained once but then used for inference millions of times (or more) over the next several months (or longer).\nPrediction probability = the probability of a model‚Äôs prediction for a given input, is a score between 0 and 1 with 1 being the highest, for example, a model may have a prediction probability of 0.95, this would mean it‚Äôs quite confident with its prediction but it doesn‚Äôt mean it‚Äôs correct. A good way to inspect potential issues with a dataset is to show examples in the test set which have a high prediction probability but are wrong (e.g.¬†pred prob = 0.98 but the prediction was incorrect).\nHugging Face Pipeline (pipeline) = A high-level API for using model for various tasks (e.g.¬†text-classification, audio-classification, image-classification, object-detection and more), see the docs: https://huggingface.co/docs/transformers/v4.41.3/en/main_classes/pipelines#transformers.pipeline\nloss value = Measure of how wrong your model is by a given metric. A perfect model will have a loss value of 0 (it is able to predict the data perfectly), though this is highly unlikely in practice (there are no perfect models). Ideally, the loss value will go down (towards 0) as training goes on. If the loss value on the training set is lower than the loss value on the test set, the model is likely overfitting (memorizing the training set too well rather than learning generalizable patterns to unseen data). To fix overfitting, introduce more regularization. To fix underfitting (loss not going down), introduce more learning capacity (more data, more parameters in the model, longer training). Machine learning is a constant battle between overfitting and underfitting.\nRandom seed = Value to flavour the randomness of an operation. For example, if you set a random seed to 42 the numbers produced by a random generator will be random but flavoured by the seed. This means if the seed stays at 42, subsequent calls of the same operation will return the same values. Not setting a random seed will result in different random values each time. Setting a random seed is done to ensure reproducibility of an operation. This is helpful when performing experiments and you do not want the outputs to be random each time.\nSynthetic data generation = using a model such as a generative Large Language Model (LLM) to generate synthetic pieces of data for a specific problem. For example, getting an LLM to generate food and not food image captions to create a binary text classification model. Synthetic data is very helpful when bootstrapping a machine learning problem. Though it is advised to only train on synthetic data and to evaluate on real data whenever possible.\nPre-trained models = models which have already been trained on a large dataset, for example, text-based models which have gone through many millions of words of text (e.g.¬†all of Wikipedia and 1000s of books) or image-based models which have seen millions of images (e.g.¬†models trained on ImageNet). In essence, any model which has already spent a large amount of time learning patterns in data. These patterns can then be adjusted for your own sample problems, often with much much smaller amounts of data for excellent results. The process of customizing a pre-trained model for a specific problem is called transfer learning (transferring what an existing model knows to your own problem).\nTraining/test split = One of the most important concepts in machine learning. Train models on the training data and evaluate them on the test data. The test data should never be seen by a model during training. Think of the test data as the final exam in a university course. A model should be able to learn enough patterns in the training set to perform well on the test set. Just like a student should be able to learn enough on course materials to do well on the final exam. If a model performs well on the training set but not well on the test set, this is known as overfitting, as in, the model memorizes the training set rather than learning generalizable patterns to unseen data. If a model performs poorly on both the training set and the test set, this is known as underfitting.\n\nPrediction probabilities = a value assigned to a model‚Äôs prediction on a certain sample after its output logits have passed through an activation function such as Softmax or Sigmoid. For example, in a binary classification problem of whether an image is of food or not of food, a model could assign a prediction probability of the image being 0.98 food and 0.02 not food. Prediction probabilities do not indicate how right a prediction is, more so, how confident a model is in that prediction. The closer a prediction probability to 1, the higher the model‚Äôs confidence in the prediction. A good evaluation step is to inspect samples with low prediction probabilities (the model seems to get confused on them) or inspect test samples where the model has a high prediction probability but the prediction is wrong (these predictions are often referred to as most wrong predictions).\nTK - logits - the raw outputs of a model\nTK - Softmax function - an activation function which can be applied to logits to get prediction probabilities.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html",
    "href": "notebooks/hugging_face_text_classification_tutorial.html",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "",
    "text": "Source code on GitHub | Online book version | Setup guide | Video Course (step by step walkthrough)",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#overview",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#overview",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "1 Overview",
    "text": "1 Overview\nWelcome to the Learn Hugging Face Text Classificaiton project!\nThis tutorial is hands-on and focused on writing resuable code.\nWe‚Äôll start with a text dataset, build a model to classify text samples and then share our model as a demo others can use.\nTo do so, we‚Äôll be using a handful of helpful open-source tools from the Hugging Face ecosystem.\n\n\n\n\nWe‚Äôre going to put on our internship hats and build a food not food text classification model using tools from the Hugging Face ecosystem.\n\n\n\n\n\n\n\n\nNote\n\n\n\nFeel to keep reading through the notebook but if you‚Äôd like to run the code yourself, be sure to go through the setup guide first.\n\n\n\n1.1 What we‚Äôre going to build\nWe‚Äôre going to be bulding a food/not_food text classification model.\nGiven a piece of a text (such as an image caption), our model will be able to predict if it‚Äôs about food or not.\nThis is the same kind of model I use in my own work on Nutrify (an app to help people learn about food).\nMore specifically, we‚Äôre going to follow the following steps:\n\nData: Problem defintion and dataset preparation - Getting a dataset/setting up the problem space.\nModel: Finding, training and evaluating a model - Finding a text classification model suitable for our problem on Hugging Face and customizing it to our own dataset.\nDemo: Creating a demo and put our model into the real world - Sharing our trained model in a way others can access and use.\n\nBy the end of this project, you‚Äôll have a trained model and demo on Hugging Face you can share with others:\n\nfrom IPython.display import HTML \n\nHTML(\"\"\"\n&lt;iframe\n    src=\"https://mrdbourke-learn-hf-food-not-food-text-classifier-demo.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"650\"\n&gt;&lt;/iframe&gt;\n\"\"\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote this is a hands-on project, so we‚Äôll be focused on writing reusable code and building a model that can be used in the real world. If you are looking for explainers to the theory of what we‚Äôre doing, I‚Äôll leave links in the extra-curriculum section.\n\n\n\n\n1.2 What is text classification?\nText classification is the process of assigning a category to a piece of text.\nWhere a category can be almost anything and a piece of text can be a word, phrase, sentence, paragraph or entire document.\nExample text classification problems include:\n\n\n\n\n\n\n\n\nProblem\nDescription\nProblem Type\n\n\n\n\nSpam/phishing email detection\nIs an email spam or not spam? Or is it a phishing email or not?\nBinary classification (one thing or another)\n\n\nSentiment analysis\nIs a piece of text positive, negative or neutral? Such as classifying product reviews into good/bad/neutral.\nMulti-class classification (one thing from many)\n\n\nLanguage detection\nWhat language is a piece of text written in?\nMulti-class classification (one thing from many)\n\n\nTopic classification\nWhat topic(s) does a news article belong to?\nMulti-label classification (one or more things from many)\n\n\nHate speech detection\nIs a comment hateful or not hateful?\nBinary classification (one thing or another)\n\n\nProduct categorization\nWhat categories does a product belong to?\nMulti-label classification (one or more things from many)\n\n\nBusiness email classification\nWhich category should this email go to?\nMulti-class classification (one thing from many)\n\n\n\nText classification is a very common problem in many business settings.\nFor example, a project I‚Äôve worked on previously as a machine learning engineer was building a text classification model to classify different insurance claims into claimant_at_fault/claimant_not_at_fault for a large insurance company.\nIt turns out the deep learning-based model we built was very good (98%+ accuracy on the test dataset).\n\n\n\n\nAn example text classification problem I once worked on to classify insurance claim texts into at fault or not fault. This result of the model would send the claim to a different department in the insurance company.\n\n\nSpeaking of models, there are several different kinds of models you can use for text classification.\nAnd each will have its pros and cons depending on the problem you‚Äôre working on.\nExample text classification models include:\n\n\n\nModel\nDescription\nPros\nCons\n\n\n\n\nRule-based\nUses a set of rules to classify text (e.g.¬†if text contains ‚Äúsad‚Äù -&gt; sentiment = low)\nSimple, easy to understand\nRequires manual creation of rules\n\n\nBag of Words\nCounts the frequency of words in a piece of text\nSimple, easy to understand\nDoesn‚Äôt capture word order\n\n\nTF-IDF\nWeighs the importance of words in a piece of text\nSimple, easy to understand\nDoesn‚Äôt capture word order\n\n\nDeep learning-based models\nUses neural networks to learn patterns in text\nCan learn complex patterns at scale\nCan require large amounts of data/compute power to run, not as easy to understand (can be hard to debug)\n\n\n\nFor our project, we‚Äôre going to go with a deep learning model.\nWhy?\nBecause Hugging Face helps us do so.\nAnd in most cases, with a quality dataset, a deep learning model will often perform better than a rule-based or other model.\n\n\n1.3 Why train your own text classification models?\nYou can customize pre-trained models for text classification as well as API-powered models and LLMs such as GPT, Gemini, Claude or Mistral.\nDepending on your requirements, there are several pros and cons for using your own model versus using an API.\nTraining/fine-tuning your own model:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nControl: Full control over model lifecycle.\nCan be complex to get setup.\n\n\nNo usage limits (aside from compute constraints).\nRequires dedicated compute resources for training/inference.\n\n\nCan train once and deploy everywhere/whenever you want (for example, Tesla deploying a model to all self-driving cars).\nRequires maintenance over time to ensure performance remains up to par.\n\n\nPrivacy: Data can be kept in-house/app and doesn‚Äôt need to go to a third party.\nCan require longer development cycles compared to using existing APIs.\n\n\nSpeed: Customizing a small model for a specific use case often means it runs much faster.\n\n\n\n\nUsing a pre-built model API (e.g.¬†GPT, Gemini, Claude, Mistral):\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nEase of use: often can be setup within a few lines of code.\nIf the model API goes down, your service goes down.\n\n\nNo maintenance of compute resources.\nData is required to be sent to a third-party for processing.\n\n\nAccess to the most advanced models.\nThe API may have usage limits per day/time period.\n\n\nCan scale if usage increases.\nCan be much slower than using dedicated models due to requiring an API call.\n\n\n\nFor this project, we‚Äôre going to focus on fine-tuning our own model.\n\n\n1.4 Workflow we‚Äôre going to follow\nOur motto is data, model, demo!\nSo we‚Äôre going to follow the rough workflow of:\n\nCreate and preprocess data.\nDefine the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nI say rough because machine learning projects are often non-linear in nature.\nAs in, because machine learning projects involve many experiments, they can kind of be all over the place.\nBut this worfklow will give us some good guidelines to follow.\n\n\n\n\nA general Hugging Face workflow from idea to shared model and demo using tools from the Hugging Face ecosystem. You‚Äôll notice some of the steps don‚Äôt match with our workflow outline above. This is because the text-based workflow outline above breaks some of the steps down for educational purposes. These kind of workflows are not set in stone and are more of guide than specific directions. See information on each of the tools in the Hugging Face documentation.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#importing-necessary-libraries",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#importing-necessary-libraries",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "2 Importing necessary libraries",
    "text": "2 Importing necessary libraries\nLet‚Äôs get started!\nFirst, we‚Äôll import the required libraries.\nIf you‚Äôre running on your local computer, be sure to check out the getting setup guide to make sure you have everything you need.\nIf you‚Äôre using Google Colab, many of them the following libraries will be installed by default.\nHowever, we‚Äôll have to install a few extras to get everything working.\n\n\n\n\n\n\nNote\n\n\n\nIf you‚Äôre running on Google Colab, this notebook will work best with access to a GPU. To enable a GPU, go to Runtime ‚û°Ô∏è Change runtime type ‚û°Ô∏è Hardware accelerator ‚û°Ô∏è GPU.\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio.\n\nWe can also check the versions of our software with package_name.__version__.\n\n# Install dependencies (this is mostly for Google Colab, as the other dependences are available by default in Colab)\ntry:\n  import datasets, evaluate, accelerate\n  import gradio as gr\nexcept ModuleNotFoundError:\n  !pip install -U datasets evaluate accelerate gradio # -U stands for \"upgrade\" so we'll get the latest version by default\n  import datasets, evaluate, accelerate\n  import gradio as gr\n\nimport random\n\nimport numpy as np\nimport pandas as pd\n\nimport torch\nimport transformers\n\nprint(f\"Using transformers version: {transformers.__version__}\")\nprint(f\"Using datasets version: {datasets.__version__}\")\nprint(f\"Using torch version: {torch.__version__}\")\n\nUsing transformers version: 4.43.2\nUsing datasets version: 2.20.0\nUsing torch version: 2.4.0+cu121\n\n\nWonderful, as long as your versions are the same or higher to the versions above, you should be able to run the code below.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#getting-a-dataset",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#getting-a-dataset",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "3 Getting a dataset",
    "text": "3 Getting a dataset\nOkay, now we‚Äôre got the required libraries, let‚Äôs get a dataset.\nGetting a dataset is one of the most important things a machine learning project.\nThe dataset you often determines the type of model you use as well as the quality of the outputs of that model.\nMeaning, if you have a high quality dataset, chances are, your future model could also have high quality outputs.\nIt also means if your dataset is of poor quality, your model will likely also have poor quality outputs.\nFor a text classificaiton problem, your dataset will likely come in the form of text (e.g.¬†a paragraph, sentence or phrase) and a label (e.g.¬†what category the text belongs to).\n\n\n\n\nOur  food not food image caption dataset on the Hugging Face Hub.\n\n\nIn our case, our dataset comes in the form of a collection of synthetic image captions and their corresponding labels (food or not food).\nThis is a dataset I‚Äôve created earlier to help us practice building a text classification model.\nYou can find it on Hugging Face under the name mrdbourke/learn_hf_food_not_food_image_captions.\n\n\n\n\n\n\nFood Not Food Image Caption Dataset Creation\n\n\n\nYou can see how the Food Not Food image caption dataset was created in the example Google Colab notebook.\nA Large Language Model (LLM) was asked to generate various image caption texts about food and not food.\nGetting another model to create data for a problem is known as synthetic data generation and is a very good way of bootstrapping towards creating a model.\nOne workflow would be to use real data wherever possible and use synthetic data to boost when needed.\nNote that it‚Äôs always advised to evaluate/test models on real-life data as opposed to synthetic data.\n\n\n\n3.1 Where can you get more datasets?\nThe are many different places you can get datasets for text-based problems.\nOne of the best places is on the Hugging Face Hub, specifically huggingface.co/datasets.\nHere you can find many different kinds of problem specific data such as text classification.\nThere are also many more datasets available on Kaggle Datasets.\nAnd thanks to the power of LLMs (Large Language Models), you can also now create your own text classifications by generating samples (this is how I created the dataset for this project).\n\n\n\n\nHugging Face Datasets and Kaggle Datasets are two of the best places on the internet to find all kinds of different datasets. If you can‚Äôt find an existing dataset related to your problem you can either use your own data or potentially generate synthetic data samples with an LLM. For more on synthetic data generation, see the Creating Synthetic Data article by NVIDIA.\n\n\n\n\n3.2 Loading the dataset\nOnce we‚Äôve found/prepared a dataset on the Hugging Face Hub, we can use the Hugging Face datasets library to load it.\nTo load a dataset we can use the datasets.load_dataset(path=NAME_OR_PATH_OF_DATASET) function and pass it the name/path of the dataset we want to load.\nIn our case, our dataset name is mrdbourke/learn_hf_food_not_food_image_captions (you can also change this for your own dataset).\nAnd since our dataset is hosted on Hugging Face, when we run the following code for the first time, it will download it.\nIf your target dataset is quite large, this download may take a while.\nHowever, once the dataset is downloaded, subsequent reloads will be mush faster.\n\n# Load the dataset from Hugging Face Hub\ndataset = datasets.load_dataset(path=\"mrdbourke/learn_hf_food_not_food_image_captions\")\n\n# Inspect the dataset\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['text', 'label'],\n        num_rows: 250\n    })\n})\n\n\nDataset loaded!\nLooks like our dataset has two features, text and label.\nAnd 250 total rows (the number of examples in our dataset).\nWe can check the column names with dataset.column_names.\n\n# What features are there?\ndataset.column_names\n\n{'train': ['text', 'label']}\n\n\nLooks like our dataset comes with a train split already (the whole dataset).\nWe can access the train split with dataset[\"train\"] (some datasets also come with built-in \"test\" splits too).\n\n# Access the training split\ndataset[\"train\"]\n\nDataset({\n    features: ['text', 'label'],\n    num_rows: 250\n})\n\n\nHow about we check out a single sample?\nWe can do so with indexing.\n\ndataset[\"train\"][0]\n\n{'text': 'Creamy cauliflower curry with garlic naan, featuring tender cauliflower in a rich sauce with cream and spices, served with garlic naan bread.',\n 'label': 'food'}\n\n\nNice! We get back a dictionary with the keys text and label.\nThe text key contains the text of the image caption and the label key contains the label (food or not food).\n\n\n3.3 Inspect random examples from the dataset\nAt 250 total samples, our dataset isn‚Äôt too large.\nSo we could sit here and explore the samples one by one.\nBut whenever I interact with a new dataset, I like to view a bunch of random examples and get a feel of the data.\nDoing so is inline with the data explorer‚Äôs motto: visualize, visualize, visualize!\nAs a rule of thumb, I like to view at least 20-100 random examples when interacting with a new dataset.\nLet‚Äôs write some code to view 5 random indexes of our data and their corresponding text and labels at a time.\n\nimport random\n\nrandom_indexs = random.sample(range(len(dataset[\"train\"])), 5)\nrandom_samples = dataset[\"train\"][random_indexs]\n\nprint(f\"[INFO] Random samples from dataset:\\n\")\nfor item in zip(random_samples[\"text\"], random_samples[\"label\"]):\n    print(f\"Text: {item[0]} | Label: {item[1]}\")\n\n[INFO] Random samples from dataset:\n\nText: Set of spatulas kept in a holder | Label: not_food\nText: Mouthwatering paneer tikka masala, featuring juicy paneer in a rich tomato-based sauce, garnished with fresh coriander leaves. | Label: food\nText: Pair of reading glasses left open on a book | Label: not_food\nText: Set of board games stacked on a shelf | Label: not_food\nText: Two handfuls of bananas in a fruit bowl with grapes on the side, the fruit bowl is blue | Label: food\n\n\nBeautiful! Looks like our data contains a mix of shorter and longer sentences (between 5 and 20 words) of texts about food and not food.\nWe can get the unique labels in our dataset with dataset[\"train\"].unique(\"label\").\n\n# Get unique label values\ndataset[\"train\"].unique(\"label\")\n\n['food', 'not_food']\n\n\nIf our dataset is small enough to fit into memory, we can count the number of different labels with Python‚Äôs collections.Counter (a method for counting objects in an iterable or mapping).\n\n# Check number of each label\nfrom collections import Counter\n\nCounter(dataset[\"train\"][\"label\"])\n\nCounter({'food': 125, 'not_food': 125})\n\n\nExcellent, looks like our dataset is well balanced with 125 samples of food and 125 samples of not food.\nIn a binary classification case, this is ideal.\nIf the classes were dramatically unbalanced (e.g.¬†90% food and 10% not food) we might have to consider collecting/creating more data.\nBut best to train a model and see how it goes before making any drastic dataset changes.\nBecause our dataset is small, we could also inspect it via a pandas DataFrame (however, this may not be possible for extremely large datasets).\n\n# Turn our dataset into a DataFrame and get a random sample\nfood_not_food_df = pd.DataFrame(dataset[\"train\"])\nfood_not_food_df.sample(7)\n\n\n\n\n\n\n\n\ntext\nlabel\n\n\n\n\n142\nA slice of pizza with a generous amount of shr...\nfood\n\n\n6\nPair of reading glasses left open on a book\nnot_food\n\n\n97\nTelescope positioned on a balcony\nnot_food\n\n\n60\nA close-up of a family playing a board game wi...\nnot_food\n\n\n112\nRich and spicy lamb rogan josh with yogurt gar...\nfood\n\n\n181\nA steaming bowl of fiery chicken curry, infuse...\nfood\n\n\n197\nPizza with a stuffed crust, oozing with cheese\nfood\n\n\n\n\n\n\n\n\n# Get the value counts of the label column\nfood_not_food_df[\"label\"].value_counts()\n\nlabel\nfood        125\nnot_food    125\nName: count, dtype: int64",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#preparing-data-for-text-classification",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#preparing-data-for-text-classification",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "4 Preparing data for text classification",
    "text": "4 Preparing data for text classification\nWe‚Äôve got our data ready but there are a few steps we‚Äôll need to take before we can model it.\nThe main two being:\n\nTokenization - turning our text into a numerical representation (machines prefer numbers rather than words), for example, {\"a\": 0, \"b\": 1, \"c\": 2...}.\nCreating a train/test split - right now our data is in a training split only but we‚Äôll create a test set to evaluate our model‚Äôs performance.\n\nThese don‚Äôt necessarily have to be in order either.\nBefore we get to them, let‚Äôs create a small mapping from our labels to numbers.\nIn the same way we need to tokenize our text into numerical representation, we also need to do the same for our labels.\n\n4.1 Creating a mapping from labels to numbers\nOur machine learning model will want to see all numbers (people do well with text, computers do well with numbers).\nThis goes for text as well as label input.\nSo let‚Äôs create a mapping from our labels to numbers.\nSince we‚Äôve only got a couple of labels (\"food\" and \"not_food\"), we can create a dictionary to map them to numbers, however, if you‚Äôve got a fair few labels, you may want to make this mapping programmatically.\nWe can use these dictionaries later on for our model training as well as evaluation.\n\n# Create mapping from id2label and label2id\nid2label = {0: \"not_food\", 1: \"food\"}\nlabel2id = {\"not_food\": 0, \"food\": 1}\n\nprint(f\"Label to ID mapping: {label2id}\")\nprint(f\"ID to Label mapping: {id2label}\")\n\nLabel to ID mapping: {'not_food': 0, 'food': 1}\nID to Label mapping: {0: 'not_food', 1: 'food'}\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn a binary classification task (such as what we‚Äôre working on), the positive class, in our case \"food\", is usually given the label 1 and the negative class (\"not_food\") is given the label 0.\n\n\nRather than hard-coding our label to ID maps, we can also create them programmatically from the dataset (this is helpful if you have many classes).\n\n# Create mappings programmatically from dataset\nid2label = {idx: label for idx, label in enumerate(dataset[\"train\"].unique(\"label\")[::-1])} # reverse sort list to have \"not_food\" first\nlabel2id = {label: idx for idx, label in id2label.items()}\n\nprint(f\"Label to ID mapping: {label2id}\")\nprint(f\"ID to Label mapping: {id2label}\")\n\nLabel to ID mapping: {'not_food': 0, 'food': 1}\nID to Label mapping: {0: 'not_food', 1: 'food'}\n\n\nWith our dictionary mappings created, we can update the labels of our dataset to be numeric.\nWe can do this using the datasets.Dataset.map method and passing it a function to apply to each example.\nLet‚Äôs create a small function which turns an example label into a number.\n\n# Turn labels into 0 or 1 (e.g. 0 for \"not_food\", 1 for \"food\")\ndef map_labels_to_number(example):\n  example[\"label\"] = label2id[example[\"label\"]]\n  return example\n\nexample_sample = {\"text\": \"This is a sentence about my favourite food: honey.\", \"label\": \"food\"}\n\n# Test the function\nmap_labels_to_number(example_sample)\n\n{'text': 'This is a sentence about my favourite food: honey.', 'label': 1}\n\n\nLooks like our function works!\nHow about we map it to the whole dataset?\n\n# Map our dataset labels to numbers\ndataset = dataset[\"train\"].map(map_labels_to_number)\ndataset[:5]\n\n{'text': ['Creamy cauliflower curry with garlic naan, featuring tender cauliflower in a rich sauce with cream and spices, served with garlic naan bread.',\n  'Set of books stacked on a desk',\n  'Watching TV together, a family has their dog stretched out on the floor',\n  'Wooden dresser with a mirror reflecting the room',\n  'Lawn mower stored in a shed'],\n 'label': [1, 0, 0, 0, 0]}\n\n\nNice! Looks like our labels are all numerical now.\nWe can check a few random samples using dataset.shuffle() and indexing for the first few.\n\n# Shuffle the dataset and view the first 5 samples (will return different results each time) \ndataset.shuffle()[:5]\n\n{'text': ['Set of oven mitts hanging on a hook',\n  'Set of cookie cutters collected in a jar',\n  'Pizza with a dessert twist, featuring a sweet Nutella base and fresh strawberries on top',\n  'Set of binoculars placed on a table',\n  'Two handfuls of bananas in a fruit bowl with grapes on the side, the fruit bowl is blue'],\n 'label': [0, 0, 1, 0, 1]}\n\n\n\n\n4.2 Split the dataset into training and test sets\nRight now our dataset only has a training split.\nHowever, we‚Äôd like to create a test split so we can evaluate our model.\nIn essence, our model will learn patterns (the relationship between text captions and their labels of food/not_food) on the training data.\nAnd we will evaluate those learned patterns on the test data.\nWe can split our data using the datasets.Dataset.train_test_split method.\nWe can use the test_size parameter to define the percentage of data we‚Äôd like to use in our test set (e.g.¬†test_size=0.2 would mean 20% of the data goes to the test set).\n\n# Create train/test splits\ndataset = dataset.train_test_split(test_size=0.2, seed=42) # note: seed isn't needed, just here for reproducibility, without it you will get different splits each time you run the cell\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['text', 'label'],\n        num_rows: 200\n    })\n    test: Dataset({\n        features: ['text', 'label'],\n        num_rows: 50\n    })\n})\n\n\nPerfect!\nOur dataset has been split into 200 training examples and 50 testing examples.\nLet‚Äôs visualize a few random examples to make sure they still look okay.\n\nrandom_idx_train = random.randint(0, len(dataset[\"train\"]))\nrandom_sample_train = dataset[\"train\"][random_idx_train]\n\nrandom_idx_test = random.randint(0, len(dataset[\"test\"]))\nrandom_sample_test = dataset[\"test\"][random_idx_test]\n\nprint(f\"[INFO] Random sample from training dataset:\")\nprint(f\"Text: {random_sample_train['text']}\\nLabel: {random_sample_train['label']} ({id2label[random_sample_train['label']]})\\n\")\nprint(f\"[INFO] Random sample from testing dataset:\")\nprint(f\"Text: {random_sample_test['text']}\\nLabel: {random_sample_test['label']} ({id2label[random_sample_test['label']]})\")\n\n[INFO] Random sample from training dataset:\nText: Set of dumbbells stacked in a gym\nLabel: 0 (not_food)\n\n[INFO] Random sample from testing dataset:\nText: Two handfuls of bananas in a fruit bowl with grapes on the side, the fruit bowl is blue\nLabel: 1 (food)\n\n\n\n\n4.3 Tokenizing text data\nLabels numericalized, dataset split, time to turn our text into numbers.\nHow?\nTokenization.\nWhat‚Äôs tokenization?\nTokenization is the process of converting a non-numerical data source into numbers.\nWhy?\nBecause machines (especially machine learning models) prefer numbers to human-style data.\nIn the case of the text \"I love pizza\" a very simple method of tokenization might be to convert each word to a number.\nFor example, {\"I\": 0, \"love\": 1, \"pizza\": 2}.\nHowever, for most modern machine learning models, the tokenization process is a bit more nuanced.\nFor example, the text \"I love pizza\" might be tokenized into something more like [101, 1045, 2293, 10733, 102].\n\n\n\n\nAlthough it may seem like you can type text directly to machine learning models, behind the scenes they are converting it to numbers first. This happens for all kinds of data being passed to machine learning models. It goes from its raw form (e.g.¬†text, image, audio) and gets turned into a numerical representation (often called tokenization) before it is processed by the model. Exactly how data gets turned into numbers will often be different depending on the model. This example shows the use of OpenAI‚Äôs GPT-3.5 & GPT-4 tokenizer.\n\n\n\n\n\n\n\n\nNote\n\n\n\nDepending on the model you use, the tokenization process could be different.\nFor example, one model might turn \"I love pizza\" into [40, 3021, 23317], where as another model might turn it into [101, 1045, 2293, 10733, 102].\nTo deal with this, Hugging Face models often pair models and tokenizers together by name.\nSuch is the case with distilbert/distilbert-base-uncased (there is a tokenizer.json file as well as a tokenizer_config.json file which contains all of the tokenizer implementation details).\nFor more examples of tokenization, you can see OpenAI‚Äôs tokenization visualizer tool as well as their open-source library tiktoken, Google also have an open-source tokenization library called sentencepiece, finally Hugging Face‚Äôs tokenizers library is also a great resource (this is what we‚Äôll be using behind the scenes).\n\n\nMany of the text-based models on Hugging Face come paired with their own tokenizer.\nFor example, the distilbert/distilbert-base-uncased model is paired with the distilbert/distilbert-base-uncased tokenizer.\nWe can load the tokenizer for a given model using the transformers.AutoTokenizer.from_pretrained method and passing it the name of the model we‚Äôd like to use.\nThe transformers.AutoTokenizer class is part of a series of Auto Classes (such as AutoConfig, AutoModel, AutoProcessor) which automatically loads the correct configuration settings for a given model ID.\nLet‚Äôs load the tokenizer for the distilbert/distilbert-base-uncased model and see how it works.\n\n\n\n\n\n\nNote\n\n\n\nWhy use the distilbert/distilbert-base-uncased model?\nThe short answer is that I‚Äôve used it before and it works well (and fast) on various text classification tasks.\nIt also performed well in the original research paper which introduced it.\nThe longer answer is that Hugging Face has many available open-source models for many different problems available at https://huggingface.co/models.\nNavigating these models can take some practice.\nAnd several models may be suited for the same task (though with various tradeoffs such as size and speed).\nHowever, overtime and with adequate experimentation, you‚Äôll start to build an intuition on which models are good for which problems.\n\n\n\nfrom transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(pretrained_model_name_or_path=\"distilbert/distilbert-base-uncased\",\n                                          use_fast=True) # uses fast tokenization (backed by tokenziers library and implemented in Rust) by default, if not available will default to Python implementation\n\ntokenizer\n\nDistilBertTokenizerFast(name_or_path='distilbert/distilbert-base-uncased', vocab_size=30522, model_max_length=512, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'unk_token': '[UNK]', 'sep_token': '[SEP]', 'pad_token': '[PAD]', 'cls_token': '[CLS]', 'mask_token': '[MASK]'}, clean_up_tokenization_spaces=True),  added_tokens_decoder={\n    0: AddedToken(\"[PAD]\", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),\n    100: AddedToken(\"[UNK]\", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),\n    101: AddedToken(\"[CLS]\", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),\n    102: AddedToken(\"[SEP]\", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),\n    103: AddedToken(\"[MASK]\", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),\n}\n\n\nNice!\nThere‚Äôs our tokenizer!\nIt‚Äôs an instance of the transformers.DistilBertTokenizerFast class.\nYou can read more about it in the documentation.\nFor now, let‚Äôs try it out by passing it a string of text.\n\n# Test out tokenizer\ntokenizer(\"I love pizza\")\n\n{'input_ids': [101, 1045, 2293, 10733, 102], 'attention_mask': [1, 1, 1, 1, 1]}\n\n\n\n# Try adding a \"!\" at the end\ntokenizer(\"I love pizza!\")\n\n{'input_ids': [101, 1045, 2293, 10733, 999, 102], 'attention_mask': [1, 1, 1, 1, 1, 1]}\n\n\nWoohoo!\nOur text gets turned into numbers (or tokens).\nNotice how with even a slight change in the text, the tokenizer produces different results?\nThe input_ids are our tokens.\nAnd the attention_mask (in our case, all [1, 1, 1, 1, 1, 1]) is a mask which tells the model which tokens to use or not.\nTokens with a mask value of 1 get used and tokens with a mask value of 0 get ignored.\nThere are several attributes of the tokenizer we can explore.\n\ntokenizer.vocab will return the vocabulary of the tokenizer or in other words, the unique words/word pieces the tokenizer is capable of converting into numbers.\ntokenizer.model_max_length will return the maximum length of a sequence the tokenizer can process, pass anything longer than this and the sequence will be truncated.\n\n\n# Get the length of the vocabulary \nlength_of_tokenizer_vocab = len(tokenizer.vocab)\nprint(f\"Length of tokenizer vocabulary: {length_of_tokenizer_vocab}\")\n\n# Get the maximum sequence length the tokenizer can handle\nmax_tokenizer_input_sequence_length = tokenizer.model_max_length\nprint(f\"Max tokenizer input sequence length: {max_tokenizer_input_sequence_length}\")\n\nLength of tokenizer vocabulary: 30522\nMax tokenizer input sequence length: 512\n\n\nWoah, looks like our tokenizer has a vocabulary of 30,522 different words and word pieces.\nAnd it can handle a sequence length of up to 512 (any sequence longer than this will be automatically truncated from the end).\nLet‚Äôs check out some of the vocab.\nCan I find my own name?\n\n# Does \"daniel\" occur in the vocab?\ntokenizer.vocab[\"daniel\"]\n\n3817\n\n\nOooh, looks like my name is 3817 in the tokenizer‚Äôs vocab.\nCan you find your own name? (note: there may be an error if the token doesn‚Äôt exist, we‚Äôll get to this)\nHow about ‚Äúpizza‚Äù?\n\ntokenizer.vocab[\"pizza\"]\n\n10733\n\n\nWhat if a word doesn‚Äôt exist in the vocab?\n\ntokenizer.vocab[\"akash\"]\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[26], line 1\n----&gt; 1 tokenizer.vocab[\"akash\"]\n\nKeyError: 'akash'\n\n\n\nDam, we get a KeyError.\nNot to worry, this is okay, since when calling the tokenizer on the word, it will automatically split the word into word pieces or subwords.\n\ntokenizer(\"akash\")\n\n{'input_ids': [101, 9875, 4095, 102], 'attention_mask': [1, 1, 1, 1]}\n\n\nIt works!\nWe can check what word pieces \"akash\" got broken into with tokenizer.convert_ids_to_tokens(input_ids).\n\ntokenizer.convert_ids_to_tokens(tokenizer(\"akash\").input_ids)\n\n['[CLS]', 'aka', '##sh', '[SEP]']\n\n\nAhhh, it seems \"akash\" was split into two tokens, [\"aka\", \"##sh\"].\nThe \"##\" at the start of \"##sh\" means that the sequence is part of a larger sequence.\nAnd the \"[CLS]\" and \"[SEP]\" tokens are special tokens indicating the start and end of a sequence.\nNow, since tokenizers can deal with any text, what if there was an unknown token?\nFor example, rather than \"pizza\" someone used the pizza emoji üçï?\nLet‚Äôs try!\n\n# Try to tokenize an emoji\ntokenizer.convert_ids_to_tokens(tokenizer(\"üçï\").input_ids)\n\n['[CLS]', '[UNK]', '[SEP]']\n\n\nAhh, we get the special \"[UNK]\" token.\nThis stands for ‚Äúunknown‚Äù.\nThe combination of word pieces and \"[UNK]\" special token means that our tokenizer will be able to turn almost any text into numbers for our model.\n\n\n\n\n\n\nNote\n\n\n\nKeep in mind that just because one tokenizer uses an unknown special token for a particular word or emoji (üçï) doesn‚Äôt mean another will.\n\n\nSince the tokenizer.vocab is a Python dictionary, we can get a sample of the vocabulary using tokenizer.vocab.items().\nHow about we get the first 5?\n\n# Get the first 5 items in the tokenizer vocab\nsorted(tokenizer.vocab.items())[:5]\n\n[('!', 999), ('\"', 1000), ('#', 1001), ('##!', 29612), ('##\"', 29613)]\n\n\nThere‚Äôs our '!' from before! Looks like the first five items are all related to punctuation points.\nHow about a random sample of tokens?\n\nimport random\n\nrandom.sample(sorted(tokenizer.vocab.items()), k=5)\n\n[('##vies', 25929),\n ('responsibility', 5368),\n ('##pm', 9737),\n ('persona', 16115),\n ('rhythm', 6348)]\n\n\n\n\n4.4 Making a preprocessing function to tokenize text\nRather than tokenizing our texts one by one, it‚Äôs best practice to define a preprocessing function which does it for us.\nThis process works regardless of whether you‚Äôre working with text data or other kinds of data such as images or audio.\n\n\n\n\n\n\nTurning data into numbers\n\n\n\nFor any kind of machine learning workflow, an important first step is turning your input data into numbers.\nAs machine learning models are algorithms which find patterns in numbers, before they can find patterns in your data (text, images, audio, tables) it must be numerically encoded first (e.g.¬†tokenizing text).\nTo help with this, transformers has an AutoProcessor class which can preprocess data in a specific format required for a paired model.\n\n\nTo prepare our text data, let‚Äôs create a preprocessing function to take in a dictionary which contains the key \"text\" which has the value of a target string (our data samples come in the form of dictionaries) and then returns the tokenized \"text\".\nWe‚Äôll set the following parameters in our tokenizer:\n\npadding=True - This will make all the sequences in a batch the same length by padding shorter sequences with 0‚Äôs until they equal the longest size in the batch. Why? If there are different size sequences in a batch, you can sometimes run into dimensionality issues.\ntruncation=True - This will shorten sequences longer than the model can handle to the model‚Äôs max input size (e.g.¬†if a sequence is 1000 long and the model can handle 512, it will be shortened to 512 via removing all tokens after 512).\n\nYou can see more parameters available for the tokenizer in the transformers.PreTrainedTokenizer documentation.\n\n\n\n\n\n\nNote\n\n\n\nFor more on padding and truncation (two important concepts in sequence processing), I‚Äôd recommend reading the Hugging Face documentation on Padding and Truncation.\n\n\n\ndef tokenize_text(examples):\n    \"\"\"\n    Tokenize given example text and return the tokenized text.\n    \"\"\"\n    return tokenizer(examples[\"text\"],\n                     padding=True, # pad short sequences to longest sequence in the batch\n                     truncation=True) # truncate long sequences to the maximum length the model can handle\n\nWonderful!\nNow let‚Äôs try it out on an example sample.\n\nexample_sample_2 = {\"text\": \"I love pizza\", \"label\": 1}\n\n# Test the function\ntokenize_text(example_sample_2)\n\n{'input_ids': [101, 1045, 2293, 10733, 102], 'attention_mask': [1, 1, 1, 1, 1]}\n\n\nLooking good!\nHow about we map our tokenize_text function to our whole dataset?\nWe can do so with the datasets.Dataset.map method.\nThe map method allows us to apply a given function to all examples in a dataset.\nBy setting batched=True we can apply the given function to batches of examples (many at a time) to speed up computation time.\nLet‚Äôs create a tokenized_dataset object by calling map on our dataset and passing it our tokenize_text function.\n\n# Map our tokenize_text function to the dataset\ntokenized_dataset = dataset.map(function=tokenize_text, \n                                batched=True, # set batched=True to operate across batches of examples rather than only single examples\n                                batch_size=1000) # defaults to 1000, can be increased if you have a large dataset\n\ntokenized_dataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['text', 'label', 'input_ids', 'attention_mask'],\n        num_rows: 200\n    })\n    test: Dataset({\n        features: ['text', 'label', 'input_ids', 'attention_mask'],\n        num_rows: 50\n    })\n})\n\n\nDataset tokenized!\nLet‚Äôs inspect a pair of samples.\n\n# Get two samples from the tokenized dataset\ntrain_tokenized_sample = tokenized_dataset[\"train\"][0]\ntest_tokenized_sample = tokenized_dataset[\"test\"][0]\n\nfor key in train_tokenized_sample.keys():\n    print(f\"[INFO] Key: {key}\")\n    print(f\"Train sample: {train_tokenized_sample[key]}\")\n    print(f\"Test sample: {test_tokenized_sample[key]}\")\n    print(\"\")\n\n[INFO] Key: text\nTrain sample: Set of headphones placed on a desk\nTest sample: A slice of pepperoni pizza with a layer of melted cheese\n\n[INFO] Key: label\nTrain sample: 0\nTest sample: 1\n\n[INFO] Key: input_ids\nTrain sample: [101, 2275, 1997, 2132, 19093, 2872, 2006, 1037, 4624, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nTest sample: [101, 1037, 14704, 1997, 11565, 10698, 10733, 2007, 1037, 6741, 1997, 12501, 8808, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n[INFO] Key: attention_mask\nTrain sample: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nTest sample: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\n\nBeautiful! Our samples have been tokenized.\nNotice the zeroes on the end of the inpud_ids and attention_mask values.\nThese are padding tokens to ensure that each sample has the same length as the longest sequence in a given batch.\nWe can now use these tokenized samples later on in our model.\n\n\n4.5 Tokenization takeaways\nWe‚Äôve now seen and used tokenizers in practice.\nA few takeaways before we start to build a model:\n\nTokenizers are used to turn text (or other forms of data such as images and audio) into a numerical representation ready to be used with a machine learning model.\nMany models reuse existing tokenizers and many models have their own specific tokenizer paired with them. Hugging Face‚Äôs transformers.AutoTokenizer, transformers.AutoProcessor and transformers.AutoModel classes make it easy to pair tokenizers and models based on their name (e.g.¬†distilbert/distilbert-base-uncased).",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#setting-up-an-evaluation-metric",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#setting-up-an-evaluation-metric",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "5 Setting up an evaluation metric",
    "text": "5 Setting up an evaluation metric\nAside from training a model, one of the most important steps in machine learning is evaluating a model.\nTo do, we can use evaluation metrics.\nAn evaluation metric attempts to represent a model‚Äôs performance in a single (or series) of numbers (note, I say ‚Äúattempts‚Äù here because evaluation metrics are useful to guage performance but the real test of a machine learning model is in the real world).\nThere are many different kinds of evaluation metrics for various problems.\nBut since we‚Äôre focused on text classification, we‚Äôll use accuracy as our evaluation metric.\nA model which gets 99/100 predictions correct has an accuracy of 99%.\n\\[\n\\text{Accuracy} = \\frac{\\text{correct classifications}}{\\text{all classifications}}\n\\]\nFor some projects, you may have a minimum standard of a metric.\nFor example, when I worked on an insurance claim classification model, the clients required over 98% accuracy on the test dataset for it to be viable to use in production.\nIf needed, we can craft these evaluation metrics ourselves.\nHowever, Hugging Face has a library called evaluate which has various metrics built in ready to use.\nWe can load a metric using evaluate.load(\"METRIC_NAME\").\nLet‚Äôs load in \"accuracy\" and build a function to measure accuracy by comparing arrays of predictions and labels.\n\nimport evaluate\nimport numpy as np\nfrom typing import Tuple\n\naccuracy_metric = evaluate.load(\"accuracy\")\n\ndef compute_accuracy(predictions_and_labels: Tuple[np.array, np.array]):\n  \"\"\"\n  Computes the accuracy of a model by comparing the predictions and labels.\n  \"\"\"\n  predictions, labels = predictions_and_labels\n\n  # Get highest prediction probability of each prediction if predictions are probabilities\n  if len(predictions.shape) &gt;= 2:\n    predictions = np.argmax(predictions, axis=1)\n\n  return accuracy_metric.compute(predictions=predictions, references=labels)\n\nAccuracy function created!\nNow let‚Äôs test it out.\n\n# Create example list of predictions and labels\nexample_predictions_all_correct = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nexample_predictions_one_wrong = np.array([0, 0, 0, 0, 1, 0, 0, 0, 0, 0])\nexample_labels = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n# Test the function\nprint(f\"Accuracy when all predictions are correct: {compute_accuracy((example_predictions_all_correct, example_labels))}\")\nprint(f\"Accuracy when one prediction is wrong: {compute_accuracy((example_predictions_one_wrong, example_labels))}\")\n\nAccuracy when all predictions are correct: {'accuracy': 1.0}\nAccuracy when one prediction is wrong: {'accuracy': 0.9}\n\n\nExcellent, our function works just as we‚Äôd like.\nWhen all predictions are correct, it scores 1.0 (or 100% accuracy) and when 9/10 predictions are correct, it returns 0.9 (or 90% accuracy).\nWe can use this function during training and evaluation of our model.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#setting-up-a-model-for-training",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#setting-up-a-model-for-training",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "6 Setting up a model for training",
    "text": "6 Setting up a model for training\nWe‚Äôve gone through the important steps of setting data up for training (and evaluation).\nNow let‚Äôs prepare a model.\nWe‚Äôll keep going through the following steps:\n\n‚úÖ Create and preprocess data.\nDefine the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nLet‚Äôs start by creating an instance of a model.\nSince we‚Äôre working on text classification, we‚Äôll do so with transformers.AutoModelForSequenceClassification (where sequence classification means a sequence of something, e.g.¬†our sequences of text).\nWe can use the from_pretrained() method to instatiate a pretrained model from the Hugging Face Hub.\n\n\n\n\n\n\nNote\n\n\n\nThe ‚Äúpretrained‚Äù in transformers.AutoModelForSequenceClassification.from_pretrained means acquiring a model which has already been trained on a certain dataset.\nThis is common practice in many machine learning projects and is known as transfer learning.\nThe idea is to take an existing model which works well on a task similar to your target task and then fine-tune it to work even better on your target task.\nIn our case, we‚Äôre going to use the pretrained DistilBERT base model (distilbert/distilbert-base-uncased) which has been trained on many thousands of books as well as a version of the English Wikipedia (millions of words).\nThis training gives it a very good baseline representation of the patterns in language.\nWe‚Äôll take this baseline representation of the patterns in language and adjust it slightly to focus specifically on predicting whether an image caption is about food or not (based on the words it contains).\nThe main two benefits of using transfer learning are:\n\nAbility to get good results with smaller amounts of data (since the main representations are learned on a larger dataset, we only have to show the model a few examples of our specific problem).\nThis process can be repeated acorss various domains and tasks. For example, you can take a computer vision model trained on millions of images and customize it to your own use case. Or an audio model trained on many different nature sounds and customize it specifically for birds.\n\n\n\n\n\nTransfer learning is the process of taking what one model has learned from a (typically large) dataset and applying them to your own custom dataset. This process can be replicated across domains such as computer vision, natural language processing and more.\n\n\nSo when starting a new machine learning project, one of the first questions you should ask is: does an existing pretrained model similar to my task exist and can I fine-tune it for my own task?\nFor an end-to-end example of transfer learning in PyTorch (another popular deep learning framework), see PyTorch Transfer Learning.\n\n\nTime to setup our model instance.\nA few things to note:\n\nWe‚Äôll use transformers.AutoModelForSequenceClassification.from_pretrained, this will create the model architecture we specify with the pretrained_model_name_or_path parameter.\nThe AutoModelForSequenceClassification class comes with a classification head on top of our mdoel (so we can customize this to the number of classes we have with the num_labels parameter).\nUsing from_pretrained will also call the transformers.PretrainedConfig class which will enable us to set id2label and label2id parameters for our fine-tuning task.\n\nLet‚Äôs refresh what our id2label and label2id objects look like.\n\n# Get id and label mappings\nprint(f\"id2label: {id2label}\")\nprint(f\"label2id: {label2id}\")\n\nid2label: {0: 'not_food', 1: 'food'}\nlabel2id: {'not_food': 0, 'food': 1}\n\n\nBeautiful, we can pass these mappings to transformers.AutoModelForSequenceClassification.from_pretrained.\n\nfrom transformers import AutoModelForSequenceClassification\n\n# Setup model for fine-tuning with classification head (top layers of network)\nmodel = AutoModelForSequenceClassification.from_pretrained(\n    pretrained_model_name_or_path=\"distilbert/distilbert-base-uncased\",\n    num_labels=2, # can customize this to the number of classes in your dataset\n    id2label=id2label, # mappings from class IDs to the class labels (for classification tasks)\n    label2id=label2id\n)\n\nSome weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert/distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nModel created!\nYou‚Äôll notice that a warning message gets displayed:\n\nSome weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert/distilbert-base-uncased and are newly initialized: [‚Äòclassifier.bias‚Äô, ‚Äòclassifier.weight‚Äô, ‚Äòpre_classifier.bias‚Äô, ‚Äòpre_classifier.weight‚Äô] You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\nThis is essentially saying ‚Äúhey, some of the layers in this model are newly initialized (with random patterns) and you should probably customize them to your own dataset‚Äù.\nThis happens because we used the AutoModelForSequenceClassification class.\nWhilst the majority of the layers in our model have already learned patterns from a large corpus of text, the top layers (classifier layers) have been randomly setup so we can customize them on our own.\n\n\n\n\nVarious forms of training paradigms. Typically you‚Äôll start with a model that has been pretrained on a large dataset. For example, a base model could be one that has read all of Wikipedia + 1000‚Äôs of books (like our DistilBert model) and has a good general representation of language data. This representation can then be tailored to a specific use case by customizing the outputs and adjusting the representation slightly by feeding it custom data. This process is often referred to as fine-tuning.\n\n\nLet‚Äôs try and make a prediction with our model and see what happens.\n\n# Try and make a prediction with the loaded model (this will error)\nmodel(**tokenized_dataset[\"train\"][0])\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[40], line 2\n      1 # Try and make a prediction with the loaded model (this will error)\n----&gt; 2 model(**tokenized_dataset[\"train\"][0])\n\nFile ~/miniconda3/envs/learn_hf/lib/python3.11/site-packages/torch/nn/modules/module.py:1553, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1551     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1552 else:\n-&gt; 1553     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/learn_hf/lib/python3.11/site-packages/torch/nn/modules/module.py:1562, in Module._call_impl(self, *args, **kwargs)\n   1557 # If we don't have any hooks, we want to skip the rest of the logic in\n   1558 # this function, and just call forward.\n   1559 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1560         or _global_backward_pre_hooks or _global_backward_hooks\n   1561         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1562     return forward_call(*args, **kwargs)\n   1564 try:\n   1565     result = None\n\nTypeError: DistilBertForSequenceClassification.forward() got an unexpected keyword argument 'text'\n\n\n\nOh no! We get an error.\nNot to worry, this is only because our model hasn‚Äôt been trained on our own dataset yet.\nLet‚Äôs take a look at the layers in our model.\n\n# Inspect the model \nmodel\n\nDistilBertForSequenceClassification(\n  (distilbert): DistilBertModel(\n    (embeddings): Embeddings(\n      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n      (position_embeddings): Embedding(512, 768)\n      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (transformer): Transformer(\n      (layer): ModuleList(\n        (0-5): 6 x TransformerBlock(\n          (attention): MultiHeadSelfAttention(\n            (dropout): Dropout(p=0.1, inplace=False)\n            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n          )\n          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n          (ffn): FFN(\n            (dropout): Dropout(p=0.1, inplace=False)\n            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n            (activation): GELUActivation()\n          )\n          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n        )\n      )\n    )\n  )\n  (pre_classifier): Linear(in_features=768, out_features=768, bias=True)\n  (classifier): Linear(in_features=768, out_features=2, bias=True)\n  (dropout): Dropout(p=0.2, inplace=False)\n)\n\n\nYou‚Äôll notice that the model comes in 3 main parts (data flows through these sequentially):\n\nembeddings - This part of the model turns the input tokens into a learned representation. So rather than just a list of integers, the values become a learned representation. This learned representation comes from the base model learning how different words and word pieces relate to eachother thanks to its training data. The size of (30522, 768) means the 30,522 words in the vocabulary are all represented by vectors of size 768 (one word gets represented by 768 numbers, these are often not human interpretable).\ntransformer - This is the main body of the model. There are several TransformerBlock layers stacked on top of each other. These layers attempt to learn a deeper representation of the data going through the model. A thorough breakdown of these layers is beyond the scope of this tutorial, however, for and in-depth guide on Transformer-based models, I‚Äôd recommend reading Transformers from scratch by Peter Bloem, going through Andrej Karpathy‚Äôs lecture on Transformers and their history or reading the original Attention is all you need paper (this is the paper that introduced the Transformer architecture).\nclassifier - This is what is going to take the representation of the data and compress it into our number of target classes (notice out_features=2, this means that we‚Äôll get two output numbers, one for each of our classes).\n\nFor more on the entire DistilBert architecture and its training setup, I‚Äôd recommend reading the DistilBert paper from the Hugging Face team.\nRather than breakdown the model itself, we‚Äôre focused on using it for a particular task (classifying text).\n\n6.1 Counting the parameters of our model\nBefore we move into training, we can get another insight into our model by counting its number of parameters.\nLet‚Äôs create a small function to count the number of trainable (these will update during training) and total parameters in our model.\n\ndef count_params(model):\n    \"\"\"\n    Count the parameters of a PyTorch model.\n    \"\"\"\n    trainable_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    total_parameters = sum(p.numel() for p in model.parameters())\n\n    return {\"trainable_parameters\": trainable_parameters, \"total_parameters\": total_parameters}\n\n# Count the parameters of the model\ncount_params(model)\n\n{'trainable_parameters': 66955010, 'total_parameters': 66955010}\n\n\nNice!\nLooks like our model has a total of 66,955,010 parameters and all of them are trainable.\nA parameter is a numerical value in a model which is capable of being updated to better represent the input data.\nI like to think of them as a small opportunity to learn patterns in the data.\nIf a model has three parameters, it has three small opportunities to learn patterns in the data.\nWhereas, if a model has 60,000,000+ (60M) parameters (like our model), it has 60,000,000+ small opportunities to learn patterns in the data.\nSome models such as Large Language Models (LLMs) like Llama 3 70B have 70,000,000,000+ (70B) parameters (over 1000x our model).\nIn essence, the more parameters a model has, the more opportunities it has to learn (generally).\nMore parameters often results in more capabilities.\nHowever, more parameters also often results in a much larger model size (e.g.¬†many gigabytes versus hundreds of megabytes) as well as a much longer compute time (fewer samples per second).\nFor our use case, a binary text classification task, 60M parameters is more than enough.\n\n\n\n\n\n\nNote\n\n\n\nWhy count the parameters in a model?\nWhile it may be tempting to always go with a model that has the most parameters, there are many considerations to take into account before doing so.\n\nWhat hardware is the model going to run on?\n\nIf you need the model to run on cheap hardware, you‚Äôll likely want a smaller model.\n\nHow fast do you need the model to be?\n\nIf you need 100-1000s of predictions per second, you‚Äôll likely want a smaller model.\n\n‚ÄúI don‚Äôt mind about speed or cost, I just want quality.‚Äù\n\nGo with the biggest model you can.\nHowever, often times you can get really good results by training a small model to do a specific task using quality data than by just always using a large model.\n\n\n\n\n6.2 Create a directory for saving models\nTraining a model can take a while.\nSo we‚Äôll want a place to save our models.\nLet‚Äôs create a directory called \"learn_hf_food_not_food_text_classifier-distilbert-base-uncased\" (it‚Äôs a bit verbose and you can change this if you like but I like to be specific).\n\n# Create model output directory\nfrom pathlib import Path\n\n# Create models directory\nmodels_dir = Path(\"models\")\nmodels_dir.mkdir(exist_ok=True)\n\n# Create model save name\nmodel_save_name = \"learn_hf_food_not_food_text_classifier-distilbert-base-uncased\"\n\n# Create model save path\nmodel_save_dir = Path(models_dir, model_save_name)\n\nmodel_save_dir\n\nPosixPath('models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased')\n\n\n\n\n6.3 Setting up training arguments with TrainingArguments\nTime to get our model ready for training!\nWe‚Äôre up to step 3 of our process:\n\n‚úÖ Create and preprocess data.\n‚úÖ Define the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nThe transformers.TrainingArguments class contains a series of helpful items, including hyperparameter settings and model saving strategies to use throughout training.\nIt has many parameters, too many to explain here.\nHowever, the following table breaks down a helpful handful.\nSome of the parameters we‚Äôll set are the same as the defaults (this is on purpose as the defaults are often pretty good), some such as learning_rate are different.\n\n\n\nParameter\nExplanation\n\n\n\n\noutput_dir\nName of output directory to save the model and checkpoints to. For example, learn_hf_food_not_food_text_classifier_model.\n\n\nlearning_rate\nValue of the initial learning rate to use during training. Passed to transformers.AdamW. Initial learning rate because the learning rate can be dynamic during training. The ideal learning is experimental in nature. Defaults to 5e-5 or 0.00001 but we‚Äôll use 0.0001.\n\n\nper_device_train_batch_size\nSize of batches to place on target device during training. For example, a batch size of 32 means the model will look at 32 samples at a time. A batch size too large will result in out of memory issues (e.g.¬†your GPU can‚Äôt handle holding a large number of samples in memory at a time).\n\n\nper_device_eval_batch_size\nSize of batches to place on target device during evaluation. Can often be larger than during training because no gradients are being calculated. For example, training batch size could be 32 where as evaluation batch size may be able to be 128 (4x larger). Though these are only esitmates.\n\n\nnum_train_epochs\nNumber of times to pass over the data to try and learn patterns. For example, if num_train_epochs=10, the model will do 10 full passes of the training data. Because we‚Äôre working with a small dataset, 10 epochs should be fine to begin with. However, if you had a larger dataset, you may want to do a few experiments using less data (e.g.¬†10% of the data) for a smaller number of epochs to make sure things work.\n\n\neval_strategy\nWhen to evaluate the model on the evaluation data. If eval_strategy=\"epoch\", the model will be evaluated every epoch. See the documentation for more options. Note: This was previously called evaluation_strategy but was shortened in transformers==4.46.\n\n\nsave_strategy\nWhen to save a model checkpoint. If save_strategy=\"epoch\", a checkpoint will be saved every epoch. See the documentation for more save options.\n\n\nsave_total_limit\nNumber of total amount of checkpoints to save (so we don‚Äôt save num_train_epochs checkpoints). For example, can limit to 3 saves so the total number of saves are the 3 most recent as well as the best performing checkpoint (as per load_best_model_at_end).\n\n\nuse_cpu\nSet to False by default, will use CUDA GPU (torch.device(\"cuda\")) or MPS device (torch.device(\"mps\"), for Mac) if available. This is because training is generally faster on an accelerator device.\n\n\nseed\nSet to 42 by default for reproducibility. Meaning that subsequent runs with the same setup should achieve the same results.\n\n\nload_best_model_at_end\nWhen set to True, makes sure that the best model found during training is loaded when training finishes. This will mean the best model checkpoint gets saved regardless of what epoch it happened on. This is set to False by default.\n\n\nlogging_strategy\nWhen to log the training results and metrics. For example, if logging_strategy=\"epoch\", results will be logged as outputs every epoch. See the documentation for more logging options.\n\n\nreport_to\nLog experiments to various experiment tracking services. For example, you can log to Weights & Biases using report_to=\"wandb\". We‚Äôll turn this off for now and keep logging to a local directory by setting report_to=\"none\".\n\n\npush_to_hub\nAutomatically upload the model to the Hugging Face Hub every time the model is saved. We‚Äôll set push_to_hub=False as we‚Äôll see how to do this manually later on. See the documentation for more options on saving models to the Hugging Face Hub.\n\n\nhub_token\nAdd your Hugging Face Hub token to push a model to the Hugging Face Hub with push_to_hub (will default to huggingface-cli login details).\n\n\nhub_private_repo\nWhether or not to make the Hugging Face Hub repository private or public, defaults to False (e.g.¬†set to True if you want the repository to be private).\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo get more familiar with the transformers.TrainingArguments class, I‚Äôd highly recommend reading the documentation for 15-20 minutes. Perhaps over a couple of sessions. There are quite a large number of parameters which will be helpful to be aware of.\n\n\nPhew!\nThat was a lot to take in.\nBut let‚Äôs now practice setting up our own instance of transformers.TrainingArguments.\n\nfrom transformers import TrainingArguments\n\nprint(f\"[INFO] Saving model checkpoints to: {model_save_dir}\")\n\n# Create training arguments\ntraining_args = TrainingArguments(\n    output_dir=model_save_dir,\n    learning_rate=0.0001,\n    per_device_train_batch_size=32,\n    per_device_eval_batch_size=32,\n    num_train_epochs=10,\n    eval_strategy=\"epoch\", # was previously \"evaluation_strategy\"\n    save_strategy=\"epoch\",\n    save_total_limit=3, # limit the total amount of save checkpoints (so we don't save num_epochs checkpoints)\n    use_cpu=False, # set to False by default, will use CUDA GPU or MPS device if available\n    seed=42, # set to 42 by default for reproducibility\n    load_best_model_at_end=True, # load the best model when finished training\n    logging_strategy=\"epoch\", # log training results every epoch\n    report_to=\"none\", # optional: log experiments to Weights & Biases/other similar experimenting tracking services (we'll turn this off for now) \n    # push_to_hub=True # optional: automatically upload the model to the Hub (we'll do this manually later on)\n    # hub_token=\"your_token_here\" # optional: add your Hugging Face Hub token to push to the Hub (will default to huggingface-cli login)\n    hub_private_repo=False # optional: make the uploaded model private (defaults to False)\n)\n\n# Optional: Print out training_args to inspect (warning, it is quite a long output)\n# training_args\n\n[INFO] Saving model checkpoints to: models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\n\n\nTraining arguments created!\nLet‚Äôs put them to work in an instance of transformers.Trainer.\n\n\n6.4 Setting up an instance of Trainer\nTime for step 4!\n\n‚úÖ Create and preprocess data.\n‚úÖ Define the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\n‚úÖ Define training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nThe transformers.Trainer class allows you to train models.\nIt‚Äôs built on PyTorch so it gets to leverage all of the powerful PyTorch toolkit.\nBut since it also works closely with the transformers.TrainingArguments class, it offers many helpful features.\n\n\n\n\n\n\nNote\n\n\n\ntransformers.Trainer can work with torch.nn.Module models, however, it is designed to work best with transformers.PreTrainedModel‚Äôs from the transformers library.\nThis is not a problem for us as we‚Äôre using transformers.AutoModelForSequenceClassification.from_pretrained which loads a transformers.PreTrainedModel.\nSee the transformers.Trainer documentation for tips on how to make sure your model is compatible.\n\n\n\n\n\n\n\n\n\nParameter\nExplanation\n\n\n\n\nmodel\nThe model we‚Äôd like to train. Works best with an instance of transformers.PreTrainedModel. Most models loaded using from_pretrained will be of this type.\n\n\nargs\nInstance of transformers.TrainingArguments. We‚Äôll use the training_args object we defined earlier. But if this is not set, it will default to the default settings for transformers.TrainingArguments.\n\n\ntrain_dataset\nDataset to use during training. We can use our tokenized_dataset[\"train\"] as it has already been preprocessed.\n\n\neval_dataset\nDataset to use during evaluation (our model will not see this data during training). We can use our tokenized_dataset[\"test\"] as it has already been preprocessed.\n\n\ntokenizer\nThe tokenizer which was used to preprocess the data. Passing a tokenizer will also pad the inputs to maximum length when batching them. It will also be saved with the model so future re-runs are easier.\n\n\ncompute_metrics\nAn evaluation function to evaluate a model during training and evaluation steps. In our case, we‚Äôll use the compute_accuracy function we defined earlier.\n\n\n\nWith all this being said, let‚Äôs build our Trainer!\n\nfrom transformers import Trainer\n\n# Setup Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_dataset[\"train\"],\n    eval_dataset=tokenized_dataset[\"test\"],\n    # Note: the 'tokenizer' parameter will be changed to 'processing_class' in Transformers v5.0.0\n    tokenizer=tokenizer, # Pass tokenizer to the Trainer for dynamic padding (padding as the training happens) (see \"data_collator\" in the Trainer docs)\n    compute_metrics=compute_accuracy\n)\n\nWoohoo! We‚Äôve created our own trainer.\nWe‚Äôre one step closer to training!\n\n\n6.5 Training our text classification model\nWe‚Äôve done most of the hard word setting up our transformers.TrainingArguments as well as our transformers.Trainer.\nNow how about we train a model?\nFollowing our steps:\n\n‚úÖ Create and preprocess data.\n‚úÖ Define the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\n‚úÖ Define training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\n‚úÖ Pass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nLooks like all we have to do is call transformers.Trainer.train().\nWe‚Äôll be sure to save the results of the training to a variable results so we can inspect them later.\nLet‚Äôs try!\n\n# Train a text classification model\nresults = trainer.train()\n\n\n    \n      \n      \n      [70/70 00:07, Epoch 10/10]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\nAccuracy\n\n\n\n\n1\n0.328100\n0.039627\n1.000000\n\n\n2\n0.019200\n0.005586\n1.000000\n\n\n3\n0.003700\n0.002026\n1.000000\n\n\n4\n0.001700\n0.001186\n1.000000\n\n\n5\n0.001100\n0.000858\n1.000000\n\n\n6\n0.000800\n0.000704\n1.000000\n\n\n7\n0.000800\n0.000619\n1.000000\n\n\n8\n0.000700\n0.000571\n1.000000\n\n\n9\n0.000600\n0.000547\n1.000000\n\n\n10\n0.000600\n0.000539\n1.000000\n\n\n\n\n\n\nWoahhhh!!!\nHow cool is that!\nWe just trained a text classification model!\nAnd it looks like the training went pretty quick (thanks to our smaller dataset and relatively small model, for larger datasets, training would likely take longer).\nHow about we check some of the metrics?\nWe can do so using the results.metrics attribute (this returns a Python dictionary with stats from our training run).\n\n# Inspect training metrics\nfor key, value in results.metrics.items():\n    print(f\"{key}: {value}\")\n\ntrain_runtime: 7.5421\ntrain_samples_per_second: 265.177\ntrain_steps_per_second: 9.281\ntotal_flos: 18110777160000.0\ntrain_loss: 0.03574410408868321\nepoch: 10.0\n\n\nNice!\nLooks like our overall training runtime is low because of our small dataset.\nAnd looks like our trainer was able to process a fair few samples per second.\nIf we were to 1000x the size of our dataset (e.g.¬†~250 samples -&gt; ~250,000 samples which is quite a substantial dataset), it seems our training time still wouldn‚Äôt take too long.\nThe total_flos stands for ‚Äúfloating point operations‚Äù (also referred to as FLOPS), this is the total number of calculations our model has performed to find patterns in the data. And as you can see, it‚Äôs quite a large number!\n\n\n\n\n\n\nNote\n\n\n\nDepending on the hardware you‚Äôre using, the results with respect to train_runtime, train_samples_per_second and train_steps_per_second will likely be different.\nThe faster your accelerator hardware (e.g.¬†NVIDIA GPU or Mac GPU), the lower your runtime and higher your samples/steps per second will be.\nFor reference, on my local NVIDIA RTX 4090, I get a train_runtime of 8-9 seconds, train_samples_per_second of 230-250 and train_steps_per_second of 8.565.\n\n\n\n\n6.6 Save the model for later use\nNow our model has been trained, let‚Äôs save it for later use.\nWe‚Äôll save it locally first and push it to the Hugging Face Hub later.\nWe can save our model using the transformers.Trainer.save_model method.\n\n# Save model\nprint(f\"[INFO] Saving model to {model_save_dir}\")\ntrainer.save_model(output_dir=model_save_dir)\n\n[INFO] Saving model to models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\n\n\nModel saved locally! Before we save it to the Hugging Face Hub, let‚Äôs check out its metrics.\n\n\n6.7 Inspecting the model training metrics\nWe can get a log of our model‚Äôs training state using trainer.state.log_history.\nThis will give us a collection of metrics per epoch (as long as we set logging_strategy=\"epoch\" in transformers.TrainingArguments), in particular, it will give us a loss value per epoch.\nWe can extract these values and inspect them visually for a better understanding our model training.\nLet‚Äôs get the training history and inspect it.\n\n# Get training history \ntrainer_history_all = trainer.state.log_history \ntrainer_history_metrics = trainer_history_all[:-1] # get everything except the training time metrics (we've seen these already)\ntrainer_history_training_time = trainer_history_all[-1] # this is the same value as results.metrics from above\n\n# View the first 4 metrics from the training history\ntrainer_history_metrics[:4]\n\n[{'loss': 0.3281,\n  'grad_norm': 0.6938912272453308,\n  'learning_rate': 9e-05,\n  'epoch': 1.0,\n  'step': 7},\n {'eval_loss': 0.03962664306163788,\n  'eval_accuracy': 1.0,\n  'eval_runtime': 0.0135,\n  'eval_samples_per_second': 3707.312,\n  'eval_steps_per_second': 148.292,\n  'epoch': 1.0,\n  'step': 7},\n {'loss': 0.0192,\n  'grad_norm': 0.14873287081718445,\n  'learning_rate': 8e-05,\n  'epoch': 2.0,\n  'step': 14},\n {'eval_loss': 0.005585948005318642,\n  'eval_accuracy': 1.0,\n  'eval_runtime': 0.0147,\n  'eval_samples_per_second': 3399.06,\n  'eval_steps_per_second': 135.962,\n  'epoch': 2.0,\n  'step': 14}]\n\n\nOkay, looks like the metrics are logged every epochs in a list Python dictionaries with interleaving loss (this is the training set loss) and eval_loss values.\nHow about we write some code to separate the training set metrics and the evaluation set metrics?\n\nimport pprint # import pretty print for nice printing of lists\n\n# Extract training and evaluation metrics\ntrainer_history_training_set = []\ntrainer_history_eval_set = []\n\n# Loop through metrics and filter for training and eval metrics\nfor item in trainer_history_metrics:\n    item_keys = list(item.keys())\n    # Check to see if \"eval\" is in the keys of the item\n    if any(\"eval\" in item for item in item_keys):\n        trainer_history_eval_set.append(item)\n    else:\n        trainer_history_training_set.append(item)\n\n# Show the first two items in each metric set\nprint(f\"[INFO] First two items in training set:\")\npprint.pprint(trainer_history_training_set[:2])\n\nprint(f\"\\n[INFO] First two items in evaluation set:\")\npprint.pprint(trainer_history_eval_set[:2])\n\n[INFO] First two items in training set:\n[{'epoch': 1.0,\n  'grad_norm': 0.6938912272453308,\n  'learning_rate': 9e-05,\n  'loss': 0.3281,\n  'step': 7},\n {'epoch': 2.0,\n  'grad_norm': 0.14873287081718445,\n  'learning_rate': 8e-05,\n  'loss': 0.0192,\n  'step': 14}]\n\n[INFO] First two items in evaluation set:\n[{'epoch': 1.0,\n  'eval_accuracy': 1.0,\n  'eval_loss': 0.03962664306163788,\n  'eval_runtime': 0.0135,\n  'eval_samples_per_second': 3707.312,\n  'eval_steps_per_second': 148.292,\n  'step': 7},\n {'epoch': 2.0,\n  'eval_accuracy': 1.0,\n  'eval_loss': 0.005585948005318642,\n  'eval_runtime': 0.0147,\n  'eval_samples_per_second': 3399.06,\n  'eval_steps_per_second': 135.962,\n  'step': 14}]\n\n\nBeautiful!\nHow about we take it a step further and turn our metrics into pandas DataFrames so we can view them easier?\n\n# Create pandas DataFrames for the training and evaluation metrics\ntrainer_history_training_df = pd.DataFrame(trainer_history_training_set)\ntrainer_history_eval_df = pd.DataFrame(trainer_history_eval_set)\n\ntrainer_history_training_df.head() \n\n\n\n\n\n\n\n\nloss\ngrad_norm\nlearning_rate\nepoch\nstep\n\n\n\n\n0\n0.3281\n0.693891\n0.00009\n1.0\n7\n\n\n1\n0.0192\n0.148733\n0.00008\n2.0\n14\n\n\n2\n0.0037\n0.037808\n0.00007\n3.0\n21\n\n\n3\n0.0017\n0.022227\n0.00006\n4.0\n28\n\n\n4\n0.0011\n0.018665\n0.00005\n5.0\n35\n\n\n\n\n\n\n\nNice!\nAnd the evaluation DataFrame?\n\ntrainer_history_eval_df.head()\n\n\n\n\n\n\n\n\neval_loss\neval_accuracy\neval_runtime\neval_samples_per_second\neval_steps_per_second\nepoch\nstep\n\n\n\n\n0\n0.039627\n1.0\n0.0135\n3707.312\n148.292\n1.0\n7\n\n\n1\n0.005586\n1.0\n0.0147\n3399.060\n135.962\n2.0\n14\n\n\n2\n0.002026\n1.0\n0.0136\n3680.635\n147.225\n3.0\n21\n\n\n3\n0.001186\n1.0\n0.0151\n3303.902\n132.156\n4.0\n28\n\n\n4\n0.000858\n1.0\n0.0159\n3146.137\n125.845\n5.0\n35\n\n\n\n\n\n\n\nAnd of course, we‚Äôll have follow the data explorer‚Äôs motto of visualize, visualize, visualize! and inspect our loss curves.\n\n# Plot training and evaluation loss\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nplt.plot(trainer_history_training_df[\"epoch\"], trainer_history_training_df[\"loss\"], label=\"Training loss\")\nplt.plot(trainer_history_eval_df[\"epoch\"], trainer_history_eval_df[\"eval_loss\"], label=\"Evaluation loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Text classification with DistilBert training and evaluation loss over time\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nB-e-a-utiful!\nThat is exactly what we wanted.\nTraining and evaluation loss going down over time.\n\n\n6.8 Pushing our model to the Hugging Face Hub\nWe‚Äôve saved our model locally and confirmed that it seems to be performing well on our training metrics but how about we push it to the Hugging Face Hub?\nThe Hugging Face Hub is one of the best sources of machine learning models on the internet.\nAnd we can add our model there so others can use it or we can access it in the future (we could also keep it private on the Hugging Face Hub so only people from our organization can use it).\nSharing models on Hugging Face is also a great way to showcase your skills as a machine learning engineer, it gives you something to show potential employers and say ‚Äúhere‚Äôs what I‚Äôve done‚Äù.\n\n\n\n\n\n\nNote\n\n\n\nBefore sharing a model to the Hugging Face Hub, be sure to go through the following steps:\n\nSetup a Hugging Face token using the huggingface-cli login command.\nRead through the user access tokens guide.\nSet up an access token via https://huggingface.co/settings/tokens (ensure it has ‚Äúwrite‚Äù access).\n\nIf you are using Google Colab, you can add your token under the ‚ÄúSecrets‚Äù tab on the left.\nOn my local computer, my token is saved to /home/daniel/.cache/huggingface/token (thanks to running huggingface-cli login on the command line).\nAnd for more on sharing models to the Hugging Face Hub, be sure to check out the model sharing documentation.\n\n\nWe can push our model, tokenizer and other assosciated files to the Hugging Face Hub using the transformers.Trainer.push_to_hub method.\nWe can also optionally do the following:\n\nAdd a model card (something that describes how the model was created and what it can be used for) using transformers.Trainer.create_model_card.\nAdd a custom README.md file to the model repository to explain more details about the model using huggingface_hub.HfApi.upload_file. This method is similar to model card creation method above but with more customization.\n\nLet‚Äôs save our model to the Hub!\n\n# Save our model to the Hugging Face Hub\n# This will be public, since we set hub_private_repo=False in our TrainingArguments\nmodel_upload_url = trainer.push_to_hub(\n    commit_message=\"Uploading food not food text classifier model\",\n    # token=\"YOUR_HF_TOKEN_HERE\" # This will default to the token you have saved in your Hugging Face config\n)\nprint(f\"[INFO] Model successfully uploaded to Hugging Face Hub with at URL: {model_upload_url}\")\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased/commit/8a8a8aff5bdee5bc518e31558447dc684d448b8f', commit_message='Uploading food not food text classifier model', commit_description='', oid='8a8a8aff5bdee5bc518e31558447dc684d448b8f', pr_url=None, pr_revision=None, pr_num=None)\n\n\nModel pushed to the Hugging Face Hub!\n\n\n\n\n\n\nNote\n\n\n\nYou may see the following error:\n\n403 Forbidden: You don‚Äôt have the rights to create a model under the namespace ‚Äúmrdbourke‚Äù. Cannot access content at: https://huggingface.co/api/repos/create. If you are trying to create or update content, make sure you have a token with the write role.\n\nOr even:\n\nHfHubHTTPError: 401 Client Error: Unauthorized for url: https://huggingface.co/api/repos/create (Request ID: Root=1-6699c52XXXXXX)\nInvalid username or password.\n\nIn this case, be sure to go through the setup steps above to make sure you have a Hugging Face access token with ‚Äúwrite‚Äù access.\n\n\nAnd since it‚Äôs public (by default), you can see it at https://huggingface.co/mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased (it gets saved to the same name as our target local directory).\nYou can now share and interact with this model online.\nAs well as download it for use in your own applications.\n\n\n\n\nThe Hugging Face Hub allows us to store and share models, datasets and demos. We can set these to be private or public. Models stored on the Hub can easily be accessed via Hugging Face Transformers.\n\n\nBut before we make an application/demo with our trained model, let‚Äôs keep evaluating it.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#making-and-evaluating-predictions-on-the-test-data",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#making-and-evaluating-predictions-on-the-test-data",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "7 Making and evaluating predictions on the test data",
    "text": "7 Making and evaluating predictions on the test data\nModel trained, let‚Äôs now evaluate it on the test data.\nOr step 7 in our workflow:\n\n‚úÖ Create and preprocess data.\n‚úÖ Define the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\n‚úÖ Define training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\n‚úÖ Pass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\n‚úÖ Train the model by calling Trainer.train().\n‚úÖ Save the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nA reminder that the test data is data that our model has never seen before.\nSo it will be a good estimate of how our model will do in a production setting.\nWe can make predictions on the test dataset using transformers.Trainer.predict.\nAnd then we can get the prediction values with the predictions attribute and assosciated metrics with the metrics attribute.\n\n# Perform predictions on the test set\npredictions_all = trainer.predict(tokenized_dataset[\"test\"])\nprediction_values = predictions_all.predictions\nprediction_metrics = predictions_all.metrics\n\nprint(f\"[INFO] Prediction metrics on the test data:\")\nprediction_metrics\n\n\n\n\n[INFO] Prediction metrics on the test data:\n\n\n{'test_loss': 0.0005385442636907101,\n 'test_accuracy': 1.0,\n 'test_runtime': 0.0421,\n 'test_samples_per_second': 1186.857,\n 'test_steps_per_second': 47.474}\n\n\nWoah!\nLooks like our model did an outstanding job!\nAnd it was very quick too.\nThis is one of the benefits of using a smaller pretrained model and customizing it to your own dataset.\nYou can achieve outstanding results in a very quick time as well as have a model capable of performing thousands of predictions per second.\nWe can also calculate the accuracy by hand by comparing the prediction labels to the test labels.\nTo do so, we‚Äôll:\n\nCalculate the prediction probabilities (though this is optional as we could skip straight to 2 and get the same results) by passing the prediction_values to torch.softmax.\nFind the index of the prediction value with the highest value (the index will be equivalent to the predicted label) using torch.argmax (we could also use np.argmax here) to find the predicted labels.\nGet the true labels from the test dataset using dataset[\"test\"][\"label\"].\nCompare the predicted labels from 2 to the true labels from 3 using sklearn.metrics.accuracy_score to find the accuracy.\n\n\nimport torch\nfrom sklearn.metrics import accuracy_score\n\n# 1. Get prediction probabilities (this is optional, could get the same results with step 2 onwards)\npred_probs = torch.softmax(torch.tensor(prediction_values), dim=1)\n\n# 2. Get the predicted labels\npred_labels = torch.argmax(pred_probs, dim=1)\n\n# 3. Get the true labels\ntrue_labels = dataset[\"test\"][\"label\"]\n\n# 4. Compare predicted labels to true labels to get the test accuracy\ntest_accuracy = accuracy_score(y_true=true_labels, \n                               y_pred=pred_labels)\n\nprint(f\"[INFO] Test accuracy: {test_accuracy*100}%\")\n\n[INFO] Test accuracy: 100.0%\n\n\nWoah!\nLooks like our model performs really well on our test set.\nIt will be interesting to see how it goes on real world samples.\nWe‚Äôll test this later on.\nHow about we make a pandas DataFrame out of our test samples, predicted labels and predicted probabilities to further inspect our results?\n\n# Make a DataFrame of test predictions\ntest_predictions_df = pd.DataFrame({\n    \"text\": dataset[\"test\"][\"text\"],\n    \"true_label\": true_labels,\n    \"pred_label\": pred_labels,\n    \"pred_prob\": torch.max(pred_probs, dim=1).values\n})\n\ntest_predictions_df.head()\n\n\n\n\n\n\n\n\ntext\ntrue_label\npred_label\npred_prob\n\n\n\n\n0\nA slice of pepperoni pizza with a layer of mel...\n1\n1\n0.999369\n\n\n1\nRed brick fireplace with a mantel serving as a...\n0\n0\n0.999662\n\n\n2\nA bowl of sliced bell peppers with a sprinkle ...\n1\n1\n0.999365\n\n\n3\nSet of mugs hanging on a hook\n0\n0\n0.999682\n\n\n4\nStanding floor lamp providing light next to an...\n0\n0\n0.999678\n\n\n\n\n\n\n\nWe can find the examples with the lowest prediction probability to see where the model is unsure.\n\n# Show 10 examples with low prediction probability\ntest_predictions_df.sort_values(\"pred_prob\", ascending=True).head(10)\n\n\n\n\n\n\n\n\ntext\ntrue_label\npred_label\npred_prob\n\n\n\n\n40\nA bowl of cherries with a sprig of mint for ga...\n1\n1\n0.999331\n\n\n11\nA close-up shot of a cheesy pizza slice being ...\n1\n1\n0.999348\n\n\n26\nA fruit platter with a variety of exotic fruit...\n1\n1\n0.999351\n\n\n42\nBoxes of apples, pears, pineapple, manadrins a...\n1\n1\n0.999353\n\n\n46\nA bowl of sliced kiwi with a sprinkle of sugar...\n1\n1\n0.999360\n\n\n37\nClose-up of a sushi roll with avocado, cucumbe...\n1\n1\n0.999360\n\n\n31\nCrunchy sushi roll with tempura flakes or pank...\n1\n1\n0.999360\n\n\n9\nCherry tomatoes and mozzarella balls in a bowl...\n1\n1\n0.999360\n\n\n14\nTwo handfuls of bananas in a fruit bowl with g...\n1\n1\n0.999360\n\n\n44\nSeasonal sushi roll with ingredients like pers...\n1\n1\n0.999361\n\n\n\n\n\n\n\nHmmm, it looks like our model has quite a high prediction probability for almost all samples.\nWe can further evalaute our model by making predictions on new custom data.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#making-and-inspecting-predictions-on-custom-text-data",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#making-and-inspecting-predictions-on-custom-text-data",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "8 Making and inspecting predictions on custom text data",
    "text": "8 Making and inspecting predictions on custom text data\nWe‚Äôve seen how our model performs on the test dataset (quite well).\nBut how might we check its performance on our own custom data?\nFor example, text-based image captions from the wild.\nWell, we‚Äôve got two ways to load our model now too:\n\nLoad model locally from our computer (e.g.¬†via models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased).\nLoad model from Hugging Face Hub (e.g.¬†via mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased).\n\nEither way of loading the model results in the same outcome: being able to make predictions on given data.\nSo how about we start by setting up our model paths for both local loading and loading from the Hugging Face Hub.\n\n# Setup local model path\nlocal_model_path = \"models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\"\n\n# Setup Hugging Face model path (see: https://huggingface.co/mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased)\n# Note: Be sure to change \"mrdbourke\" to your own Hugging Face username\nhuggingface_model_path = \"mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\"\n\n\n8.1 Discussing ways to make predictions (inference)\nWhen we‚Äôve loaded our trained model, because of the way we‚Äôve set it up, there are two main ways to make predictions on custom data:\n\nPipeline mode using transformers.pipeline and passing it our target model, this allows us to preprocess custom data and make predictions in one step.\nPyTorch mode using a combination of transformers.AutoTokenizer and transformers.AutoModelForSequenceClassification and passing each our target model, this requires us to preprocess our data before passing to a model, however, it offers the most customization.\n\nEach method supports:\n\nPredictions one at a time (batch size of 1), for example, one person using the app at a time.\nBatches of predictions at a time (predictions with a batch size of n where n can be any number, e.g.¬†8, 16, 32), for example, many people using a service simultaneously such as a voice chat and needing to filter comments (predicting on batches of size n is usually much faster than batches of 1).\n\nWhichever method we choose, we‚Äôll have to set the target device we‚Äôd like the operations to happen on.\nIn general, it‚Äôs best to make predictions on the most powerful accelerator you have available.\nAnd in most cases that will be a NVIDIA GPU &gt; Mac GPU &gt; CPU.\nSo let‚Äôs write a small function to pick the target device for us in that order.\n\n\n\n\n\n\nNote\n\n\n\nMaking predictions is also referred to as inference.\nBecause the model is going to infer on some data what the output should be.\nInference is often faster than training on a per sample basis as no model weights are updated (less computation).\nHowever, inference can use more compute than training over the long run because you could train a model once over a few hours (or days or longer) and then use it for inference for several months (or longer), millions of times (or more).\n\n\n\ndef set_device():\n    \"\"\"\n    Set device to CUDA if available, else MPS (Mac), else CPU.\n\n    This defaults to using the best available device (usually).\n    \"\"\"\n    if torch.cuda.is_available():\n        device = torch.device(\"cuda\")\n    elif torch.backends.mps.is_available() and torch.backends.mps.is_built():\n        device = torch.device(\"mps\")\n    else:\n        device = torch.device(\"cpu\")\n    return device\n\nDEVICE = set_device()\nprint(f\"[INFO] Using device: {DEVICE}\")\n\n[INFO] Using device: cuda\n\n\nTarget device set!\nLet‚Äôs start predicting.\n\n\n8.2 Making predictions with pipeline\nThe transformers.pipeline method creates a machine learning pipeline.\nData goes in one end and predictions come out the other end.\nYou can create pipelines for many different tasks, such as, text classification, image classification, object detection, text generation and more.\nLet‚Äôs see how we can create a pipeline for our text classification model.\nTo do so we‚Äôll:\n\nInstantiate an instance of transformers.pipeline.\nPass in the task parameter of text-classification (we can do this because our model is already formatted for text classification thanks to using transformers.AutoModelForSequenceClassification).\nSetup the model parameter to be local_model_path (though we could also use huggingface_model_path).\nSet the target device using the device parameter.\nSet top_k=1 to get to the top prediction back (e.g.¬†either \"food\" or \"not_food\", could set this higher to get more labels back).\nSet the BATCH_SIZE=32 so we can pass to the batch_size parameter. This will allow our model to make predictions on up to 32 samples at a time. Predicting on batches of data is usually much faster than single samples at a time, however, this often saturates at a point (e.g.¬†predicting on batches of size 64 may be the same speed as 32 due to memory contraints).\n\n\n\n\n\n\n\nNote\n\n\n\nThere are many more pipelines available in the Hugging Face documentation.\nAs an exericse, I‚Äôd spend 10-15 minutes reading through the pipeline documentation to get familiar with what‚Äôs available.\n\n\nLet‚Äôs setup our pipeline!\n\nimport torch\nfrom transformers import pipeline\n\n# Set the batch size for predictions\nBATCH_SIZE = 32\n\n# Create an instance of transformers.pipeline\nfood_not_food_classifier = pipeline(task=\"text-classification\", # we can use this because our model is an instance of AutoModelForSequenceClassification\n                                    model=local_model_path, # could also pass in huggingface_model_path\n                                    device=DEVICE, # set the target device\n                                    top_k=1, # only return the top predicted value\n                                    batch_size=BATCH_SIZE) # perform predictions on up to BATCH_SIZE number of samples at a time \n\nfood_not_food_classifier\n\n&lt;transformers.pipelines.text_classification.TextClassificationPipeline at 0x7f2695245950&gt;\n\n\nWe‚Äôve created an instance of transformers.pipelines.text_classification.TextClassificationPipeline!\nNow let‚Äôs test it out by passing it a string of text about food.\n\n# Test our trained model on some example text \nsample_text_food = \"A delicious photo of a plate of scrambled eggs, bacon and toast\"\nfood_not_food_classifier(sample_text_food)\n\n[[{'label': 'food', 'score': 0.9993335604667664}]]\n\n\nNice! Our model gets it right.\nHow about a string not about food?\n\n# Test the model on some more example text\nsample_text_not_food = \"A yellow tractor driving over the hill\"\nfood_not_food_classifier(sample_text_not_food)\n\n[[{'label': 'not_food', 'score': 0.9996254444122314}]]\n\n\nWoohoo!\nCorrect again!\nWhat if we passed in random text?\nAs in, someone types in something random to the model expecting an output.\n\n# Pass in random text to the model\nfood_not_food_classifier(\"cvnhertiejhwgdjshdfgh394587\")\n\n[[{'label': 'not_food', 'score': 0.9985743761062622}]]\n\n\nThe nature of machine learning models is that they are a predictive/generative function.\nIf you input data, they will output something.\n\n\n\n\n\n\nNote\n\n\n\nWhen deploying machine learning models, there are many things to take into consideration.\nOne of the main ones being: ‚Äúwhat data is going to go into the model?‚Äù\nIf this was a public facing model and people could enter any kind of text, they could enter random text rather than a sentence about food or not food.\nSince our main goal of the model is be able to classify image captions into food/not_food, we‚Äôd also have to consider image cpations that are poorly written or contain little text.\nThis is why it‚Äôs important to continually test your models with as much example test/real-world data as you can.\n\n\nOur pipeline can also work with the model we saved to the Hugging Face Hub.\nLet‚Äôs try out the same pipeline with model=hugggingface_model_path.\n\n# Pipeline also works with remote models (will have to laod the model locally first)\nfood_not_food_classifier_remote = pipeline(task=\"text-classification\", \n                                           model=huggingface_model_path, # load the model from Hugging Face Hub (will download the model if it doesn't already exist)\n                                           batch_size=BATCH_SIZE,\n                                           device=DEVICE)\n\nfood_not_food_classifier_remote(\"This is some new text about bananas and pancakes and ice cream\")\n\n\n\n\n\n\n\n[{'label': 'food', 'score': 0.9993208646774292}]\n\n\nBeautiful!\nOur model loaded from Hugging Face gets it right too!\n\n\n8.3 Making multiple predictions at the same time with batch prediction\nWe can make predictions with our model one at a time but it‚Äôs often much faster to do them in batches.\nTo make predictions in batches, we can set up our transformers.pipeline instance with the batch_size parameter greater than 1.\nThen we‚Äôll be able to pass multiple samples at once in the form of a Python list.\n\n# Create batch size (we don't need to do this again but we're doing it for clarity)\nBATCH_SIZE = 32 # this number is experimental and will require testing on your hardware to find the optimal value (e.g. lower if there are memory issues or higher to try speed up inference)\n\n# Setup pipeline to handle batches (we don't need to do this again either but we're doing it for clarity)\nfood_not_food_classifier = pipeline(task=\"text-classification\", \n                                    model=local_model_path,\n                                    batch_size=BATCH_SIZE,\n                                    device=DEVICE)\n\nWonderful, now we‚Äôve set up a pipeline instance capable of handling batches, we can pass it a list of samples and it will make predictions on each.\nHow about we try with a collection of sentences which are a bit tricky?\n\n# Create a list of sentences to make predictions on\nsentences = [\n    \"I whipped up a fresh batch of code, but it seems to have a syntax error.\",\n    \"We need to marinate these ideas overnight before presenting them to the client.\",\n    \"The new software is definitely a spicy upgrade, taking some time to get used to.\",\n    \"Her social media post was the perfect recipe for a viral sensation.\",\n    \"He served up a rebuttal full of facts, leaving his opponent speechless.\",\n    \"The team needs to simmer down a bit before tackling the next challenge.\",\n    \"The presentation was a delicious blend of humor and information, keeping the audience engaged.\",\n    \"A beautiful array of fake wax foods (shokuhin sampuru) in the front of a Japanese restaurant.\",\n    \"Daniel Bourke is really cool :D\",\n    \"My favoruite food is biltong!\"\n]\n\nfood_not_food_classifier(sentences)\n\n[{'label': 'not_food', 'score': 0.9986234903335571},\n {'label': 'not_food', 'score': 0.9993952512741089},\n {'label': 'not_food', 'score': 0.9992876648902893},\n {'label': 'not_food', 'score': 0.9994683861732483},\n {'label': 'not_food', 'score': 0.9993450045585632},\n {'label': 'not_food', 'score': 0.9994571805000305},\n {'label': 'not_food', 'score': 0.9991866946220398},\n {'label': 'food', 'score': 0.9993101358413696},\n {'label': 'not_food', 'score': 0.9995250701904297},\n {'label': 'food', 'score': 0.9966572523117065}]\n\n\nWoah! That was quick!\nAnd it looks like our model performed fairly well.\nThough there was one harder sample which may be deemed as food/not_food, the sentence containing ‚Äúshokuhin sampuru‚Äù (meaning ‚Äúfood model‚Äù in Japanese).\nIs a sentence about food models (fake foods) still about food?\n\n\n8.4 Time our model across larger sample sizes\nWe can say that our model is fast or that making predictions in batches is faster than one at a time.\nBut how about we run some tests to confirm this?\nLet‚Äôs start by making predictions one at a time across 100 sentences (10x our sentences list) and then we‚Äôll write some code to make predictions in batches.\nWe‚Äôll time each and see how they go.\n\nimport time\n\n# Create 1000 sentences\nsentences_1000 = sentences * 100\n\n# Time how long it takes to make predictions on all sentences (one at a time)\nprint(f\"[INFO] Number of sentences: {len(sentences_1000)}\")\nstart_time_one_at_a_time = time.time()\nfor sentence in sentences_1000:\n    # Make a prediction on each sentence one at a time\n    food_not_food_classifier(sentence)\nend_time_one_at_a_time = time.time()\n\nprint(f\"[INFO] Time taken for one at a time prediction: {end_time_one_at_a_time - start_time_one_at_a_time} seconds\")\nprint(f\"[INFO] Avg inference time per sentence: {(end_time_one_at_a_time - start_time_one_at_a_time) / len(sentences_1000)} seconds\")\n\n[INFO] Number of sentences: 1000\n[INFO] Time taken for one at a time prediction: 2.5376925468444824 seconds\n[INFO] Avg inference time per sentence: 0.0025376925468444823 seconds\n\n\nOk, on my local NVIDIA RTX 4090 GPU, it took around 5.5 seconds to make 1000 predictions one at a time.\nThat‚Äôs pretty good!\nBut let‚Äôs see if we can make it faster with batching.\nTo do so, we can increase the size of our sentences_big list and pass the list directly to the model to enable batched prediction.\n\nfor i in [10, 100, 1000, 10_000]:\n    sentences_big = sentences * i\n    print(f\"[INFO] Number of sentences: {len(sentences_big)}\")\n\n    start_time = time.time()\n    # Predict on all sentences in batches \n    food_not_food_classifier(sentences_big)\n    end_time = time.time()\n\n    print(f\"[INFO] Inference time for {len(sentences_big)} sentences: {round(end_time - start_time, 5)} seconds.\")\n    print(f\"[INFO] Avg inference time per sentence: {round((end_time - start_time) / len(sentences_big), 8)} seconds.\")\n    print()\n\n[INFO] Number of sentences: 100\n[INFO] Inference time for 100 sentences: 0.04512 seconds.\n[INFO] Avg inference time per sentence: 0.0004512 seconds.\n\n[INFO] Number of sentences: 1000\n[INFO] Inference time for 1000 sentences: 0.31447 seconds.\n[INFO] Avg inference time per sentence: 0.00031447 seconds.\n\n[INFO] Number of sentences: 10000\n[INFO] Inference time for 10000 sentences: 1.82615 seconds.\n[INFO] Avg inference time per sentence: 0.00018261 seconds.\n\n[INFO] Number of sentences: 100000\n[INFO] Inference time for 100000 sentences: 18.63373 seconds.\n[INFO] Avg inference time per sentence: 0.00018634 seconds.\n\n\n\nWoah!\nIt looks like inference/prediction time is ~10-20x faster when using batched prediction versus predicting one at a time (on my local NVIDIA RTX 4090).\nI ran some more tests with the same model on a different GPU on Google Colab (NVIDIA L4 GPU) and got similar results.\n\n\n\nNumber of Sentences\nTotal Prediction Time\nPrediction Type\n\n\n\n\n100\n0.62\none at a time\n\n\n1000\n6.19\none at a time\n\n\n10000\n61.08\none at a time\n\n\n100000\n605.46\none at a time\n\n\n100\n0.06\nbatch\n\n\n1000\n0.51\nbatch\n\n\n10000\n4.97\nbatch\n\n\n100000\n49.7\nbatch\n\n\n\nTesting the speed of a custom text classifier model on different numbers of sentences with one at a time or batched prediction. Tests conducted on Google Colab with a NVIDIA L4 GPU. See the notebook for code to reproduce.\n\n\n8.5 Making predictions with PyTorch\nWe‚Äôve seen how to make predictions/perform inference with transformers.pipeline, now let‚Äôs see how to do the same with PyTorch.\nPerforming predictions with PyTorch requires an extra step compared to pipeline, we have to prepare our inputs first (turn the text into numbers).\nGood news is, we can prepare our inputs with the tokenizer that got automatically saved with our model.\nAnd since we‚Äôve already trained a model and uploaded it to the Hugging Face Hub, we can load our model and tokenizer with transformers.AutoTokenizer and transformers.AutoModelForSequenceClassification passing it the saved path we used (mine is mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased).\nLet‚Äôs start by loading the tokenizer and see what it looks like to tokenize a piece of sample text.\n\nfrom transformers import AutoTokenizer\n\n# Setup model path (can be local or on Hugging Face)\n# Note: Be sure to change \"mrdbourke\" to your own username\nmodel_path = \"mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\"\n\n# Create an example to predict on\nsample_text_food = \"A delicious photo of a plate of scrambled eggs, bacon and toast\"\n\n# Prepare the tokenizer and tokenize the inputs\ntokenizer = AutoTokenizer.from_pretrained(pretrained_model_name_or_path=model_path)\ninputs = tokenizer(sample_text_food, \n                   return_tensors=\"pt\") # return the output as PyTorch tensors \ninputs\n\n{'input_ids': tensor([[  101,  1037, 12090,  6302,  1997,  1037,  5127,  1997, 13501,  6763,\n          1010, 11611,  1998, 15174,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n\n\nNice!\nText tokenized!\nWe get a dictionary of input_ids (our text in token form) and attention_mask (tells the model which tokens to pay attention to, 1 = pay attention, 0 = no attention).\nNow we can load the model with the same path.\n\nfrom transformers import AutoModelForSequenceClassification\n\n# Load our text classification model\nmodel = AutoModelForSequenceClassification.from_pretrained(pretrained_model_name_or_path=model_path)\n\nModel loaded!\nLet‚Äôs make a prediction.\nWe can do so using the context manager torch.no_grad() (because no gradients/weights get updated during inference) and passing our model out inputs dictionary.\n\n\n\n\n\n\nNote\n\n\n\nA little tidbit about using dictionaries as function inputs in Python is the ability to unpack the keys of the dictionary into function arguments.\nThis is possible using **TARGET_DICTIONARY syntax. Where the ** means ‚Äúuse all the keys in the dictionary as function parameters‚Äù.\nFor example, the following two lines are equivalent:\n# Using ** notation\noutputs = model(**inputs)\n\n# Using explicit notation\noutputs = model(input_ids=inputs[\"input_ids\"],\n                attention_mask=inputs[\"attention_mask\"])\n\n\nLet‚Äôs make a prediction with PyTorch!\n\nimport torch\n\nwith torch.no_grad():\n    outputs = model(**inputs) # '**' means input all of the dictionary keys as arguments to the function\n    # outputs = model(input_ids=inputs[\"input_ids\"],\n    #                 attention_mask=inputs[\"attention_mask\"]) # same as above, but explicitly passing in the keys\n\noutputs\n\nSequenceClassifierOutput(loss=None, logits=tensor([[-3.3686,  3.9443]]), hidden_states=None, attentions=None)\n\n\nBeautiful, we‚Äôve got some outputs, which contain logits with two values (one for each class).\nThe index of the higher value is our model‚Äôs predicted class.\nWe can find it by taking the outputs.logits and calling argmax().item() on it.\nWe can also find the prediction probability by passing outputs.logits to torch.softmax.\n\n# Get predicted class and prediction probability\npredicted_class_id = outputs.logits.argmax().item()\nprediction_probability = torch.softmax(outputs.logits, dim=1).max().item()\n\nprint(f\"Text: {sample_text_food}\")\nprint(f\"Predicted label: {model.config.id2label[predicted_class_id]}\")\nprint(f\"Prediction probability: {prediction_probability}\")\n\nText: A delicious photo of a plate of scrambled eggs, bacon and toast\nPredicted label: food\nPrediction probability: 0.9993335604667664\n\n\nBeautiful! A prediction made with pure PyTorch! It looks very much correct too.\nHow about we put it all together?\n\nimport torch\n\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\nmodel_path = \"mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\"\n\n# Load the model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained(pretrained_model_name_or_path=model_path)\nmodel = AutoModelForSequenceClassification.from_pretrained(pretrained_model_name_or_path=model_path)\n\n# Make sample text and tokenize it\nsample_text = \"A photo of a broccoli, salmon, rice and radish dish\"\ninputs = tokenizer(sample_text, return_tensors=\"pt\")\n\n# Make a prediction\nwith torch.no_grad():\n    outputs = model(**inputs)\n\n# Get predicted class and prediction probability\noutput_logits = outputs.logits\npredicted_class_id = torch.argmax(output_logits, dim=1).item()\npredicted_class_label = model.config.id2label[predicted_class_id]\npredicted_probability = torch.softmax(output_logits, dim=1).max().item()\n\n# Print outputs\nprint(f\"Text: {sample_text}\")\nprint(f\"Predicted class: {predicted_class_label} (prob: {predicted_probability * 100:.2f}%)\")\n\nText: A photo of a broccoli, salmon, rice and radish dish\nPredicted class: food (prob: 99.94%)",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#putting-it-all-together",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#putting-it-all-together",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "9 Putting it all together",
    "text": "9 Putting it all together\nOk, ok, we‚Äôve covered a lot of ground going from dataset to trained model to making predictions on custom samples.\nHow about we put all of the steps we‚Äôve covered so far together in a single code cell (or two)?\nTo do so, we‚Äôll:\n\nImport necessary packages (e.g.¬†datasets, transformers.pipeline, torch and more).\nSetup variables for model training and saving pipeline such as our model name, save directory and dataset name.\nCreate a directory for saving models.\nLoad and preprocess the dataset from Hugging Face Hub using datasets.load_dataset.\nImport a tokenizer with transformers.AutoTokenizer and map it to our dataset with dataset.map.\nSet up an evaluation metric with evaluate & create a function to evaluate our model‚Äôs predictions.\nImport a model with transformers.AutoModelForSequenceClassification and prepare it for training with transformers.TrainingArguments and transformers.Trainer.\nTrain the model on our text dataset by calling transformers.Trainer.train.\nSave the trained model to a local directory.\nPush the model to the Hugging Face Hub.\nEvaluate the model on the test data.\nTest the trained model on a custom sample using transformers.pipeline to make sure it works.\n\nPhew!\nA fair few steps but nothing we can‚Äôt handle!\nLet‚Äôs do it.\n\n# 1. Import necessary packages\nimport pprint\nfrom pathlib import Path\n\nimport numpy as np\nimport torch\n\nimport datasets\nimport evaluate\n\nfrom transformers import pipeline\nfrom transformers import TrainingArguments, Trainer\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\n# 2. Setup variables for model training and saving pipeline\nDATASET_NAME = \"mrdbourke/learn_hf_food_not_food_image_captions\"\nMODEL_NAME = \"distilbert/distilbert-base-uncased\"\nMODEL_SAVE_DIR_NAME = \"models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\"\n\n# 3. Create a directory for saving models\n# Note: This will override our existing saved model (if there is one)\nprint(f\"[INFO] Creating directory for saving models: {MODEL_SAVE_DIR_NAME}\")\nmodel_save_dir = Path(MODEL_SAVE_DIR_NAME)\nmodel_save_dir.mkdir(parents=True, exist_ok=True)\n\n# 4. Load and preprocess the dataset from Hugging Face Hub\nprint(f\"[INFO] Downloading dataset from Hugging Face Hub, name: {DATASET_NAME}\")\ndataset = datasets.load_dataset(path=DATASET_NAME)\n\n# Create mappings from id2label and label2id (adjust these for your target dataset, can also create these programmatically)\nid2label = {0: \"not_food\", 1: \"food\"}\nlabel2id = {\"not_food\": 0, \"food\": 1}\n\n# Create function to map IDs to labels in dataset\ndef map_labels_to_number(example):\n    example[\"label\"] = label2id[example[\"label\"]]\n    return example\n\n# Map preprocessing function to dataset\ndataset = dataset[\"train\"].map(map_labels_to_number)\n\n# Split the dataset into train/test sets\ndataset = dataset.train_test_split(test_size=0.2, seed=42)\n\n# 5. Import a tokenizer and map it to our dataset\nprint(f\"[INFO] Tokenizing text for model training with tokenizer: {MODEL_NAME}\")\ntokenizer = AutoTokenizer.from_pretrained(pretrained_model_name_or_path=MODEL_NAME,\n                                          use_fast=True)\n\n# Create a preprocessing function to tokenize text\ndef tokenize_text(examples):\n    return tokenizer(examples[\"text\"],\n                     padding=True,\n                     truncation=True)\n\ntokenized_dataset = dataset.map(function=tokenize_text,\n                                batched=True,\n                                batch_size=1000)\n\n# 6. Set up an evaluation metric & function to evaluate our model\naccuracy_metric = evaluate.load(\"accuracy\")\n\ndef compute_accuracy(predictions_and_labels):\n    predictions, labels = predictions_and_labels\n\n    if len(predictions.shape) &gt;= 2:\n        predictions = np.argmax(predictions, axis=1)\n    \n    return accuracy_metric.compute(predictions=predictions, references=labels) # note: use \"references\" parameter rather than \"labels\"\n\n\n# 7. Import a model and prepare it for training \nprint(f\"[INFO] Loading model: {MODEL_NAME}\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    num_labels=2,\n    id2label=id2label,\n    label2id=label2id\n)\nprint(f\"[INFO] Model loading complete!\")\n\n# Setup TrainingArguments\ntraining_args = TrainingArguments(\n    output_dir=model_save_dir,\n    learning_rate=0.0001,\n    per_device_train_batch_size=32,\n    per_device_eval_batch_size=32,\n    num_train_epochs=10,\n    eval_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=3,\n    use_cpu=False,\n    seed=42,\n    load_best_model_at_end=True,\n    logging_strategy=\"epoch\",\n    report_to=\"none\",\n    push_to_hub=False,\n    hub_private_repo=False # Note: if set to False, your model will be publically available\n)\n\n# Create Trainer instance and train model\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_dataset[\"train\"],\n    eval_dataset=tokenized_dataset[\"test\"],\n    tokenizer=tokenizer,\n    compute_metrics=compute_accuracy\n)\n\n# 8. Train the model on our text dataset\nprint(f\"[INFO] Commencing model training...\")\nresults = trainer.train()\n\n# 9. Save the trained model (note: this will overwrite our previous model, this is ok)\nprint(f\"[INFO] Model training complete, saving model to local path: {model_save_dir}\")\ntrainer.save_model(output_dir=model_save_dir)\n\n# 10. Push the model to the Hugging Face Hub\nprint(f\"[INFO] Uploading model to Hugging Face Hub...\")\nmodel_upload_url = trainer.push_to_hub(\n    commit_message=\"Uploading food not food text classifier model\",\n    # token=\"YOUR_HF_TOKEN_HERE\" # requires a \"write\" HF token \n)\nprint(f\"[INFO] Model upload complete, model available at: {model_upload_url}\")\n\n# 11. Evaluate the model on the test data\nprint(f\"[INFO] Performing evaluation on test dataset...\")\npredictions_all = trainer.predict(tokenized_dataset[\"test\"])\nprediction_values = predictions_all.predictions\nprediction_metrics = predictions_all.metrics\n\nprint(f\"[INFO] Prediction metrics on the test data:\")\npprint.pprint(prediction_metrics)\n\n[INFO] Creating directory for saving models: models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\n[INFO] Downloading dataset from Hugging Face Hub, name: mrdbourke/learn_hf_food_not_food_image_captions\n[INFO] Tokenizing text for model training with tokenizer: distilbert/distilbert-base-uncased\n[INFO] Loading model: distilbert/distilbert-base-uncased\n\n\nSome weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert/distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\n[INFO] Model loading complete!\n[INFO] Commencing model training...\n\n\n\n    \n      \n      \n      [70/70 00:07, Epoch 10/10]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\nAccuracy\n\n\n\n\n1\n0.372500\n0.067892\n1.000000\n\n\n2\n0.028300\n0.009194\n1.000000\n\n\n3\n0.004700\n0.004919\n1.000000\n\n\n4\n0.002000\n0.002121\n1.000000\n\n\n5\n0.001200\n0.001302\n1.000000\n\n\n6\n0.000900\n0.000982\n1.000000\n\n\n7\n0.000800\n0.000839\n1.000000\n\n\n8\n0.000700\n0.000766\n1.000000\n\n\n9\n0.000700\n0.000728\n1.000000\n\n\n10\n0.000700\n0.000715\n1.000000\n\n\n\n\n\n\n[INFO] Model training complete, saving model to local path: models/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\n[INFO] Uploading model to Hugging Face Hub...\n\n\n\n\n\n\n\n\n\n\n\n[INFO] Model upload complete, model available at: https://huggingface.co/mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased/tree/main/\n[INFO] Performing evaluation on test dataset...\n\n\n\n\n\n[INFO] Prediction metrics on the test data:\n{'test_accuracy': 1.0,\n 'test_loss': 0.0007152689504437149,\n 'test_runtime': 0.0507,\n 'test_samples_per_second': 986.278,\n 'test_steps_per_second': 39.451}\n\n\nWoohoo! It all worked!\nNow let‚Äôs make it sure works by turing it into a transformers.pipeline and passing it a custom sample.\n\n# 12. Make sure the model works by testing it on a custom sample\nfood_not_food_classifier = pipeline(task=\"text-classification\",\n                                    model=model_save_dir, # can also use model on Hugging Face Hub path \n                                    device=torch.device(\"cuda\") if torch.cuda.is_available() else \"cpu\",\n                                    top_k=1,\n                                    batch_size=32)\n\nfood_not_food_classifier(\"Yo! We just built a food not food sentence classifier model! Good news is, it can be replicated for other kinds of text classification!\")\n\n[[{'label': 'food', 'score': 0.9969706535339355}]]\n\n\nNice!\nLooks like putting all of our code in one cell worked.\nHow about we make our model even more accessible by turning it into a demo?",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#turning-our-model-into-a-demo",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#turning-our-model-into-a-demo",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "10 Turning our model into a demo",
    "text": "10 Turning our model into a demo\nOnce you‚Äôve trained and saved a model, one of the best ways to continue to test it and show/share it with others is to create a demo.\nOr step number 8 in our workflow:\n\n‚úÖ Create and preprocess data.\n‚úÖ Define the model we‚Äôd like use with transformers.AutoModelForSequenceClassification (or another similar model class).\n‚úÖ Define training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\n‚úÖ Pass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\n‚úÖ Train the model by calling Trainer.train().\n‚úÖ Save the model (to our local machine or to the Hugging Face Hub).\n‚úÖ Evaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nA demo is a small application with the focus of showing the workflow of your model from data in to data out.\nIt‚Äôs also one way to start testing your model in the wild.\nYou may know where it works and where it doesn‚Äôt but chances are someone out there will find a new bug before you do.\nTo build our demo, we‚Äôre going to use an open-source library called Gradio.\nGradio allows you to make machine learning demo apps with Python code and best of all, it‚Äôs part of the Hugging Face ecosystem so you can share your demo to the public directly through Hugging Face.\n\n\n\n\nGoing on the premise of data, model, demo, Gradio helps to create the demo. Once you‚Äôve got a trained model on the Hugging Face Hub, you can setup a Gradio interface to import that model and interact it with it. Gradio interfaces can be deployed on Hugging Face Spaces and shared with others so they can try your model too.\n\n\nGradio works on the premise of input -&gt; function (this could be a model) -&gt; output.\nIn our case:\n\nInput = A string of text.\nFunction = Our trained text classification model.\nOutput = Predicted output of food/not_food with prediction probability.\n\n\n10.1 Creating a simple function to perform inference\nLet‚Äôs create a function to take an input of text, process it with our model and return a dictionary of the predicted labels.\nOur function will:\n\nTake an input of a string of text.\nSetup a text classification pipeline using transformers.pipeline as well as our trained model (this can be from our local machine or loaded from Hugging Face). We‚Äôll return all the probabilities from the output using top_k=None.\nGet the outputs of the text classification pipeline from 2 as a list of dictionaries (e.g.¬†[{'label': 'food', 'score': 0.999105}, {'label': 'not_food', 'score': 0.00089}]).\nFormat and return the list of dictionaries from 3 to be compatible with Gradio‚Äôs gr.Label output (we‚Äôll see this later) which requires a dictionary in the form [{\"label_1\": probability_1, \"label_2\": probability_2}].\n\nOnward!\n\nfrom typing import Dict\n\n# 1. Create a function which takes text as input \ndef food_not_food_classifier(text: str) -&gt; Dict[str, float]:\n    \"\"\"\n    Takes an input string of text and classifies it into food/not_food in the form of a dictionary.\n    \"\"\"\n\n    # 2. Setup the pipeline to use the local model (or Hugging Face model path)\n    food_not_food_classifier = pipeline(task=\"text-classification\", \n                                        model=local_model_path,\n                                        batch_size=32,\n                                        device=\"cuda\" if torch.cuda.is_available() else \"cpu\", # set the device to work in any environment\n                                        top_k=None) # return all possible scores (not just top-1)\n    \n    # 3. Get outputs from pipeline (as a list of dicts)\n    outputs = food_not_food_classifier(text)[0]\n    \n    # 4. Format output for Gradio (e.g. {\"label_1\": probability_1, \"label_2\": probability_2})\n    output_dict = {}\n    for item in outputs:\n        output_dict[item[\"label\"]] = item[\"score\"]\n\n    return output_dict\n\n# Test out the function\nfood_not_food_classifier(\"My lunch today was chicken and salad\")\n\n{'food': 0.9992194175720215, 'not_food': 0.0007805348141118884}\n\n\nBeautiful!\nLooks like our function is working.\n\n\n10.2 Building a small Gradio demo to run locally\nWe‚Äôve got a working function to go from text to predicted labels and probabilities.\nLet‚Äôs now build a Gradio interface to showcase our model.\nWe can do so by:\n\nImporting Gradio (using import gradio as gr).\nCreating an instance of gr.Interface with parameters inputs=\"text\" (for our text-based inputs) called demo and outputs=gr.Label(num_top_classes=2) to display our output dictionary. We can also add some descriptive aspects to our demo with the title, description and examples parameters.\nRunning/launching the demo with gr.Interface.launch().\n\n\n# 1. Import Gradio as the common alias \"gr\"\nimport gradio as gr\n\n# 2. Setup a Gradio interface to accept text and output labels\ndemo = gr.Interface(\n    fn=food_not_food_classifier, \n    inputs=\"text\", \n    outputs=gr.Label(num_top_classes=2), # show top 2 classes (that's all we have)\n    title=\"Food or Not Food Classifier\",\n    description=\"A text classifier to determine if a sentence is about food or not food.\",\n    examples=[[\"I whipped up a fresh batch of code, but it seems to have a syntax error.\"],\n              [\"A delicious photo of a plate of scrambled eggs, bacon and toast.\"]])\n\n# 3. Launch the interface\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7860\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\nWoohoo!\nWe‚Äôve made a very clean way of interacting with our model.\nHowever, our model is still only largely accessible to us (except for the model file we‚Äôve uploaded to Hugging Face).\nHow about we make our demo publicly available so it‚Äôs even easier for people to interact with our model?\n\n\n\n\n\n\nNote\n\n\n\nThe gradio.Interface class is full of many different options, I‚Äôd highly recommend reading through the documentation for 10-15 minutes to get an idea of it.\nIf your workflow requires inputs -&gt; function (e.g.¬†a model making predictions on the input) -&gt; output, chances are, you can build it with Gradio.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#making-our-demo-publicly-accessible",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#making-our-demo-publicly-accessible",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "11 Making our demo publicly accessible",
    "text": "11 Making our demo publicly accessible\nOne of the best ways to share your machine learning work is by creating an application.\nAnd one of the best places to share your applications is Hugging Face Spaces.\nHugging Face Spaces allows you to host machine learning (and non-machine learning) applications for free (with optional paid hardware upgrades).\nIf you‚Äôre familiar with GitHub, Hugging Face Spaces works similar to a GitHub repository (each Space is a Git repository itself).\nIf not, that‚Äôs okay, think of Hugging Face Spaces as an online folder where you can upload your files and have them accessed by others.\nCreating a Hugging Face Space can be done in two main ways:\n\nManually - By going to the Hugging Face Spaces website and clicking ‚ÄúCreate new space‚Äù. Or by going directly to https://www.huggingface.co/new-space. Here, you‚Äôll be able to setup a few settings for your Space and choose the framework/runtime (e.g.¬†Streamlit, Gradio, Docker and more).\nProgrammatically - By using the Hugging Face Hub Python API we can write code to directly upload files to the Hugging Face Hub, including Hugging Face Spaces.\n\nBoth are great options but we‚Äôre going to take the second approach.\nThis is so we can create our Hugging Face Space right from this notebook.\nTo do so, we‚Äôll create three files:\n\napp.py - This will be the Python file which will be the main running file on our Hugging Face Space. Inside we‚Äôll include all the code necessary to run our Gradio demo (as above). Hugging Face Spaces will automatically recoginize the app.py file and run it for us.\nrequirements.txt - This text file will include all of the Python packages we need to run our app.py file. Before our Space starts to run, all of the packages in this file will be installed.\nREADME.md - This markdown file will include details about our Space as well as specific Space-related metadata (we‚Äôll see this later on).\n\nWe‚Äôll create these files with the following file structure:\ndemos/\n‚îî‚îÄ‚îÄ food_not_food_text_classifier/\n    ‚îú‚îÄ‚îÄ app.py\n    ‚îú‚îÄ‚îÄ README.md\n    ‚îî‚îÄ‚îÄ requirements.txt\nWhy this way?\nDoing it in the above style means we‚Äôll have a directory which contains all of our demos (demos/) as well as a dedicated directory which contains our food/not_food demo application (food_not_food_text_classifier/).\nThis way, we‚Äôll be able to upload the whole demos/food_not_food_text_classifier/ folder to Hugging Face Spaces.\nLet‚Äôs start by making a directory to store our demo application files.\n\nfrom pathlib import Path\n\n# Make a directory for demos\ndemos_dir = Path(\"../demos\")\ndemos_dir.mkdir(exist_ok=True)\n\n# Create a folder for the food_not_food_text_classifer demo\nfood_not_food_text_classifier_demo_dir = Path(demos_dir, \"food_not_food_text_classifier\")\nfood_not_food_text_classifier_demo_dir.mkdir(exist_ok=True)\n\nDemo directory created, let‚Äôs now create our requried files.\n\n11.1 Making an app file\nOur app.py file will be the main part of our Hugging Face Space.\nThe good news is, we‚Äôve already created most of it when we created our original demo.\nInside the app.py file we‚Äôll:\n\nImport the required libraries/packages for running our demo app.\nSetup a function for going from text to our trained model‚Äôs predicted outputs. And because our model is already hosted on the Hugging Face Hub, we can pass pipeline our model‚Äôs name (e.g.¬†mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased) and when we upload our app.py file to Hugging Face Spaces, it will load the model directly from the Hub.\n\nNote: Be sure to change ‚Äúmrdbourke‚Äù to your own Hugging Face username.\n\nCreate a demo just as before with gr.Interface.\nLaunch our demo with gr.Interface.launch.\n\nWe can write all of the above in a notebook cell.\nAnd we can turn it into a file by using the %%writefile magic command and passing it our target filepath.\nLet‚Äôs do it!\n\n%%writefile ../demos/food_not_food_text_classifier/app.py\n# 1. Import the required packages\nimport torch\nimport gradio as gr\n\nfrom typing import Dict\nfrom transformers import pipeline\n\n# 2. Define function to use our model on given text \ndef food_not_food_classifier(text: str) -&gt; Dict[str, float]:\n    # Set up text classification pipeline\n    food_not_food_classifier = pipeline(task=\"text-classification\", \n                                        # Because our model is on Hugging Face already, we can pass in the model name directly\n                                        model=\"mrdbourke/learn_hf_food_not_food_text_classifier-distilbert-base-uncased\", # link to model on HF Hub\n                                        device=\"cuda\" if torch.cuda.is_available() else \"cpu\",\n                                        top_k=None) # return all possible scores (not just top-1)\n    \n    # Get outputs from pipeline (as a list of dicts)\n    outputs = food_not_food_classifier(text)[0]\n\n    # Format output for Gradio (e.g. {\"label_1\": probability_1, \"label_2\": probability_2})\n    output_dict = {}\n    for item in outputs:\n        output_dict[item[\"label\"]] = item[\"score\"]\n\n    return output_dict\n\n# 3. Create a Gradio interface with details about our app\ndescription = \"\"\"\nA text classifier to determine if a sentence is about food or not food. \n\nFine-tuned from [DistilBERT](https://huggingface.co/distilbert/distilbert-base-uncased) on a [small dataset of food and not food text](https://huggingface.co/datasets/mrdbourke/learn_hf_food_not_food_image_captions).\n\nSee [source code](https://github.com/mrdbourke/learn-huggingface/blob/main/notebooks/hugging_face_text_classification_tutorial.ipynb).\n\"\"\"\n\ndemo = gr.Interface(fn=food_not_food_classifier, \n             inputs=\"text\", \n             outputs=gr.Label(num_top_classes=2), # show top 2 classes (that's all we have)\n             title=\"üçóüö´ü•ë Food or Not Food Text Classifier\",\n             description=description,\n             examples=[[\"I whipped up a fresh batch of code, but it seems to have a syntax error.\"],\n                       [\"A delicious photo of a plate of scrambled eggs, bacon and toast.\"]])\n\n# 4. Launch the interface\nif __name__ == \"__main__\":\n    demo.launch()\n\nOverwriting ../demos/food_not_food_text_classifier/app.py\n\n\napp.py file created!\nNow let‚Äôs setup the requirements file.\n\n\n11.2 Making a requirements file\nWhen you upload an app.py file to Hugging Face Spaces, it will attempt to run it automatically.\nAnd just like running the file locally, we need to make sure all of the required packages are available.\nOtherwise our Space will produce an error like the following:\n===== Application Startup at 2024-06-13 05:37:21 =====\n\nTraceback (most recent call last):\n  File \"/home/user/app/app.py\", line 1, in &lt;module&gt;\n    import torch\nModuleNotFoundError: No module named 'torch'\nGood news is, our demo only has three requirements: gradio, torch, transformers.\nLet‚Äôs create a requirements.txt file with the packages we need and save it to the same directory as our app.py file.\n\n%%writefile ../demos/food_not_food_text_classifier/requirements.txt\ngradio\ntorch\ntransformers\n\nOverwriting ../demos/food_not_food_text_classifier/requirements.txt\n\n\nBeautiful!\nHugging Face Spaces will automatically recognize the requirements.txt file and install the listed packages into our Space.\n\n\n11.3 Making a README file\nOur app.py can contain information about our demo, however, we can also use a README.md file to further communicate our work.\n\n\n\n\n\n\nNote\n\n\n\nIt is common practice in Git repositories (including GitHub and Hugging Face Hub) to add a README.md file to your project so people can read more (hence ‚Äúread me‚Äù) about what your project is about.\n\n\nWe can include anything in markdown-style text in the README.md file.\nHowever, Spaces also have a special YAML block at the top of the README.md file in the root directory with configuration details.\nInside the YAML block you can put special metadata details about your Space including:\n\ntitle - The title of your Space (e.g.¬†title: Food Not Food Text Classifier).\nemoji - The emoji to display on your Space (e.g.¬†emoji: üçóüö´ü•ë).\napp_file - The target app file for Spaces to run (set to app_file: app.py by default).\n\nAnd there are plenty more in the Spaces Configuration References documentation.\n\n\n\n\nExample of Hugging Face Spaces README.md file with YAML front matter (front matter is another term for ‚Äúthings at the front/top of the file‚Äù) for formatting the Space.\n\n\nLet‚Äôs create a README.md file with a YAML block at the top detailing some of the metadata about our project.\n\n\n\n\n\n\nNote\n\n\n\nThe YAML block at the top of the README.md can take some practice.\nIf you want to see a demo of how one gets created, try making a Hugging Face Space with the ‚ÄúCreate new Space‚Äù button on the https://huggingface.co/spaces page and seeing what the README.md file starts with (that‚Äôs how I found out what to do!).\n\n\n\n%%writefile ../demos/food_not_food_text_classifier/README.md\n---\ntitle: Food Not Food Text Classifier\nemoji: üçóüö´ü•ë\ncolorFrom: blue\ncolorTo: yellow\nsdk: gradio\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üçóüö´ü•ë Food Not Food Text Classifier\n\nSmall demo to showcase a text classifier to determine if a sentence is about food or not food.\n\nDistillBERT model fine-tuned on a small synthetic dataset of 250 generated [Food or Not Food image captions](https://huggingface.co/datasets/mrdbourke/learn_hf_food_not_food_image_captions).\n\n[Source code notebook](https://github.com/mrdbourke/learn-huggingface/blob/main/notebooks/hugging_face_text_classification_tutorial.ipynb).\n\nOverwriting ../demos/food_not_food_text_classifier/README.md\n\n\nREADME.md created!\nNow let‚Äôs check out the files we have in our demos/food_not_food_text_classifier/ folder.\n\n!ls ../demos/food_not_food_text_classifier\n\nREADME.md  app.py  requirements.txt\n\n\nPerfect!\nLooks like we‚Äôve got all the files we need to create our Space.\nLet‚Äôs upload them to the Hugging Face Hub.\n\n\n11.4 Uploading our demo to Hugging Face Spaces\nWe‚Äôve created all of the files required for our demo, now for the fun part!\nLet‚Äôs upload them to Hugging Face Spaces.\nTo do so programmatically, we can use the Hugging Face Hub Python API.\n\n\n\n\n\n\nNote\n\n\n\nThe Hugging Face Hub Python API has many different options for interacting with the Hugging Face Hub programmatically.\nYou can create repositories, upload files, upload folders, add comments, change permissions and much much more.\nBe sure to explore the documentation for at least 10-15 minutes to get an idea of what‚Äôs possible.\n\n\nTo get our demo hosted on Hugging Face Spaces we‚Äôll go through the following steps:\n\nImport the required methods from the huggingface_hub package, including create_repo, get_full_repo_name, upload_file (optional, we‚Äôll be using upload_folder) and upload_folder.\nDefine the demo folder we‚Äôd like to upload as well as the different parameters for the Hugging Face Space such as repo type (\"space\"), our target Space name, the target Space SDK (\"gradio\"), our Hugging Face token with write access (optional if it already isn‚Äôt setup).\nCreate a repository on Hugging Face Spaces using the huggingface_hub.create_repo method and filling out the appropriate parameters.\nGet the full name of our created repository using the huggingface_hub.get_full_repo_name method (we could hard code this but I like to get it programmatically incase things change).\nUpload the contents of our target demo folder (../demos/food_not_food_text_classifier/) to Hugging Face Hub with huggingface_hub.upload_folder.\nHope it all works and inspect the results! ü§û\n\nA fair few steps but we‚Äôve got this!\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"../demos/food_not_food_text_classifier\"\nHF_TARGET_SPACE_NAME = \"learn_hf_food_not_food_text_classifier_demo\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading food not food text classifier demo app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: learn_hf_food_not_food_text_classifier_demo\n[INFO] Full Hugging Face Hub repo name: mrdbourke/learn_hf_food_not_food_text_classifier_demo\n[INFO] Uploading ../demos/food_not_food_text_classifier to repo: mrdbourke/learn_hf_food_not_food_text_classifier_demo\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/learn_hf_food_not_food_text_classifier_demo/tree/main/.\n\n\nExcellent!\nLooks like all of the files in our target demo folder were uploaded!\nOnce this happens, Hugging Face Spaces will take a couple of minutes to build our application.\nIf there are any errors, it will let us know.\nOtherwise, our demo application should be running live and be ready to test at a URL similar to: https://huggingface.co/spaces/mrdbourke/learn_hf_food_not_food_text_classifier_demo (though you may have to swap my username ‚Äúmrdbourke‚Äù for your own as well as the name you chose for the Space).\n\n\n11.5 Testing our hosted demo\nOne of the really cool things about Hugging Face Spaces is that we can share our demo application as a link so others can try it out.\nWe can also embed it right into our notebook.\nTo do so, we can go to the three dots in the top right of our hosted Space and select ‚ÄúEmbed this Space‚Äù.\nWe then have the option to embed our Space using a JavaScript web component, HTML iframe or via the direct URL.\nSince Jupyter notebooks have the ability to render HTML via IPython.display.HTML, let‚Äôs embed our Space with HTML.\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-learn-hf-food-not-food-text-classifier-demo.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"450\"\n&gt;&lt;/iframe&gt;     \n''')\n\n\n     \n\n\nNow that‚Äôs cool!\nWe can try out our Food Not Food Text Classifier app from right within our notebook!",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#summary",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#summary",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "12 Summary",
    "text": "12 Summary\nYou should be very proud of yourself!\nWe‚Äôve just gone end-to-end on a machine learning workflow with Hugging Face.\nFrom loading a dataset to training a model to deploying that model in the form of a public demo.\nHere are some of the main takeaways from this project.\nThe Hugging Face ecosystem is a collection of powerful and open-source tools for machine learning workflows.\n\nHugging Face datasets helps you to store and preprocess datasets of almost any shape and size.\nHugging Face transformers has many built-in pretrained models for many different use cases and components such as transformers.Trainer help you to tailor those models to your own custom use cases.\nHugging Face tokenizers works closely with transformers and allows the efficient conversion of raw text data into numerical representation (which is required for machine learning models).\nThe Hugging Face Hub is a great place to share your models and machine learning projects. Over time, you can build up a portfolio of machine learning-based projects to show future employers or clients and to help the community grow.\nThere are many more, but I‚Äôll leave these for you to explore as extra-curriculum.\n\nA common machine learning workflow: dataset -&gt; model -&gt; demo.\nBefore a machine learning model is incorporated into a larger application, a very common workflow is to:\n\nFind an existing or create a new dataset for your specific problem.\nTrain/fine-tune and evaluate an existing model on your dataset.\nCreate a small demo application to test your trained model.\n\nWe‚Äôve just gone through all of these steps for text classification!\nText classification is a very common problem in many business settings. If you have a similar problem but a different dataset, you can replicate this workflow.\nBuilding your own model has several advantages over using APIs.\nAPIs are very helpful to try something out.\nHowever, depending on your use case, you may often want to create your own custom model.\nTraining your own model can often result in faster predictions and far less running costs over time.\nThe Hugging Face ecosystem enables the creation of custom models for almost any kind of machine learning problem.",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#exercises-and-extensions",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#exercises-and-extensions",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "13 Exercises and Extensions",
    "text": "13 Exercises and Extensions\nThere‚Äôs no better way to improve other than practicing what you‚Äôve learned.\nThe following exercises and extensions are designed for you to practice the things we‚Äôve covered in this project.\n\nOur text classification model works on food/not_food text samples. How would you create your own binary text classification model on different classes?\n\nCreate ~10 or samples of your own text classes (e.g.¬†10 samples each of spam/not_spam emails) and retrain a text classification model.\nBonus: Share the model you‚Äôve made in a demo just like we did here. Send it to me, I‚Äôd love to see it! My email is on my website.\n\nWe‚Äôve trained our model on two classes (binary classification) but how might we increase that to 3 or more classes (multi-class classification)?\n\nHint: see the num_labels parameter in transformers.AutoModelForSequenceClassification.\n\nOur model seems to work pretty good on our test data and on the few number of examples we tried manually. Can you find any examples where our model fails? For example, what kind of sentences does it struggle with? How could you fix this?\n\nHint: Our model has been trained on examples with at least 5-12 words, does it still work with short sentences? (e.g.¬†‚Äúpie‚Äù).\nBonus: If you find any cases where our model doesn‚Äôt perform well, make an extra 10-20 examples of these and add them to the dataset and then retrain the model (you‚Äôll have to lookup ‚Äúhow to add rows to an existing Hugging Face dataset‚Äù). How does the model perform after adding these additional samples?\n\nDatasets are fundamental to any machine learning project, getting to know how to process and interact with them is a fundamental skill. Spend 1 hour going through the Hugging Face Datasets tutorial.\n\nWrite 5 things you can do with Hugging Face Datasets and where they might come in handy.\n\nThe Hugging Face transformers library has many features. The following readings are to help understand a handful of them.\n\nSpend 10 minutes exploring the transformers.TrainingArguments documentation.\nSpend 10 minutes reading the transformers.Trainer documentation.\n\nSpend 10 minutes reading the Hugging Face model sharing documentation.\n\nSpend 10 minutes reading the Hugging Face transformers.pipeline documentation.\n\nWhat does a pipeline do?\nName 3 different kinds of pipelines and describe what they do in a sentence\n\n\nGradio is a powerful library for making machine learning demos, learning more about it will help you in future creations. Spend 10-15 minutes reading the Gradio quickstart documentation.\n\nWhat are 3 kinds of demos you can create?\nWhat are 3 different inputs and outputs you can make?",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_text_classification_tutorial.html#extra-resources",
    "href": "notebooks/hugging_face_text_classification_tutorial.html#extra-resources",
    "title": "Text Classification with Hugging Face Transformers Tutorial",
    "section": "14 Extra resources",
    "text": "14 Extra resources\nThere are many things we touched over but didn‚Äôt go into much depth in this notebook.\nThe following resources are for those who‚Äôd like to learn a little bit more.\n\nSee how the food not food image caption dataset was created with synthetic text data (image captions generated by a Large Language Model) in the example Google Colab notebook.\nHugging Face have a great guide on sequence classification (it‚Äôs what this notebook was built on).\nFor more on the concept of padding and truncation in sequence processing, I‚Äôd recommend the Hugging Face padding and truncation guide.\nFor more on Transformers (the architecture) as well as the DistilBert model:\n\nRead Transformers from scratch by Peter Bloem.\nWatch Andrej Karpathy‚Äôs lecture on Transformers and their history.\nRead the original Attention is all you need paper (the paper that introduced the Transformer architecture).\nRead the DistilBert paper from the Hugging Face team (paper that introduced the DistilBert architecture and training setup).",
    "crumbs": [
      "Home",
      "Natural Language Processing (NLP)",
      "Build a custom text classification model and demo"
    ]
  },
  {
    "objectID": "extras/setup.html#start-here-universal-steps",
    "href": "extras/setup.html#start-here-universal-steps",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "Create a free Hugging Face account at https://huggingface.co/join.\nCreate a Hugging Face access token with read and write access at https://huggingface.co/settings/tokens.\n\nYou can create a read/write token using the fine-grained settings and selecting all the appropriate options.\nRead more on Hugging Face access tokens at https://huggingface.co/docs/hub/en/security-tokens.\n\n\n\n\n\n\nTo read from and write to your Hugging Face Hub account, you‚Äôll need to set up an access token. You can have one token for reading and one for writing. However, I personally use a single token for reading and writing.\n\n\nNote: Do not share your token with others. Always keep it private and avoid saving it in raw text format."
  },
  {
    "objectID": "extras/setup.html#getting-setup-on-google-colab",
    "href": "extras/setup.html#getting-setup-on-google-colab",
    "title": "Getting setup for the Hugging Face ecosystem",
    "section": "",
    "text": "Note: If you‚Äôre unfamiliar with Google Colab, I‚Äôd recommend going through Sam Witteveen‚Äôs video Colab 101 and then Advanced Colab to learn more.\n\nFollow the steps in Start here.\nAdd your Hugging Face read/write token as a Secret in Google Colab.\n\nNaming this Secret HF_TOKEN will mean that Hugging Face libraries automatically recognize your token for future use.\n\n\n\n\n\n\nFor accessing models and datasets from the Hugging Face Hub (both read and write) inside Google Colab, you‚Äôll need to add your Hugging Face token as a Secret in Google Colab. Once you give your Google Colab notebook access to the token, it can be used by Hugging Face libraries to interact with the Hugging Face Hub.\n\n\nAlternatively, if you need to force relogin for a notebook session, you can run:\nimport huggingface_hub # requires !pip install huggingface_hub\n\n# Login to Hugging Face\nhuggingface_hub.login()\nAnd enter your token in the box that appears (note: this token will only be active for the current notebook session and will delete when your Google Colab instance terminates)."
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "Learn Hugging Face ü§ó",
    "section": "Contents",
    "text": "Contents\nAll code and text will be free/open-source, video step-by-step walkthroughs are available as a paid upgrade.\n\n\n\n\n\n\n\n\n\n\n\nProject\nDescription\nDataset\nModel\nDemo\nVideo Course\n\n\n\n\nText classification\nBuild project ‚ÄúFood Not Food‚Äù, a text classification model to classify image captions into ‚Äúfood‚Äù if they‚Äôre about food or ‚Äúnot_food‚Äù if they‚Äôre not about food. This is the ideal place to get started if you‚Äôve never used the Hugging Face ecosystem.\nDataset\nModel\nDemo\nVideo Course\n\n\nObject Detection\nBuild Trashify üöÆ, an object detection model to detect ‚Äútrash‚Äù, ‚Äúhand‚Äù, ‚Äúbin‚Äù to incentivize people to clean up their local area. Start with a dataset, customize an open-source object detection model and turn it into a demo application that others can use and try out on their own images.\nDataset\nModel\nDemo\nVideo Course (coming soon)\n\n\nMore to come soon!\nLet me know if you‚Äôd like to see anything specific by leaving an issue."
  },
  {
    "objectID": "index.html#who-is-it-for",
    "href": "index.html#who-is-it-for",
    "title": "Learn Hugging Face ü§ó",
    "section": "Who is it for?",
    "text": "Who is it for?\nIdeal for:\n\nBeginners who love things explained in detail.\nSomeone who wants to create more of their own end-to-end machine learning projects.\n\nNot ideal for:\n\nPeople with 2-3+ years of machine learning projects & experience^.\n\n^Note: This being said, you may actually find some things helpful along the way. Best to explore and see!"
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Learn Hugging Face ü§ó",
    "section": "Prerequisites",
    "text": "Prerequisites\n\n3-6 months Python experience.\n1x beginner machine learning or deep learning course (see my begineer-friendly ML course to learn Python + important ML concepts in one).\n\nPyTorch experience is a bonus (see my Learn PyTorch in a Day video or learnpytorch.io)"
  },
  {
    "objectID": "index.html#todo",
    "href": "index.html#todo",
    "title": "Learn Hugging Face ü§ó",
    "section": "TODO",
    "text": "TODO\n\nFinish outline of this (index.md) page\n\nCopy a similar version to the README.md for GitHub\nMake share image for the whole thing\n\nMake index of different projects\nEcosystem overview: transformers, datasets, accelerate, Spaces, Hub, models etc\nPractical tutorials\n\nText classification (this will be like a ‚Äústart here‚Äù for the Hugging Face ecosystem)\nMore to come‚Ä¶\n\nWhere to get help? HF forums, HF GitHub, etc\nFinish setup page\n\nLocal setup\n\nFinish deployment to learnhuggingface.com page\nGet started: text classification shows an end-to-end workflow with detailed steps, I‚Äôd advise starting here to get to know the ecosystem a bit\n\nOther projects are more focused on specific tasks with less explanations but still complete code examples"
  },
  {
    "objectID": "index.html#what-is-hugging-face",
    "href": "index.html#what-is-hugging-face",
    "title": "Learn Hugging Face ü§ó",
    "section": "What is Hugging Face?",
    "text": "What is Hugging Face?\nHugging Face is a platform that offers access to many different kinds of open-source machine learning models and datasets.\nThey‚Äôre also the creators of the popular transformers library (and many more helpful libraries) which is a Python-based library for working with pre-trained models as well as custom models.\nIf you‚Äôre getting into the world of AI and machine learning, you‚Äôre going to come across Hugging Face.\n\n\n\n\nA handful of pieces from the Hugging Face ecosystem. There are many more available in Hugging Face documentation."
  },
  {
    "objectID": "index.html#why-hugging-face",
    "href": "index.html#why-hugging-face",
    "title": "Learn Hugging Face ü§ó",
    "section": "Why Hugging Face?",
    "text": "Why Hugging Face?\nMany of the biggest companies in the world use Hugging Face for their open-source machine learning projects including Apple, Google, Facebook (Meta), Microsoft, OpenAI, ByteDance and more.\nNot only does Hugging Face make it so you can use state-of-the-art machine learning models such as Stable Diffusion (for image generation) and Whipser (for audio transcription) easily, it also makes it so you can share your own models, datasets and resources.\nAside from your own website, consider Hugging Face the homepage of your AI/machine learning profile."
  },
  {
    "objectID": "index.html#updates",
    "href": "index.html#updates",
    "title": "Learn Hugging Face ü§ó",
    "section": "Updates",
    "text": "Updates\n\n18 June 2025 - All code has been completed for the object detection project, train a custom object detection model and make a demo with it for others to try! (video course to come soon)\n1 Oct 2024 - Video course version of text classification is live on ZTM! Inside, we‚Äôll walkthrough every line of code building the text classification project with Hugging Face Datasets, Transformers and Spaces."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html",
    "href": "notebooks/hugging_face_object_detection_tutorial.html",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "",
    "text": "Note: If you‚Äôre running in Google Colab, make sure to enable GPU usage by going to Runtime -&gt; Change runtime type -&gt; select GPU.\nSource code on GitHub | Online book version | Setup guide | Video Course (coming soon)\nTo postprocess the outputs of our model we can use the transformers.RTDetrImageProcessor.post_process_object_detection() method (see the source code on GitHub, this is what we‚Äôll reproduce by hand).\nLet‚Äôs frist recompute the model‚Äôs outputs for our preprocessed single sample.\n# Recompute the random sample outputs with our preprocessed sample\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    # pixel_mask=random_sample_preprocessed[\"pixel_mask\"], # optional: some models expect pixel_mask inputs\n)\n\n# Inspect the output type\ntype(random_sample_outputs)\n\ntransformers.models.rt_detr_v2.modeling_rt_detr_v2.RTDetrV2ObjectDetectionOutput\nWonderful!\nWe get the exact output our post_process_object_detection() method is looking for.\nNow we can fill in the following parameters:\nYou can see what happens behind the scenes of post_process_object_detection in the source code.\n# Set the score threshold for postprocessing\nTHRESHOLD = 0.4 # adjust this where necessary to get a handful of outputs below (note: if it's too high, e.g. 0.5+, you might not see any outputs, try lowering to 0.3\n\n# Post process a single output from our model\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=THRESHOLD, # all boxes with scores under this value will be discarded (best to experiment with it)\n    target_sizes=random_sample_preprocessed[\"labels\"][0][\"orig_size\"].unsqueeze(0) # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6736, 0.5951, 0.5918, 0.5854, 0.5757, 0.5403, 0.5364, 0.5363, 0.5268,\n          0.5200, 0.5069, 0.5045, 0.5005, 0.4951, 0.4890, 0.4884, 0.4857, 0.4854,\n          0.4828, 0.4814, 0.4808, 0.4788, 0.4780, 0.4746, 0.4729, 0.4649, 0.4629,\n          0.4608, 0.4608, 0.4606, 0.4598, 0.4580, 0.4577, 0.4506, 0.4504, 0.4500,\n          0.4498, 0.4478, 0.4476, 0.4469, 0.4465, 0.4448, 0.4432, 0.4431, 0.4418,\n          0.4417, 0.4393, 0.4378, 0.4377, 0.4374, 0.4372, 0.4365, 0.4348, 0.4332,\n          0.4316, 0.4316, 0.4290, 0.4287, 0.4270, 0.4257, 0.4256, 0.4249, 0.4239,\n          0.4238, 0.4232, 0.4229, 0.4227, 0.4226, 0.4224, 0.4202, 0.4192, 0.4178,\n          0.4178, 0.4160, 0.4154, 0.4151, 0.4147, 0.4145, 0.4122, 0.4107, 0.4101,\n          0.4099, 0.4098, 0.4088, 0.4087, 0.4087, 0.4081, 0.4066, 0.4056, 0.4045,\n          0.4041, 0.4037, 0.4016, 0.4015, 0.4013, 0.4003],\n         grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]),\n  'boxes': tensor([[ 5.0105e+02,  4.5203e-01,  7.3708e+02,  2.4250e+02],\n          [ 5.0412e+02,  2.0059e+00,  7.3278e+02,  1.8306e+02],\n          [ 6.1310e+02,  2.3096e+02,  6.6116e+02,  3.0177e+02],\n          [ 5.0306e+02,  1.2722e+00,  9.5733e+02,  2.2517e+02],\n          [ 2.4945e+01,  3.0436e+02,  5.1925e+01,  3.4591e+02],\n          [ 5.1260e+02,  6.8830e-01,  9.4725e+02,  6.6806e+01],\n          [ 6.1350e+02,  2.2984e+02,  7.0224e+02,  3.0797e+02],\n          [ 2.1152e+01, -3.2943e-01,  9.5351e+02,  1.4764e+02],\n          [ 1.2980e+01, -3.1096e+00,  9.5033e+02,  3.1315e+02],\n          [ 4.9968e+02,  2.2245e+02,  6.2810e+02,  2.4664e+02],\n          [ 5.0749e+02,  2.2809e+02,  6.5957e+02,  3.1164e+02],\n          [ 1.2229e+02,  6.6094e+02,  2.4567e+02,  7.9839e+02],\n          [ 5.0148e+02,  1.3410e+01,  6.8456e+02,  2.0459e+02],\n          [-7.3895e-01,  1.1855e+03,  9.6912e+01,  1.2788e+03],\n          [ 1.4761e+01,  2.3338e+02,  5.6067e+01,  3.4622e+02],\n          [ 5.1296e+02,  8.8423e-01,  7.2169e+02,  4.5847e+01],\n          [ 5.0691e+02,  2.2909e+02,  6.6413e+02,  3.0541e+02],\n          [ 4.6397e+02,  2.8281e+02,  5.1125e+02,  3.8849e+02],\n          [ 4.8981e+02,  4.0450e+02,  6.8503e+02,  4.3418e+02],\n          [ 5.1942e+01,  2.6697e+02,  8.3528e+01,  3.4009e+02],\n          [ 7.2787e+02,  7.8234e+00,  8.1279e+02,  8.5145e+01],\n          [ 4.7700e+02,  4.0306e+02,  6.1262e+02,  4.3070e+02],\n          [ 6.1664e+02,  2.3159e+02,  6.5600e+02,  2.9366e+02],\n          [ 4.1879e+02,  3.8814e+02,  5.8851e+02,  4.2226e+02],\n          [ 8.2972e+02,  1.2125e+03,  8.8315e+02,  1.2791e+03],\n          [ 5.2999e+02,  5.5491e+00,  6.4846e+02,  7.5497e+01],\n          [ 6.1557e+02,  2.1974e+02,  6.7133e+02,  3.2138e+02],\n          [ 8.0869e+02,  3.6362e+02,  8.6213e+02,  4.3602e+02],\n          [ 5.3635e+02,  1.1489e+02,  9.3082e+02,  1.7906e+02],\n          [ 3.0467e+02,  1.2376e+00,  5.0685e+02,  2.4923e+02],\n          [-1.6477e+02, -2.1853e+02,  2.1610e+02,  3.0970e+02],\n          [ 2.2749e+00,  4.8322e+02,  1.0236e+02,  6.5523e+02],\n          [ 7.5257e+02,  1.2061e+03,  8.4215e+02,  1.2773e+03],\n          [ 6.1513e+02,  2.4225e+02,  6.6253e+02,  3.0529e+02],\n          [ 4.8960e+02,  2.9996e+02,  5.3337e+02,  3.8242e+02],\n          [ 8.0622e+02,  3.5765e+02,  8.8220e+02,  4.3886e+02],\n          [ 5.7967e+02,  3.7081e+02,  6.8958e+02,  3.8849e+02],\n          [ 4.9100e+02,  2.6876e+02,  5.3557e+02,  3.6860e+02],\n          [ 1.4141e+02,  7.6316e+02,  3.2067e+02,  8.1022e+02],\n          [ 2.2179e+02,  5.6167e+02,  3.8142e+02,  8.0643e+02],\n          [ 1.9144e+02,  8.6899e+02,  3.5675e+02,  9.4008e+02],\n          [ 8.4778e-01,  1.7512e+02,  2.7257e+01,  2.4508e+02],\n          [ 6.2010e+02,  3.6776e+02,  7.0309e+02,  3.8403e+02],\n          [ 5.1821e+02,  3.7700e+02,  7.3989e+02,  4.1093e+02],\n          [ 7.0627e+02,  1.1470e+03,  8.4302e+02,  1.3910e+03],\n          [ 1.9853e+02,  7.7512e+02,  3.1439e+02,  8.1557e+02],\n          [ 7.1665e+02,  2.5629e+02,  8.4298e+02,  4.0160e+02],\n          [ 4.7036e+02,  2.9744e+02,  5.1162e+02,  3.8941e+02],\n          [ 5.7459e+02,  3.6899e+02,  6.8022e+02,  3.9062e+02],\n          [-1.7946e-01,  3.5152e+02,  4.8474e+01,  4.9633e+02],\n          [ 7.4111e+02,  1.1022e+03,  7.7271e+02,  1.1402e+03],\n          [ 7.1797e+02,  1.2153e+02,  9.5488e+02,  2.0340e+02],\n          [ 6.6594e+02,  1.1978e+03,  8.0158e+02,  1.2783e+03],\n          [ 5.0715e+02,  3.8645e+02,  6.7002e+02,  4.1483e+02],\n          [ 4.7147e+02,  3.8817e+02,  5.8598e+02,  4.1538e+02],\n          [ 7.0402e+02,  8.5427e+02,  9.5875e+02,  9.4564e+02],\n          [ 5.9653e+02,  2.4633e+02,  6.7358e+02,  3.8572e+02],\n          [ 7.5354e+02,  1.1418e+03,  8.3715e+02,  1.2626e+03],\n          [ 5.5475e+02,  1.0665e+03,  6.2582e+02,  1.1426e+03],\n          [ 8.9434e+02,  1.1260e+03,  9.5993e+02,  1.2288e+03],\n          [ 5.4238e+02,  3.0073e+02,  5.8088e+02,  3.4423e+02],\n          [ 2.2624e+02,  5.8841e+02,  4.5869e+02,  1.5534e+03],\n          [ 7.3856e+00,  8.5226e+02,  2.9402e+02,  9.4297e+02],\n          [ 5.6725e+02,  2.9518e+02,  6.1998e+02,  3.8170e+02],\n          [ 8.7589e+02,  6.6297e+02,  9.2702e+02,  7.1771e+02],\n          [ 7.8245e+02,  8.5805e+02,  9.6093e+02,  9.4616e+02],\n          [ 6.8153e+02,  8.6475e+02,  9.5740e+02,  9.4735e+02],\n          [ 7.8880e+02,  1.5691e+01,  8.3922e+02,  4.9492e+01],\n          [ 6.0934e+02,  3.5620e+02,  8.1543e+02,  4.0694e+02],\n          [ 7.0563e+02,  2.5933e+02,  7.6463e+02,  3.2948e+02],\n          [ 4.3971e+02,  8.7440e+02,  1.3491e+03,  1.6718e+03],\n          [ 5.3532e+02,  3.2163e+02,  5.7972e+02,  3.8141e+02],\n          [ 5.7291e+02,  1.1093e+03,  6.7722e+02,  1.2731e+03],\n          [ 8.5207e+02,  1.8280e+02,  9.6195e+02,  2.4336e+02],\n          [ 1.9446e+02,  8.8931e+02,  2.8334e+02,  9.3941e+02],\n          [ 2.8443e+02,  1.1862e+03,  3.9714e+02,  1.2774e+03],\n          [ 7.0251e+02,  1.1984e+03,  8.0035e+02,  1.2771e+03],\n          [ 5.8677e+02,  1.0741e+03,  6.3615e+02,  1.1441e+03],\n          [ 6.3576e+02,  2.3939e+02,  7.0466e+02,  3.4483e+02],\n          [ 7.1716e+02,  1.2478e+03,  7.9340e+02,  1.2787e+03],\n          [ 7.4763e+02,  1.1095e+03,  7.6297e+02,  1.1288e+03],\n          [ 7.0495e+02,  2.7158e+02,  7.4033e+02,  3.2471e+02],\n          [ 4.8756e+02,  2.1540e+02,  6.6859e+02,  2.6164e+02],\n          [ 7.7167e+02,  6.8096e+02,  8.3375e+02,  7.4444e+02],\n          [ 8.7495e+02,  6.4769e+02,  9.5068e+02,  7.0857e+02],\n          [ 6.8632e+02,  8.8790e+02,  8.3252e+02,  9.2216e+02],\n          [ 7.7111e+02,  9.0154e+02,  8.9993e+02,  9.3323e+02],\n          [ 3.5437e+02,  1.1929e+03,  4.3603e+02,  1.2787e+03],\n          [ 7.3863e+02,  8.9676e+02,  8.5553e+02,  9.5241e+02],\n          [ 5.7965e+02,  1.1198e+03,  6.7414e+02,  1.2746e+03],\n          [-3.3766e-01,  4.4367e+02,  4.3007e+01,  5.3567e+02],\n          [ 8.3095e+02,  8.6167e+02,  9.5656e+02,  9.3178e+02],\n          [ 8.1176e+02,  3.7788e+02,  8.6068e+02,  4.3659e+02],\n          [ 4.0108e+02,  8.6327e+02,  6.7953e+02,  9.2438e+02],\n          [ 7.9203e+02,  7.7519e+02,  9.6118e+02,  9.3436e+02],\n          [ 3.6319e+00,  4.7697e+02,  7.5515e+01,  5.7260e+02]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\nPerfect!\nThis looks like something we can use.\nLet‚Äôs break down each of the keys in random_sample_outputs_post_processed.\nWe get three equal length tensors:",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#get-modules",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#get-modules",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "2 Get Modules",
    "text": "2 Get Modules\n\nTK - add getting setup note (e.g.¬†for torchmetrics + pycocotools + other dependencies)\nTK - add link to getting setup\n\n\nimport torch\nimport datasets\nimport transformers\nimport torchvision\nimport numpy as np\n\n# TK - Required for evaluation\n# Can install with !pip install torchmetrics[detection]\nimport torchmetrics\nimport pycocotools\n\nprint(transformers.__version__)\nprint(torch.__version__)\nprint(torchvision.__version__)\nprint(torchmetrics.__version__)\n\n4.47.0\n2.6.0+cu124\n0.21.0+cu124\n1.4.1",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#load-data",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#load-data",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "3 Load Data",
    "text": "3 Load Data\nGet help with a function by typing the function and then a question mark.\nE.g. load_dataset?\n\nfrom datasets import load_dataset\n\n# TK - information for loading the dataset\n# load_dataset?\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\n\n# Split the data\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.6, seed=42) # split the test set into 40/60 validation/test\n\n# Create splits\ndataset[\"train\"] = dataset_split[\"train\"]\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\ndataset\n\n[INFO] Length of original dataset: 1128\n\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 135\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 204\n    })\n})\n\n\n\n# Get the categories from the dataset\n# Note: this requires the dataset to have been uploaded with this feature setup\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\n\n# Can also get the features\ndataset[\"train\"].features\n\n{'image': Image(mode=None, decode=True, id=None),\n 'image_id': Value(dtype='int64', id=None),\n 'annotations': Sequence(feature={'file_name': Value(dtype='string', id=None), 'image_id': Value(dtype='int64', id=None), 'category_id': ClassLabel(names=['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm'], id=None), 'bbox': Sequence(feature=Value(dtype='float32', id=None), length=4, id=None), 'iscrowd': Value(dtype='int64', id=None), 'area': Value(dtype='float32', id=None)}, length=-1, id=None),\n 'label_source': Value(dtype='string', id=None),\n 'image_source': Value(dtype='string', id=None)}\n\n\n\n# Boxes come in format: [x, y, w, h] -&gt; [top left corner x, top left corner y, width, height]\n# Where x, y is top left corner of the box and w=width, h=height of the box\ndataset[\"train\"][0]\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 69,\n 'annotations': {'file_name': ['c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n   'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg'],\n  'image_id': [69, 69, 69, 69, 69, 69, 69, 69],\n  'category_id': [5, 0, 1, 4, 4, 4, 4, 4],\n  'bbox': [[360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n   [298.29998779296875,\n    495.1000061035156,\n    381.1000061035156,\n    505.70001220703125],\n   [81.5999984741211,\n    592.0999755859375,\n    358.79998779296875,\n    316.29998779296875],\n   [1.2999999523162842,\n    776.7000122070312,\n    193.8000030517578,\n    211.89999389648438],\n   [301.1000061035156, 60.79999923706055, 146.89999389648438, 115.0],\n   [501.0, 75.9000015258789, 24.200000762939453, 71.19999694824219],\n   [546.4000244140625,\n    54.70000076293945,\n    130.3000030517578,\n    115.0999984741211],\n   [862.9000244140625,\n    41.099998474121094,\n    75.69999694824219,\n    80.19999694824219]],\n  'iscrowd': [0, 0, 0, 0, 0, 0, 0, 0],\n  'area': [46390.9609375,\n   192722.265625,\n   113488.4375,\n   41066.21875,\n   16893.5,\n   1723.0400390625,\n   14997.5302734375,\n   6071.14013671875]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n\nTK - add image of box coordinates drawn on\nTK - make blog post of different box levels\nTK - see bounding box demo tool - https://huggingface.co/spaces/mrdbourke/bounding-box-demo\nTK - see guide to different bounding box formats - https://www.learnml.io/posts/a-guide-to-bounding-box-formats/\n\n\n3.1 Create id2label mapping\n\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nid2label, label2id\n\n({0: 'bin',\n  1: 'hand',\n  2: 'not_bin',\n  3: 'not_hand',\n  4: 'not_trash',\n  5: 'trash',\n  6: 'trash_arm'},\n {'bin': 0,\n  'hand': 1,\n  'not_bin': 2,\n  'not_hand': 3,\n  'not_trash': 4,\n  'trash': 5,\n  'trash_arm': 6})\n\n\n\n# Make colour dict\n# \"label_name\" -&gt; colour\ncolour_palette = {\n    'bin': (0, 0, 224),         # Bright Blue (High contrast with greenery)\n    'not_bin': (135, 206, 250), # Light Blue (Lighter for distinction)\n\n    'hand': (148, 0, 211),      # Dark Purple (Contrasts well with skin tones)\n    'not_hand': (218, 112, 214),# Lighter Purple (Soft but visible)\n\n    'trash': (0, 255, 0),       # Bright Green (Common for trash-related items)\n    'not_trash': (144, 238, 144), # Light Green (Still visible but distinct)\n\n    'trash_arm': (255, 140, 0), # Deep Orange (Highly visible)\n}\n\n\n\n3.2 Box conversion methods\nTK - add guide for different bounding boxes (e.g.¬†a table with examples)\n‚Äì\n\nTK - add reference here for different types of box formats:\n\n‚Äòxyxy‚Äô: boxes are represented via corners, x1, y1 being top left and x2, y2 being bottom right. This is the format that torchvision utilities expect.\n\nThis is format that PASCAL VOC dataset comes in: http://host.robots.ox.ac.uk/pascal/VOC/voc2012/htmldoc/devkit_doc.html#SECTION00053000000000000000 (see section 4.3)\n\n‚Äòxywh‚Äô: boxes are represented via corner, width and height, x1, y2 being top left, w, h being width and height - matplotlib expects these boxes? (not 100% on this)\n\nCOCO (Common Objects in Context) uses this format, see: https://cocodataset.org/#format-data\n\n‚Äòcxcywh‚Äô: boxes are represented via centre, width and height, cx, cy being center of box, w, h being width and height - createml expects these boxes\n\nYOLO format: normalized version of this style (see section 2 of this paper: https://arxiv.org/abs/1506.02640)\n\nSee guide on different kinds of boxes - https://albumentations.ai/docs/getting_started/bounding_boxes_augmentation/\n\nTK - methods for converting boxes:\n\npost_process_object_detection - https://huggingface.co/docs/transformers/v4.44.0/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.post_process_object_detection\ntorchvision.ops.box_convert\n\n\nTK - see docs for torchvision.utils.draw_bounding_boxes - https://pytorch.org/vision/main/generated/torchvision.utils.draw_bounding_boxes.html\n\n# Plot a single image\nimport random\n\nimport torch\n\nfrom torchvision.ops import box_convert\nfrom torchvision.utils import draw_bounding_boxes\n\nfrom torchvision.transforms.functional import pil_to_tensor, to_pil_image \n\nfrom PIL import ImageFont\n\nrandom_index = random.randint(0, len(dataset[\"train\"]))\nprint(f\"[INFO] Showing training sample from index: {random_index}\")\nrandom_sample = dataset[\"train\"][random_index]\n\n# Get box coordinates\nboxes_xywh = torch.tensor(random_sample[\"annotations\"][\"bbox\"])\nprint(f\"Boxes in XYWH format: {boxes_xywh}\")\n\n# Convert boxes from XYWH -&gt; XYXY \n# torchvision.utils.draw_bounding_boxes requires input boxes in XYXY format (X_min, y_min, X_max, y_max)\nboxes_xyxy = box_convert(boxes=boxes_xywh,\n                         in_fmt=\"xywh\",\n                         out_fmt=\"xyxy\")\nprint(f\"Boxes XYXY: {boxes_xyxy}\")\n\n# Get label names of target boxes and colours to match\nrandom_sample_label_names = [categories.int2str(x) for x in random_sample[\"annotations\"][\"category_id\"]]\nrandom_sample_colours = [colour_palette[label_name] for label_name in random_sample_label_names]\nprint(f\"Label names: {random_sample_label_names}\")\nprint(f\"Colour names: {random_sample_colours}\")\n\n# Draw the image as a tensor and then turn it into a PIL image\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=random_sample[\"image\"]),\n        boxes=boxes_xyxy,\n        colors=random_sample_colours,\n        labels=random_sample_label_names,\n        width=3,\n        # font=font_filename,\n        font_size=30,\n        label_colors=random_sample_colours\n    )\n)\n\n[INFO] Showing training sample from index: 358\nBoxes in XYWH format: tensor([[ 480.0000,  643.7000,  126.0000,  144.3000],\n        [ 419.3000,  743.9000,  368.6000,  461.1000],\n        [ 611.9000, 1147.1000,  260.9000,  127.8000],\n        [  81.5000,  371.1000,  666.6000,  598.4000]])\nBoxes XYXY: tensor([[ 480.0000,  643.7000,  606.0000,  788.0000],\n        [ 419.3000,  743.9000,  787.9000, 1205.0000],\n        [ 611.9000, 1147.1000,  872.8000, 1274.9000],\n        [  81.5000,  371.1000,  748.1000,  969.5000]])\nLabel names: ['trash', 'hand', 'not_trash', 'bin']\nColour names: [(0, 255, 0), (148, 0, 211), (144, 238, 144), (0, 0, 224)]\nPillow/Tests/fonts/NotoSansSymbols-Regular.ttf\n\n\n\n\n\n\n\n\n\n\nrandom_sample_label_names\n\n['trash', 'hand', 'bin', 'bin', 'not_trash']\n\n\n\n# TK - functionize the plotting of boxes and image so we can do input/output with tensors + data augmentations on that (E.g. original: image, augmented: image)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#setup-model",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#setup-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "6 Setup model",
    "text": "6 Setup model\nUPTOHERE - going through different places to get models\nWant to get a model running to start with so we can test it out and see how it goes.\n\nTK - places to get object detection models\nTK - paperswithcode/object detection\nTK - torchvision pretrained models\nTK - Hugging Face Transformers\nTK - mmdetect framework\nTK - detectron2\nTK - YOLO series (various resources such as Ultralytics etc, beware of licencing issues)\n\n\nfrom transformers import AutoModelForObjectDetection, AutoImageProcessor\n\n# Model config - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig \n# Model docs - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel \nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n\n# Set image size\nIMAGE_SIZE = 640 # other common image sizes include: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Get the image processor (this is required for prepraring images)\n# See docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height)\n    size={\"shortest_edge\": IMAGE_SIZE, \"longest_edge\": IMAGE_SIZE}\n)\n\n# Check out the image processor\nimage_processor\n\nConditionalDetrImageProcessor {\n  \"do_convert_annotations\": true,\n  \"do_normalize\": true,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"ConditionalDetrImageProcessor\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"size\": {\n    \"longest_edge\": 640,\n    \"shortest_edge\": 640\n  }\n}\n\n\n\n# View the docstring of our image_processor.preprocess function\nimage_processor.preprocess?\n\nSignature:\nimage_processor.preprocess(\n    images: Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), List[ForwardRef('PIL.Image.Image')], List[numpy.ndarray], List[ForwardRef('torch.Tensor')]],\n    annotations: Union[Dict[str, Union[int, str, List[Dict]]], List[Dict[str, Union[int, str, List[Dict]]]], NoneType] = None,\n    return_segmentation_masks: bool = None,\n    masks_path: Union[str, pathlib.Path, NoneType] = None,\n    do_resize: Optional[bool] = None,\n    size: Optional[Dict[str, int]] = None,\n    resample=None,\n    do_rescale: Optional[bool] = None,\n    rescale_factor: Union[int, float, NoneType] = None,\n    do_normalize: Optional[bool] = None,\n    do_convert_annotations: Optional[bool] = None,\n    image_mean: Union[float, List[float], NoneType] = None,\n    image_std: Union[float, List[float], NoneType] = None,\n    do_pad: Optional[bool] = None,\n    format: Union[str, transformers.image_utils.AnnotationFormat, NoneType] = None,\n    return_tensors: Union[str, transformers.utils.generic.TensorType, NoneType] = None,\n    data_format: Union[str, transformers.image_utils.ChannelDimension] = &lt;ChannelDimension.FIRST: 'channels_first'&gt;,\n    input_data_format: Union[transformers.image_utils.ChannelDimension, str, NoneType] = None,\n    pad_size: Optional[Dict[str, int]] = None,\n    **kwargs,\n) -&gt; transformers.feature_extraction_utils.BatchFeature\nDocstring:\nPreprocess an image or a batch of images so that it can be used by the model.\n\nArgs:\n    images (`ImageInput`):\n        Image or batch of images to preprocess. Expects a single or batch of images with pixel values ranging\n        from 0 to 255. If passing in images with pixel values between 0 and 1, set `do_rescale=False`.\n    annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n        List of annotations associated with the image or batch of images. If annotation is for object\n        detection, the annotations should be a dictionary with the following keys:\n        - \"image_id\" (`int`): The image id.\n        - \"annotations\" (`List[Dict]`): List of annotations for an image. Each annotation should be a\n          dictionary. An image can have no annotations, in which case the list should be empty.\n        If annotation is for segmentation, the annotations should be a dictionary with the following keys:\n        - \"image_id\" (`int`): The image id.\n        - \"segments_info\" (`List[Dict]`): List of segments for an image. Each segment should be a dictionary.\n          An image can have no segments, in which case the list should be empty.\n        - \"file_name\" (`str`): The file name of the image.\n    return_segmentation_masks (`bool`, *optional*, defaults to self.return_segmentation_masks):\n        Whether to return segmentation masks.\n    masks_path (`str` or `pathlib.Path`, *optional*):\n        Path to the directory containing the segmentation masks.\n    do_resize (`bool`, *optional*, defaults to self.do_resize):\n        Whether to resize the image.\n    size (`Dict[str, int]`, *optional*, defaults to self.size):\n        Size of the image's `(height, width)` dimensions after resizing. Available options are:\n            - `{\"height\": int, \"width\": int}`: The image will be resized to the exact size `(height, width)`.\n                Do NOT keep the aspect ratio.\n            - `{\"shortest_edge\": int, \"longest_edge\": int}`: The image will be resized to a maximum size respecting\n                the aspect ratio and keeping the shortest edge less or equal to `shortest_edge` and the longest edge\n                less or equal to `longest_edge`.\n            - `{\"max_height\": int, \"max_width\": int}`: The image will be resized to the maximum size respecting the\n                aspect ratio and keeping the height less or equal to `max_height` and the width less or equal to\n                `max_width`.\n    resample (`PILImageResampling`, *optional*, defaults to self.resample):\n        Resampling filter to use when resizing the image.\n    do_rescale (`bool`, *optional*, defaults to self.do_rescale):\n        Whether to rescale the image.\n    rescale_factor (`float`, *optional*, defaults to self.rescale_factor):\n        Rescale factor to use when rescaling the image.\n    do_normalize (`bool`, *optional*, defaults to self.do_normalize):\n        Whether to normalize the image.\n    do_convert_annotations (`bool`, *optional*, defaults to self.do_convert_annotations):\n        Whether to convert the annotations to the format expected by the model. Converts the bounding\n        boxes from the format `(top_left_x, top_left_y, width, height)` to `(center_x, center_y, width, height)`\n        and in relative coordinates.\n    image_mean (`float` or `List[float]`, *optional*, defaults to self.image_mean):\n        Mean to use when normalizing the image.\n    image_std (`float` or `List[float]`, *optional*, defaults to self.image_std):\n        Standard deviation to use when normalizing the image.\n    do_pad (`bool`, *optional*, defaults to self.do_pad):\n        Whether to pad the image. If `True`, padding will be applied to the bottom and right of\n        the image with zeros. If `pad_size` is provided, the image will be padded to the specified\n        dimensions. Otherwise, the image will be padded to the maximum height and width of the batch.\n    format (`str` or `AnnotationFormat`, *optional*, defaults to self.format):\n        Format of the annotations.\n    return_tensors (`str` or `TensorType`, *optional*, defaults to self.return_tensors):\n        Type of tensors to return. If `None`, will return the list of images.\n    data_format (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`):\n        The channel dimension format for the output image. Can be one of:\n        - `\"channels_first\"` or `ChannelDimension.FIRST`: image in (num_channels, height, width) format.\n        - `\"channels_last\"` or `ChannelDimension.LAST`: image in (height, width, num_channels) format.\n        - Unset: Use the channel dimension format of the input image.\n    input_data_format (`ChannelDimension` or `str`, *optional*):\n        The channel dimension format for the input image. If unset, the channel dimension format is inferred\n        from the input image. Can be one of:\n        - `\"channels_first\"` or `ChannelDimension.FIRST`: image in (num_channels, height, width) format.\n        - `\"channels_last\"` or `ChannelDimension.LAST`: image in (height, width, num_channels) format.\n        - `\"none\"` or `ChannelDimension.NONE`: image in (height, width) format.\n    pad_size (`Dict[str, int]`, *optional*):\n        The size `{\"height\": int, \"width\" int}` to pad the images to. Must be larger than any image size\n        provided for preprocessing. If `pad_size` is not provided, images will be padded to the largest\n        height and width in the batch.\nFile:      ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/image_processing_conditional_detr.py\nType:      method\n\n\n\n# Try to preprocess this and it will error\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample[\"annotations\"])\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[14], line 2\n      1 # Try to preprocess this and it will error\n----&gt; 2 random_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n      3                                                         annotations=random_sample[\"annotations\"])\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/image_processing_conditional_detr.py:1422, in ConditionalDetrImageProcessor.preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, resample, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, format, return_tensors, data_format, input_data_format, pad_size, **kwargs)\n   1420 format = AnnotationFormat(format)\n   1421 if annotations is not None:\n-&gt; 1422     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n   1424 if (\n   1425     masks_path is not None\n   1426     and format == AnnotationFormat.COCO_PANOPTIC\n   1427     and not isinstance(masks_path, (pathlib.Path, str))\n   1428 ):\n   1429     raise ValueError(\n   1430         \"The path to the directory containing the mask PNG files should be provided as a\"\n   1431         f\" `pathlib.Path` or string object, but is {type(masks_path)} instead.\"\n   1432     )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:791, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    789 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    790     if not valid_coco_detection_annotations(annotations):\n--&gt; 791         raise ValueError(\n    792             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    793             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    794             \"being a list of annotations in the COCO format.\"\n    795         )\n    797 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    798     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nTK - error preprocessing annotations when they aren‚Äôt in COCO format\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nBut we can preprocess our image as a standalone object if we like.\n\n# Preprocess our target sample with the default preprocessing \nrandom_sample_preprocessed_image_only = image_processor.preprocess(images=random_sample[\"image\"])\n\n# The pixel_values key contains our processed image \nrandom_sample_preprocessed_image_only[\"pixel_values\"][0].shape\n\n(3, 640, 480)\n\n\n\nrandom_sample[\"annotations\"]\n\n{'file_name': ['3e85a851-513d-40b8-8b16-240b365132d8.jpeg',\n  '3e85a851-513d-40b8-8b16-240b365132d8.jpeg',\n  '3e85a851-513d-40b8-8b16-240b365132d8.jpeg',\n  '3e85a851-513d-40b8-8b16-240b365132d8.jpeg'],\n 'image_id': [384, 384, 384, 384],\n 'category_id': [5, 1, 0, 0],\n 'bbox': [[452.70001220703125,\n   485.3999938964844,\n   265.29998779296875,\n   174.1999969482422],\n  [625.5, 459.5, 180.1999969482422, 238.10000610351562],\n  [221.3000030517578, 371.8999938964844, 447.8999938964844, 496.3999938964844],\n  [7.699999809265137, 328.0, 301.3999938964844, 440.5]],\n 'iscrowd': [0, 0, 0, 0],\n 'area': [46215.26171875, 42905.62109375, 222337.5625, 132766.703125]}\n\n\n\n6.1 TK Preprocessing our annotations in COCO format\nOur image_processor expects annotations in COCO format.\nTK - See this requirement in the annotations parameter in the preprocess method docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess\nMore specifically, it expects the format:\n{\n    \"image_id\": int,\n    \"annotations\": List[Dict] # each annotation is in its own dictionary formatted in COCO style\n}\nTK - See link to COCO format: https://cocodataset.org/#format-data\nCOCO format:\n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict)\n    ...]\n}]\nWhere:\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\n\nOur annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n6.2 TK - Creating a function to format our annotations\nLet‚Äôs write a function to transform our existing annotation data into the format required by image_processor.\n\n# First create a couple of dataclasses to store our data format\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n@dataclass\nclass SingleCOCOAnnotation:\n    \"An instance of a single COCO annotation. See COCO format: https://cocodataset.org/#format-data\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in format [x_top_left, y_top_left, width, height]\n    area: float = 0.0\n    iscrowd: int = 0\n\n@dataclass\nclass ImageCOCOAnnotations:\n    \"A collection of COCO annotations for a given image_id.\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in format \n) -&gt; dict:\n    # Turn input lists into a list of dicts\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # Return dictionary of annotations with format {\"image_id\": ..., \"annotations\": ...}\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\n# Let's try it out\nimage_id = 0\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 0,\n 'annotations': [{'image_id': 0,\n   'category_id': 5,\n   'bbox': [452.70001220703125,\n    485.3999938964844,\n    265.29998779296875,\n    174.1999969482422],\n   'area': 46215.26171875,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 1,\n   'bbox': [625.5, 459.5, 180.1999969482422, 238.10000610351562],\n   'area': 42905.62109375,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [221.3000030517578,\n    371.8999938964844,\n    447.8999938964844,\n    496.3999938964844],\n   'area': 222337.5625,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [7.699999809265137, 328.0, 301.3999938964844, 440.5],\n   'area': 132766.703125,\n   'iscrowd': 0}]}\n\n\n\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:      An instance of a single COCO annotation. See COCO format: https://cocodataset.org/#format-data\nType:           type\nSubclasses:     \n\n\n\nImageCOCOAnnotations?\n\nInit signature:\nImageCOCOAnnotations(\n    image_id: int,\n    annotations: List[__main__.SingleCOCOAnnotation],\n) -&gt; None\nDocstring:      A collection of COCO annotations for a given image_id.\nType:           type\nSubclasses:     \n\n\n\n\n6.3 TK - Preprocess annotations and image\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with image_processor.preprocess.\n\n# Preprocess random sample image and assosciated annotations\n# See docs for preprocess: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess \nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        return_tensors=\"pt\") # can return as tensors or not \n\nTK - Note: You may see a warning of\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this.\n\n# Disable warnings about `max_size` parameter being deprecated (this is okay)\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'pixel_mask', 'labels'])\n\n\nTK - break down each of the above\n\npixel_values = preprocessed pixels (the preprocessed image)\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask)\nlabels = preprocessed labels (the preprocessed annotations)\n\n\nrandom_sample_preprocessed[\"pixel_values\"]\n\ntensor([[[[-2.0665, -2.1008, -2.0665,  ...,  1.5125,  1.5125,  1.5125],\n          [-2.0665, -2.0837, -2.0494,  ...,  1.5125,  1.4954,  1.4954],\n          [-2.0837, -2.1008, -2.0323,  ...,  1.4783,  1.4783,  1.4783],\n          ...,\n          [ 0.0569,  0.3481,  0.2624,  ..., -0.4054,  0.1939,  0.6906],\n          [ 0.1083,  0.1597,  0.1597,  ...,  0.2111,  0.6221,  0.2796],\n          [ 0.0912,  0.2282,  0.1426,  ...,  0.1426,  0.6563, -0.0801]],\n\n         [[-1.8957, -1.9307, -1.8957,  ...,  1.9559,  1.9559,  1.9559],\n          [-1.8957, -1.9307, -1.8782,  ...,  1.9559,  1.9384,  1.9384],\n          [-1.9307, -1.9307, -1.8606,  ...,  1.9209,  1.9209,  1.9209],\n          ...,\n          [-0.2675,  0.1001,  0.0826,  ..., -0.4951,  0.1176,  0.6429],\n          [-0.1450, -0.0399,  0.0126,  ...,  0.1001,  0.5203,  0.1702],\n          [-0.0924,  0.0651,  0.0126,  ..., -0.0049,  0.5203, -0.2500]],\n\n         [[-1.7522, -1.8044, -1.7870,  ...,  2.4308,  2.4308,  2.4308],\n          [-1.7522, -1.7870, -1.7522,  ...,  2.4308,  2.4134,  2.4134],\n          [-1.7870, -1.7870, -1.7522,  ...,  2.3960,  2.3960,  2.3960],\n          ...,\n          [-0.8458, -0.6193, -0.8110,  ..., -0.8110, -0.2358,  0.1999],\n          [-0.7936, -0.7936, -0.8981,  ..., -0.2358,  0.1476, -0.2707],\n          [-0.7413, -0.6715, -0.8981,  ..., -0.2881,  0.1476, -0.6715]]]])\n\n\n\nrandom_sample_preprocessed[\"pixel_values\"][0].shape\n\ntorch.Size([3, 640, 480])\n\n\n\n# What keys are in the labels?\nrandom_sample_preprocessed[\"labels\"][0].keys()\n\ndict_keys(['size', 'image_id', 'class_labels', 'boxes', 'area', 'iscrowd', 'orig_size'])\n\n\nTK - break it down what‚Äôs in the labels\n\nsize = image size in format [height, width]\nimage_id = ID of image passed in\nclass_labels = list of labels assosciated with image e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; {0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}\nboxes = list of boxes with coordinates for where the box is on the image in format CXCYWH (normalized)\n\n\nrandom_sample_preprocessed[\"labels\"][0]\n\n{'size': tensor([640, 480]), 'image_id': tensor([0]), 'class_labels': tensor([5, 1, 0, 0]), 'boxes': tensor([[0.6097, 0.4473, 0.2764, 0.1361],\n        [0.7454, 0.4520, 0.1877, 0.1860],\n        [0.4638, 0.4845, 0.4666, 0.3878],\n        [0.1650, 0.4283, 0.3140, 0.3441]]), 'area': tensor([11553.8154, 10726.4053, 55584.3906, 33191.6758]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}\n\n\n\nrandom_sample_preprocessed[\"pixel_mask\"][0].shape\n\ntorch.Size([640, 480])\n\n\n\nid2label\n\n{0: 'bin',\n 1: 'hand',\n 2: 'not_bin',\n 3: 'not_hand',\n 4: 'not_trash',\n 5: 'trash',\n 6: 'trash_arm'}\n\n\n\n# Setup the model\ndef create_model():\n    model = AutoModelForObjectDetection.from_pretrained(\n        pretrained_model_name_or_path=MODEL_NAME,\n        label2id=label2id,\n        id2label=id2label,\n        ignore_mismatched_sizes=True,\n        backbone=\"resnet50\"\n    )\n    return model\n\nmodel = create_model()\nmodel\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\nNote: This may output some information about the model not being prepared for a custom dataset due to it originally being prepared for a certain number of classes (e.g.¬†the model can only recognize what it was trained on). We‚Äôve initialized it with an output head to have 4\n\n\nmodel.forward?\n\nSignature:\nmodel.forward(\n    pixel_values: torch.FloatTensor,\n    pixel_mask: Optional[torch.LongTensor] = None,\n    decoder_attention_mask: Optional[torch.LongTensor] = None,\n    encoder_outputs: Optional[torch.FloatTensor] = None,\n    inputs_embeds: Optional[torch.FloatTensor] = None,\n    decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n    labels: Optional[List[dict]] = None,\n    output_attentions: Optional[bool] = None,\n    output_hidden_states: Optional[bool] = None,\n    return_dict: Optional[bool] = None,\n) -&gt; Union[Tuple[torch.FloatTensor], transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput]\nDocstring:\nThe [`ConditionalDetrForObjectDetection`] forward method, overrides the `__call__` special method.\n\n&lt;Tip&gt;\n\nAlthough the recipe for forward pass needs to be defined within this function, one should call the [`Module`]\ninstance afterwards instead of this since the former takes care of running the pre and post processing steps while\nthe latter silently ignores them.\n\n&lt;/Tip&gt;\n\nArgs:\n    pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)`):\n        Pixel values. Padding will be ignored by default should you provide it.\n\n        Pixel values can be obtained using [`AutoImageProcessor`]. See [`ConditionalDetrImageProcessor.__call__`]\n        for details.\n\n    pixel_mask (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*):\n        Mask to avoid performing attention on padding pixel values. Mask values selected in `[0, 1]`:\n\n        - 1 for pixels that are real (i.e. **not masked**),\n        - 0 for pixels that are padding (i.e. **masked**).\n\n        [What are attention masks?](../glossary#attention-mask)\n\n    decoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, num_queries)`, *optional*):\n        Not used by default. Can be used to mask object queries.\n    encoder_outputs (`tuple(tuple(torch.FloatTensor)`, *optional*):\n        Tuple consists of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)\n        `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) is a sequence of\n        hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.\n    inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you\n        can choose to directly pass a flattened representation of an image.\n    decoder_inputs_embeds (`torch.FloatTensor` of shape `(batch_size, num_queries, hidden_size)`, *optional*):\n        Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an\n        embedded representation.\n    output_attentions (`bool`, *optional*):\n        Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n        tensors for more detail.\n    output_hidden_states (`bool`, *optional*):\n        Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n        more detail.\n    return_dict (`bool`, *optional*):\n        Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\n    labels (`List[Dict]` of len `(batch_size,)`, *optional*):\n        Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the\n        following 2 keys: 'class_labels' and 'boxes' (the class labels and bounding boxes of an image in the batch\n        respectively). The class labels themselves should be a `torch.LongTensor` of len `(number of bounding boxes\n        in the image,)` and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image, 4)`.\n\n\n    Returns:\n        [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or `tuple(torch.FloatTensor)`: A [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or a tuple of\n        `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`) comprising various\n        elements depending on the configuration ([`ConditionalDetrConfig`]) and inputs.\n\n        - **loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` are provided)) -- Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a\n          bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized\n          scale-invariant IoU loss.\n        - **loss_dict** (`Dict`, *optional*) -- A dictionary containing the individual losses. Useful for logging.\n        - **logits** (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes + 1)`) -- Classification logits (including no-object) for all queries.\n        - **pred_boxes** (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`) -- Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These\n          values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding\n          possible padding). You can use [`~ConditionalDetrImageProcessor.post_process_object_detection`] to retrieve the\n          unnormalized bounding boxes.\n        - **auxiliary_outputs** (`list[Dict]`, *optional*) -- Optional, only returned when auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)\n          and labels are provided. It is a list of dictionaries containing the two above keys (`logits` and\n          `pred_boxes`) for each decoder layer.\n        - **last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the decoder of the model.\n        - **decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the decoder at the output of each\n          layer plus the initial embedding outputs.\n        - **decoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n        - **cross_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder's cross-attention layer, after the attention softmax,\n          used to compute the weighted average in the cross-attention heads.\n        - **encoder_last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the encoder of the model.\n        - **encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the encoder at the output of each\n          layer plus the initial embedding outputs.\n        - **encoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the encoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n  \n\n    Examples:\n\n    ```python\n    &gt;&gt;&gt; from transformers import AutoImageProcessor, AutoModelForObjectDetection\n    &gt;&gt;&gt; from PIL import Image\n    &gt;&gt;&gt; import requests\n\n    &gt;&gt;&gt; url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n    &gt;&gt;&gt; image = Image.open(requests.get(url, stream=True).raw)\n\n    &gt;&gt;&gt; image_processor = AutoImageProcessor.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n    &gt;&gt;&gt; model = AutoModelForObjectDetection.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n\n    &gt;&gt;&gt; inputs = image_processor(images=image, return_tensors=\"pt\")\n\n    &gt;&gt;&gt; outputs = model(**inputs)\n\n    &gt;&gt;&gt; # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n    &gt;&gt;&gt; target_sizes = torch.tensor([image.size[::-1]])\n    &gt;&gt;&gt; results = image_processor.post_process_object_detection(outputs, threshold=0.5, target_sizes=target_sizes)[\n    ...     0\n    ... ]\n    &gt;&gt;&gt; for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n    ...     box = [round(i, 2) for i in box.tolist()]\n    ...     print(\n    ...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n    ...         f\"{round(score.item(), 3)} at location {box}\"\n    ...     )\n    Detected remote with confidence 0.833 at location [38.31, 72.1, 177.63, 118.45]\n    Detected cat with confidence 0.831 at location [9.2, 51.38, 321.13, 469.0]\n    Detected cat with confidence 0.804 at location [340.3, 16.85, 642.93, 370.95]\n    Detected remote with confidence 0.683 at location [334.48, 73.49, 366.37, 190.01]\n    Detected couch with confidence 0.535 at location [0.52, 1.19, 640.35, 475.1]\n    ```\nFile:      ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py\nType:      method\n\n\n\nrandom_sample_preprocessed[\"pixel_values\"][0].shape # [color_channels, height, width]\n\ntorch.Size([3, 640, 480])\n\n\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample_preprocessed[\"pixel_values\"][0].unsqueeze(0), # model expects input [batch_size, color_channels, height, width]\n                              pixel_mask=None)\nrandom_sample_outputs\n\nConditionalDetrObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[ 0.0454, -0.0711, -0.4182,  ...,  0.2894,  0.0483,  0.0123],\n         [-0.1012, -0.1597, -0.1998,  ..., -0.0486, -0.1782, -0.2652],\n         [ 0.1434,  0.0662, -0.1789,  ...,  0.0542, -0.0454, -0.0935],\n         ...,\n         [-0.3237, -0.4062, -0.1989,  ...,  0.2875, -0.0910,  0.2941],\n         [ 0.1114, -0.0177, -0.3141,  ..., -0.0593, -0.1495, -0.1393],\n         [-0.1669, -0.1889,  0.1891,  ...,  0.1096, -0.2838, -0.0589]]],\n       grad_fn=&lt;ViewBackward0&gt;), pred_boxes=tensor([[[0.8267, 0.6865, 0.3329, 0.6065],\n         [0.6527, 0.1801, 0.0381, 0.0135],\n         [0.8987, 0.5712, 0.2006, 0.2254],\n         ...,\n         [0.3474, 0.3090, 0.6915, 0.1174],\n         [0.8373, 0.5285, 0.3022, 0.1941],\n         [0.0810, 0.2927, 0.1605, 0.0432]]], grad_fn=&lt;SigmoidBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 0.2234,  0.0444,  0.9698,  ..., -1.0443, -0.1137,  0.3582],\n         [ 0.2838, -0.6804,  0.3960,  ...,  0.7212,  0.3551,  0.3658],\n         [ 0.5051, -0.0147,  0.5885,  ..., -1.2090, -0.0941, -0.0717],\n         ...,\n         [ 0.4280, -1.5612,  0.3054,  ..., -0.8336,  0.0790, -0.3486],\n         [ 0.2858, -0.0132,  0.5693,  ..., -1.1525, -0.1821, -0.1940],\n         [ 0.2017,  0.1479, -0.3311,  ..., -1.1814, -0.0651, -0.0979]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=tensor([[[-0.3918,  0.4741, -0.3829,  ..., -0.5659,  0.4583,  0.3095],\n         [ 0.1083,  0.5762, -0.0826,  ...,  0.2379,  0.1619,  0.3629],\n         [ 0.1359,  0.6453, -0.1079,  ..., -0.1028,  0.1878,  0.3184],\n         ...,\n         [ 0.1694,  0.8391, -0.1381,  ...,  0.1942,  0.0713,  0.2323],\n         [ 0.1709,  0.6931, -0.0919,  ...,  0.2428,  0.0508,  0.1932],\n         [-0.1842,  0.4742, -0.1434,  ..., -0.1434,  0.2518,  0.2516]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), encoder_hidden_states=None, encoder_attentions=None)\n\n\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'encoder_last_hidden_state'])\n\n\n\n# We get 300 total boxes with shape the same as our number of labels\nrandom_sample_outputs.logits.shape\n\ntorch.Size([1, 300, 7])\n\n\n\nrandom_sample_outputs.pred_boxes.shape\n\ntorch.Size([1, 300, 4])\n\n\nTK - note: see forward() method for output format of boxes -&gt; https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\nFrom the docs:\n\nReturns ‚Ä¶ pred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\n\n# Example pred box output\n# Box output comes in the form CXCYWH normalized (e.g. [center_X, center_Y, width, height]) to be between 0 and 1, this is in the docs\nrandom_sample_outputs.pred_boxes[:, 0]\n\ntensor([[0.8267, 0.6865, 0.3329, 0.6065]], grad_fn=&lt;SelectBackward0&gt;)\n\n\n\n# Model outputs one logit per category value (e.g. 6 categories = 6 logits)\nlen(categories.names)\n\n7\n\n\n\n# For example, one value for each of the following:\nlabel2id\n\n{'bin': 0,\n 'hand': 1,\n 'not_bin': 2,\n 'not_hand': 3,\n 'not_trash': 4,\n 'trash': 5,\n 'trash_arm': 6}\n\n\n\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 384,\n 'annotations': {'file_name': ['3e85a851-513d-40b8-8b16-240b365132d8.jpeg',\n   '3e85a851-513d-40b8-8b16-240b365132d8.jpeg',\n   '3e85a851-513d-40b8-8b16-240b365132d8.jpeg',\n   '3e85a851-513d-40b8-8b16-240b365132d8.jpeg'],\n  'image_id': [384, 384, 384, 384],\n  'category_id': [5, 1, 0, 0],\n  'bbox': [[452.70001220703125,\n    485.3999938964844,\n    265.29998779296875,\n    174.1999969482422],\n   [625.5, 459.5, 180.1999969482422, 238.10000610351562],\n   [221.3000030517578,\n    371.8999938964844,\n    447.8999938964844,\n    496.3999938964844],\n   [7.699999809265137, 328.0, 301.3999938964844, 440.5]],\n  'iscrowd': [0, 0, 0, 0],\n  'area': [46215.26171875, 42905.62109375, 222337.5625, 132766.703125]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n\n\n6.4 Post process a single output\nAlways a good step to get your model working end-to-end on a single sample and then upgrading it.\nBox formats:\n\nStarting data (the input data) -&gt; [x_top_left, y_top_left, width, height] -&gt; XYWH (absolute)\nOut of image_processor.preprocess() -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized) -&gt; into model\n\nSee docs: https://huggingface.co/docs/transformers.js/en/custom_usage\n\nOut of model -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized)\n\nSee docs for forward() and output pred_boxes: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\n\nOut of image_processor.post_process_object_detection() -&gt; [x_top_left, y_top_left, x_bottom_right, y_bottom_right] -&gt; XYXY\n\nThis is PASCL VOC format - (xmin, ymin, xmax, ymax)\nSee docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.post_process_object_detection\n\n\n\n# Check the keys of the labels for the image\nrandom_sample_preprocessed[\"labels\"][0].keys()\n\ndict_keys(['size', 'image_id', 'class_labels', 'boxes', 'area', 'iscrowd', 'orig_size'])\n\n\n\nprint(f\"[INFO] Image original size: {random_sample_preprocessed.labels[0].orig_size} (height, width)\")\nprint(f\"[INFO] Image size after preprocessing: {random_sample_preprocessed.labels[0].size} (height, width)\")\n\n[INFO] Image original size: tensor([1280,  960]) (height, width)\n[INFO] Image size after preprocessing: tensor([640, 480]) (height, width)\n\n\n\n# Output logits will be post-processed to turn into prediction probabilities as well as boxes\n\n# Get pred probs from logits, this will be used for our threshold parameter in post_process_object_detection \ntorch.softmax(random_sample_outputs.logits, dim=-1)\n\ntensor([[[0.1471, 0.1309, 0.0925,  ..., 0.1878, 0.1475, 0.1423],\n         [0.1330, 0.1255, 0.1205,  ..., 0.1402, 0.1232, 0.1129],\n         [0.1611, 0.1492, 0.1167,  ..., 0.1474, 0.1334, 0.1272],\n         ...,\n         [0.0988, 0.0910, 0.1119,  ..., 0.1821, 0.1247, 0.1833],\n         [0.1683, 0.1479, 0.1100,  ..., 0.1419, 0.1297, 0.1310],\n         [0.1238, 0.1211, 0.1767,  ..., 0.1632, 0.1101, 0.1379]]],\n       grad_fn=&lt;SoftmaxBackward0&gt;)\n\n\n\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=0.3, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_sample_preprocessed[\"labels\"][0][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6839, 0.6737, 0.6616, 0.6614, 0.6574, 0.6541, 0.6478, 0.6476, 0.6475,\n          0.6475, 0.6472, 0.6472, 0.6448, 0.6444, 0.6436, 0.6434, 0.6426, 0.6419,\n          0.6416, 0.6408, 0.6404, 0.6383, 0.6382, 0.6374, 0.6372, 0.6359, 0.6354,\n          0.6352, 0.6346, 0.6338, 0.6310, 0.6308, 0.6302, 0.6280, 0.6277, 0.6273,\n          0.6272, 0.6272, 0.6271, 0.6265, 0.6265, 0.6265, 0.6259, 0.6255, 0.6248,\n          0.6243, 0.6242, 0.6241, 0.6237, 0.6229, 0.6223, 0.6221, 0.6215, 0.6213,\n          0.6207, 0.6207, 0.6203, 0.6199, 0.6196, 0.6195, 0.6185, 0.6184, 0.6183,\n          0.6177, 0.6163, 0.6160, 0.6150, 0.6144, 0.6144, 0.6139, 0.6139, 0.6137,\n          0.6135, 0.6129, 0.6125, 0.6124, 0.6108, 0.6106, 0.6104, 0.6101, 0.6100,\n          0.6099, 0.6097, 0.6092, 0.6089, 0.6089, 0.6085, 0.6085, 0.6079, 0.6076,\n          0.6070, 0.6070, 0.6068, 0.6063, 0.6057, 0.6057, 0.6056, 0.6055, 0.6053,\n          0.6051], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 4,\n          3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 4, 4, 3, 6, 3, 4, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4,\n          3, 3, 6, 3]),\n  'boxes': tensor([[ 1.5021e+02,  2.2275e+02,  9.2612e+02,  3.1100e+02],\n          [ 3.0236e+02,  2.3473e+02,  8.8168e+02,  3.0422e+02],\n          [ 5.0880e+02,  2.1115e+02,  5.5853e+02,  2.3331e+02],\n          [ 4.7810e+02,  1.9805e+02,  5.2191e+02,  2.2018e+02],\n          [ 4.3730e+02,  2.4722e+02,  9.2742e+02,  3.1818e+02],\n          [ 9.0321e+02,  3.0775e+02,  9.6117e+02,  3.3864e+02],\n          [ 7.1403e+02,  2.3229e+02,  7.5484e+02,  2.4963e+02],\n          [ 6.4448e+02,  2.3185e+02,  7.0163e+02,  2.4743e+02],\n          [ 9.7196e+01,  2.4972e+02,  8.0122e+02,  3.4492e+02],\n          [ 6.9588e+02,  2.2955e+02,  7.2308e+02,  2.4626e+02],\n          [ 6.8868e+02,  2.3618e+02,  7.3616e+02,  2.5229e+02],\n          [ 6.1711e+02,  2.2698e+02,  6.7091e+02,  2.4342e+02],\n          [ 1.1697e+02,  2.0081e+02,  5.3524e+02,  2.5107e+02],\n          [ 4.8558e+02,  2.0865e+02,  5.4637e+02,  2.3481e+02],\n          [ 7.4454e+02,  2.2994e+02,  7.8603e+02,  2.5308e+02],\n          [ 6.8199e+02,  2.3242e+02,  7.2622e+02,  2.4876e+02],\n          [ 5.3925e+02,  2.2372e+02,  5.9300e+02,  2.4156e+02],\n          [ 4.4184e+02,  2.0462e+02,  4.7448e+02,  2.2387e+02],\n          [ 6.6260e+02,  2.3085e+02,  7.0588e+02,  2.4724e+02],\n          [ 7.2336e+02,  2.3609e+02,  7.7372e+02,  2.5295e+02],\n          [ 5.9377e+02,  2.3010e+02,  6.5768e+02,  2.4654e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 2.1040e+02,  1.9925e+02,  3.2352e+02,  2.3685e+02],\n          [ 1.8045e+02,  1.5578e+02,  3.1142e+02,  1.9401e+02],\n          [ 4.2432e+02,  2.0136e+02,  4.5325e+02,  2.1855e+02],\n          [ 7.8032e+02,  2.2787e+02,  8.3353e+02,  2.5188e+02],\n          [ 6.4112e+02,  2.1902e+02,  6.7090e+02,  2.3924e+02],\n          [ 3.7899e+02,  2.4951e+02,  7.8740e+02,  3.0072e+02],\n          [ 1.6532e+02,  2.3143e+02,  3.2209e+02,  2.6452e+02],\n          [ 1.0642e+02,  2.3275e+02,  2.2752e+02,  2.5950e+02],\n          [-2.7386e+00,  2.8250e+02,  9.5569e+02,  8.3506e+02],\n          [ 5.6764e+02,  2.2579e+02,  6.0133e+02,  2.4452e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 1.3404e+02,  4.4818e+02,  9.4260e+02,  8.4707e+02],\n          [ 4.5860e+02,  4.7699e+02,  5.8809e+02,  5.3134e+02],\n          [ 1.6226e+02,  2.1322e+02,  3.1575e+02,  2.5415e+02],\n          [ 5.8245e+02,  2.3491e+02,  7.3097e+02,  2.5595e+02],\n          [ 9.5602e+02,  2.3172e+02,  9.5996e+02,  2.8035e+02],\n          [ 7.6245e+02,  2.3498e+02,  8.0948e+02,  2.5390e+02],\n          [ 8.5605e+02,  3.1974e+02,  9.6036e+02,  3.4395e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 2.1273e+00,  8.9889e+02,  9.6114e+02,  1.2628e+03],\n          [ 3.9504e+02,  2.1397e+02,  4.3043e+02,  2.2851e+02],\n          [ 3.4446e-01,  1.8749e+02,  7.8433e+01,  2.2499e+02],\n          [ 6.7294e+02,  2.5800e+02,  7.6941e+02,  2.8344e+02],\n          [ 6.0833e+02,  2.2191e+02,  6.4493e+02,  2.3915e+02],\n          [-4.1992e+00,  3.3792e+02,  9.5432e+02,  1.1725e+03],\n          [ 3.5863e+02,  2.0646e+02,  3.8990e+02,  2.3022e+02],\n          [ 4.6378e+02,  2.2039e+02,  5.2133e+02,  2.3814e+02],\n          [-5.5702e+00,  2.8453e+02,  8.7009e+02,  7.9807e+02],\n          [ 7.9385e+02,  2.3517e+02,  8.4780e+02,  2.5737e+02],\n          [ 8.8628e+02,  2.7585e+02,  9.6165e+02,  3.1819e+02],\n          [-1.4085e+01,  7.4535e+02,  9.4306e+02,  1.2644e+03],\n          [ 7.6982e-01,  4.5878e+02,  9.5951e+02,  8.9642e+02],\n          [ 3.8868e+02,  1.9604e+02,  4.2339e+02,  2.1367e+02],\n          [ 1.0205e+02,  2.3049e+02,  1.9162e+02,  2.5180e+02],\n          [ 1.5999e+02,  1.4399e+02,  2.6803e+02,  1.9518e+02],\n          [ 8.3596e+02,  2.8685e+02,  9.6574e+02,  3.4110e+02],\n          [ 4.0079e+02,  2.0236e+02,  4.3893e+02,  2.2204e+02],\n          [ 2.2829e-02,  1.7629e+02,  7.5778e+00,  2.1321e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.5052e+00,  3.2000e+02,  6.8636e+02,  8.1026e+02],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [ 8.5131e+00,  5.3675e+02,  6.7816e+02,  8.2705e+02],\n          [ 5.8866e+02,  2.2367e+02,  6.3574e+02,  2.4067e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 7.6864e+02,  3.0461e+02,  8.5804e+02,  3.3697e+02],\n          [ 3.2264e+02,  7.8797e+02,  3.9313e+02,  8.3845e+02],\n          [ 1.2273e+02,  3.3624e+02,  2.9674e+02,  3.8669e+02],\n          [ 4.9169e+02,  6.0451e+02,  5.7784e+02,  6.6474e+02],\n          [ 7.3638e+01,  1.6488e+02,  1.4301e+02,  2.1829e+02],\n          [ 8.8692e+02,  2.2889e+02,  9.5606e+02,  2.5846e+02],\n          [ 2.5381e+02,  1.2226e+03,  9.6300e+02,  1.2849e+03],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [-2.6988e+00,  2.1334e+02,  5.3616e+01,  2.4198e+02],\n          [ 8.3390e+02,  2.2830e+02,  8.8685e+02,  2.5244e+02],\n          [ 9.3645e+00,  2.3032e+02,  1.1699e+02,  2.6169e+02],\n          [ 5.2715e+02,  2.8053e+02,  5.8582e+02,  3.0946e+02],\n          [ 4.9539e+02,  2.8255e+02,  5.5250e+02,  3.0303e+02],\n          [ 8.7392e+02,  3.0168e+02,  9.6059e+02,  3.3615e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.8947e+02,  4.1488e+02,  6.1218e+02,  4.9252e+02],\n          [ 7.5197e+02,  2.5210e+02,  8.2422e+02,  2.7998e+02],\n          [ 2.5285e+02,  4.3588e+02,  9.3822e+02,  8.7275e+02],\n          [ 8.7054e+02,  2.2011e+02,  9.3370e+02,  2.4845e+02],\n          [ 9.0750e+02,  3.1742e+02,  9.6316e+02,  3.5016e+02],\n          [-4.3446e-01,  2.1810e+02,  2.3509e+01,  2.4937e+02],\n          [ 1.1742e+02,  2.1277e+02,  3.1611e+02,  2.5940e+02],\n          [ 9.6207e+01,  3.5631e+02,  9.5135e+02,  9.5458e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [ 3.7007e+02,  1.9513e+02,  4.0063e+02,  2.1357e+02],\n          [ 4.0936e+02,  5.2738e+02,  6.3709e+02,  6.3685e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 2.6593e+02,  1.8549e+02,  3.8638e+02,  2.2928e+02],\n          [ 4.9952e+02,  1.2543e+03,  8.9540e+02,  1.2808e+03],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [-4.4207e+00,  2.8687e+02,  9.5472e+02,  1.0455e+03]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\n\n\nTK - let‚Äôs visualize, visualize, visualize!\n\n# Extract scores, labels and boxes\nrandom_sample_pred_scores = random_sample_outputs_post_processed[0][\"scores\"]\nrandom_sample_pred_labels = random_sample_outputs_post_processed[0][\"labels\"]\nrandom_sample_pred_boxes = random_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_sample_pred_labels, random_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_sample_labels_to_plot}\")\n\n# Plot the random sample image with randomly predicted boxes (these will be very poor since the model is not trained on our data yet)\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=random_sample[\"image\"]),\n        boxes=random_sample_pred_boxes,\n        labels=random_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Labels with scores: ['Pred: not_hand (0.6839)', 'Pred: not_hand (0.6737)', 'Pred: not_hand (0.6616)', 'Pred: not_hand (0.6614)', 'Pred: not_hand (0.6574)', 'Pred: not_hand (0.6541)', 'Pred: not_hand (0.6478)', 'Pred: not_hand (0.6476)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6448)', 'Pred: not_hand (0.6444)', 'Pred: not_hand (0.6436)', 'Pred: not_hand (0.6434)', 'Pred: not_hand (0.6426)', 'Pred: not_hand (0.6419)', 'Pred: not_hand (0.6416)', 'Pred: not_hand (0.6408)', 'Pred: not_hand (0.6404)', 'Pred: not_hand (0.6383)', 'Pred: not_hand (0.6382)', 'Pred: not_hand (0.6374)', 'Pred: not_hand (0.6372)', 'Pred: not_hand (0.6359)', 'Pred: not_hand (0.6354)', 'Pred: not_hand (0.6352)', 'Pred: not_hand (0.6346)', 'Pred: not_hand (0.6338)', 'Pred: not_hand (0.631)', 'Pred: not_hand (0.6308)', 'Pred: not_hand (0.6302)', 'Pred: not_hand (0.628)', 'Pred: not_hand (0.6277)', 'Pred: not_hand (0.6273)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6271)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6265)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6259)', 'Pred: not_hand (0.6255)', 'Pred: not_hand (0.6248)', 'Pred: not_hand (0.6243)', 'Pred: not_hand (0.6242)', 'Pred: not_trash (0.6241)', 'Pred: not_hand (0.6237)', 'Pred: not_trash (0.6229)', 'Pred: not_hand (0.6223)', 'Pred: not_hand (0.6221)', 'Pred: not_hand (0.6215)', 'Pred: not_hand (0.6213)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6203)', 'Pred: not_hand (0.6199)', 'Pred: not_hand (0.6196)', 'Pred: not_hand (0.6195)', 'Pred: not_hand (0.6185)', 'Pred: trash_arm (0.6184)', 'Pred: not_trash (0.6183)', 'Pred: not_trash (0.6177)', 'Pred: not_hand (0.6163)', 'Pred: trash_arm (0.616)', 'Pred: not_hand (0.615)', 'Pred: not_trash (0.6144)', 'Pred: not_hand (0.6144)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6137)', 'Pred: not_hand (0.6135)', 'Pred: not_hand (0.6129)', 'Pred: not_hand (0.6125)', 'Pred: not_hand (0.6124)', 'Pred: not_hand (0.6108)', 'Pred: not_hand (0.6106)', 'Pred: not_trash (0.6104)', 'Pred: not_hand (0.6101)', 'Pred: not_trash (0.61)', 'Pred: not_hand (0.6099)', 'Pred: not_hand (0.6097)', 'Pred: not_trash (0.6092)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6085)', 'Pred: not_hand (0.6085)', 'Pred: not_trash (0.6079)', 'Pred: not_hand (0.6076)', 'Pred: not_trash (0.607)', 'Pred: not_trash (0.607)', 'Pred: not_hand (0.6068)', 'Pred: not_hand (0.6063)', 'Pred: not_trash (0.6057)', 'Pred: not_trash (0.6057)', 'Pred: not_hand (0.6056)', 'Pred: not_hand (0.6055)', 'Pred: trash_arm (0.6053)', 'Pred: not_hand (0.6051)']\n\n\n\n\n\n\n\n\n\nOur predictions are poor since our model hasn‚Äôt been specifically trained on our data.\nBut we can improve them by fine-tuning the model to our dataset.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---fine-tune-the-model-to-our-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---fine-tune-the-model-to-our-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "11 TK - Fine-tune the model to our dataset",
    "text": "11 TK - Fine-tune the model to our dataset\nSteps: - preprocess dataset (no augmentation) - get it ready for a model to train on - train model - inspect the results of the trained model\n\n11.1 TK - Preprocess dataset for model\n\nWe‚Äôve preprocessed and tried one sample, now we can do the same for batches of data.\n\nUPTOHERE\nNext: - TK - write a function to transform batches of images (no augmentation, later can add augmentation) - TK - e.g.¬†call it ‚Äúpreprocess_batch_of_examples‚Äù - TK - preprocess datasets using .with_transform (only need one function to batchify data, can add transforms later) - TK - create a collate function\n\ndef preprocess_batch(examples,\n                    #  transforms, # Note: Could optionally add transforms (e.g. data augmentation) here \n                     image_processor):\n    \"\"\"\n    Function to preprocess batches of data.\n\n    Can optionally apply a transform later on.\n    \"\"\"\n    images = []\n    coco_annotations = [] \n\n    for image, image_id, annotations_dict in zip(examples[\"image\"], examples[\"image_id\"], examples[\"annotations\"]):\n        # Note: may need to open image if it is an image path rather than PIL.Image\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n    \n        # Note: Could optionally apply a transform here.\n        ###\n\n        # Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # Add images/annotations to their respective lists\n        images.append(image)\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\")\n    \n    return preprocessed_batch\n\n\n# Create a partial function for preprocessing\nfrom functools import partial\n\n# Note: Could create separate \npreprocess_batch_partial = partial(preprocess_batch,\n                                   image_processor=image_processor)\n\n\n\n11.2 TK - Split the data\n\n# Split the data\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.6, seed=42) # split the test set into 40/60 validation/test\n\n# Create splits\ndataset[\"train\"] = dataset_split[\"train\"]\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\ndataset\n\nTK - apply processing function to each split\n\n# Apply the preprocessing function to the datasets (the preprocessing will happen on the fly, e.g. when the dataset is called rather than in-place)\nprocessed_dataset = dataset.copy()\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(transform=preprocess_batch_partial)\n\n\nprocessed_dataset[\"validation\"][0]\n\n{'pixel_values': tensor([[[ 0.1254,  0.1254,  0.1597,  ..., -2.0837, -1.9809, -1.9295],\n          [ 0.1426,  0.1254,  0.1597,  ..., -2.0494, -1.9638, -1.9467],\n          [ 0.1426,  0.1426,  0.1597,  ..., -1.9467, -1.9295, -1.9467],\n          ...,\n          [ 1.2899,  1.0502,  1.1358,  ...,  0.7248,  0.7933,  0.7762],\n          [ 1.4098,  1.1872,  1.0331,  ...,  0.7077,  0.7419,  0.7419],\n          [ 1.2728,  0.9646,  0.9303,  ...,  0.7077,  0.7591,  0.7248]],\n \n         [[ 1.2206,  1.1856,  1.1506,  ..., -1.9832, -1.8782, -1.7731],\n          [ 1.2381,  1.1856,  1.1506,  ..., -1.9657, -1.8606, -1.8256],\n          [ 1.2381,  1.2031,  1.1681,  ..., -1.8606, -1.8256, -1.8431],\n          ...,\n          [ 1.2906,  1.0630,  1.1506,  ...,  0.3803,  0.4503,  0.4328],\n          [ 1.4307,  1.2031,  1.0280,  ...,  0.3627,  0.3978,  0.3978],\n          [ 1.2906,  0.9755,  0.9230,  ...,  0.3627,  0.4153,  0.3803]],\n \n         [[ 2.1346,  2.2217,  2.1868,  ..., -1.7173, -1.6127, -1.5604],\n          [ 2.1520,  2.2217,  2.1868,  ..., -1.6999, -1.5953, -1.5779],\n          [ 2.1694,  2.2217,  2.1868,  ..., -1.5953, -1.5430, -1.5604],\n          ...,\n          [ 1.2108,  0.9842,  1.0539,  ...,  0.3568,  0.4265,  0.4091],\n          [ 1.3154,  1.0888,  0.9494,  ...,  0.3393,  0.3742,  0.3742],\n          [ 1.1759,  0.8622,  0.8448,  ...,  0.3393,  0.3916,  0.3568]]]),\n 'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([719]), 'class_labels': tensor([4, 4, 1, 5, 0, 0]), 'boxes': tensor([[0.1898, 0.1767, 0.2161, 0.1620],\n         [0.5669, 0.1938, 0.0742, 0.0805],\n         [0.7672, 0.7768, 0.4526, 0.4327],\n         [0.4715, 0.6213, 0.2235, 0.1502],\n         [0.3973, 0.5639, 0.7729, 0.6337],\n         [0.6906, 0.4581, 0.5110, 0.4600]]), 'area': tensor([ 10753.6875,   1833.4000,  60167.3867,  10316.8945, 150459.0469,\n          72216.3203]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\n\n# Now when we call one or more of our samples, the preprocessing will take place\nprocessed_dataset[\"train\"][0:10]\n\n{'pixel_values': tensor([[[[-1.5870, -1.5870, -1.6042,  ..., -1.2617, -1.2617, -1.2788],\n          [-1.5870, -1.5870, -1.5870,  ..., -0.9363, -0.9192, -0.9192],\n          [-1.6042, -1.5870, -1.5870,  ..., -0.8164, -0.8335, -0.8164],\n          ...,\n          [-1.2959, -1.4329, -0.5938,  ..., -0.5596, -0.2856, -0.4054],\n          [-1.2103, -0.9192, -0.3541,  ..., -0.5596,  0.1426,  0.1768],\n          [-0.5938, -0.6109, -0.7137,  ..., -0.4226,  0.4337,  0.6906]],\n\n         [[-1.9482, -1.9482, -1.9657,  ..., -1.0903, -1.0903, -1.1078],\n          [-1.9482, -1.9482, -1.9482,  ..., -0.7227, -0.6877, -0.7052],\n          [-1.9657, -1.9482, -1.9482,  ..., -0.5476, -0.5826, -0.5651],\n          ...,\n          [-0.9503, -1.0728, -0.1975,  ..., -0.1625,  0.0826, -0.0924],\n          [-0.8803, -0.5476,  0.0476,  ..., -0.1625,  0.5028,  0.4678],\n          [-0.2150, -0.1975, -0.2850,  ..., -0.0399,  0.7654,  0.9755]],\n\n         [[-1.7347, -1.7347, -1.7522,  ..., -0.8807, -0.8807, -0.8981],\n          [-1.7347, -1.7347, -1.7347,  ..., -0.5321, -0.4973, -0.5147],\n          [-1.7522, -1.7347, -1.7347,  ..., -0.3753, -0.3927, -0.3753],\n          ...,\n          [-1.4210, -1.4907, -0.8110,  ..., -1.0550, -0.7761, -0.9330],\n          [-1.3861, -1.2467, -0.8110,  ..., -1.0898, -0.3927, -0.4275],\n          [-1.0376, -1.1247, -1.3687,  ..., -0.9853, -0.1835,  0.0256]]],\n\n\n        [[[-1.7412, -1.8268, -1.7754,  ..., -1.5870, -1.2788, -1.4329],\n          [-1.6555, -1.6213, -1.7583,  ..., -1.3815, -1.4158, -1.7240],\n          [-1.7583, -1.7583, -1.3987,  ..., -1.6042, -1.8782, -1.9124],\n          ...,\n          [ 0.2624,  1.4440,  1.3584,  ...,  0.3823,  0.8276,  1.0502],\n          [ 0.4851,  1.4783,  0.3823,  ...,  1.2557,  0.9988,  0.7419],\n          [-0.0801, -0.0116, -0.1828,  ...,  0.9988,  0.8276,  0.8447]],\n\n         [[-1.5280, -1.6155, -1.5455,  ..., -1.4930, -1.1604, -1.3179],\n          [-1.4755, -1.3704, -1.5105,  ..., -1.2654, -1.3004, -1.5980],\n          [-1.5980, -1.5455, -1.1078,  ..., -1.4755, -1.7731, -1.8081],\n          ...,\n          [ 0.3978,  1.6057,  1.5182,  ...,  0.4853,  0.9230,  1.1155],\n          [ 0.6254,  1.6408,  0.5203,  ...,  1.3782,  1.1155,  0.8354],\n          [ 0.0476,  0.1176, -0.0749,  ...,  1.1331,  0.9405,  0.9230]],\n\n         [[-1.7173, -1.6824, -1.6127,  ..., -1.3164, -1.0550, -1.2293],\n          [-1.5430, -1.5779, -1.6650,  ..., -1.1073, -1.2119, -1.5256],\n          [-1.5953, -1.6476, -1.4733,  ..., -1.3513, -1.6650, -1.7347],\n          ...,\n          [ 0.4439,  1.6640,  1.5942,  ...,  0.4265,  0.8099,  0.9842],\n          [ 0.6531,  1.6814,  0.6008,  ...,  1.2631,  0.9668,  0.6356],\n          [ 0.0605,  0.1651,  0.0256,  ...,  0.9842,  0.7576,  0.7054]]],\n\n\n        [[[-0.9363, -0.7479, -1.0390,  ..., -2.1008, -2.1008, -2.0665],\n          [-1.3302, -0.9363, -0.7822,  ..., -2.1008, -2.1008, -2.0665],\n          [-1.5014, -1.2617, -0.9705,  ..., -2.1008, -2.1008, -2.1008],\n          ...,\n          [ 1.8550,  1.8379,  1.7523,  ...,  1.2899,  1.2899,  0.8789],\n          [ 1.8208,  1.7523,  1.6838,  ...,  1.1015,  1.3927,  0.9474],\n          [ 1.7009,  1.6153,  1.6324,  ...,  1.1187,  1.4783,  1.1187]],\n\n         [[-0.7577, -0.5651, -0.8627,  ..., -1.9832, -1.9832, -1.9482],\n          [-1.1604, -0.7577, -0.6001,  ..., -1.9832, -1.9657, -1.9307],\n          [-1.3354, -1.0903, -0.7927,  ..., -1.9832, -1.9832, -1.9657],\n          ...,\n          [ 1.1681,  1.1506,  1.0630,  ...,  1.5007,  1.4482,  0.9755],\n          [ 1.1331,  1.0455,  0.9930,  ...,  1.2906,  1.5357,  1.0455],\n          [ 1.0280,  0.9580,  0.9755,  ...,  1.3256,  1.6408,  1.2206]],\n\n         [[-1.0376, -0.8110, -1.0724,  ..., -1.5779, -1.5779, -1.5604],\n          [-1.4036, -0.9678, -0.7761,  ..., -1.5779, -1.5604, -1.5604],\n          [-1.5779, -1.2816, -0.9678,  ..., -1.5779, -1.5604, -1.5953],\n          ...,\n          [ 0.8622,  0.8448,  0.7576,  ...,  1.5768,  1.4897,  0.9842],\n          [ 0.8274,  0.7576,  0.7228,  ...,  1.3851,  1.5768,  1.0539],\n          [ 0.7402,  0.6705,  0.7054,  ...,  1.4025,  1.6814,  1.2282]]],\n\n\n        ...,\n\n\n        [[[-1.2103, -1.1760, -1.1075,  ..., -0.7822, -0.9877, -1.0904],\n          [-0.9192, -0.9705, -1.0219,  ..., -0.7993, -1.1247, -1.0219],\n          [-0.5424, -0.8678, -1.0733,  ..., -1.0219, -1.2103, -0.9192],\n          ...,\n          [ 1.2385,  0.7591,  0.2624,  ...,  1.2214,  0.9132,  0.8618],\n          [ 1.2385,  0.9474,  1.0502,  ...,  0.9646, -0.0801,  0.1083],\n          [ 1.1187,  1.1872,  0.9474,  ...,  0.6906,  0.2967,  0.3652]],\n\n         [[-1.0728, -1.0378, -0.9678,  ..., -0.6001, -0.8102, -0.9153],\n          [-0.7752, -0.8277, -0.8803,  ..., -0.6352, -0.9503, -0.8452],\n          [-0.3901, -0.7227, -0.9328,  ..., -0.8627, -1.0553, -0.7752],\n          ...,\n          [ 1.0980,  0.6429,  0.1527,  ...,  1.3081,  0.9755,  0.9405],\n          [ 1.0980,  0.8704,  0.9755,  ...,  1.0280, -0.0574,  0.1352],\n          [ 0.9930,  1.1155,  0.8704,  ...,  0.7479,  0.3102,  0.3803]],\n\n         [[-1.2641, -1.2293, -1.1247,  ..., -0.9504, -1.1596, -1.2293],\n          [-0.9330, -1.0027, -1.0376,  ..., -0.9678, -1.2641, -1.1421],\n          [-0.5321, -0.8633, -1.0898,  ..., -1.1421, -1.2990, -0.9853],\n          ...,\n          [ 0.9319,  0.5659,  0.1651,  ...,  1.1934,  0.9145,  0.8797],\n          [ 1.0539,  0.7751,  0.8797,  ...,  0.8971, -0.1312,  0.0605],\n          [ 1.0365,  1.0017,  0.6356,  ...,  0.5834,  0.1999,  0.2871]]],\n\n\n        [[[-1.4843, -1.3473, -1.4329,  ..., -0.9020, -0.8678, -0.8507],\n          [-1.6898, -1.6555, -1.4843,  ..., -0.8507, -0.8507, -0.8507],\n          [-1.4500, -1.6898, -1.3987,  ..., -0.8507, -0.8678, -0.8849],\n          ...,\n          [-0.8849, -0.7308, -0.4911,  ...,  1.8208,  1.8722,  1.8722],\n          [-1.2274, -1.0219, -0.6109,  ...,  1.8550,  1.9064,  1.9064],\n          [-1.7069, -1.4843, -1.1418,  ...,  1.8379,  1.9235,  1.9578]],\n\n         [[-1.2829, -1.1779, -1.3004,  ...,  0.2752,  0.2577,  0.2402],\n          [-1.4755, -1.4930, -1.3529,  ...,  0.2577,  0.2752,  0.2752],\n          [-1.2829, -1.5280, -1.2654,  ...,  0.2927,  0.2927,  0.2927],\n          ...,\n          [-0.7752, -0.6176, -0.3550,  ...,  1.1681,  1.2381,  1.2556],\n          [-1.1429, -0.9328, -0.4951,  ...,  1.2031,  1.2906,  1.3081],\n          [-1.6331, -1.4055, -1.0378,  ...,  1.2031,  1.3081,  1.3606]],\n\n         [[-1.3164, -1.1944, -1.2641,  ...,  1.7511,  1.7511,  1.7685],\n          [-1.5256, -1.5256, -1.3513,  ...,  1.7685,  1.7337,  1.6814],\n          [-1.2990, -1.5430, -1.2641,  ...,  1.7337,  1.7511,  1.7511],\n          ...,\n          [-0.6890, -0.5321, -0.2881,  ...,  0.8971,  0.9668,  0.9668],\n          [-1.0027, -0.8110, -0.4101,  ...,  0.9319,  1.0017,  1.0191],\n          [-1.4733, -1.2816, -0.9504,  ...,  0.9145,  1.0191,  1.0714]]],\n\n\n        [[[-1.6042, -1.6213, -1.5870,  ..., -0.1486, -0.1314,  0.0056],\n          [-1.5699, -1.5528, -1.5699,  ..., -0.1314, -0.1143,  0.0569],\n          [-1.5870, -1.5185, -1.4843,  ..., -0.1143, -0.0629,  0.1597],\n          ...,\n          [ 0.9132,  1.1187,  1.3413,  ..., -0.7822, -0.7822, -0.7650],\n          [ 1.4440,  1.0844,  1.3242,  ..., -0.7993, -0.7650, -0.7479],\n          [ 1.3755,  0.8961,  1.3927,  ..., -0.8335, -0.7993, -0.7993]],\n\n         [[-1.5980, -1.6506, -1.6506,  ..., -0.0224, -0.0049,  0.1176],\n          [-1.5980, -1.6155, -1.6331,  ..., -0.0224, -0.0049,  0.1527],\n          [-1.6506, -1.5980, -1.5805,  ..., -0.0399,  0.0126,  0.2402],\n          ...,\n          [ 0.4853,  0.7129,  0.9580,  ..., -0.7577, -0.7402, -0.7227],\n          [ 1.0280,  0.6604,  0.9230,  ..., -0.7752, -0.7402, -0.7052],\n          [ 0.9405,  0.4503,  1.0105,  ..., -0.8102, -0.7752, -0.7577]],\n\n         [[-1.5256, -1.5604, -1.5430,  ...,  0.0779,  0.1128,  0.2522],\n          [-1.4733, -1.4733, -1.4907,  ...,  0.0779,  0.1302,  0.2871],\n          [-1.4733, -1.4210, -1.3861,  ...,  0.0779,  0.1476,  0.3742],\n          ...,\n          [ 0.1476,  0.3393,  0.5834,  ..., -0.6541, -0.6715, -0.6541],\n          [ 0.7054,  0.3393,  0.6008,  ..., -0.6715, -0.6367, -0.6367],\n          [ 0.6705,  0.1651,  0.7228,  ..., -0.6890, -0.6541, -0.6890]]]]), 'pixel_mask': tensor([[[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]],\n\n        [[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]],\n\n        [[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]],\n\n        ...,\n\n        [[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]],\n\n        [[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]],\n\n        [[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]]), 'labels': [{'size': tensor([640, 480]), 'image_id': tensor([69]), 'class_labels': tensor([5, 0, 1, 4, 4, 4, 4, 4]), 'boxes': tensor([[0.4675, 0.5152, 0.1846, 0.2045],\n        [0.5092, 0.5843, 0.3970, 0.3951],\n        [0.2719, 0.5861, 0.3738, 0.2471],\n        [0.1023, 0.6896, 0.2019, 0.1655],\n        [0.3902, 0.0924, 0.1530, 0.0898],\n        [0.5345, 0.0871, 0.0252, 0.0556],\n        [0.6370, 0.0877, 0.1357, 0.0899],\n        [0.9383, 0.0634, 0.0789, 0.0627]]), 'area': tensor([11597.7402, 48180.5664, 28372.1094, 10266.5547,  4223.3750,   430.7600,\n         3749.3826,  1517.7850]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1027]), 'class_labels': tensor([5, 4, 1, 0, 0]), 'boxes': tensor([[0.4669, 0.5782, 0.1456, 0.1290],\n        [0.5031, 0.6013, 0.0410, 0.0237],\n        [0.5269, 0.6380, 0.1138, 0.1280],\n        [0.3863, 0.5047, 0.4801, 0.3840],\n        [0.1074, 0.4195, 0.2101, 0.3353]]), 'area': tensor([ 5770.2451,   298.4550,  4471.7402, 56633.0859, 21642.4102]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1092]), 'class_labels': tensor([2, 5, 1, 0]), 'boxes': tensor([[0.1943, 0.1126, 0.1849, 0.0794],\n        [0.5387, 0.5818, 0.3646, 0.2689],\n        [0.3515, 0.7725, 0.3171, 0.2903],\n        [0.5404, 0.4307, 0.6236, 0.4566]]), 'area': tensor([ 4508.5000, 30117.5000, 28278.7598, 87485.0391]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([228]), 'class_labels': tensor([0]), 'boxes': tensor([[0.5187, 0.5418, 0.4982, 0.5698]]), 'area': tensor([87218.0078]), 'iscrowd': tensor([0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([511]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5284, 0.5886, 0.2903, 0.3347],\n        [0.7784, 0.7873, 0.4400, 0.4222]]), 'area': tensor([29848.7695, 57066.2383]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([338]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4990, 0.5424, 0.2227, 0.1716],\n        [0.5455, 0.5335, 0.3754, 0.3595],\n        [0.7111, 0.6979, 0.3313, 0.2838]]), 'area': tensor([11742.9648, 41455.0117, 28882.3496]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([405]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.4952, 0.6559, 0.6088, 0.4872],\n        [0.2074, 0.7760, 0.4117, 0.4459],\n        [0.4132, 0.5714, 0.0663, 0.0580]]), 'area': tensor([91107.9609, 56385.1602,  1179.7800]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([3]), 'class_labels': tensor([0, 5, 1, 4, 4, 4]), 'boxes': tensor([[0.5020, 0.4466, 0.6579, 0.5829],\n        [0.5148, 0.5684, 0.2288, 0.1367],\n        [0.7040, 0.7836, 0.4468, 0.4219],\n        [0.3160, 0.8416, 0.3991, 0.2993],\n        [0.4095, 0.0661, 0.0888, 0.0666],\n        [0.7489, 0.1356, 0.3843, 0.2637]]), 'area': tensor([117809.1875,   9607.5000,  57901.5000,  36691.4023,   1814.7600,\n         31125.9375]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([182]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.5786, 0.5016, 0.5992, 0.4539],\n        [0.6307, 0.7197, 0.4165, 0.3323],\n        [0.4415, 0.6429, 0.1546, 0.2070]]), 'area': tensor([83547.7969, 42508.7344,  9827.7900]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([640]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.5314, 0.6391, 0.2920, 0.4553],\n        [0.7088, 0.7733, 0.5596, 0.4422],\n        [0.5282, 0.5060, 0.5678, 0.4612]]), 'area': tensor([40839.7109, 76013.7969, 80443.1328]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}]}\n\n\n\n# Images are reshaped to be the IMAGE_SIZE value that we set\nprocessed_dataset[\"train\"][0][\"pixel_values\"].shape\n\ntorch.Size([3, 640, 480])\n\n\n\n\n11.3 TK - Create a collation function\nNotes: * The input to the data_collator function will be the output of image_processor, see below for format. * The output of the data_collator will be passed to our model‚Äôs forward() method. * data_collator for transformers.Trainer - https://huggingface.co/docs/transformers/en/main_classes/trainer#transformers.Trainer.data_collator * ‚ÄúThe function to use to form a batch from a list of elements of train_dataset.\nInput to data_collator is the output of image_processor:\n{'pixel_values': tensor([[[ 2.2318,  2.2318,  2.2318,  ...,  0.3309,  0.2282,  0.1254],\n          [ 2.2318,  2.2318,  2.2318,  ...,  0.3138,  0.2111,  0.1426],\n          [ 2.2318,  2.2318,  2.2489,  ...,  0.2967,  0.2111,  0.1426],\n          ...,\n          [-0.8164, -0.8164, -0.7993,  ...,  0.5878,  0.5707,  0.5878],\n          [-0.9363, -0.8849, -0.8164,  ...,  0.5193,  0.5364,  0.5707],\n          [-0.9877, -0.9363, -0.9192,  ...,  0.5707,  0.5707,  0.5878]],\n \n         [[ 2.4286,  2.4286,  2.4286,  ...,  0.4853,  0.4153,  0.3277],\n          [ 2.4286,  2.4286,  2.4286,  ...,  0.4853,  0.3978,  0.3277],\n          [ 2.4286,  2.4286,  2.4286,  ...,  0.4678,  0.3803,  0.3102],\n          ...,\n          [-1.1253, -1.1253, -1.1078,  ...,  0.2052,  0.1877,  0.2052],\n          [-1.2129, -1.1604, -1.1253,  ...,  0.1352,  0.1527,  0.1877],\n          [-1.2479, -1.2129, -1.2304,  ...,  0.1877,  0.1877,  0.2052]],\n \n         [[ 2.6051,  2.6051,  2.6051,  ...,  0.6531,  0.6008,  0.5311],\n          [ 2.6051,  2.6051,  2.6051,  ...,  0.6531,  0.5659,  0.5136],\n          [ 2.6051,  2.6051,  2.6051,  ...,  0.6356,  0.5485,  0.4788],\n          ...,\n          [-1.3861, -1.3687, -1.3339,  ..., -0.2358, -0.2532, -0.2358],\n          [-1.4907, -1.4210, -1.3513,  ..., -0.3055, -0.2881, -0.2532],\n          [-1.5256, -1.4733, -1.4559,  ..., -0.2532, -0.2532, -0.2358]]]),\n 'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n...\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'labels': {'size': tensor([1066,  800]), 'image_id': tensor([0]), 'class_labels': tensor([1, 0]), 'boxes': tensor([[0.7553, 0.5571, 0.4196, 0.2626],\n         [0.5022, 0.5583, 0.9827, 0.8609]]), 'area': tensor([ 93955.8828, 721446.3750]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}}\nThe data_collator function will turn collections of these into batches (e.g.¬†stack together the pixel_values, pixel_mask, labels etc).\n\n# Create data_collate_function to collect samples into batches\n# TK - want to get a dictionary of {\"pixel_mask\": [batch_of_samples], \"labels\": [batch_of_samples], \"pixel_mask\": [batch_of_samples]}\ndef data_collate_function(batch):\n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in batch])\n\n    return collated_data\n\n\n%%time\n\n# Try data_collate_function \nexample_collated_data_batch = data_collate_function(processed_dataset[\"train\"].select(range(32)))\nexample_collated_data_batch[\"pixel_values\"].shape\n\nCPU times: user 2.01 s, sys: 131 ms, total: 2.14 s\nWall time: 1.45 s\n\n\ntorch.Size([32, 3, 640, 480])\n\n\n\nexample_collated_data_batch.keys()\n\ndict_keys(['pixel_values', 'labels', 'pixel_mask'])\n\n\n\n# 32 samples (because that's our batch size)\nlen(example_collated_data_batch[\"pixel_values\"]), len(example_collated_data_batch[\"labels\"]), len(example_collated_data_batch[\"pixel_mask\"])\n\n(32, 32, 32)\n\n\nTK - We get a batch of 32 samples with size 640, 480, these are all preprocessed as well and will be fed to our model.\n\n%%time \n\n# Try pass a batch through our model (note: this will be slow if our model is on the CPU)\nexample_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\nexample_batch_outputs\n\nCPU times: user 1min 4s, sys: 12.5 s, total: 1min 17s\nWall time: 5.21 s\n\n\nConditionalDetrObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[ 0.1756,  0.0112, -0.1084,  ...,  0.1422,  0.0683,  0.1605],\n         [-0.2120, -0.2104, -0.1722,  ...,  0.3864, -0.1778,  0.2019],\n         [ 0.1066,  0.1096,  0.2123,  ...,  0.1867, -0.0547,  0.2594],\n         ...,\n         [-0.3185,  0.3699, -0.2245,  ...,  0.1371,  0.2279,  0.2639],\n         [ 0.0702,  0.0533,  0.1279,  ...,  0.2358, -0.1269,  0.2406],\n         [-0.1309, -0.3195,  0.1867,  ...,  0.4492, -0.0839,  0.4281]],\n\n        [[ 0.1036,  0.0428, -0.2660,  ...,  0.0152,  0.0188,  0.0505],\n         [-0.1730, -0.3609, -0.0393,  ...,  0.2778, -0.2219,  0.1670],\n         [ 0.0929,  0.2278,  0.2457,  ...,  0.0409, -0.1385,  0.1913],\n         ...,\n         [-0.0265,  0.0631,  0.0627,  ...,  0.0372, -0.1568,  0.0072],\n         [ 0.0708,  0.1320,  0.1984,  ...,  0.1450, -0.0370,  0.1971],\n         [-0.2185, -0.3554,  0.0250,  ...,  0.1523, -0.1766, -0.2412]],\n\n        [[-0.0034, -0.1252, -0.4586,  ...,  0.0920, -0.0194,  0.0565],\n         [-0.1779, -0.3050, -0.0245,  ...,  0.1755, -0.2620,  0.3097],\n         [-0.0193,  0.0550, -0.0951,  ..., -0.0771,  0.0046,  0.0384],\n         ...,\n         [-0.2811, -0.0509, -0.0340,  ...,  0.4088, -0.0885,  0.1977],\n         [-0.1411, -0.2114, -0.0364,  ...,  0.1844, -0.2052, -0.1303],\n         [-0.0397, -0.3287,  0.0959,  ...,  0.3857, -0.2455,  0.3551]],\n\n        ...,\n\n        [[-0.2905, -0.1199, -0.5113,  ...,  0.0797,  0.0761, -0.1454],\n         [-0.3391, -0.4398,  0.1613,  ...,  0.3521, -0.2897,  0.4688],\n         [ 0.0515,  0.1871,  0.2654,  ...,  0.0055,  0.0177, -0.2444],\n         ...,\n         [-0.5897,  0.2452, -0.1715,  ...,  0.1403,  0.2739,  0.2423],\n         [ 0.0082,  0.3222,  0.1669,  ...,  0.0938,  0.1326, -0.1318],\n         [-0.1835, -0.0591,  0.1662,  ...,  0.1506, -0.1369, -0.0960]],\n\n        [[ 0.0088,  0.0562, -0.1568,  ...,  0.0956,  0.1420, -0.0164],\n         [-0.1252, -0.3315, -0.0670,  ...,  0.3029, -0.3670,  0.2253],\n         [ 0.1418,  0.0832,  0.1878,  ...,  0.2082, -0.2881,  0.0064],\n         ...,\n         [-0.3357,  0.0241, -0.2351,  ...,  0.1009,  0.2384,  0.1972],\n         [ 0.1632,  0.0212,  0.1528,  ...,  0.2441, -0.2813, -0.1012],\n         [-0.2424, -0.3850,  0.1242,  ...,  0.2214, -0.4294, -0.2708]],\n\n        [[ 0.0734, -0.0391, -0.4524,  ...,  0.0742, -0.0376, -0.1117],\n         [ 0.0506, -0.0210,  0.0115,  ...,  0.0043, -0.1665, -0.0796],\n         [ 0.0133, -0.2106, -0.0142,  ...,  0.5130, -0.2083,  0.1878],\n         ...,\n         [-0.2460, -0.1284, -0.1073,  ...,  0.2888, -0.2080,  0.0897],\n         [-0.1026, -0.2328, -0.1268,  ...,  0.4177, -0.3034,  0.1005],\n         [-0.2828, -0.4220,  0.1543,  ...,  0.3707, -0.5253, -0.1016]]],\n       grad_fn=&lt;ViewBackward0&gt;), pred_boxes=tensor([[[0.9500, 0.6381, 0.1323, 0.6838],\n         [0.6333, 0.0871, 0.1233, 0.0674],\n         [0.9906, 0.3960, 0.0203, 0.1109],\n         ...,\n         [0.3539, 0.4133, 0.7001, 0.7790],\n         [0.9606, 0.3789, 0.0489, 0.0365],\n         [0.0161, 0.1030, 0.0344, 0.0579]],\n\n        [[0.7669, 0.9339, 0.5311, 0.1394],\n         [0.6464, 0.0556, 0.1167, 0.1030],\n         [0.9931, 0.5555, 0.0139, 0.1452],\n         ...,\n         [0.3557, 0.4036, 0.2504, 0.1227],\n         [0.9974, 0.1280, 0.0060, 0.2545],\n         [0.0663, 0.3102, 0.1351, 0.1014]],\n\n        [[0.7914, 0.7499, 0.3953, 0.4964],\n         [0.6263, 0.0586, 0.2221, 0.0999],\n         [0.8788, 0.5819, 0.2370, 0.4087],\n         ...,\n         [0.5177, 0.3094, 0.5866, 0.2528],\n         [0.8649, 0.4862, 0.2535, 0.2284],\n         [0.0075, 0.1096, 0.0162, 0.0404]],\n\n        ...,\n\n        [[0.6732, 0.8154, 0.6100, 0.3546],\n         [0.6279, 0.0335, 0.0599, 0.0650],\n         [0.9707, 0.6607, 0.0617, 0.3039],\n         ...,\n         [0.4202, 0.3927, 0.8342, 0.4869],\n         [0.9947, 0.7069, 0.0112, 0.4913],\n         [0.0305, 0.3756, 0.0607, 0.2126]],\n\n        [[0.8158, 0.7939, 0.3493, 0.3947],\n         [0.6333, 0.0566, 0.1713, 0.1139],\n         [0.9268, 0.5027, 0.1466, 0.1161],\n         ...,\n         [0.3697, 0.3443, 0.7456, 0.7034],\n         [0.8904, 0.4677, 0.2055, 0.1397],\n         [0.0306, 0.3043, 0.0608, 0.0623]],\n\n        [[0.7667, 0.7876, 0.4440, 0.4146],\n         [0.6509, 0.2361, 0.0934, 0.0602],\n         [0.9449, 0.3689, 0.0946, 0.0297],\n         ...,\n         [0.4404, 0.3215, 0.4841, 0.1150],\n         [0.8951, 0.3655, 0.1890, 0.0374],\n         [0.0411, 0.2678, 0.0848, 0.0570]]], grad_fn=&lt;SigmoidBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[-1.4020e-01, -1.5893e-01,  4.4403e-01,  ...,  1.5252e-01,\n           2.8576e-01,  2.6249e-01],\n         [ 6.8369e-02, -2.7463e-01, -4.5402e-01,  ..., -9.0982e-01,\n          -4.7036e-01,  7.2642e-01],\n         [-1.7512e-01,  3.1511e-01,  2.2512e-01,  ..., -1.4200e-01,\n           2.5577e-01,  4.1778e-01],\n         ...,\n         [ 1.5953e-01, -4.0302e-01,  2.2796e-01,  ..., -8.1157e-01,\n          -3.6345e-01, -8.9928e-02],\n         [ 4.0930e-02,  6.6010e-04,  1.2503e-01,  ..., -5.6554e-02,\n           3.2782e-01,  3.9761e-01],\n         [-1.5904e-02,  5.8626e-01, -1.3788e-01,  ..., -7.4208e-01,\n          -1.3682e-01,  1.0417e-01]],\n\n        [[ 1.8487e-01, -2.6388e-01,  7.6519e-01,  ..., -4.4617e-01,\n           1.6003e-01,  5.6029e-01],\n         [ 5.1641e-01, -5.4275e-02,  1.0399e+00,  ..., -8.5620e-01,\n          -2.2614e-01, -2.9099e-01],\n         [-2.0582e-01,  2.9136e-01,  2.8441e-01,  ..., -4.6227e-02,\n           2.9668e-01,  7.5241e-01],\n         ...,\n         [ 3.8438e-01,  6.9957e-01, -5.8716e-01,  ..., -9.2270e-01,\n          -4.5221e-02, -1.3225e-01],\n         [-6.4926e-02,  1.9942e-01,  4.3592e-01,  ...,  3.0664e-02,\n           5.1831e-01,  3.6161e-01],\n         [ 4.8070e-01, -5.2024e-01,  2.0143e-01,  ..., -1.5431e+00,\n          -3.6578e-01, -2.4390e-01]],\n\n        [[ 2.7832e-01,  7.0842e-02,  1.2050e+00,  ..., -7.3184e-01,\n           1.7189e-01,  3.8562e-02],\n         [ 7.5524e-01,  1.0498e-01,  5.4896e-01,  ..., -4.7316e-01,\n           7.8752e-03,  2.6307e-01],\n         [-3.7225e-01,  5.2872e-02,  5.6387e-01,  ..., -1.3147e+00,\n           2.3460e-01,  4.7530e-01],\n         ...,\n         [ 3.1748e-01, -1.0066e+00,  3.5116e-01,  ..., -8.5966e-01,\n          -1.8258e-01,  2.6463e-01],\n         [-3.0530e-02, -1.0162e+00,  4.3357e-01,  ..., -1.1250e+00,\n          -1.9363e-01, -7.9971e-02],\n         [ 3.0213e-01,  1.3661e-01, -6.4669e-01,  ..., -5.1888e-01,\n          -6.2747e-02,  6.2570e-01]],\n\n        ...,\n\n        [[ 3.9975e-01, -9.5206e-01,  8.8087e-01,  ..., -8.3797e-01,\n          -3.4231e-02,  1.5127e-02],\n         [ 3.7874e-01,  4.6002e-01,  5.5632e-01,  ..., -8.4079e-01,\n           3.5074e-01, -1.0479e-01],\n         [-2.1702e-01, -6.3238e-01,  3.0843e-01,  ..., -4.9595e-01,\n           3.9976e-01,  7.5963e-01],\n         ...,\n         [-9.0952e-02, -1.8212e+00, -7.9186e-02,  ..., -1.0548e+00,\n          -7.6392e-02,  3.0424e-01],\n         [-5.6228e-02, -5.4257e-01,  3.7607e-01,  ..., -1.8365e-01,\n           7.9351e-01,  1.0800e+00],\n         [ 8.0718e-02, -3.2467e-01,  3.0199e-02,  ..., -1.0819e+00,\n           1.6267e-01,  4.1212e-01]],\n\n        [[ 4.9446e-01, -3.8678e-01,  9.7415e-01,  ..., -9.0278e-01,\n           9.9647e-03,  4.2870e-02],\n         [ 7.2289e-01,  2.6472e-01,  6.9674e-01,  ..., -8.4964e-01,\n          -3.5554e-01, -4.0242e-01],\n         [ 2.0905e-01,  1.7493e-01,  7.1425e-01,  ..., -6.0879e-01,\n          -2.6598e-01,  5.8427e-01],\n         ...,\n         [ 3.1929e-01, -1.3318e+00,  1.0949e+00,  ..., -1.0937e+00,\n          -4.9580e-01, -4.8511e-01],\n         [ 2.8816e-01,  1.6738e-04,  1.1606e+00,  ..., -7.3686e-01,\n          -2.4679e-01,  1.9954e-01],\n         [ 1.8261e-01, -1.2720e-02, -3.0613e-01,  ..., -6.9232e-01,\n          -2.6717e-01,  1.7242e-01]],\n\n        [[ 1.1384e-01,  1.4387e-01,  3.6687e-02,  ..., -7.7477e-01,\n           1.0376e-01, -2.5709e-01],\n         [ 3.4558e-01, -4.4018e-01,  3.6415e-01,  ...,  1.7454e-01,\n           2.4093e-01, -4.9051e-02],\n         [ 1.7516e-01, -2.2057e-01, -1.2419e-01,  ..., -1.5287e-01,\n           6.2450e-02,  4.9240e-02],\n         ...,\n         [ 6.6910e-01, -3.4297e-01, -2.0511e-01,  ..., -1.0155e+00,\n           7.9812e-03,  3.0636e-01],\n         [ 4.0032e-01, -3.4343e-01,  1.5294e-01,  ..., -3.3256e-01,\n          -2.5672e-01, -1.9711e-01],\n         [-1.1014e-01, -4.8125e-01,  1.0338e-01,  ..., -7.0084e-01,\n           4.9208e-03,  2.7278e-01]]], grad_fn=&lt;NativeLayerNormBackward0&gt;), decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=tensor([[[-0.3462,  0.1944, -0.1375,  ..., -0.4447,  0.4016,  0.4290],\n         [ 0.0648,  0.2144,  0.0340,  ...,  0.2365,  0.1294,  0.3575],\n         [ 0.1515,  0.5005, -0.0685,  ..., -0.0157,  0.1598,  0.3866],\n         ...,\n         [ 0.1488,  0.8020, -0.2199,  ...,  0.2656,  0.0879,  0.2309],\n         [ 0.1548,  0.6870, -0.1847,  ...,  0.3029,  0.0465,  0.2264],\n         [-0.1375,  0.4506, -0.2336,  ..., -0.0616,  0.1774,  0.2659]],\n\n        [[-0.3369,  0.3608, -0.2942,  ..., -0.4818,  0.4762,  0.3779],\n         [ 0.0714,  0.3084,  0.0148,  ...,  0.0797,  0.2380,  0.3244],\n         [ 0.0873,  0.4330, -0.0352,  ..., -0.2179,  0.2011,  0.2788],\n         ...,\n         [-0.0706,  0.0146,  0.1921,  ..., -0.1177, -0.1456,  0.0187],\n         [ 0.1120,  0.2591,  0.0263,  ...,  0.1479, -0.0880,  0.0873],\n         [-0.1774,  0.3163, -0.0410,  ...,  0.0425,  0.1321,  0.2753]],\n\n        [[-0.2815,  0.3443, -0.2270,  ..., -0.5475,  0.2527,  0.3086],\n         [ 0.1719,  0.4588, -0.0811,  ...,  0.0694,  0.0811,  0.3715],\n         [ 0.2389,  0.2392, -0.1076,  ..., -0.1341, -0.2286,  0.2902],\n         ...,\n         [ 0.2274,  0.4766,  0.0128,  ...,  0.2001,  0.2571,  0.2773],\n         [ 0.2339,  0.5257,  0.0034,  ...,  0.2795,  0.2356,  0.2127],\n         [-0.0985,  0.3517, -0.0659,  ..., -0.0961,  0.3029,  0.1836]],\n\n        ...,\n\n        [[-0.3820,  0.4122, -0.4279,  ..., -0.4390,  0.4537,  0.3619],\n         [ 0.0776,  0.4093, -0.1319,  ...,  0.3167,  0.1865,  0.4449],\n         [ 0.0644,  0.5139, -0.1786,  ...,  0.1034,  0.1915,  0.3504],\n         ...,\n         [-0.0715,  0.1232,  0.0057,  ...,  0.2714,  0.0190,  0.1771],\n         [ 0.1267,  0.3740,  0.0213,  ..., -0.0367,  0.0245,  0.2749],\n         [-0.1652,  0.1528,  0.1033,  ..., -0.1985,  0.0891,  0.3079]],\n\n        [[-0.2655,  0.2723, -0.2191,  ..., -0.3646,  0.3872,  0.2680],\n         [ 0.1672,  0.2333, -0.0337,  ...,  0.2537,  0.2663,  0.3487],\n         [ 0.1631,  0.3007, -0.1148,  ...,  0.1061,  0.1698,  0.2983],\n         ...,\n         [ 0.1221,  0.1708,  0.0071,  ...,  0.4499, -0.0821,  0.0854],\n         [ 0.1202,  0.0732, -0.0148,  ...,  0.6552, -0.2320,  0.0461],\n         [-0.0094,  0.2407,  0.1013,  ..., -0.1772, -0.1296,  0.0011]],\n\n        [[-0.3589,  0.4908, -0.3906,  ..., -0.5620,  0.4539,  0.2588],\n         [ 0.1310,  0.5131, -0.0584,  ...,  0.1296,  0.1215,  0.2423],\n         [ 0.1021,  0.6150, -0.0859,  ..., -0.0818,  0.1724,  0.2820],\n         ...,\n         [ 0.2026,  0.4986,  0.1082,  ...,  0.1570,  0.1229,  0.1716],\n         [ 0.1716,  0.3375,  0.1374,  ...,  0.4551,  0.0419,  0.0987],\n         [-0.0736,  0.2892,  0.0910,  ..., -0.2655,  0.1247,  0.0657]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), encoder_hidden_states=None, encoder_attentions=None)\n\n\n\nexample_batch_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'encoder_last_hidden_state'])\n\n\n\n# We get 300 predictions per image in our batch, each with a logit value for each of the classes in our dataset \nexample_batch_outputs.logits.shape\n\ntorch.Size([32, 300, 7])\n\n\nThis is what will happen during training, our model will continually go over batches over data and try to match its own predictions with the ground truth labels.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---setup-trainingarguments-trainer",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---setup-trainingarguments-trainer",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "12 TK - Setup TrainingArguments + Trainer",
    "text": "12 TK - Setup TrainingArguments + Trainer\nUPTOHERE - creating TrainingArguments + Trainer + Training a model\n\nTK - for hyperparameters, see example in RT-DETR paper: https://arxiv.org/pdf/2304.08069\nAs well as DETR - https://arxiv.org/pdf/2005.12872 (see Appendix A.4)\nTry training for 25 epochs and see what happens\n\n\nprocessed_dataset[\"validation\"][0]\n\n{'pixel_values': tensor([[[ 0.1254,  0.1254,  0.1597,  ..., -2.0837, -1.9809, -1.9295],\n          [ 0.1426,  0.1254,  0.1597,  ..., -2.0494, -1.9638, -1.9467],\n          [ 0.1426,  0.1426,  0.1597,  ..., -1.9467, -1.9295, -1.9467],\n          ...,\n          [ 1.2899,  1.0502,  1.1358,  ...,  0.7248,  0.7933,  0.7762],\n          [ 1.4098,  1.1872,  1.0331,  ...,  0.7077,  0.7419,  0.7419],\n          [ 1.2728,  0.9646,  0.9303,  ...,  0.7077,  0.7591,  0.7248]],\n \n         [[ 1.2206,  1.1856,  1.1506,  ..., -1.9832, -1.8782, -1.7731],\n          [ 1.2381,  1.1856,  1.1506,  ..., -1.9657, -1.8606, -1.8256],\n          [ 1.2381,  1.2031,  1.1681,  ..., -1.8606, -1.8256, -1.8431],\n          ...,\n          [ 1.2906,  1.0630,  1.1506,  ...,  0.3803,  0.4503,  0.4328],\n          [ 1.4307,  1.2031,  1.0280,  ...,  0.3627,  0.3978,  0.3978],\n          [ 1.2906,  0.9755,  0.9230,  ...,  0.3627,  0.4153,  0.3803]],\n \n         [[ 2.1346,  2.2217,  2.1868,  ..., -1.7173, -1.6127, -1.5604],\n          [ 2.1520,  2.2217,  2.1868,  ..., -1.6999, -1.5953, -1.5779],\n          [ 2.1694,  2.2217,  2.1868,  ..., -1.5953, -1.5430, -1.5604],\n          ...,\n          [ 1.2108,  0.9842,  1.0539,  ...,  0.3568,  0.4265,  0.4091],\n          [ 1.3154,  1.0888,  0.9494,  ...,  0.3393,  0.3742,  0.3742],\n          [ 1.1759,  0.8622,  0.8448,  ...,  0.3393,  0.3916,  0.3568]]]),\n 'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([719]), 'class_labels': tensor([4, 4, 1, 5, 0, 0]), 'boxes': tensor([[0.1898, 0.1767, 0.2161, 0.1620],\n         [0.5669, 0.1938, 0.0742, 0.0805],\n         [0.7672, 0.7768, 0.4526, 0.4327],\n         [0.4715, 0.6213, 0.2235, 0.1502],\n         [0.3973, 0.5639, 0.7729, 0.6337],\n         [0.6906, 0.4581, 0.5110, 0.4600]]), 'area': tensor([ 10753.6875,   1833.4000,  60167.3867,  10316.8945, 150459.0469,\n          72216.3203]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\nfrom transformers import TrainingArguments, Trainer\n\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 without running out of memory\nBATCH_SIZE = 16\n\n# Note: AdamW Optimizer is used by default\ntraining_args = TrainingArguments(\n    output_dir=\"detr_finetuned_trashify_box_detector\",\n    num_train_epochs=25,\n    fp16=True,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=1e-4,\n    lr_scheduler_type=\"linear\",\n    weight_decay=1e-4,\n    max_grad_norm=0.01,\n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False,\n    eval_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    logging_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    report_to=\"none\", # don't save experiments to a third party service\n    dataloader_num_workers=4, # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0 \n    warmup_ratio=0.05, # learning rate warmup\n    push_to_hub=False,\n    eval_do_concat_batches=False\n)\n\nmodel_v1_trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: TK - can add a metrics function, just see if model trains first, see here for an example: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160 \n)\n\nmodel_v1_results = model_v1_trainer.train()\n\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/accelerate/accelerator.py:488: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n  self.scaler = torch.cuda.amp.GradScaler(**kwargs)\n\n\n\n    \n      \n      \n      [1250/1250 04:25, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\n\n\n\n\n1\n101.878300\n7.513162\n\n\n2\n4.145500\n3.055572\n\n\n3\n2.596400\n2.273679\n\n\n4\n2.277300\n2.069138\n\n\n5\n2.081800\n1.849403\n\n\n6\n1.925300\n1.687234\n\n\n7\n1.780200\n1.603322\n\n\n8\n1.675000\n1.451112\n\n\n9\n1.526300\n1.409718\n\n\n10\n1.432200\n1.339651\n\n\n11\n1.386000\n1.289711\n\n\n12\n1.309800\n1.281332\n\n\n13\n1.248000\n1.209565\n\n\n14\n1.209000\n1.220024\n\n\n15\n1.175700\n1.198685\n\n\n16\n1.144000\n1.175700\n\n\n17\n1.073200\n1.193522\n\n\n18\n1.050100\n1.153087\n\n\n19\n0.986400\n1.157631\n\n\n20\n0.994100\n1.151300\n\n\n21\n0.958900\n1.144987\n\n\n22\n0.927900\n1.135496\n\n\n23\n0.907100\n1.123257\n\n\n24\n0.885100\n1.133819\n\n\n25\n0.870900\n1.130216\n\n\n\n\n\n\nTK - Note: May get an error at the beginning where a box is predicted a negative output. This will break training as boxes are expected to be positive floats.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---make-predictions-on-the-test-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---make-predictions-on-the-test-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "13 TK - Make predictions on the test dataset",
    "text": "13 TK - Make predictions on the test dataset\n\nprocessed_dataset[\"test\"][0]\n\n{'pixel_values': tensor([[[-0.9705, -0.7308, -0.9705,  ..., -1.8953, -1.8268, -1.3130],\n          [-1.2959, -0.9363, -0.3883,  ..., -1.8953, -1.7240, -0.5596],\n          [-1.4843, -1.1418, -0.1999,  ..., -1.8782, -1.2788, -0.5424],\n          ...,\n          [ 1.3242,  1.3242,  1.3413,  ..., -0.6452, -0.2856, -0.9877],\n          [ 1.3070,  1.3584,  1.4098,  ..., -0.8678,  0.0398, -0.4911],\n          [ 1.2728,  1.3413,  1.4098,  ..., -0.9705,  0.1768, -0.1657]],\n \n         [[-0.5476, -0.3550, -0.6527,  ..., -1.7031, -1.6155, -1.0903],\n          [-0.8803, -0.5476, -0.0399,  ..., -1.6856, -1.5280, -0.3200],\n          [-1.0728, -0.7402,  0.1527,  ..., -1.6506, -1.0553, -0.3025],\n          ...,\n          [-1.7031, -1.7031, -1.6856,  ..., -0.3901,  0.0301, -0.7227],\n          [-1.7206, -1.6681, -1.6155,  ..., -0.6176,  0.3803, -0.1800],\n          [-1.7556, -1.6856, -1.6155,  ..., -0.7052,  0.5203,  0.1527]],\n \n         [[-1.0550, -0.7064, -0.8284,  ..., -1.6824, -1.5953, -1.0201],\n          [-1.3861, -0.9504, -0.2881,  ..., -1.6999, -1.4559, -0.2532],\n          [-1.6476, -1.1944, -0.1661,  ..., -1.6650, -1.0376, -0.2881],\n          ...,\n          [-1.2641, -1.2641, -1.2467,  ..., -0.9504, -0.8284, -1.2293],\n          [-1.2816, -1.2293, -1.1770,  ..., -1.1596, -0.5321, -1.0027],\n          [-1.3164, -1.2467, -1.1770,  ..., -1.3513, -0.4973, -0.8981]]]),\n 'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([61]), 'class_labels': tensor([4, 5, 1, 0]), 'boxes': tensor([[0.2104, 0.8563, 0.2855, 0.2720],\n         [0.4194, 0.4927, 0.2398, 0.1785],\n         [0.3610, 0.6227, 0.2706, 0.2330],\n         [0.4974, 0.4785, 0.3829, 0.3820]]), 'area': tensor([23860.4043, 13150.1748, 19368.0898, 44929.9102]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\n\n# Make predictions with trainer containing trained model\ntest_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"])\n# test_dataset_preds\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[39], line 2\n      1 # Make predictions with trainer containing trained model\n----&gt; 2 test_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"])\n      3 # test_dataset_preds\n\nNameError: name 'model_v1_trainer' is not defined\n\n\n\n\n# Get the logits\ntest_pred_logits = test_dataset_preds.predictions[0][1]\n\n# Get the boxes\ntest_pred_boxes = test_dataset_preds.predictions[0][2]\n\n# Get the label IDs\ntest_pred_label_ids = test_dataset_preds.label_ids\n\n# Check shapes\ntest_pred_logits.shape, test_pred_boxes.shape, len(test_pred_label_ids)\n\n((16, 300, 7), (16, 300, 4), 13)\n\n\n\n%%time\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n# random_test_sample_outputs\n\n[INFO] Making predictions on test item with index: 163\nCPU times: user 51.5 ms, sys: 10.3 ms, total: 61.8 ms\nWall time: 63.1 ms\n\n\n\n# image_processor.preprocess?\n\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.25, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_test_sample[\"labels\"][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Making predictions on test item with index: 28\n[INFO] Labels with scores: ['Pred: hand (0.4208)', 'Pred: trash (0.3352)']\n\n\n\n\n\n\n\n\n\nTK - nice!!! these boxes look far better than our randomly predicted boxes with an untrained model‚Ä¶\n\n13.1 TK - Predict on image from filepath\n\n# Pred on image from pathname\nfrom pathlib import Path\nfrom PIL import Image\npath_to_test_image_folder = Path(\"data/trashify_test_images\")\ntest_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\ntest_image_targ_filepath = random.choice(test_image_filepaths)\n# test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\ntest_image_pil = Image.open(test_image_targ_filepath)\ntest_image_preprocessed = image_processor.preprocess(images=test_image_pil,\n                                                     return_tensors=\"pt\")\n\ndef get_image_dimensions_from_pil(image: Image.Image) -&gt; torch.tensor:\n    \"\"\"\n    Convert the dimensions of a PIL image to a PyTorch tensor in the order (height, width).\n\n    Args:\n        image (Image.Image): The input PIL image.\n\n    Returns:\n        torch.Tensor: A tensor containing the height and width of the image.\n    \"\"\"\n    # Get (width, height) of image (PIL.Image.size returns width, height)\n    width, height = image.size\n\n    # Convert to a tensor in the order (height, width)\n    image_dimensions_tensor = torch.tensor([height, width])\n\n    return image_dimensions_tensor\n\n# Get image original size\ntest_image_size = get_image_dimensions_from_pil(image=test_image_pil)\n\n# Make predictions on the preprocessed image\nrandom_test_sample_outputs = model(pixel_values=test_image_preprocessed[\"pixel_values\"].to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\nTHRESHOLD = 0.2\n\n# Post process the predictions\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=THRESHOLD,\n    target_sizes=[test_image_size] # needs to be same length as batch dimension of the logits (e.g. [[height, width]])\n)\n\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a lsit of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\"\n                                     for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(\"[INFO] Labels with scores:\")\nfor item in random_test_sample_labels_to_plot:\n    print(item)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=test_image_pil),                    \n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n\n# # Plot the random sample image with randomly predicted boxes (these will be very poor since the model is not trained on our data yet)\n# to_pil_image(\n#     pic=draw_bounding_boxes(\n#         image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n#         boxes=random_test_sample_pred_boxes,\n#         labels=random_test_sample_labels_to_plot,\n#         width=3\n#     )\n# )\n\n[INFO] Labels with scores:\nPred: trash (0.7138)\nPred: bin (0.699)\nPred: hand (0.6244)\nPred: bin (0.6231)\nPred: not_trash (0.4189)\nPred: bin (0.2655)\nPred: hand (0.2617)\nPred: not_trash (0.2392)\nPred: not_trash (0.2335)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "14 TK - Upload our trained model to Hugging Face Hub",
    "text": "14 TK - Upload our trained model to Hugging Face Hub\nTK - Let‚Äôs make our model available for others to use.\n\n# UPTOHERE\n# Make extensions to make the model better... (e.g. data augmentation = harder training set = better overall validation loss)\n# Model with data augmentation\n# Model with longer training (e.g. 100 epochs) \n# Research eval_do_concat_batches=False/True & see what the results do...\n\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_save_path}\")\nmodel_v1_trainer.save_model(model_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_25_epochs_lr_1e-04\n\n\n\n# Push the model to the hub\n# Note: this will require you to have your Hugging Face account setup \nmodel_v1_trainer.push_to_hub(commit_message=\"upload trashify object detection model\",\n                    # token=None # Optional to add a token manually\n                    )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector/commit/ab273cec67e5124ac047dc1e068c379c718e6c37', commit_message='upload trashify object detection model', commit_description='', oid='ab273cec67e5124ac047dc1e068c379c718e6c37', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector'), pr_revision=None, pr_num=None)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#creating-a-demo-of-our-model-with-gradio",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#creating-a-demo-of-our-model-with-gradio",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "17 Creating a demo of our model with Gradio",
    "text": "17 Creating a demo of our model with Gradio\nOne of the best ways to share your machine learning work is by creating a demo application.\nAnd one of the best places to share your applications is Hugging Face Spaces.\nHugging Face Spaces allows you to host machine learning (and non-machine learning) applications for free (with optional paid hardware upgrades).\nIf you‚Äôre familiar with GitHub, Hugging Face Spaces works similar to a GitHub repository (each Space is a Git repository itself).\nIf not, that‚Äôs okay, think of Hugging Face Spaces as an online folder where you can upload your files and have them accessed by others.\nCreating a Hugging Face Space can be done in two main ways:\n\nManually - By going to the Hugging Face Spaces website and clicking ‚ÄúCreate new space‚Äù. Or by going directly to https://www.huggingface.co/new-space. Here, you‚Äôll be able to setup a few settings for your Space and choose the framework/runtime (e.g.¬†Streamlit, Gradio, Docker and more).\nProgrammatically - By using the Hugging Face Hub Python API we can write code to directly upload files to the Hugging Face Hub, including Hugging Face Spaces.\n\nBoth are great options but we‚Äôre going to take the second approach.\nThis is so we can create our Hugging Face Space right from this notebook.\nTo do so, we‚Äôll create three files and a folder:\n\napp.py (main file that Hugging Face Spaces looks for) - This will be the Python file which will be the main running file on our Hugging Face Space. Inside we‚Äôll include all the code necessary to run our Gradio demo (as above). Hugging Face Spaces will automatically recoginize the app.py file and run it for us.\nrequirements.txt - This text file will include all of the Python packages we need to run our app.py file. Before our Space starts to run, all of the packages in this file will be installed.\nREADME.md - This markdown file will include details about our Space as well as specific Space-related metadata (we‚Äôll see this later on).\ntrashify_examples/ - This folder will contain several images that our Trashify demo will showcase as examples in the demo.\n\nWe‚Äôll create these files with the following file structure:\ndemos/\n‚îî‚îÄ‚îÄ trashify_object_detector/\n    ‚îú‚îÄ‚îÄ app.py\n    ‚îú‚îÄ‚îÄ README.md\n    ‚îú‚îÄ‚îÄ requirements.txt\n    ‚îî‚îÄ‚îÄ trashify_examples/\n        ‚îú‚îÄ‚îÄ trashify_example_1.jpeg\n        ‚îú‚îÄ‚îÄ trashify_example_2.jpeg\n        ‚îî‚îÄ‚îÄ trashify_example_3.jpeg\nWhy this way?\nDoing it in the above style means we‚Äôll have a directory which contains all of our demos (demos/) as well as a dedicated directory which contains our Trashify demo application (trashify_object_detector/).\nThis way, we‚Äôll be able to upload the whole demos/trashify_object_detector/ folder to Hugging Face Spaces.\nLet‚Äôs start by making a directory to store our demo application files.\n\n# Setup path to trashify demo folder (we'll store all of our demo requirements in here)\ndemo_path = Path(\"../demos/trashify_object_detector\")\n\n# Create the directory\ndemo_path.mkdir(parents=True, exist_ok=True)\n\n\n17.1 Making an app file\nUPTOHERE - write the steps required for the app.py file\nOur app.py file will be the main part of our Hugging Face Space.\nInside the app.py file we‚Äôll:\n\nImport the required libraries/packages for running our demo app.\nSetup preprocessing and helper functions for our trained ojbect detection model. Because our model is already hosted on the Hugging Face Hub, we can load it directly with transformers.AutoModelForObjectDetection.from_pretrained and passing it our model‚Äôs name (e.g.¬†mrdbourke/rt_detrv2_finetuned_trashify_box_detector_v1) and when we upload our app.py file to Hugging Face Spaces, it will load the model directly from the Hub.\n\nNote: Be sure to change ‚Äúmrdbourke‚Äù to your own Hugging Face username.\n\nCreate a function predict_on_image to:\n\nTake in an image and confidence threshold.\nPredict on the image with our model.\nPost process the predictions.\nDraw the predictions on the target image (see step 4).\nReturn the target image with drawn predictions as well as a text label output as to whether trash, bin and hand were detected (see step 4).\n\nWe‚Äôll draw the model‚Äôs predicted boxes (if there are any) on the image with PIL.ImageDraw.\nWrite some logic to detect whether trash, bin and hand objects are detected as this is the overall goal of Trashify, so if all three are present, we‚Äôll output a message saying +1! for the person picking up trash.\nWe‚Äôll create a demo using Gradio‚Äôs gr.Interface class. This will take an image and float as inputs as well as an image and string as outputs. We can add descriptions and other information to our demo so they are visible in the live app. To finish off, we‚Äôll launch the demo with gr.Interface.launch.\n\nWe can write all of the above in a notebook cell.\nAnd we can turn it into a file by using the %%writefile magic command and passing it our target filepath.\nLet‚Äôs do it!\n\n%%writefile ../demos/trashify_object_detector/app.py\n\n# 1. Import the required libraries and packages\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont # could also use torch utilities for drawing\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n### 2. Setup preprocessing and helper functions ###\n\n# Setup target model path to load\n# Note: Can load from Hugging Face or can load from local \nmodel_save_path = \"mrdbourke/rt_detrv2_finetuned_trashify_box_detector_v1\"\n\n# Load the model and preprocessor\n# Because this app.py file is running directly on Hugging Face Spaces, the model will be loaded from the Hugging Face Hub\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\n# Set the target device (use CUDA/GPU if it is available)\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if *any* item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if *all* items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\n### 3. Create function to predict on a given image with a given confidence threshold ###\ndef predict_on_image(image, conf_threshold):\n    # Make sure model is in eval mode\n    model.eval()\n\n    # Make a prediction on target image \n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        model_outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # -&gt; [batch_size, height, width] \n        \n        # Post process the raw outputs from the model \n        results = image_processor.post_process_object_detection(model_outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n\n    # Return all items in results to CPU (we'll want this for displaying outputs with matplotlib)\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    ### 4. Draw the predictions on the target image ###\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    # Iterate through the predictions of the model and draw them on the target image\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    ### 5. Create logic for outputting information message ### \n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n### 6. Setup the demo application to take in image, make a prediction with our model, return the image with drawn predicitons ### \n\n# Write description for our demo application\ndescription = \"\"\"\nHelp clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\nModel is a fine-tuned version of [RT-DETRv2](https://huggingface.co/docs/transformers/main/en/model_doc/rt_detr_v2#transformers.RTDetrV2Config) on the [Trashify dataset](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\nSee the full data loading and training code on [learnhuggingface.com](https://www.learnhuggingface.com/notebooks/hugging_face_object_detection_tutorial).\n\nThis version is v4 because the first three versions were using a different model and did not perform as well, see the [README](https://huggingface.co/spaces/mrdbourke/trashify_demo_v4/blob/main/README.md) for more.\n\"\"\"\n\n# Create the Gradio interface to accept an image and confidence threshold and return an image with drawn prediction boxes\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.3, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V4\",\n    description=description,\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    # See where the examples originate from here: https://huggingface.co/datasets/mrdbourke/trashify_examples/\n    examples=[\n        [\"trashify_examples/trashify_example_1.jpeg\", 0.3],\n        [\"trashify_examples/trashify_example_2.jpeg\", 0.3], \n        [\"trashify_examples/trashify_example_3.jpeg\", 0.3],\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting ../demos/trashify_object_detector/app.py\n\n\n\n\n17.2 Making a requirements file\nWhen you upload an app.py file to Hugging Face Spaces, it will attempt to run it automatically.\nAnd just like running the file locally, we need to make sure all of the required packages are available.\nOtherwise our Space will produce an error like the following:\n===== Application Startup at ... =====\n\nTraceback (most recent call last):\n  File \"/home/user/app/app.py\", line 1, in &lt;module&gt;\n    import torch\nModuleNotFoundError: No module named 'torch'\nGood news is, our demo only has three requirements: gradio, torch, transformers.\nLet‚Äôs create a requirements.txt file with the packages we need and save it to the same directory as our app.py file.\n%%writefile ../demos/trashify_object_detector/requirements.txt timm gradio torch transformers\n\n\n17.3 Making a README file\nOur app.py can contain information about our demo, however, we can also use a README.md file to further communicate our work.\n\n\n\n\n\n\nNote\n\n\n\nIt is common practice in Git repositories (including GitHub and Hugging Face Hub) to add a README.md file to your project so people can read more (hence ‚Äúread me‚Äù) about what your project is about.\n\n\nWe can include anything in markdown-style text in the README.md file.\nHowever, Spaces also have a special YAML block at the top of the README.md file in the root directory with configuration details.\nInside the YAML block you can put special metadata details about your Space including:\n\ntitle - The title of your Space (e.g.¬†title: Trashify Demo V4 üöÆ).\nemoji - The emoji to display on your Space (e.g.¬†emoji: üóëÔ∏è).\napp_file - The target app file for Spaces to run (set to app_file: app.py by default).\n\nAnd there are plenty more in the Spaces Configuration References documentation.\n\n\n\n\nExample of Hugging Face Spaces README.md file with YAML front matter (front matter is another term for ‚Äúthings at the front/top of the file‚Äù) for formatting the Space.\n\n\nLet‚Äôs create a README.md file with a YAML block at the top detailing some of the metadata about our project.\n\n\n\n\n\n\nNote\n\n\n\nThe YAML block at the top of the README.md can take some practice.\nIf you want to see a demo of how one gets created, try making a Hugging Face Space with the ‚ÄúCreate new Space‚Äù button on the https://huggingface.co/spaces page and seeing what the README.md file starts with (that‚Äôs how I found out what to do!).\n\n\n\n%%writefile ../demos/trashify_object_detector/README.md\n---\ntitle: Trashify Demo V4 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 5.34.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector V4 \n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned [Conditional DETR](https://huggingface.co/docs/transformers/en/model_doc/conditional_detr) model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned Conditional DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned Conditional DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n* [V4](https://huggingface.co/spaces/mrdbourke/trashify_demo_v4) = Fine-tuned [RT-DETRv2](https://huggingface.co/docs/transformers/main/en/model_doc/rt_detr_v2) model trained *without* data augmentation or NMS post-processing (current best mAP).\n\n## Learn more\n\nSee the full end-to-end code of how this demo was built at [learnhuggingface.com](https://www.learnhuggingface.com/notebooks/hugging_face_object_detection_tutorial). \n\nOverwriting ../demos/trashify_object_detector/README.md\n\n\n\n\n17.4 Making an examples folder\nWhen we create our demo application, it‚Äôll be good to show people how to use it.\nTo do so, we can add some example images to use with our demo.\nFirst we‚Äôll create a folder to store the demo images.\n\n# Make a directory to save examples to\nfrom pathlib import Path\n\ndemo_example_dir = \"../demos/trashify_object_detector/trashify_examples/\"\nPath(demo_example_dir).mkdir(exist_ok=True, parents=True)\n\nAnd now we can download some pre-made examples I‚Äôve added to Hugging Face Datasets (none of these were in the Trashify training data).\nYou can find the example Trashify images at mrdbourke/trashify_examples.\n\n# Download the examples from Hugging Face Datasets\nfrom datasets import load_dataset\n\ntrashify_examples = load_dataset(\"mrdbourke/trashify_examples\")\ntrashify_examples\n\nDatasetDict({\n    train: Dataset({\n        features: ['image'],\n        num_rows: 3\n    })\n})\n\n\nPerfect!\nNow let‚Äôs save each of these images to our target example folder in the Trashify demo directory.\n\nfor i, sample in enumerate(trashify_examples[\"train\"]):\n    save_path = Path(demo_example_dir, f\"trashify_example_{i+1}.jpeg\")\n    print(f\"[INFO] Saving image to: {save_path}\")\n    sample[\"image\"].save(save_path)\n\n[INFO] Saving image to: ../demos/trashify_object_detector/trashify_examples/trashify_example_1.jpeg\n[INFO] Saving image to: ../demos/trashify_object_detector/trashify_examples/trashify_example_2.jpeg\n[INFO] Saving image to: ../demos/trashify_object_detector/trashify_examples/trashify_example_3.jpeg\n\n\nNow let‚Äôs check the demo folder for Trashify.\n\n!ls ../demos/trashify_object_detector/\n\nREADME.md  app.py  requirements.txt  trashify_examples\n\n\nPerfect!\nLooks like we‚Äôve got all the files we need to create our Space.\nLet‚Äôs upload them to the Hugging Face Hub.\n\n\n17.5 Uploading our demo to Hugging Face Spaces\nWe‚Äôve created all of the files required for our demo, now for the fun part!\nLet‚Äôs upload them to Hugging Face Spaces.\nTo do so programmatically, we can use the Hugging Face Hub Python API.\n\n\n\n\n\n\nNote\n\n\n\nThe Hugging Face Hub Python API has many different options for interacting with the Hugging Face Hub programmatically.\nYou can create repositories, upload files, upload folders, add comments, change permissions and much much more.\nBe sure to explore the documentation for at least 10-15 minutes to get an idea of what‚Äôs possible.\n\n\nTo get our demo hosted on Hugging Face Spaces we‚Äôll go through the following steps:\n\nImport the required methods from the huggingface_hub package, including create_repo, get_full_repo_name, upload_file (optional, we‚Äôll be using upload_folder) and upload_folder.\nDefine the demo folder we‚Äôd like to upload as well as the different parameters for the Hugging Face Space such as repo type (\"space\"), our target Space name, the target Space SDK (\"gradio\"), our Hugging Face token with write access (optional if it already isn‚Äôt setup).\nCreate a repository on Hugging Face Spaces using the huggingface_hub.create_repo method and filling out the appropriate parameters.\nGet the full name of our created repository using the huggingface_hub.get_full_repo_name method (we could hard code this but I like to get it programmatically incase things change).\nUpload the contents of our target demo folder (../demos/trashify_object_detector/) to Hugging Face Hub with huggingface_hub.upload_folder.\nHope it all works and inspect the results! ü§û\n\nA fair few steps but we‚Äôve got this!\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"../demos/trashify_object_detector\" \nHF_TARGET_SPACE_NAME = \"trashify_demo_v4\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v4\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v4\n[INFO] Uploading ../demos/trashify_object_detector to repo: mrdbourke/trashify_demo_v4\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v4/tree/main/.\n\n\nWoohoo!! Looks like our demo is now live on the Hugging Face Hub!\n\n\n17.6 Testing the hosted demo\nWe are showing Trashify v4 because like Star Wars episodes, I‚Äôve already done a few experiments before launching it.\nOne of the cool things about using Hugging Facce Spaces is we can embed the Space in our notebook using HTML.\nTo do so, you can click the ‚Äú‚Ä¶‚Äù button (three dots) in the top right hand corner of the Hugging Face Space and choose the option ‚ÄúEmbed this Space‚Äù.\nTo embed it with HTML, you can choose the Iframe option.\n\nfrom IPython.display import HTML\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v4.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"1000\"\n&gt;&lt;/iframe&gt;     \n''')\n\n\n     \n\n\nIsn‚Äôt that cool!\nOur very our object detection model trained on a custom dataset and now live on the internet for other people to try out!",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---improve-our-model-with-data-augmentation",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---improve-our-model-with-data-augmentation",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "16 TK - Improve our model with data augmentation",
    "text": "16 TK - Improve our model with data augmentation\nUPTOHERE - Read for object detection augmentation (keep it simple) - Check out the papers for detection augmentation - Train a model with data augmentation - Compare the model‚Äôs metrics between data augmentation and no data augmentation\n\n16.1 Load dataset\n\nfrom datasets import load_dataset\n\n# load_dataset?\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\n\n# Split the data\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.6, seed=42) # split the test set into 40/60 validation/test\n\n# Create splits\ndataset[\"train\"] = dataset_split[\"train\"]\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\ndataset\n\n[INFO] Length of original dataset: 1128\n\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 135\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 204\n    })\n})\n\n\n\n# Get the categories from the dataset\n# Note: this requires the dataset to have been uploaded with this feature setup\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\n\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nid2label, label2id\n\n({0: 'bin',\n  1: 'hand',\n  2: 'not_bin',\n  3: 'not_hand',\n  4: 'not_trash',\n  5: 'trash',\n  6: 'trash_arm'},\n {'bin': 0,\n  'hand': 1,\n  'not_bin': 2,\n  'not_hand': 3,\n  'not_trash': 4,\n  'trash': 5,\n  'trash_arm': 6})\n\n\n\n# View a random sample\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 955,\n 'annotations': {'file_name': ['ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg'],\n  'image_id': [955, 955, 955, 955],\n  'category_id': [5, 1, 0, 4],\n  'bbox': [[464.79998779296875, 625.5999755859375, 68.30000305175781, 92.5],\n   [483.0, 686.2000122070312, 173.0, 247.3000030517578],\n   [102.80000305175781, 361.70001220703125, 813.5, 734.0],\n   [325.29998779296875,\n    716.5999755859375,\n    189.60000610351562,\n    215.3000030517578]],\n  'iscrowd': [0, 0, 0, 0],\n  'area': [6317.75, 42782.8984375, 597109.0, 40820.87890625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n\n\n16.2 Setup model\n\nfrom transformers import AutoModelForObjectDetection, AutoImageProcessor\n\n# Model config - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig \n# Model docs - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel \nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n\n# Set image size\nIMAGE_SIZE = 640 # other common image sizes include: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Get the image processor (this is required for prepraring images)\n# See docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height)\n    size={\"shortest_edge\": IMAGE_SIZE, \"longest_edge\": IMAGE_SIZE},\n    max_size=None # Note: this parameter is deprecated and will produce a warning if used during processing.\n)\n\n# Check out the image processor\nimage_processor\n\nConditionalDetrImageProcessor {\n  \"do_convert_annotations\": true,\n  \"do_normalize\": true,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"ConditionalDetrImageProcessor\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"size\": {\n    \"longest_edge\": 640,\n    \"shortest_edge\": 640\n  }\n}\n\n\n\n# First create a couple of dataclasses to store our data format\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n@dataclass\nclass SingleCOCOAnnotation:\n    \"An instance of a single COCO annotation. See COCO format: https://cocodataset.org/#format-data\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in format [x_top_left, y_top_left, width, height]\n    area: float = 0.0\n    iscrowd: int = 0\n\n@dataclass\nclass ImageCOCOAnnotations:\n    \"A collection of COCO annotations for a given image_id.\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in format \n) -&gt; dict:\n    # Turn input lists into a list of dicts\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # Return dictionary of annotations with format {\"image_id\": ..., \"annotations\": ...}\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\n# Let's try it out\nimage_id = 0\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 0,\n 'annotations': [{'image_id': 0,\n   'category_id': 0,\n   'bbox': [452.79998779296875,\n    446.6000061035156,\n    272.70001220703125,\n    388.20001220703125],\n   'area': 105862.140625,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [146.5, 487.5, 348.3999938964844, 424.79998779296875],\n   'area': 148000.3125,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [8.300000190734863, 522.5, 241.3000030517578, 505.0],\n   'area': 121856.5,\n   'iscrowd': 0}]}\n\n\n\n# Setup the model\n# TODO: Can functionize this to create a base model (e.g. a model with all the base settings/untrained weights) \ndef create_model():\n    model = AutoModelForObjectDetection.from_pretrained(\n                pretrained_model_name_or_path=MODEL_NAME,\n                label2id=label2id,\n                id2label=id2label,\n                ignore_mismatched_sizes=True,\n                backbone=\"resnet50\")\n    return model\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n\n16.3 tk - Setup and visualize transforms (augmentations)\n\nTK - explain simple augmentations:\n\nRandomHorizontalFlip\nColorJitter\n\nThat‚Äôs it‚Ä¶\nTailor the data augmentations to your own dataset/problem\n\n\n\n\nimport torch\nimport torchvision\n\nfrom torchvision.transforms import v2 \nfrom torchvision.transforms.v2.functional import to_pil_image, pil_to_tensor, pad\nfrom torchvision.utils import draw_bounding_boxes\n\n# Optional transform from here: https://arxiv.org/pdf/2012.07177\n# Scale jitter -&gt; pad -&gt; resize \n\ntrain_transforms = v2.Compose([\n    v2.ToImage(),\n    # v2.RandomResizedCrop(size=(640, 640), antialias=True),\n    # v2.Resize(size=(640, 640)),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.ScaleJitter(target_size=(640, 640)),\n    # PadToSize(target_height=640, target_width=640),\n    v2.RandomHorizontalFlip(p=0.5),\n    # v2.RandomPhotometricDistort(p=0.75),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.Resize(size=(640, 640)),\n    v2.ColorJitter(brightness=0.75, # randomly adjust the brightness \n                   contrast=0.75), # randomly alter the contrast\n    # v2.RandomPerspective(distortion_scale=0.3, \n    #                      p=0.3,\n    #                      fill=(123, 117, 104)), # fill with average colour\n    # v2.RandomZoomOut(side_range=(1.0, 1.5),\n    #                  fill=(123, 117, 104)),\n    v2.ToDtype(dtype=torch.float32, scale=True),\n\n    # v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    # sanitize boxes, recommended to be called at least once at the end of the transform pipeline\n    # https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes\n    v2.SanitizeBoundingBoxes(labels_getter=None) \n])\n\n\n\n16.4 TK - Visualize transforms\n\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\n\n# Perform transform on image\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_image_width, random_sample_image_height = random_sample[\"image\"].size\nrandom_sample_boxes_xywh = random_sample[\"annotations\"][\"bbox\"] # these are in XYWH format\nrandom_sample_boxes_xyxy = torchvision.ops.box_convert(boxes=torch.tensor(random_sample_boxes_xywh),\n                                                       in_fmt=\"xywh\",\n                                                       out_fmt=\"xyxy\")\n\n# Format boxes to be xyxy for transforms\nrandom_sample_boxes_xyxy = torchvision.tv_tensors.BoundingBoxes(\n    data=random_sample_boxes_xyxy,\n    format=\"XYXY\",\n    canvas_size=(random_sample_image_height, random_sample_image_width) # comes in the form height, width\n)\n\nrandom_sample_image_transformed, random_sample_boxes_transformed = train_transforms(random_sample_image,\n                                                                                    random_sample_boxes_xyxy)\n\n\nrandom_sample_original_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                       image=pil_to_tensor(pic=random_sample_image),                    \n                                                       boxes=random_sample_boxes_xyxy,\n                                                       labels=None,\n                                                       width=3))\nrandom_sample_original_image_with_boxes_size = (random_sample_original_image_with_boxes.size[1], random_sample_original_image_with_boxes.size[0])\n\n# Plot the predicted boxes on the random test image \nrandom_sample_transformed_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                          image=random_sample_image_transformed,                    \n                                                          boxes=random_sample_boxes_transformed,\n                                                          labels=None,\n                                                          width=3))\nrandom_sample_transformed_image_with_boxes_size = (random_sample_transformed_image_with_boxes.size[1], random_sample_transformed_image_with_boxes.size[0])\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Display image 1\naxes[0].imshow(random_sample_original_image_with_boxes)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image | Size: {random_sample_original_image_with_boxes_size} (hxw)\")\n\n# Display image 2\naxes[1].imshow(random_sample_transformed_image_with_boxes)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Transformed Image | Size: {random_sample_transformed_image_with_boxes_size} (hxw)\")\n\n# Show the plot\nplt.tight_layout()\nplt.show();\n\n\n\n\n\n\n\n\n\n\n16.5 TK - Create function to preprocess and transform batch of examples\n\nfrom torchvision import tv_tensors\n\ndef preprocess_and_transform_batch(examples,\n                                   image_processor,\n                                   transforms=None # Note: Could optionally add transforms (e.g. data augmentation) here \n                                   ):\n    \"\"\"\n    Function to preprocess batches of data.\n\n    Can optionally apply a transform later on.\n    \"\"\"\n    images = []\n    \n    coco_annotations = [] \n\n    for image, image_id, annotations_dict in zip(examples[\"image\"], examples[\"image_id\"], examples[\"annotations\"]):\n        # Note: may need to open image if it is an image path rather than PIL.Image\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n    \n        # Note: Could optionally apply a transform here.\n        if transforms:\n            width, height = image.size[0], image.size[1]\n            bbox_list = tv_tensors.BoundingBoxes(data=torch.tensor(bbox_list),\n                                                 format=\"XYWH\",\n                                                 canvas_size=(height, width)) # canvas_size = height, width\n            image, bbox_list = transforms(image, \n                                          bbox_list)\n\n        # Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # Add images/annotations to their respective lists\n        images.append(image)\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\",\n                                                    do_rescale=False if transforms else True,\n                                                    do_resize=True,\n                                                    do_pad=True)\n    \n    return preprocessed_batch\n\n\nfrom functools import partial\n\n# Make a transform for different splits\ntrain_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=train_transforms,\n    image_processor=image_processor\n)\n\nvalidation_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=None,\n    image_processor=image_processor\n)\n\n\nprocessed_dataset = dataset.copy()\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(train_transform_batch)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(validation_transform_batch)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(validation_transform_batch)\n\n\n# Create data_collate_function to collect samples into batches\n# TK - want to get a dictionary of {\"pixel_mask\": [batch_of_samples], \"labels\": [batch_of_samples], \"pixel_mask\": [batch_of_samples]}\ndef data_collate_function(batch):\n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in batch])\n\n    return collated_data\n\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\n\nfrom transformers import TrainingArguments, Trainer\n\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 without running out of memory\nBATCH_SIZE = 16\n\n# Disable warnings about `max_size` parameter being deprecated (this is okay)\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\n# Note: AdamW Optimizer is used by default\ntraining_args = TrainingArguments(\n    output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\", # Tk - make sure this is suitable for data aug model\n    num_train_epochs=25,\n    fp16=True,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=1e-4,\n    lr_scheduler_type=\"linear\", # default = \"linear\", can try others such as \"cosine\", \"constant\" etc\n    weight_decay=1e-4,\n    max_grad_norm=0.01,\n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False,\n    eval_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    logging_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    report_to=\"none\", # don't save experiments to a third party service\n    dataloader_num_workers=4,\n    warmup_ratio=0.05,\n    push_to_hub=False,\n    eval_do_concat_batches=False\n)\n\nmodel_v2_trainer = Trainer(\n    model=model_aug,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: add a metrics function, just see if model trains first\n)\n\nmodel_v2_results = model_v2_trainer.train()\n\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/accelerate/accelerator.py:488: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n  self.scaler = torch.cuda.amp.GradScaler(**kwargs)\n\n\n\n    \n      \n      \n      [1250/1250 08:19, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\n\n\n\n\n1\n100.473500\n8.029722\n\n\n2\n4.369000\n2.737582\n\n\n3\n2.551800\n2.183892\n\n\n4\n2.222600\n1.922801\n\n\n5\n1.990600\n1.740759\n\n\n6\n1.821900\n1.557272\n\n\n7\n1.697400\n1.477890\n\n\n8\n1.602700\n1.451024\n\n\n9\n1.551700\n1.371128\n\n\n10\n1.449100\n1.317680\n\n\n11\n1.433500\n1.281066\n\n\n12\n1.364500\n1.247493\n\n\n13\n1.331400\n1.206003\n\n\n14\n1.297300\n1.187397\n\n\n15\n1.250600\n1.179421\n\n\n16\n1.231900\n1.165661\n\n\n17\n1.147900\n1.129974\n\n\n18\n1.146600\n1.117911\n\n\n19\n1.113800\n1.109535\n\n\n20\n1.115300\n1.096120\n\n\n21\n1.089400\n1.078995\n\n\n22\n1.069100\n1.087004\n\n\n23\n1.061900\n1.080366\n\n\n24\n1.045900\n1.071728\n\n\n25\n1.036300\n1.070385\n\n\n\n\n\n\nTK - Note: You might get the following issue (negative bounding box coordinate predictions), can try again for more stable predictions (predictions are inherently random to begin with) or use a learning rate warmup to help stabilize predictions:\n\nValueError: boxes1 must be in [x0, y0, x1, y1] (corner) format, but got tensor([[ 0.5796, 0.5566, 0.9956, 0.9492], [ 0.5718, 0.0610, 0.7202, 0.1738], [ 0.8218, 0.5107, 0.9878, 0.6289], ‚Ä¶, [ 0.1379, 0.1403, 0.6709, 0.6138], [ 0.7471, 0.4319, 1.0088, 0.5864], [-0.0660, 0.2052, 0.2067, 0.5107]], device=‚Äòcuda:0‚Äô, dtype=torch.float16)\n\n\n\n16.6 TK - Save the trained model\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_v2_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_v2_save_path}\")\nmodel_v2_trainer.save_model(model_v2_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_25_epochs_lr_1e-04",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "17 TK - Upload Augmentation Model to Hugging Face Hub",
    "text": "17 TK - Upload Augmentation Model to Hugging Face Hub\n\n# Push the model to the Hugging Face Hub\n# TK Note: This will require you to have your Hugging Face account setup (e.g. see the setup guide, tk - link to setup guide)\n# TK - this will push to the parameter `output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\"`\nmodel_v2_trainer.push_to_hub(commit_message=\"upload trashify object detection model with data augmentation\"\n                             # token=None, # Optional to add token manually\n                            )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug/commit/2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', commit_message='upload trashify object detection model with data augmentation', commit_description='', oid='2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug'), pr_revision=None, pr_num=None)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---compare-results-of-different-models",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---compare-results-of-different-models",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "18 TK - Compare results of different models",
    "text": "18 TK - Compare results of different models\nUPTOHERE - Showcase model 2 doing better because of augmentation (harder to learn)\n\nTK - Compare v1 model to v2\n\nTK - Get model_v1 results into a variable and save it for later\nCompare both of these as plots against each other, e.g.¬†have the training curves for aug/no_aug on one plot and the curves for validation data for aug/no_aug on another plot\n\nTK - offer extensions to improve the model\n\nTK - training model for longer, potentially using synthetic data‚Ä¶?\n\nTK - could I use 1000 high quality synthetic data samples to improve our model?\n\nTK - try use a different learning rate\n\n\n\n# TK - Turn this workflow into a function e.g. def get_history_from_trainer() -&gt; df/dict of history\ndef get_history_metrics_from_trainer(trainer):\n    trainer_history = trainer.state.log_history \n    trainer_history_metrics = trainer_history[:-1] # get everything except the training time metrics (we've seen these already)\n    trainer_history_training_time = trainer_history[-1]\n\n    model_train_loss = [item[\"loss\"] for item in trainer_history_metrics if \"loss\" in item.keys()]\n    model_eval_loss = [item[\"eval_loss\"] for item in trainer_history_metrics if \"eval_loss\" in item.keys()]\n    model_learning_rate = [item[\"learning_rate\"] for item in trainer_history_metrics if \"learning_rate\" in item.keys()] \n\n    return model_train_loss, model_eval_loss, model_learning_rate, trainer_history_training_time\n\nmodel_v1_train_loss, model_v1_eval_loss, model_v1_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v1_trainer)\nmodel_v2_train_loss, model_v2_eval_loss, model_v2_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v2_trainer)\n\n\nimport matplotlib.pyplot as plt\n\n# Plot model loss curves against each other for same model\n# Note: Start from index 1 onwards to remove large loss spike at beginning of training \nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nax[0].plot(model_v1_train_loss[1:], label=\"Model V1 Train Loss\")\nax[0].plot(model_v1_eval_loss[1:], label=\"Model V1 Eval Loss\")\nax[0].set_title(\"Model V1 Loss Curves\")\nax[0].set_ylabel(\"Loss\")\nax[0].set_xlabel(\"Epoch\")\nax[0].legend()\n\nax[1].plot(model_v2_train_loss[1:], label=\"Model V2 Train Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model V2 Eval Loss\")\nax[1].set_title(\"Model V2 Loss Curves\")\nax[1].set_ylabel(\"Loss\")\nax[1].set_xlabel(\"Epoch\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - notice the overfitting begin to happen with model v1 (no data augmentation) but model v2 has less overfitting and achieves a lower validation loss\n\nimport matplotlib.pyplot as plt\n\nplt.plot(model_v1_learning_rate, label=\"Model V1\")\nplt.plot(model_v2_learning_rate, label=\"Model V2\")\nplt.title(\"Model Learning Rate vs. Epoch\")\nplt.ylabel(\"Learning Rate\")\nplt.xlabel(\"Epoch\")\nplt.legend();\n\n\n\n\n\n\n\n\n\n# Plot loss values against each other\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nnum_epochs = range(0, len(model_v1_train_loss))\nax[0].plot(model_v1_train_loss[1:], label=\"Model 1 Training Loss\")\nax[0].plot(model_v2_train_loss[1:], label=\"Model 2 Training Loss\")\nax[0].set_title(\"Model Training Loss Curves\")\nax[0].set_ylabel(\"Training Loss\")\nax[0].set_xlabel(\"Epochs\")\nax[0].legend()\n\nax[1].plot(model_v1_eval_loss[1:], label=\"Model 1 Eval Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model 2 Eval Loss\")\nax[1].set_title(\"Model Eval Loss Curves\")\nax[1].set_ylabel(\"Eval Loss\")\nax[1].set_xlabel(\"Epochs\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - describe the loss curves here, model 2 curves may be higher for training loss but they really start to accelerate on the evaluation set towards the end",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---create-demo-with-augmentation-model",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---create-demo-with-augmentation-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "19 TK - Create demo with Augmentation Model",
    "text": "19 TK - Create demo with Augmentation Model\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/README.md\n---\ntitle: Trashify Demo V2 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V2\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V2\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The [model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) in V2 has been trained with data augmentation preprocessing (color jitter, horizontal flipping) to improve robustness. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model/app.py\n\n\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v2\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify V2 box detection model (with data augmentation) app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v2\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v2\n[INFO] Uploading demos/trashify_object_detector_data_aug_model to repo: mrdbourke/trashify_demo_v2\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v2/tree/main/.\n\n\n\n# Next:\n# Upload augmentation model to Hugging Face Hub ‚úÖ\n# Create demo for augmentation model ‚úÖ\n# Compare results from augmentation model to non-augmentation model ‚úÖ\n\n\n19.1 TK - Make a prediction on a random test sample with model using data aug model\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model_aug(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                       pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.25, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_test_sample[\"labels\"][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\nprint(f\"[INFO] Boxes:\")\nfor item in random_test_sample_pred_boxes:\n    print(item.detach().cpu())\nprint(f\"[INFO] Total preds: {len(random_test_sample_labels_to_plot)}\")\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Making predictions on test item with index: 163\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Boxes:\ntensor([  10.7812,  393.1250,  950.1562, 1160.6250])\ntensor([ 149.8828,  667.9688,  471.6797, 1018.2812])\ntensor([405.0000, 679.1406, 668.4375, 972.1094])\ntensor([248.2031, 472.6562, 675.7031, 994.8438])\ntensor([ 140.6250,  467.3438,  675.9375, 1002.6562])\ntensor([ 373.2422,  896.4844,  648.6328, 1063.5156])\ntensor([  10.3125,  667.9688,  472.0312, 1264.5312])\n[INFO] Total preds: 7",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "20 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)",
    "text": "20 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)\nUPTOHERE * Take preds from model v2 and perform NMS on them to see what happens * Need to calculate: * IoU (intersection over union) * Can write about these in a blog post as extension material * Test image index good to practice on: * 163, 108 * Create a demo which compares NMS-free boxes to boxes with NMS\n\n20.1 TK - NMS filtering logic to do\nTK - create a table of different items here\n\nSimplest filtering: keep only 1x class label with the highest score per image (e.g.¬†if there are two ‚Äúhand‚Äù predictions, keep only the highest scoring one) ‚úÖ\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\nGreedy IoU filtering: Filter boxes which have IoU &gt; 0.9 (big overlap) and keep the box with the higher score ‚úÖ\n\nTK - problem here is that it may filter heavily overlapping classes (e.g.¬†if there are many boxes of different classes clustered together because your objects overlap, such as on a plate of food, items may overlap)\n\nClass-aware IoU filtering: Filter boxes which have the same label and have IoU &gt; 0.5 and keep the box with the higher score\n\nOther potential NMS options: * Greedy NMS (good for distinct boxes, just take the highest scoring box per class) * Soft-NMS with linear penalty (good for boxes which may have overlap, e.g.¬†smaller boxes in clusters) * Class-aware NMS (only perform NMS on same class of boxes)\n\nSee this video here: https://youtu.be/VAo84c1hQX8?si=dYftsYADb9Kq-bul\nTK - show prediction with more boxes than ideal, then introduce NMS as a technique to fix the predictions (e.g.¬†on the same sample)\n\nTK - NMS doesn‚Äôt need an extra model, just a way to\n\nTK - test index 163 is a good example with many boxes that could be shortened to a few\n\n\n\n20.2 TK - Simple NMS - Keep only highest scoring class per prediction\nTK - This is the simplest method and simply iterates through the boxes and keep the highest scoring box per class (e.g.¬†if there are two ‚Äúhand‚Äù prediction boxes, only keep the higher scoring one).\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\n\n# Mask with simple NMS keep mask\nkeep_boxes, keep_labels, keep_scores = filter_highest_scoring_box_per_class(boxes=random_test_sample_pred_boxes,\n                                                                            labels=random_test_sample_pred_labels,\n                                                                            scores=random_test_sample_pred_scores)\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_scores))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes))\n\n7 7 7\n4 4 4\n\n\n\nkeep_boxes, keep_labels, keep_scores\n\n(tensor([[  10.7812,  393.1250,  950.1562, 1160.6250],\n         [ 149.8828,  667.9688,  471.6797, 1018.2812],\n         [ 405.0000,  679.1406,  668.4375,  972.1094],\n         [ 373.2422,  896.4844,  648.6328, 1063.5156]], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;),\n tensor([0, 1, 5, 4], device='cuda:0'),\n tensor([0.6625, 0.5412, 0.5007, 0.3237], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;))\n\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(\"Simple NMS - Only keep the highest scoring box per prediction\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: not_trash (0.3237)']\n\n\n\n\n\n\n\n\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\n\n20.3 TK - Greedy IoU Filtering - Intersection over Union - If a pair of boxes have an IoU over a certain threshold, keep the box with the higher score\n\nIoU in torchmetrics - https://lightning.ai/docs/torchmetrics/stable/detection/intersection_over_union.html\n\nTo calculate the Intersection over Union (IoU) between two bounding boxes:\n\nCoordinates of the intersection rectangle: \\[\nx_{\\text{left}} = \\max(x_{1A}, x_{1B})\n\\] \\[\ny_{\\text{top}} = \\max(y_{1A}, y_{1B})\n\\] \\[\nx_{\\text{right}} = \\min(x_{2A}, x_{2B})\n\\] \\[\ny_{\\text{bottom}} = \\min(y_{2A}, y_{2B})\n\\]\n\nWhere:\n\\[\n   \\text{A} = \\text{Box 1}\n\\] \\[\n   \\text{B} = \\text{Box 2}\n\\]\n\nWidth and height of the intersection: \\[\n\\text{intersection\\_width} = \\max(0, x_{\\text{right}} - x_{\\text{left}})\n\\] \\[\n\\text{intersection\\_height} = \\max(0, y_{\\text{bottom}} - y_{\\text{top}})\n\\]\nArea of Overlap: \\[\n\\text{Area of Overlap} = \\text{intersection\\_width} \\times \\text{intersection\\_height}\n\\]\nArea of Union: \\[\n\\text{Area of Union} = \\text{Area of Box 1} + \\text{Area of Box 2} - \\text{Area of Overlap}\n\\]\nIntersection over Union (IoU): $$ = / \n\n\n# IoU = Intersection / Union\n# Inserction =\n    # x_left = max(x1_A, x1_B)\n    # y_top = max(y1_A, y1_B)\n    # x_right = min(x2_A, x2_B)\n    # y_bottom = min(y2_A, x2_B)\n    # \n    # Where: \n        # A = Box 1\n        # B = Box 2\n    # intersection_width = max(0, x_right - x_left)\n    # interesection_height = max(0, y_bottom - y_top)\n    # area_intersection = intersection_width * intersection_height\n# Union = area_box_1 + area_box_2 - intersection\n\ndef intersection_over_union_score(box_1, box_2):\n    \"\"\"Calculates Intersection over Union (IoU) score for two given boxes in XYXY format.\"\"\"\n    assert len(box_1) == 4, f\"Box 1 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_1)}, see: {box_1}\"\n    assert len(box_2) == 4, f\"Box 2 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_2)}, see: {box_2}\"\n\n    x1_box_1, y1_box_1, x2_box_1, y2_box_1 = box_1[0], box_1[1], box_1[2], box_1[3]\n    x1_box_2, y1_box_2, x2_box_2, y2_box_2 = box_2[0], box_2[1], box_2[2], box_2[3]\n\n    # Get coordinates of overlapping box (note: there may not be any overlapping box)\n    x_left = torch.max(x1_box_1, x1_box_2)\n    y_top = torch.max(y1_box_1, y1_box_2)\n    x_right = torch.min(x2_box_1, x2_box_2)\n    y_bottom = torch.min(y2_box_1, y2_box_2)\n\n    # Calculate the intersection width and height (we take the max of 0 and the value to find non-overlapping boxes)\n    intersection_width = max(0, x_right - x_left)\n    intersection_height = max(0, y_bottom - y_top)\n\n    # Calculate the area of intersection (note: this will 0 if either width or height are 0)\n    area_of_intersection = intersection_height * intersection_width\n\n    # Calculate individual box areas\n    box_1_area = (x2_box_1 - x1_box_1) * (y2_box_1 - y1_box_1) # width * height \n    box_2_area = (x2_box_2 - x1_box_2) * (y2_box_2 - y1_box_2)\n\n    # Calcuate area of union (sum of box areas minus the intersection area)\n    area_of_union = box_1_area + box_2_area - area_of_intersection\n\n    # Calculate the IoU score\n    iou_score = area_of_intersection / area_of_union\n\n    return iou_score\n\n\niou_score_test_pred_boxes = intersection_over_union_score(box_1=random_test_sample_pred_boxes[4],\n                                                          box_2=random_test_sample_pred_boxes[3])\n\nprint(f\"[INFO] IoU Score: {iou_score_test_pred_boxes}\")\n\n\nrandom_test_sample_pred_boxes[0], random_test_sample_pred_boxes[1]\n\n[INFO] IoU Score: 0.7790185809135437\n\n\n(tensor([  10.7812,  393.1250,  950.1562, 1160.6250], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;),\n tensor([ 149.8828,  667.9688,  471.6797, 1018.2812], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;))\n\n\n\n# TK - for visualization purposes, write code to highlight the intersecting points on a box and print the IoU score in the middle of the box\n\n# IoU logic\n    # 1. General IoU threshold (removing boxes at a global level, regardless of label)\n        # -&gt; for box pairs with IoU &gt; 0.9, keep the higher scoring box \n    # 2. Label specific IoU threshold (only concern is comparing boxes with the same label)\n        # -&gt; for box pairs with same label and IoU &gt; 0.5, keep the higher scoring box\n\n\nkeep_boxes = []\nkeep_scores = []\nkeep_labels = []\n\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\nkeep_indexes = torch.ones(len(random_test_sample_pred_boxes), dtype=torch.bool)\n\niou_general_threshold = 0.9 # general threshold = remove the lower scoring box in box pairs with over iou_general_threshold regardless of the label\niou_class_level_threshold = 0.5 # remove overlapping similar classes\n\n# TODO: Add a clause here to include if class labels are the same, then filter based on the class-specifc IoU threshold\nfilter_global = True\nfilter_same_label = True\n\n# Count the total loops\ntotal_loops = 0\n\nfor i, box_A in enumerate(random_test_sample_pred_boxes):\n    if not keep_indexes[i]: # insert clause to prevent calculating on already filtered labels\n        continue \n\n    for j, box_B in enumerate(random_test_sample_pred_boxes):\n        if not keep_indexes[i]:\n            continue\n\n        # Only calculate IoU score if indexes aren't the same (saves comparing the same index boxes for unwanted calculations)\n        if (i != j): \n            iou_score = intersection_over_union_score(box_1=box_A, box_2=box_B)\n            print(f\"[INFO] IoU Score for box {(i, j)}: {iou_score}\")\n\n            if filter_global:\n                if iou_score &gt; iou_general_threshold:\n                    score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                    if score_A &gt; score_B:\n                        print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                        keep_indexes[j] = False\n                    else:\n                        print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                        keep_indexes[i] = False\n                \n            if filter_same_label:\n                if iou_score &gt; iou_class_level_threshold:\n                    i_label = random_test_sample_pred_labels[i]\n                    j_label = random_test_sample_pred_labels[j]\n                    if i_label == j_label:\n                        print(f\"Labels are equal: {i_label, j_label}\")\n                        score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                        if score_A &gt; score_B:\n                            print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                            keep_indexes[j] = False\n                        else:\n                            print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                            keep_indexes[i] = False\n\n        total_loops += 1\n                \nprint(keep_indexes)\n\nkeep_scores = random_test_sample_pred_scores[keep_indexes]\nkeep_labels = random_test_sample_pred_labels[keep_indexes]\nkeep_boxes = random_test_sample_pred_boxes[keep_indexes]\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_boxes))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes), sum(keep_indexes))\n\nprint(f\"[INFO] Number of total loops: {total_loops}, max possible loops: {len(random_test_sample_pred_boxes)**2}\")\n\n[INFO] IoU Score for box (0, 1): 0.156358003616333\n[INFO] IoU Score for box (0, 2): 0.10704872757196426\n[INFO] IoU Score for box (0, 3): 0.3096315264701843\n[INFO] IoU Score for box (0, 4): 0.3974636495113373\n[INFO] IoU Score for box (0, 5): 0.06380129605531693\n[INFO] IoU Score for box (0, 6): 0.2954297661781311\n[INFO] IoU Score for box (1, 0): 0.156358003616333\n[INFO] IoU Score for box (1, 2): 0.11466032266616821\n[INFO] IoU Score for box (1, 3): 0.2778415083885193\n[INFO] IoU Score for box (1, 4): 0.36936208605766296\n[INFO] IoU Score for box (1, 5): 0.08170551061630249\n[INFO] IoU Score for box (1, 6): 0.4092644155025482\n[INFO] IoU Score for box (2, 0): 0.10704872757196426\n[INFO] IoU Score for box (2, 1): 0.11466032266616821\n[INFO] IoU Score for box (2, 3): 0.34572935104370117\n[INFO] IoU Score for box (2, 4): 0.26932957768440247\n[INFO] IoU Score for box (2, 5): 0.17588727176189423\n[INFO] IoU Score for box (2, 6): 0.058975815773010254\n[INFO] IoU Score for box (3, 0): 0.3096315264701843\n[INFO] IoU Score for box (3, 1): 0.2778415083885193\n[INFO] IoU Score for box (3, 2): 0.34572935104370117\n[INFO] IoU Score for box (3, 4): 0.7790185809135437\nLabels are equal: (tensor(5, device='cuda:0'), tensor(5, device='cuda:0'))\n[INFO] Box to keep index: 3 -&gt; tensor([248.2031, 472.6562, 675.7031, 994.8438], device='cuda:0',\n       grad_fn=&lt;UnbindBackward0&gt;)\n[INFO] IoU Score for box (3, 5): 0.11186295002698898\n[INFO] IoU Score for box (3, 6): 0.1719416379928589\n[INFO] IoU Score for box (5, 0): 0.06380129605531693\n[INFO] IoU Score for box (5, 1): 0.08170551061630249\n[INFO] IoU Score for box (5, 2): 0.17588727176189423\n[INFO] IoU Score for box (5, 3): 0.11186295002698898\n[INFO] IoU Score for box (5, 4): 0.0963958203792572\n[INFO] IoU Score for box (5, 6): 0.05411146208643913\n[INFO] IoU Score for box (6, 0): 0.2954297661781311\n[INFO] IoU Score for box (6, 1): 0.4092644155025482\n[INFO] IoU Score for box (6, 2): 0.058975815773010254\n[INFO] IoU Score for box (6, 3): 0.1719416379928589\n[INFO] IoU Score for box (6, 4): 0.24588997662067413\n[INFO] IoU Score for box (6, 5): 0.05411146208643913\ntensor([ True,  True,  True,  True, False,  True,  True])\n7 7 7\n6 6 6 tensor(6)\n[INFO] Number of total loops: 42, max possible loops: 49\n\n\n\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(f\"Greedy IoU Filtering (General) - For boxes with IoU &gt; {iou_general_threshold}, keep the higher scoring box\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n\n\n\n\n\n\n\n\n\n\n# TK - more NMS logic:\n# If there are more than two hands, keep the one with the higher score...",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "21 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)",
    "text": "21 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)\nUPTOHERE:\n\nupload the demo to Hugging Face Spaces as Trashify V3\nMake sure the demo works\nGo back through the code and start tidying up/explaining things\n\nCreate a blog post to discuss different box formats in object detection\nCreate a blog post for NMS + IoU filtering (can create an IoU function that colours in the intersection parts)\nCreate an extension for longer training + synthetic data + evaluation metrics + deploying on transformers.js\n\n\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model_with_nms/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/README.md\n---\ntitle: Trashify Demo V3 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V3\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\ndef create_return_string(list_of_predicted_labels, target_items=[\"trash\", \"bin\", \"hand\"]):\n     # Setup blank string to print out\n    return_string = \"\"\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(list_of_predicted_labels) == 0) or not (any_in_list(list_a=target_items, list_b=list_of_predicted_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in list_of_predicted_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}). But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        return_string = f\"+1! Found the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}), thank you for cleaning up the area!\"\n\n    print(return_string)\n\n    return return_string\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Create a copy of the image to draw on it for NMS\n    image_nms = image.copy()\n    draw_nms = ImageDraw.Draw(image_nms)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    # TK - update this for NMS\n    class_name_text_labels_nms = []\n\n    # Get original boxes, scores, labels\n    original_boxes = results[\"boxes\"]\n    original_labels = results[\"labels\"]\n    original_scores = results[\"scores\"]\n\n    # Filter boxes and only keep 1x of each label with highest score\n    filtered_boxes, filtered_labels, filtered_scores = filter_highest_scoring_box_per_class(boxes=original_boxes,\n                                                                                            labels=original_labels,\n                                                                                            scores=original_scores)\n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(original_boxes, original_labels, original_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(filtered_boxes, filtered_labels, filtered_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels_nms.append(label_name)\n\n        # Draw the rectangle\n        draw_nms.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw_nms.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    \n    # Remove the draw each time\n    del draw\n    del draw_nms\n\n    # Create the return string\n    return_string = create_return_string(list_of_predicted_labels=class_name_text_labels)\n    return_string_nms = create_return_string(list_of_predicted_labels=class_name_text_labels_nms)\n    \n    return image, return_string, image_nms, return_string_nms\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output (no filtering)\"),\n        gr.Text(label=\"Text Output (no filtering)\"),\n        gr.Image(type=\"pil\", label=\"Image Output (with max score per class box filtering)\"),\n        gr.Text(label=\"Text Output (with max score per class box filtering)\")\n        \n    ],\n    title=\"üöÆ Trashify Object Detection Demo V3\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The model in V3 is [same model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) as in [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) (trained with data augmentation) but has an additional post-processing step (NMS or [Non Maximum Suppression](https://paperswithcode.com/method/non-maximum-suppression)) to filter classes for only the highest scoring box of each class. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/app.py\n\n\n\n21.1 TK - Upload our demo to the Hugging Face Hub\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model_with_nms\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v3\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model v3 app.py with NMS post processing\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v3\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v3\n[INFO] Uploading demos/trashify_object_detector_data_aug_model_with_nms to repo: mrdbourke/trashify_demo_v3\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v3/tree/main/.\n\n\n\n\n21.2 tK - Embed the Space to Test the Model\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"1000\"\n    height=\"1600\"\n&gt;&lt;/iframe&gt;     \n''')\n\n\n     \n\n\n\n# UPTOHERE\n# Next, focus on a single input -&gt; output ‚úÖ\n# Show case what an output from the model looks like untrained (e.g. plot the next boxes on it) ‚úÖ\n# After showcasing 1x prediction, move onto training a model and seeing if we can get it to improve ‚úÖ\n# Continually focus on 1 input, 1 output until we can scale up ‚úÖ\n# Create a demo of our model and upload it to Hugging Face ‚úÖ\n    # Add examples to test the demo ‚úÖ\n    # Write code to upload the demo to Hugging Face ‚úÖ\n# Create visualization of input and output of data augmentation ‚úÖ\n# Create demo of model with data augmentation ‚úÖ\n# Model 2: Try improve our model with data augmentation ‚úÖ\n    # Visualize data augmentation examples in and out of the model \n    # Note: looks like augmentation may hurt our results... ü§î, this is because our data is so similar, potentially could help with more diverse data, e.g. synthetic data \n    # Try in a demo and see how it works -&gt; Trashify Demo V2 ‚úÖ \n    # Extension: Also try a model training for longer \n# Model 3 (just improve with NMS): Create NMS option so only highest quality boxes are kept for each class ‚úÖ\n\n# Next:\n\n# Go through notebook and clean it up for \n# Once we've got a better performing model, introduce evaluation metrics\n# End: three models, three demos, one without data augmentation, one with it, one with NMS (post-processing) + can have as an extension to train the model for longer and see what happens\n\n# Extensions:\n# Train a model for longer and see if it improves (e.g. 72 epochs) \n\n# Workflow:\n# Untrained model -&gt; input/output -&gt; poor results (always visualize, visualize, visualize!)\n# Trained model -&gt; input/output -&gt; better results (always visualize, visualize, visualize!)\n\n# Outline:\n# Single input/output with untrained model (bad output)\n# Train model to improve on single input/output\n# Introduce evaluation metric\n# Introduce data augmentation, see D-FINE paper for data augmentation options (we can keep it simple)\n    # See: https://arxiv.org/pdf/2410.13842 \n    # \"The total batch size is 32 across all variants. Training schedules include 72 epochs with advanced augmentation (RandomPhotometricDistort, RandomZoomOut, RandomIoUCrop, and RMultiScaleInput)\n    # followed by 2 epochs without advanced augmentation for D-FINE-X and D-FINE-L, and 120 epochs with advanced augmentation followed by 4\n    # epochs without advanced augmentation for D-FINE-M and D-FINE-S (RT-DETRv2 Training Strategy (Lv et al., 2024) in Table 3)\"\n    # TODO: Read RT-DETRv2 training strategy from paper mentioned above\n    # TODO: Read PP-YOLO data augmentation paper (keep it simple to begin with, can increase when needed)\n# Create demo with Gradio\n# Create demo with Transformers.js, see: https://huggingface.co/docs/transformers.js/en/tutorials/vanilla-js",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#extensions-extra-curriculum",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#extensions-extra-curriculum",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "22 Extensions + Extra-Curriculum",
    "text": "22 Extensions + Extra-Curriculum\n\nExtension: possibly improve the model with synthetic data? e.g.¬†on classes/bins not visible in the model\nExtension: train the model for longer and see how it improves, this could be model v4\n\nBaselines:\n\nV1 = model no data augmentaiton\nV2 = model with data augmentation\nV3 = model with NMS (post processing)\n\nExtensions:\n\nV4 = model trained for longer with NMS\nV5 = synthetic data scaled up‚Ä¶?\n\n\nExtension: Zero-shot object detection - but what if I don‚Äôt have labels?\n\nThis could discuss the use of zero-shot object detection models such as GroundingDINO and OmDet\nSee OmDet - https://huggingface.co/omlab/omdet-turbo-swin-tiny-hf\nSee GroundingDINO - https://huggingface.co/docs/transformers/en/model_doc/grounding-dino\n\nExtension: Try to repeat the workflow we‚Äôve gone through with another model such as https://huggingface.co/IDEA-Research/dab-detr-resnet-50-dc5-pat3 (apparently it is slightly better performing on COCO too)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---overview",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---overview",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "1 TK - Overview",
    "text": "1 TK - Overview\nTK - Make an intro about being on the Trashify üöÆ team with a mission to make the world a cleaner place, trashify = using ML to incentivize people to pick up trash in their local area\nWelcome to the Learn Hugging Face Object Detection project!\nInside this project, we‚Äôll learn bits and pieces about the Hugging Face ecosystem as well as how to build our own custom object detection model.\nWe‚Äôll start with a collection of images with bounding box files as our dataset, fine-tune an existing computer vision model to detect items in an image and then share our model as a demo others can use.\nTK image - update cover image for object detection  \n\nWe‚Äôre going to put on our internship hats and build a food not food text classification model using tools from the Hugging Face ecosystem.\n\n\n‚Äì&gt;\n\n\n\n\n\n\nNote\n\n\n\nFeel to keep reading through the notebook but if you‚Äôd like to run the code yourself, be sure to go through the setup guide first.\n\n\n\n1.1 TK - What we‚Äôre going to build\nWe‚Äôre going to be bulding Trashify üöÆ, an object detection model which incentivises people to pick up trash in their local area by detecting bin, trash, hand.\nIf all three items are detected, a person gets +1 point!\nFor example, say you were going for a walk around your neighbourhood and took a photo of yourself picking up a piece (with your hand or trash arm) of trash and putting it in the bin, you would get a point.\nWith this object detection model, you could deploy it to an application which would automatically detect the target classes and then save the result to an online leaderboard.\nThe incentive would be to score the most points, in turn, picking up the most piecces of trash, in a given area.\nMore specifically, we‚Äôre going to follow the following steps:\n\nData: Problem defintion and dataset preparation - Getting a dataset/setting up the problem space.\nModel: Finding, training and evaluating a model - Finding an object detection model suitable for our problem on Hugging Face and customizing it to our own dataset.\nDemo: Creating a demo and put our model into the real world - Sharing our trained model in a way others can access and use.\n\nBy the end of this project, you‚Äôll have a trained model and demo on Hugging Face you can share with others:\n\nfrom IPython.display import HTML \n\nHTML(\"\"\"\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"850\"\n&gt;&lt;/iframe&gt;\n\"\"\")\n\n\n\n\n\n\n\n1.2 TK - What is object detection?\nObject detection is the process of identifying and locating an item in an image.\nWhere item can mean almost anything.\nFor example:\n\nDetecting car licence plates in a video feed (videos are a series of images) for a parking lot entrance.\nDetecting delivery people walking towards your front door on a security camera.\nDetecting defects on a manufacturing line.\nDetecting pot holes in the road so repair works can automatically be scheduled.\nDetecting small pests (Varroa Mite) on the bodies of bees.\nDetecting weeds in a field so you know what to remove and what to keep.\n\n‚Äì\nTK - add examples of actual trash identification projects, see:\n\nGoogle using machine learning for trash identification ‚Äî https://sustainability.google/operating-sustainably/stories/circular-economy-marketplace/\nTrashify website for identifying trash ‚Äî https://www.trashify.tech/\nWaste management with deep learning ‚Äî https://www.sciencedirect.com/science/article/abs/pii/S0956053X23001915\nLabel Studio being used for labelling a trash dataset ‚Äî https://labelstud.io/blog/ameru-labeling-for-a-greener-world/\n\n‚Äì\n\n\n\n\n\n\nNote\n\n\n\nNote: Object detection is also sometimes referred to as image localization or object localization. For consistency, I will use the term object detection, however, either of these terms could substitute.\n\n\n\n\n\n* TK image - examples of where object detection is used\n\n\n\nImage classification deals with classifying an image as a whole into a single class, object detection endeavours to find the specific target item and where it is in an image.\nOne of the most common ways of showing where an item is in an image is by displaying a bounding box (a rectangle-like box around the target item).\nAn object detection model will often take an input image tensor in the shape [3, 640, 640] ([colour_channels, height, width]) and output a tensor in the form [class_name, x_min, y_min, x_max, y_max] or [class_name, x1, y1, x2, y2] (this is two ways to write the same example format, there are more formats, we‚Äôll see these below in Table¬†1).\nWhere:\n\nclass_name = The classification of the target item (e.g.¬†\"car\", \"person\", \"banana\", \"piece_of_trash\", this could be almost anything).\nx_min = The x value of the top left corner of the box.\ny_min = The y value of the top left corner of the box.\nx_max = The x value of the bottom right corner of the box.\ny_max = The y value of the bottom right corner of the box.\n\n‚Äì TK image ‚Äì example of a bounding box on an image\n\n\n\n\n\n\nObject detection bounding box formats\n\n\n\nWhen you get into the world of object detection, you will find that there are several different bounding box formats.\nThere are three major formats you should be familiar with: XYXY, XYWH, CXCYWH (there are more but these are the most common).\nKnowing which bounding box format you‚Äôre working with can be the difference between a good model and a very poor model (wrong bounding boxes = wrong outcome).\nWe‚Äôll get hands-on with a couple of these in this project.\nBut for an in-depth example of all three, I created a guide on different bounding box formats and how to draw them, reading this should give a good intuition behind each style of bounding box.\n\n\n\n\n1.3 TK - Why train your own object detection models?\nYou can customize pre-trained models for object detection as well as API-powered models and LLMs such as Gemini, LandingAI and DINO-X.\nDepending on your requirements, there are several pros and cons for using your own model versus using an API.\nTraining/fine-tuning your own model:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nControl: Full control over model lifecycle.\nCan be complex to get setup.\n\n\nNo usage limits (aside from compute constraints).\nRequires dedicated compute resources for training/inference.\n\n\nCan train once and deploy everywhere/whenever you want (for example, Tesla deploying a model to all self-driving cars).\nRequires maintenance over time to ensure performance remains up to par.\n\n\nPrivacy: Data can be kept in-house/app and doesn‚Äôt need to go to a third party.\nCan require longer development cycles compared to using existing APIs.\n\n\nSpeed: Customizing a small model for a specific use case often means it runs much faster on local hardware, for example, modern object detection models can achieve 70-100+ FPS (frames per second) on modern GPU hardware.\n\n\n\n\nUsing a pre-built model API:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nEase of use: often can be setup within a few lines of code.\nIf the model API goes down, your service goes down.\n\n\nNo maintenance of compute resources.\nData is required to be sent to a third-party for processing.\n\n\nAccess to the most advanced models.\nThe API may have usage limits per day/time period.\n\n\nCan scale if usage increases.\nCan be much slower than using dedicated models due to requiring an API call.\n\n\n\nFor this project, we‚Äôre going to focus on fine-tuning our own model.\n\n\n1.4 TK - Workflow we‚Äôre going to follow\nThe good news for us is that the Hugging Face ecosystem makes working on custom machine learning projects an absolute blast.\nAnd workflow is reproducible across several kinds of projects.\nStart with data (or skip this step and go straight to a model) -&gt; get/customize a model -&gt; build and share a demo.\nWith this in mind, our motto is data, model, demo!\nMore specifically, we‚Äôre going to follow the rough workflow of:\n\nCreate, preprocess and load data using Hugging Face Datasets.\nDefine the model we‚Äôd like use with transformers.AutoModelForObjectDetection (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nI say rough because machine learning projects are often non-linear in nature.\nAs in, because machine learning projects involve many experiments, they can kind of be all over the place.\nBut this worfklow will give us some good guidelines to follow.\n\n\n\n\nA general Hugging Face workflow from idea to shared model and demo using tools from the Hugging Face ecosystem. You‚Äôll notice some of the steps don‚Äôt match with our workflow outline above. This is because the text-based workflow outline above breaks some of the steps down for educational purposes. These kind of workflows are not set in stone and are more of guide than specific directions. See information on each of the tools in the Hugging Face documentation.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---importing-necessary-libraries",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---importing-necessary-libraries",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "2 TK - Importing necessary libraries",
    "text": "2 TK - Importing necessary libraries\nLet‚Äôs get started!\nFirst, we‚Äôll import the required libraries.\nIf you‚Äôre running on your local computer, be sure to check out the getting setup guide to make sure you have everything you need.\nIf you‚Äôre using Google Colab, many of them the following libraries will be installed by default.\nHowever, we‚Äôll have to install a few extras to get everything working.\n\n\n\n\n\n\nNote\n\n\n\nIf you‚Äôre running on Google Colab, this notebook will work best with access to a GPU. To enable a GPU, go to Runtime ‚û°Ô∏è Change runtime type ‚û°Ô∏è Hardware accelerator ‚û°Ô∏è GPU.\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio.\n\nAnd the following library is not part of the Hugging Face ecosystem but it is helpful for evaluating our models:\n\ntorchmetrics - a library containing many evaluation metrics compatible with PyTorch/Transformers, you can install it via pip install torchmetrics.\n\nWe can also check the versions of our software with package_name.__version__.\n\n# Install/import dependencies (this is mostly for Google Colab, as the other dependences are available by default in Colab)\ntry:\n  import datasets, evaluate, accelerate\n  import gradio as gr\nexcept ModuleNotFoundError:\n  !pip install -U datasets evaluate accelerate gradio # -U stands for \"upgrade\" so we'll get the latest version by default\n  import datasets, evaluate, accelerate\n  import gradio as gr\n\nimport random\n\nimport numpy as np\n\nimport torch\nimport transformers\n\n# Required for evaluation\n# Can install with !pip install torchmetrics[detection]\nimport torchmetrics\nimport pycocotools\n\n# Check versions (as long as you've got the following versions or higher, you should be good)\nprint(f\"Using transformers version: {transformers.__version__}\")\nprint(f\"Using datasets version: {datasets.__version__}\")\nprint(f\"Using torch version: {torch.__version__}\")\nprint(f\"Using torchmetrics version: {torchmetrics.__version__}\")\n\nUsing transformers version: 4.48.3\nUsing datasets version: 3.1.0\nUsing torch version: 2.6.0+cu124\nUsing torchmetrics version: 1.4.1\n\n\nWonderful, as long as your versions are the same or higher to the versions above, you should be able to run the code below.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#extra-resources",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#extra-resources",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "24 Extra resources",
    "text": "24 Extra resources\n\nA Guide to Bounding Box Formats and How to Draw Them by Daniel Bourke.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#getting-a-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#getting-a-dataset",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "3 Getting a dataset",
    "text": "3 Getting a dataset\nOkay, now we‚Äôre got the required libraries, let‚Äôs get a dataset.\nGetting a dataset is one of the most important things a machine learning project.\nThe dataset you often determines the type of model you use as well as the quality of the outputs of that model.\nMeaning, if you have a high quality dataset, chances are, your future model could also have high quality outputs.\nIt also means if your dataset is of poor quality, your model will likely also have poor quality outputs.\nFor an object detection problem, your dataset will likely come in the form of a group of images as well as a file with annotations belonging to those images.\nFor example, you might have the following setup:\nfolder_of_images/\n    image_1.jpeg\n    image_2.jpeg\n    image_3.jpeg\nannotations.json\nWhere the annotations.json contains details about the contains of each image:\n\n\nannotations.json\n\n[\n    {\n        'image_path': 'image_1.jpeg', \n        'image_id': 42,\n        'annotations': \n            {\n                'file_name': ['image_1.jpeg'],\n                'image_id': [42],\n                'category_id': [1],\n                'bbox': [\n                            [360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n                        ],\n                'area': [46390.9609375]\n            },\n        'label_source': 'manual_prodigy_label',\n        'image_source': 'manual_taken_photo'\n    },\n\n    ...(more labels down here)\n]\n\nDon‚Äôt worry too much about the exact meaning of everything in the above annotations.json file for now (this is only one example, there are many different ways object detection information could be displayed).\nThe main point is that each target image is paired with an assosciated label.\nNow like all good machine learning cooking shows, I‚Äôve prepared a dataset from earlier.\n\n  \n\nOur Trashify dataset is available on Hugging Face. These images have been labelled manually with bounding boxes for different classes.\n\n\nIt‚Äôs stored on Hugging Face Datasets (also called the Hugging Face Hub) under the name mrdbourke/trashify_manual_labelled_images.\nThis is a dataset I‚Äôve collected manually by hand (yes, by picking up 1000+ pieces of trash and photographing it) as well as labelled by hand (by drawing boxes on each image with a labelling tool called Prodigy).\n\n3.1 Loading the dataset\nTo load a dataset stored on the Hugging Face Hub we can use the datasets.load_dataset(path=NAME_OR_PATH_OF_DATASET) function and pass it the name/path of the dataset we want to load.\nIn our case, our dataset name is mrdbourke/trashify_manual_labelled_images (you can also change this for your own dataset).\nAnd since our dataset is hosted on Hugging Face, when we run the following code for the first time, it will download it.\nIf your target dataset is quite large, this download may take a while.\nHowever, once the dataset is downloaded, subsequent reloads will be mush faster.\n\n\n\n\n\n\nGetting information about a function/method\n\n\n\nOne way to find out what a function or method does is to lookup the documentation.\nAnother way is to write the function/method name with a question mark afterwards.\nFor example:\nfrom datasets import load_dataset\n\nload_dataset?\nGive it a try.\nYou should see some helpful information about what inputs the method takes and how they are used.\n\n\nLet‚Äôs load our dataset and check it out.\n\nfrom datasets import load_dataset\n\n# Load our Trashify dataset\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nBeautiful!\nWe can see that there is a train split of the dataset already which currently contains all of the samples (1128 in total).\nThere are also some features that come with our dataset which are related to our object detection goal.\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\nprint(f\"[INFO] Dataset features:\") \n\nfrom pprint import pprint\n\npprint(dataset['train'].features)\n\n[INFO] Length of original dataset: 1128\n[INFO] Dataset features:\n{'annotations': Sequence(feature={'area': Value(dtype='float32', id=None),\n                                  'bbox': Sequence(feature=Value(dtype='float32',\n                                                                 id=None),\n                                                   length=4,\n                                                   id=None),\n                                  'category_id': ClassLabel(names=['bin',\n                                                                   'hand',\n                                                                   'not_bin',\n                                                                   'not_hand',\n                                                                   'not_trash',\n                                                                   'trash',\n                                                                   'trash_arm'],\n                                                            id=None),\n                                  'file_name': Value(dtype='string', id=None),\n                                  'image_id': Value(dtype='int64', id=None),\n                                  'iscrowd': Value(dtype='int64', id=None)},\n                         length=-1,\n                         id=None),\n 'image': Image(mode=None, decode=True, id=None),\n 'image_id': Value(dtype='int64', id=None),\n 'image_source': Value(dtype='string', id=None),\n 'label_source': Value(dtype='string', id=None)}\n\n\nNice!\nWe can see our dataset features contain the following fields:\n\nannotations - A sequence of values including a bbox field (short for bounding box) as well as category_id field which contains the target objects we‚Äôd like to identify in our images (['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nimage - This contains the target image assosciated with a given set of annotations (in our case, images and annotations have been uploaded to the Hugging Face Hub together).\nimage_id - A unique ID assigned to a given sample.\nimage_source - Where the image came from (all of our images have been manually collected).\nlabel_source - Where the image label came from (all of our images have been manually labelled).\n\n\n\n3.2 Viewing a single sample from our data\nNow we‚Äôve seen the features, let‚Äôs check out a single sample from our dataset.\nWe can index on a single sample of the \"train\" set just like indexing on a Python list.\n\n# View a single sample of the dataset\ndataset[\"train\"][42]\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 745,\n 'annotations': {'file_name': ['094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg'],\n  'image_id': [745, 745, 745],\n  'category_id': [5, 1, 0],\n  'bbox': [[333.1000061035156,\n    611.2000122070312,\n    244.89999389648438,\n    321.29998779296875],\n   [504.0, 612.9000244140625, 451.29998779296875, 650.7999877929688],\n   [202.8000030517578,\n    366.20001220703125,\n    532.9000244140625,\n    555.4000244140625]],\n  'iscrowd': [0, 0, 0],\n  'area': [78686.3671875, 293706.03125, 295972.65625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nWe see a few more details here compared to just looking at the features.\nWe notice the image is a PIL.Image with size 960x1280 (width x height).\nAnd the file_name is a UUID (Universially Unique Identifier, made with uuid.uuid4()).\nThe bbox field in the annotations key contains a list of bounding boxes assosciated with the image.\nIn this case, there are 3 different bounding boxes.\nWith the category_id values of 5, 1, 0 (we‚Äôll map these to class names shortly).\nLet‚Äôs inspect a single bounding box.\n\ndataset[\"train\"][42][\"annotations\"][\"bbox\"][0]\n\n[333.1000061035156, 611.2000122070312, 244.89999389648438, 321.29998779296875]\n\n\nThis array gives us the coordinates of a single bounding box in the format XYWH.\nWhere:\n\nX is the x-coordinate of the top left corner of the box (333.1).\nY is the y-coordinate of the top left corner of the box (611.2).\nW is the width of the box (244.9).\nH is the height of the box (321.3).\n\nAll of these values are in absolute pixel values (meaning an x-coordinate of 333.1 is 333.1 pixels across on the x-axis).\nHow do I know this?\nI know this because I created the box labels and this is the default value Prodigy (the labelling tool I used) outputs boxes.\nHowever, if you were to come across another bouding box dataset, one of the first steps would be to figure out what format your bounding boxes are in.\nWe‚Äôll see more on bounding box formats shortly.\n\n\n3.3 Extracting the category names from our data\nBefore we start to visualize our sample image and bounding boxes, let‚Äôs extract the category names from our dataset.\nWe can do so by accessing the features attribute our of dataset and then following it through to find the category_id feature, this contains a list of our text-based class names.\n\n\n\n\n\n\nNote\n\n\n\nWhen working with different categories, it‚Äôs good practice to get a list or mapping (e.g.¬†a Python dictionary) from category name to ID and vice versa.\nFor example:\n# Category to ID\n{\"class_name\": 0}\n\n# ID to Category\n{0: \"class_name\"}\nNot all datasets will have this implemented in an easy to access way, so it might take a bit of research to get it created.\n\n\nLet‚Äôs access the class names in our dataset and save them to a variable categories.\n\n# Get the categories from the dataset\n# Note: This requires the dataset to have been uploaded with this information setup, not all datasets will have this available.\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\nBeautiful!\nWe get the following class names:\n\nbin - A rubbish bin or trash can.\nhand - A person‚Äôs hand.\nnot_bin - Negative version of bin for items that look like a bin but shouldn‚Äôt be identified as one.\nnot_hand - Negative version of hand for items that look like a hand but shouldn‚Äôt be identified as one.\nnot_trash - Negative version of trash for items that look like trash but shouldn‚Äôt be identified as it.\ntrash - An item of trash you might find on a walk such as an old plastic bottle, food wrapper, cigarette butt or used coffee cup.\ntrash_arm - A mechanical arm used for picking up trash.\n\nThe goal of our computer vision model will be: given an image, detect items belonging to these target classes if they are present.\n\n\n3.4 Creating a mapping from numbers to labels\nNow we‚Äôve got our text-based class names, let‚Äôs create a mapping from label to ID and ID to label.\nFor each of these, Hugging Face use the terminology label2id and id2label respectively.\n\n# Map ID's to class names and vice versa\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nprint(f\"Label to ID mapping:\\n{label2id}\\n\")\nprint(f\"ID to label mapping:\\n{id2label}\")\n# id2label, label2id\n\nLabel to ID mapping:\n{'bin': 0, 'hand': 1, 'not_bin': 2, 'not_hand': 3, 'not_trash': 4, 'trash': 5, 'trash_arm': 6}\n\nID to label mapping:\n{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash', 6: 'trash_arm'}\n\n\n\n\n3.5 Creating a colour palette\nOk we know which class name matches to which ID, now let‚Äôs create a dictionary of different colours we can use to display our bounding boxes.\nIt‚Äôs one thing to plot bounding boxes, it‚Äôs another thing to make them look nice.\nAnd we always want our plots looking nice!\nWe‚Äôll colour the positive classes bin, hand, trash, trash_arm in nice bright colours.\nAnd the negative classes not_bin, not_hand, not_trash in a light red colour to indicate they‚Äôre the negative versions.\nOur colour dictionary will map class_name -&gt; (red, green, blue) (or RGB) colour values.\n\n# Make colour dictionary\ncolour_palette = {\n    'bin': (0, 0, 224),         # Bright Blue (High contrast with greenery) in format (red, green, blue)\n    'not_bin': (255, 80, 80),   # Light Red to indicate negative class\n\n    'hand': (148, 0, 211),      # Dark Purple (Contrasts well with skin tones)\n    'not_hand': (255, 80, 80),  # Light Red to indicate negative class\n\n    'trash': (0, 255, 0),       # Bright Green (For trash-related items)\n    'not_trash': (255, 80, 80), # Light Red to indicate negative class\n\n    'trash_arm': (255, 140, 0), # Deep Orange (Highly visible)\n}\n\nLet‚Äôs check out what these colours look like!\nIt‚Äôs the ABV motto: Always Be Visualizing!\nWe can plot our colours with matplotlib.\nWe‚Äôll just have to write a small function to normalize our colour values from [0, 255] to [0, 1] (matplotlib expects our colour values to be between 0 and 1).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Normalize RGB values to 0-1 range\ndef normalize_rgb(rgb_tuple):\n    return tuple(x/255 for x in rgb_tuple)\n\n# Turn colors into normalized RGB values for matplotlib\ncolors_and_labels_rgb = [(key, normalize_rgb(value)) for key, value in colour_palette.items()]\n\n# Create figure and axis\nfig, ax = plt.subplots(1, 7, figsize=(8, 1))\n\n# Flatten the axis array for easier iteration\nax = ax.flatten()\n\n# Plot each color square\nfor idx, (label, color) in enumerate(colors_and_labels_rgb):\n    ax[idx].add_patch(plt.Rectangle(xy=(0, 0), \n                                    width=1, \n                                    height=1, \n                                    facecolor=color))\n    ax[idx].set_title(label)\n    ax[idx].set_xlim(0, 1)\n    ax[idx].set_ylim(0, 1)\n    ax[idx].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nSensational!\nNow we know what colours to look out for when we visualize our bounding boxes.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---different-bounding-box-formats",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---different-bounding-box-formats",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "5 TK - Different bounding box formats",
    "text": "5 TK - Different bounding box formats\nWhen drawing our bounding box, we discussed the terms XYXY and XYWH.\nWell, we didn‚Äôt really discuss these at all‚Ä¶\nBut that‚Äôs why we‚Äôre here.\nOne of the most confusing things in the world of object detection is the different formats bounding boxes come in.\nAre your boxes in XYXY, XYWH or CXCYWH?\nAre they in absolute format?\nOr normalized format?\nPerhaps a table will help us.\nThe following table contains a non-exhaustive list of some of the most common bounding box formats you‚Äôll come across in the wild.\n\n\n\nTable¬†1: Different bounding box formats\n\n\n\n\n\nBox format\nDescription\nAbsolute Example\nNormalized Example\nSource\n\n\n\n\nXYXY\nDescribes the top left corner coordinates (x1, y1) as well as the bottom right corner coordinates of a box.  Also referred to as:  [x1, y1, x2, y2]  or  [x_min, y_min, x_max, y_max]\n[8.9, 275.3, 867.5, 964.0]\n[0.009, 0.215, 0.904, 0.753]\nPASCAL VOC Dataset uses the absolute version of this format, torchvision.utils.draw_bounding_boxes defaults to the absolute version of this format.\n\n\nXYWH\nDescribes the top left corner coordinates (x1, y1) as well as the width (box_width) and height (box_height) of the target box. The bottom right corners (x2, y2) are found by adding the width and height to the top left corner coordinates (x1 + box_width, y1 + box_height).  Also referred to as:  [x1, y1, box_width, box_height]  or  [x_min, y_min, box_width, box_height]\n[8.9, 275.3, 858.6, 688.7]\n[0.009, 0.215, 0.894, 0.538]\nThe COCO (Common Objects in Context) dataset uses the absolute version of this format, see the section under ‚Äúbbox‚Äù.\n\n\nCXCYWH\nDescribes the center coordinates of the bounding box (center_x, center_y) as well as the width (box_width) and height (box_height) of the target box.  Also referred to as:  [center_x, center_y, box_width, box_height]\n[438.2, 619.65, 858.6, 688.7]\n[0.456, 0.484, 0.894, 0.538]\nNormalized version introduced in the YOLOv3 (You Only Look Once) paper and is used by many later forms of YOLO.\n\n\n\n\n\n\n\n5.1 Absolute or normalized format?\nIn absolute coordinate form, bounding box values are in the same format as the width and height dimensions (e.g.¬†our image is 960x1280 pixels).\nFor example in XYXY format: [\"bin\", 8.9, 275.3, 867.5, 964.0]\nAn (x1, y1) (or (x_min, y_min)) coordinate of (8.9, 275.3) means the top left corner is 8.9 pixels in on the x-axis, and 275.3 pixels down on the y-axis.\nIn normalized coordinate form, values are between [0, 1] and are proportions of the image width and height.\nFor example in XYXY format: [\"bin\", 0.009, 0.215, 0.904, 0.753]\nA normalized (x1, y1) (or (x_min, y_min)) coordinate of (0.009, 0.215) means the top left corner is 0.009 * image_width pixels in on the x-axis and 0.215 * image_height down on the y-axis.\nTo convert absolute coordinates to normalized, you can divide x-axis values by the image width and y-axis values by the image height.\n\\[\nx_{\\text{normalized}} = \\frac{x_{\\text{absolute}}}{\\text{image\\_width}} \\quad y_{\\text{normalized}} = \\frac{y_{\\text{absolute}}}{\\text{image\\_height}}\n\\]\n\n\n5.2 Which bounding box format should you use?\nThe bounding box format you use will depend on the framework, model and existing data you‚Äôre trying to use.\nFor example, the take the following frameworks:\n\nPyTorch - If you‚Äôre using PyTorch pre-trained models, for example, torchvision.models.detection.fasterrcnn_resnet50_fpn, you‚Äôll want absolute XYXY ([x1, y1, x2, y2]) format.\nHugging Face Transformers - If you‚Äôre using a Hugging Face Transformers model such as Conditional DETR, you‚Äôll want to take note that outputs from the model can be of one type (e.g.¬†CXCYWH) but they can be post-processed into another type (e.g.¬†absolute XYXY).\nUltralytics YOLO - If you‚Äôre using a YOLO-like model such as Ultralytics YOLO, you‚Äôll want normalized CXCYWH ([center_x, center_y, width, height]) format.\nGoogle Gemini - If you‚Äôre using Google Gemini to predict bounding boxes on your images, then you‚Äôll want to pay attention to the special [y_min, x_min, y_max, x_max] (YXYX) normalized coordinates.\n\nOr if you note that someone has said their model is pre-trained on the COCO dataset, chances are the data has been formatted in XYWH format (see Table¬†1).\n\n\n\n\n\n\nNote\n\n\n\nFor more on different bounding box formats and how to draw them, see A Guide to Bounding Box Formats and How to Draw Them.\n\n\n\n# TK - should I functionize the plotting of boxes and image so we can do input/output with tensors + data augmentations on that (E.g. original: image, augmented: image),\n# - is this needed?",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#summary",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#summary",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "18 Summary",
    "text": "18 Summary\nWe‚Äôve followed the data, model, demo paradigm and built a custom object detection model on a custom dataset and deployed it into a functional demo.\nObject detection models can be a bit of challenge to begin with as you need coordinate data for items in your images as well as label data.\nHowever, as we‚Äôve seen, with the right mix of data, model and training techniques we can take an existing object detection model like RT-DETRv2 and tailor it to our own projects.\nThe following extensions and extra-curriculum are good follow ups to practice what we‚Äôve learned here.\n\n18.1 Extensions\n\nCan you improve the model by training it for longer? What happens if you double the amount of epochs we did?\nWhat are some ways to improve the model on differnet kinds of data? Could you take 10-30 photos of your own and add it to the dataset to improve the model?\nData augmentation is one way to improve image classification models but it can also work for object detection models, how might you implement data augmentation into our training pipeline?\n\nHint: See PyTorch‚Äôs guide for data augmentation on detection problems.\n\nSo far the RT-DETRv2 model we used seemed to work pretty well, what happens if you try the D-FINE model?\nSometimes our model predicts multiple of the same kind of boxes, for example, it will predict 2 boxes for ‚Äúhand‚Äù when there is only one, a technique to help with this is called NMS (Non Maximum Suppression), how might you implement this into our post processing pipeline?\n\n\n\n18.2 Extra-Curriculum\n\n‚ÄúBut what if I have images but no box labels?‚Äù Great questions. One way to acquire labels is to use a zero-shot detection model such as OmDet Turbo or Grounding DINO which are capable of producing box labels on images given a text input. You could use these to bootstrap a labelled dataset and then train a custom model on them/improve them by reviewing.\nAnother way to get high quality labels is to manually annotate images, you can do with tools such as Label Studio and Prodigy.\nFor more on the RT-DETRv2 model, I‚Äôd encourage you to read the original paper where it was introduced, RT-DETRv2: Improved Baseline with Bag-of-Freebies for Real-Time Detection Transformer.\n\n\n\n18.3 Extra resources\n\nApache 2.0 object detector models - For a list of high-performing Apache 2.0 (permissive open-source licence which enables commercial use) object detection models, I‚Äôve created a short guide which collects them.\nsupervision library - An excellent open-source library with plenty of visualization utilities for computer vision projects.\nObject detection evaluation metrics by Roboflow - This is a great guide to all of the important detection metrics you‚Äôll want to look at when creating object detection models.\nA Guide to Bounding Box Formats and How to Draw Them by Daniel Bourke - One of the most important things when it comes to evaluating object detection models is to see how they look on images, this guide shows you how to draw bounding boxes on images.\nA Hands-on Guide to IoU (Intersection over Union) for Bounding Boxes by Daniel Bourke - Intersection over Union (IoU) is a measure of how much one box overlaps another and is used for evaluating the quality of your predicted bounding boxes, this guide walks through code examples of calculating IoU.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#plotting-a-single-image-and-visualizing-the-boxes",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#plotting-a-single-image-and-visualizing-the-boxes",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "4 Plotting a single image and visualizing the boxes",
    "text": "4 Plotting a single image and visualizing the boxes\nOkay, okay, finally time to plot an image!\nLet‚Äôs take a random sample from our dataset and plot the image as well as the box on it.\n\n4.1 Creating helper functions to help with visualization\nTo save some space in our notebook (plotting many images can increase the size of our notebook dramatically), we‚Äôll create two small helper functions:\n\nhalf_image - Halves the size of a given image.\nhalf_boxes - Divides the input coordinates of a given input box by 2.\n\nThese functions aren‚Äôt 100% necessary in our workflow.\nThey‚Äôre just to make the images slightly smaller so they fit better in the notebook.\n\nimport PIL\n\ndef half_image(image: PIL.Image) -&gt; PIL.Image:\n    \"\"\"\n    Resizes a given input image by half and returns the smaller version.\n    \"\"\"\n    return image.resize(size=(image.size[0] // 2, image.size[1] // 2))\n\ndef half_boxes(boxes):\n    \"\"\"\n    Halves an array/tensor of input boxes and returns them. Necessary for plotting them on a half-sized image.\n\n    For example:\n\n    boxes = [100, 100, 100, 100]\n    half_boxes = half_boxes(boxes)\n    print(half_boxes)\n\n    &gt;&gt;&gt; [50, 50, 50, 50]\n    \"\"\"\n    if isinstance(boxes, list):\n        # If boxes are list of lists, then we have multiple boxes\n        for box in boxes:\n            if isinstance(box, list):\n                return [[coordinate // 2 for coordinate in box] for box in boxes]\n            else:\n                return [coordinate // 2 for coordinate in boxes]         \n    \n    if isinstance(boxes, np.ndarray):\n        return (boxes // 2)\n    \n    if isinstance(boxes, torch.Tensor):\n        return (boxes // 2)\n\n# Test the functions \nimage_test = dataset[\"train\"][42][\"image\"]\nimage_test_half = half_image(image_test)\nprint(f\"[INFO] Original image size: {image_test.size} | Half image size: {image_test_half.size}\")\n\nboxes_test_list = [100, 100, 100, 100]\nprint(f\"[INFO] Original boxes: {boxes_test_list} | Half boxes: {half_boxes(boxes_test_list)}\")\n\nboxes_test_torch = torch.tensor([100.0, 100.0, 100.0, 100.0])\nprint(f\"[INFO] Original boxes: {boxes_test_torch} | Half boxes: {half_boxes(boxes_test_torch)}\")\n\n[INFO] Original image size: (960, 1280) | Half image size: (480, 640)\n[INFO] Original boxes: [100, 100, 100, 100] | Half boxes: [50, 50, 50, 50]\n[INFO] Original boxes: tensor([100., 100., 100., 100.]) | Half boxes: tensor([50., 50., 50., 50.])\n\n\n\n\n4.2 Plotting boxes on a single image step by step\nTo plot an image and its assosciated boxes, we‚Äôll do the following steps:\n\nSelect a random sample from the dataset.\nExtract the \"image\" (our image is in PIL format) and \"bbox\" keys from the random sample.\n\nWe can also optionally halve the size of our image/boxes to save space. In our case, we will halve our image and boxes.\n\nTurn the box coordinates into a torch.tensor (we‚Äôll be using torchvision utilities to plot the image and boxes).\nConvert the box format from XYXY to XYWH using torchvision.ops.box_convert (we do this because torchvision.utils.draw_bounding_boxes requires XYXY format as input).\nGet a list of label names (e.g.¬†\"bin\", \"trash\", etc) assosciated with each of the boxes as well as a list of colours to match (these will be from our colour_palette).\nDraw the boxes on the target image by:\n\nTurning the image into a tensor with torchvision.transforms.functional.pil_to_tensor.\nDraw the bounding boxes on our image tensor with torchvision.utils.draw_bounding_boxes.\nTurn the image and bounding box tensors back into a PIL image with torchvision.transforms.functional.pil_to_tensor.\n\n\nPhew!\nA fair few steps‚Ä¶\nBut we‚Äôve got this!\n\n\n\n\n\n\nNote\n\n\n\nIf the terms XYXY or XYWH or all of the drawing methods sound a bit confusing or intimidating, don‚Äôt worry, there‚Äôs a fair bit going on here.\nWe‚Äôll cover bounding box formats, such as XYXY shortly.\nIn the meantime, if you want to learn more about different bounding box formats and how to draw them, I wrote A Guide to Bounding Box Formats and How to Draw Them which you might find helpful.\n\n\n\n# Plotting a bounding box on a single image\nimport random\n\nimport torch\n\nfrom torchvision.ops import box_convert\nfrom torchvision.utils import draw_bounding_boxes\n\nfrom torchvision.transforms.functional import pil_to_tensor, to_pil_image \n\n# 1. Select a random sample from our dataset\nrandom_index = random.randint(0, len(dataset[\"train\"]))\nprint(f\"[INFO] Showing training sample from index: {random_index}\")\nrandom_sample = dataset[\"train\"][random_index]\n\n# 2. Get image and boxes from random sample\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_boxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Optional: Half the image and boxes for space saving (all of the following code will work with/without half size images)\nhalf_random_sample_image = half_image(random_sample_image)\nhalf_random_sample_boxes = half_boxes(random_sample_boxes)\n\n# 3. Turn box coordinates in a tensor\nboxes_xywh = torch.tensor(half_random_sample_boxes)\nprint(f\"Boxes in XYWH format: {boxes_xywh}\")\n\n# 4. Convert boxes from XYWH -&gt; XYXY \n# torchvision.utils.draw_bounding_boxes requires input boxes in XYXY format (X_min, y_min, X_max, y_max)\nboxes_xyxy = box_convert(boxes=boxes_xywh,\n                         in_fmt=\"xywh\",\n                         out_fmt=\"xyxy\")\nprint(f\"Boxes XYXY: {boxes_xyxy}\")\n\n# 5. Get label names of target boxes and colours to match\nrandom_sample_label_names = [categories.int2str(x) for x in random_sample[\"annotations\"][\"category_id\"]]\nrandom_sample_colours = [colour_palette[label_name] for label_name in random_sample_label_names]\nprint(f\"Label names: {random_sample_label_names}\")\nprint(f\"Colour codes: {random_sample_colours}\")\n\n# 6. Draw the boxes on the image as a tensor and then turn it into a PIL image\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_random_sample_image),\n        boxes=boxes_xyxy,\n        colors=random_sample_colours,\n        labels=random_sample_label_names,\n        width=2,\n        label_colors=random_sample_colours\n    )\n)\n\n[INFO] Showing training sample from index: 1045\nBoxes in XYWH format: tensor([[155., 267., 172., 216.],\n        [274., 361., 154., 192.]])\nBoxes XYXY: tensor([[155., 267., 327., 483.],\n        [274., 361., 428., 553.]])\nLabel names: ['bin', 'not_bin']\nColour codes: [(0, 0, 224), (255, 80, 80)]\n\n\n\n\n\n\n\n\n\nOutstanding!\nOur first official bounding boxes plotted on an image!\nNow the idea of Trashify üöÆ is coming to life.\nDepending on the random sample you‚Äôre looking at, you should see some combination of ['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm'].\nOur goal will be to build an object detection model to replicate these boxes on a given image.\n\n\n\n\n\n\nGetting familiar with a dataset: viewing 100 random samples\n\n\n\nWhenever working with a new dataset, I find it good practice to view 100+ random samples of the data.\nIn our case, this would mean viewing 100 random images with their bounding boxes drawn on them.\nDoing so starts to build your own intuition of the data.\nUsing this intuition, along with evaluation metrics, you can start to get a better idea of how your model might be performing later on.\nKeep this in mind for any new dataset or problem space you‚Äôre working on.\nStart by looking at 100+ random samples.\nAnd yes, generally more is better.\nSo you can practice by running the code cell above a number of times to see the different kinds of images and boxes in the dataset.\nCan you think of any scenarios which the dataset might be missing?",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "4 TK - Plotting a single image and visualizing the boxes",
    "text": "4 TK - Plotting a single image and visualizing the boxes\nOkay, okay, finally time to plot an image!\nLet‚Äôs take a random sample from our dataset and plot the image as well as the box on it.\nTo save some space in our notebook (plotting many images can increase the size of our notebook dramatically), we‚Äôll create two small helper functions:\n\nhalf_image - Halves the size of a given image.\nhalf_boxes - Divides the input coordinates of a given input box by 2.\n\nThese functions aren‚Äôt 100% necessary in our workflow.\nThey‚Äôre just to make the images slightly smaller so they fit better in the notebook.\n\nimport PIL\n\ndef half_image(image: PIL.Image) -&gt; PIL.Image:\n    \"\"\"\n    Resizes a given input image by half and returns the smaller version.\n    \"\"\"\n    return image.resize(size=(image.size[0] // 2, image.size[1] // 2))\n\ndef half_boxes(boxes):\n    \"\"\"\n    Halves an array of input boxes and returns them. Necessary for plotting them on a half-sized image.\n\n    For example:\n\n    boxes = [100, 100, 100, 100]\n    half_boxes = half_boxes(boxes)\n    print(half_boxes)\n\n    &gt;&gt;&gt; [50, 50, 50, 50]\n    \"\"\"\n    return np.array(boxes) // 2\n\n# Test the functions \nimage_test = dataset[\"train\"][42][\"image\"]\nimage_test_half = half_image(image_test)\nprint(f\"[INFO] Original image size: {image_test.size} | Half image size: {image_test_half.size}\")\n\nboxes_test = [100, 100, 100, 100]\nprint(f\"[INFO] Original boxes: {boxes_test} | Half boxes: {half_boxes(boxes_test)}\")\n\n[INFO] Original image size: (960, 1280) | Half image size: (480, 640)\n[INFO] Original boxes: [100, 100, 100, 100] | Half boxes: [50 50 50 50]\n\n\nTo plot an image and its assosciated boxes, we‚Äôll do the following steps:\n\nSelect a random sample from the dataset.\nExtract the \"image\" (our image is in PIL format) and \"bbox\" keys from the random sample.\n\nWe can also optionally halve the size of our image/boxes to save space. In our case, we will halve our image and boxes.\n\nTurn the box coordinates into a torch.tensor (we‚Äôll be using torchvision utilities to plot the image and boxes).\nConvert the box format from XYXY to XYWH using torchvision.ops.box_convert (we do this because torchvision.utils.draw_bounding_boxes requires XYXY format as input).\nGet a list of label names (e.g.¬†\"bin\", \"trash\", etc) assosciated with each of the boxes as well as a list of colours to match (these will be from our colour_palette).\nDraw the boxes on the target image by:\n\nTurning the image into a tensor with torchvision.transforms.functional.pil_to_tensor.\nDraw the bounding boxes on our image tensor with torchvision.utils.draw_bounding_boxes.\nTurn the image and bounding box tensors back into a PIL image with torchvision.transforms.functional.pil_to_tensor.\n\n\nPhew!\nA fair few steps‚Ä¶\nBut we‚Äôve got this!\n\n\n\n\n\n\nNote\n\n\n\nIf the terms XYXY or XYWH or all of the drawing methods sound a bit confusing or intimidating, don‚Äôt worry, there‚Äôs a fair bit going on here.\nWe‚Äôll cover bounding box formats, such as XYXY shortly.\nIn the meantime, if you want to learn more about different bounding box formats and how to draw them, I wrote A Guide to Bounding Box Formats and How to Draw Them which you might find helpful.\n\n\n\n# Plotting a bounding box on a single image\nimport random\n\nimport torch\n\nfrom torchvision.ops import box_convert\nfrom torchvision.utils import draw_bounding_boxes\n\nfrom torchvision.transforms.functional import pil_to_tensor, to_pil_image \n\n# 1. Select a random sample from our dataset\nrandom_index = random.randint(0, len(dataset[\"train\"]))\nprint(f\"[INFO] Showing training sample from index: {random_index}\")\nrandom_sample = dataset[\"train\"][random_index]\n\n# 2. Get image and boxes from random sample\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_boxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Optional: Half the image and boxes for space saving (all of the following code will work with/without half size images)\nhalf_random_sample_image = half_image(random_sample_image)\nhalf_random_sample_boxes = half_boxes(random_sample_boxes)\n\n# 3. Turn box coordinates in a tensor\nboxes_xywh = torch.tensor(half_random_sample_boxes)\nprint(f\"Boxes in XYWH format: {boxes_xywh}\")\n\n# 4. Convert boxes from XYWH -&gt; XYXY \n# torchvision.utils.draw_bounding_boxes requires input boxes in XYXY format (X_min, y_min, X_max, y_max)\nboxes_xyxy = box_convert(boxes=boxes_xywh,\n                         in_fmt=\"xywh\",\n                         out_fmt=\"xyxy\")\nprint(f\"Boxes XYXY: {boxes_xyxy}\")\n\n# 5. Get label names of target boxes and colours to match\nrandom_sample_label_names = [categories.int2str(x) for x in random_sample[\"annotations\"][\"category_id\"]]\nrandom_sample_colours = [colour_palette[label_name] for label_name in random_sample_label_names]\nprint(f\"Label names: {random_sample_label_names}\")\nprint(f\"Colour names: {random_sample_colours}\")\n\n# 6. Draw the boxes on the image as a tensor and then turn it into a PIL image\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_random_sample_image),\n        boxes=boxes_xyxy,\n        colors=random_sample_colours,\n        labels=random_sample_label_names,\n        width=2,\n        label_colors=random_sample_colours\n    )\n)\n\n[INFO] Showing training sample from index: 712\nBoxes in XYWH format: tensor([[108., 254., 194., 184.],\n        [194., 186., 132., 200.],\n        [ 25., 348., 179., 187.],\n        [  4., 473., 134., 160.]], dtype=torch.float64)\nBoxes XYXY: tensor([[108., 254., 302., 438.],\n        [194., 186., 326., 386.],\n        [ 25., 348., 204., 535.],\n        [  4., 473., 138., 633.]], dtype=torch.float64)\nLabel names: ['trash', 'bin', 'hand', 'not_trash']\nColour names: [(0, 255, 0), (0, 0, 224), (148, 0, 211), (255, 80, 80)]\n\n\n\n\n\n\n\n\n\nOutstanding!\nOur first official bounding boxes plotted on an image!\nNow the idea of Trashify üöÆ is coming to life.\nDepending on the random sample you‚Äôre looking at, you should see some combination of ['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm'].\nOur goal will be to build an object detection model to replicate these boxes on a given image.\n\n\n\n\n\n\nGetting familiar with a dataset: viewing 100 random samples\n\n\n\nWhenever working with a new dataset, I find it good practice to view 100+ random samples of the data.\nIn our case, this would mean viewing 100 random images with their bounding boxes drawn on them.\nDoing so starts to build your own intuition of the data.\nUsing this intuition, along with evaluation metrics, you can start to get a better idea of how your model might be performing later on.\nKeep this in mind for any new dataset or problem space you‚Äôre working on.\nStart by looking at 100+ random samples.\nAnd yes, generally more is better.\nSo you can practice by running the code cell above a number of times to see the different kinds of images and boxes in the dataset.\nCan you think of any scenarios which the dataset might be missing?",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#getting-an-object-detection-model",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#getting-an-object-detection-model",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "6 Getting an object detection model",
    "text": "6 Getting an object detection model\nThere are two main ways of getting an object detection model:\n\nBuilding it yourself. For example, constructing it layer by layer, testing it and training it on your target problem.\nUsing an existing one. For example, find an existing model on a problem space similar to your own and then adapt it via transfer learning to your own task.\n\nIn our case, we‚Äôre going to focus on the latter.\nWe‚Äôll be taking a pre-trained object detection model and fine-tuning it on our Trashify üöÆ dataset so it outputs the boxes and labels we‚Äôre after.\n\n6.1 Places to get object detection models\nInstead of building your own machine learning model from scratch, it‚Äôs common practice to take an existing model that works on similar problem space to yours and then fine-tune it to your own use case.\nThere are several places to get object detection models:\n\n\n\nTable¬†2: Places to get pre-trained object detection models\n\n\n\n\n\nLocation\nDescription\n\n\n\n\nHugging Face Hub\nOne the best places on the internet to find open-source machine learning models of nearly any kind. You can find pre-trained object detection models here such as facebook/detr-resnet-50, a model from Facebook (Meta) and microsoft/conditional-detr-resnet-50, a model from Microsoft. And RT-DETRv2, the model we‚Äôre going to use as our base model. Many of the models are permissively licensed, meaning you can use them for your own projects.\n\n\nApache 2.0 Object Detection Models\nA list collected by myself of open-source, permissively licenced and high performing object detection models.\n\n\ntorchvision\nPyTorch‚Äôs built-in domain library for computer vision has several pre-trained object detection models which you can use in your own workflows.\n\n\npaperswithcode.com/task/object-detection\nWhilst not a direct place to download object detection models from, paperswithcode contains benchmarks for many machine learning tasks (including object detection) which shows the current state of the art (best performing) models and usually includes links to where to get the code.\n\n\nDetectron2\nDetectron2 is an open-source library to help with many of the tasks in detecting items in images. Inside you‚Äôll find several pre-trained and adaptable models as well as utilities such as data loaders for object detection and segmentation tasks.\n\n\nYOLO Series\nA running series of ‚ÄúYou Only Look Once‚Äù models. Usually, the higher the number, the better performing. For example, YOLOv11 by Ultralytics should outperform YOLOv10, however, this often requires testing on your own dataset. Beware of the license, it is under the AGPL-3.0 license which may cause issues in some organizations.\n\n\nmmdetection library\nAn open-source library from the OpenMMLab which contains many different open-source models as well as detection-specific utilties.\n\n\n\n\n\n\nWhen you find a pre-trained object detection model, you‚Äôll often see statements such as:\n\nConditional DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images).\nSource: https://huggingface.co/microsoft/conditional-detr-resnet-50\n\nThis means the model has already been trained on the COCO object detection dataset which contains 118,000 images and 80 classes such as [\"cake\", \"person\", \"skateboard\"...].\nThis is a good thing.\nIt means that the model should have a fairly good starting point when we try to adapt it to our own project.\n\n\n6.2 Downloading our model from Hugging Face\nFor our Trashify üöÆ project we‚Äôre going to be using the pre-trained object detection model PekingU/rtdetr_v2_r50vd which was originally introduced in the paper RT-DETRv2: Improved Baseline with Bag-of-Freebies for Real-Time Detection Transformer.\n\n\n\n\n\n\nNote\n\n\n\nThe term ‚ÄúDETR‚Äù stands for ‚ÄúDEtection TRansformer‚Äù.\nWhere ‚ÄúTransformer‚Äù refers to the Transformer neural network architecture, specifically the Vision Transformer (or ViT) rather than the Hugging Face transformers library (quite confusing, yes).\nSo DETR means ‚Äúperforming detection with the Transformer architecture‚Äù.\nAnd the ‚ÄúRT‚Äù part stands for ‚ÄúReal Time‚Äù as in, the model is capable at performing predictions at over 30 FPS (a standard rate for video feeds).\n\n\nTo use this model, there are some helpful documentation resources we should be aware of:\n\n\n\nTable¬†3: Model documentation resources\n\n\n\n\n\nResource\nDescription\n\n\n\n\nRT-DETRv2 documentation\nContains detailed information on each of the transformers.RTDetrV2 classes.\n\n\ntransformers.RTDetrV2Config\nContains the configuration settings for our model such as number of layers and other hyperparameters.\n\n\ntransformers.RTDetrImageProcessor\nContains several preprocessing on post processing functions and settings for data going into and out of our model. Here we can set values such as size in the preprocess method which will resize our images to a certain size. We can also use the post_process_object_detection method to process the raw outputs of our model into a more usable format. Note: Even though our model is RT-DETRv2, it uses the original RT-DETR processor.\n\n\ntransformers.RTDetrV2ForObjectDetection\nThis will enable us to load the RT-DETRv2 model weights and enable to pass data through them via the forward method.\n\n\ntransformers.AutoImageProcessor\nThis will enable us to create an instance of transformers.RTDetrImageProcessor by passing the model name PekingU/rtdetr_v2_r50vd to the from_pretrained method. Hugging Face Transformers uses several Auto Classes for various problem spaces and models.\n\n\ntransformers.AutoModelForObjectDetection\nEnables us to load the model architecture and weights for the RT-DETRv2 architecture by passing the model name PekingU/rtdetr_v2_r50vd to the from_pretrained method.\n\n\n\n\n\n\nWe‚Äôll get hands-on which each of these throughout the project.\nFor now, if you‚Äôd like to read up more on each, I‚Äôd highly recommend it.\nKnowing how to navigate and read through a framework‚Äôs documentation is a very helpful skill to have.\n\n\n\n\n\n\nNote\n\n\n\nThere are other object detection models we could try on the Hugging Face Hub such as facebook/detr-resnet-50 or IDEA-Research/dab-detr-resnet-50-dc5-pat3.\nFor now, we‚Äôll stick with PekingU/rtdetr_v2_r50vd.\nIt‚Äôs easy to get stuck figuring out which model to use instead of just trying one and seeing how it goes.\nBest to get something small working with one model and try another one later as part of a series of experiments to try and improve your results.\nSpoiler: After trying several different object detection models on our problem, I found PekingU/rtdetr_v2_r50vd to be one of the best. Perhaps the newer D-FINE model might do better but I leave this for exploration.\n\n\nWe can load our model with transformers.AutoModelForObjectDetection.from_pretrained and passing in the following parameters:\n\npretrained_model_name_or_path - Our target model, which can be a local path or Hugging Face model name (e.g.¬†PekingU/rtdetr_v2_r50vd).\nlabel2id - A dictionary mapping our class names/labels to their numerical ID, this is so our model will know how many classes to output.\nid2label - A dictionary mapping numerical IDs to our class names/labels, so our model will know how many classes we‚Äôre working with and what their IDs are.\nignore_mismatched_sizes=True (default) - We‚Äôll set this to True so that our model can be instatiated with a varying number of classes compared to what it may have been trained on (e.g.¬†if our model was trained on the 91 classes from COCO, we only need 7).\n\nSee the full documentation for a full list of parameters we can use.\nLet‚Äôs create a model!\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning, module=\"torch.nn.modules.module\") # turn off warnings for loading the model (feel free to comment this if you want to see the warnings)\n\nfrom transformers import AutoModelForObjectDetection\n\nMODEL_NAME = \"PekingU/rtdetr_v2_r50vd\"\n\nmodel = AutoModelForObjectDetection.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    label2id=label2id,\n    id2label=id2label,\n    # Original model was trained with a different number of output classes to ours\n    # So we'll ignore any mismatched sizes (e.g. 91 vs. 7)\n    # Try turning this to False and see what happens\n    ignore_mismatched_sizes=True, \n)\n\n# Uncomment to see full model architecture\n# model\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nBeautiful!\nWe‚Äôve got a model ready.\nYou might‚Äôve noticed a warning about the model needing to be trained on a down-stream task:\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match: ‚Ä¶ - model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated - model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\nThis is because our model has a different number of target classes (7 in total) comapred to the original model (91 in total, from the COCO dataset).\nSo in order to get this pretrained model to work on our dataset, we‚Äôll need to fine-tune it.\nYou might also notice that if you set ignore_mismatched_sizes=False, you‚Äôll get an error:\n\nRuntimeError: Error(s) in loading state_dict for Linear: size mismatch for bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([7]).\n\nThis is a similar warning to the one above.\nKeep this is mind for when you‚Äôre working with pretrained models.\nIf you are using data slightly different to what the model was trained on, you may need to alter the setup hyperparameters as well as fine-tune it on your own data.\n\n\n6.3 Inspecting our model‚Äôs layers\nWe can inspect the full model architecture by running print(model) (I‚Äôve commented this out for brevity).\nAnd if you do so, you‚Äôll see a large list of layers which combine to contribute to make the overall model.\nThe following subset of layers has been truncated for brevity.\n# Shortened version of the model architecture, print the full model to see all layers\nRTDetrV2ForObjectDetection(\n  (model): RTDetrV2Model(\n    (backbone): RTDetrV2ConvEncoder(\n      (model): RTDetrResNetBackbone(\n        (embedder): RTDetrResNetEmbeddings(\n          (embedder): Sequential(\n            (0): RTDetrResNetConvLayer(\n              (convolution): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (normalization): RTDetrV2FrozenBatchNorm2d()\n              (activation): ReLU()\n            )\n            ... [Many layers here] ...\n    )\n  )\n  (class_embed): ModuleList(\n    (0-5): 6 x Linear(in_features=256, out_features=7, bias=True)\n  )\n  (bbox_embed): ModuleList(\n    (0-5): 6 x RTDetrV2MLPPredictionHead(\n      (layers): ModuleList(\n        (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        (2): Linear(in_features=256, out_features=4, bias=True)\n      )\n    )\n  )\n)\nIf we check out a few of our model‚Äôs layers, we can see that it is a combination of convolutional, attention, MLP (multi-layer perceptron) and linear layers.\nI‚Äôll leave exploring each of these layer types for extra-curriculum, you can see the source code for the model in the modeling_rt_detr_v2.py file on the transformers GitHub.\nFor now, think of them as progressively pattern extractors.\nWe‚Äôll feed our input image into our model and layer by layer it will manipulate the pixel values to try and extract patterns in a way so that its internal parameters matches the image to its input annotations.\nMore specifically, if we dive into the final two layer sections:\n\nclass_embed = classification head with out_features=7 (one for each of our labels, 'bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nbbox_embed = regression head with out_features=4 (one for each of our bbox coordinates, e.g.¬†[center_x, center_y, width, height]).\n\n\nprint(f\"[INFO] Final classification layer: {model.class_embed}\\n\")\nprint(f\"[INFO] Final box regression layer: {model.bbox_embed}\")\n\n[INFO] Final classification layer: ModuleList(\n  (0-5): 6 x Linear(in_features=256, out_features=7, bias=True)\n)\n\n[INFO] Final box regression layer: ModuleList(\n  (0-5): 6 x RTDetrV2MLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\nThese two layers are what are going to output the final predictions of our model in structure similar to our annotations.\nThe class_embed will output the predicted class label of a given bounding box output from bbox_predictor.\nIn essence, we are trying to get all of the pretrained patterns (also called parameters/weights & biases) of the previous layers to conform to the ideal outputs we‚Äôd like at the end.\n\n\n6.4 Counting the number of parameters in our model\nParameters are individual values which contribute to a model‚Äôs final output.\nParameters are also referred to as weights and biases.\nYou can think of these individual weights as small pushes and pulls on the input data to get it to match the input annotations.\nIf our weights were perfect, we could input an image and always get back the correct bounding boxes and class labels.\nIt‚Äôs very unlikely to ever have perfect weights (unless your dataset is very small) but we can make them quite good (and useful).\nWhen you have a good set of weights, this is known as a good representation.\nRight now, our weights have been trained on COCO, a collection of 91 different common objects.\nSo they have a fairly good representation of detecting general common objects, however, we‚Äôd like to fine-tune these weights to detect our target objects.\nImportantly, our model will not be starting from scratch when it begins to train.\nIt will instead take off from its existing knowledge of detecting common objects in images and try to adhere to our task.\nWhen it comes to parameters and weights, generally, more is better.\nMeaning the more parameters your model has, the better representation it can learn.\nFor example, ResNet50 (our computer vision backbone) has ~25 million parameters, about 100 MB in float32 precision or 50MB in float16 precision.\nWhereas a model such as Llama-3.1-405B has ~405 billion parameters, about 1.45 TB in float32 precision or 740 GB in float16 precision, about 16,000x more than ResNet50.\nHowever, as we can see having more parameters comes with the tradeoff of size and latency.\nFor each new parameter requires to be stored and it also adds an extra computation unit to your model.\nIn the case of Trashify, since we‚Äôd like our model to run on-device (e.g.¬†make predictions live on an iPhone), we‚Äôd opt for the smallest number of parameters we could get acceptable results from.\nIf performance is your number 1 criteria and size and latency don‚Äôt matter, then you‚Äôd likely opt for the model with the largest number of parameters (though always evaluate these models on your own data, larger models are generally better, not always better).\nSince our model is built using PyTorch, let‚Äôs write a small function to count the number of:\n\nTrainable parameters (parameters which will be tweaked during training)\nNon-trainable parameters (parameters which will not be tweaked during training)\nTotal parameters (trainable parameters + non-trainable parameters)\n\n\n# Count the number of parameters in the model\ndef count_parameters(model):\n    \"\"\"Takes in a PyTorch model and returns the number of parameters.\"\"\"\n    trainable_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    non_trainable_parameters = sum(p.numel() for p in model.parameters() if not p.requires_grad)\n    total_parameters = sum(p.numel() for p in model.parameters())\n    print(f\"Total parameters: {total_parameters:,}\")\n    print(f\"Trainable parameters (will be updated): {trainable_parameters:,}\")\n    print(f\"Non-trainable parameters (will not be updated): {non_trainable_parameters:,}\")\n\ncount_parameters(model)\n\nTotal parameters: 42,741,357\nTrainable parameters (will be updated): 42,741,357\nNon-trainable parameters (will not be updated): 0\n\n\nCool!\nIt looks like our model has a total of 43,396,813 parameters, of which, most of them are trainable.\nThis means that when we fine-tune our model later on, we‚Äôll be tweaking the majority of the parameters to try and represent our data.\nIn practice, this is known as full fine-tuning, trying to fine-tune a large portion of the model to our data.\nThere are other methods for fine-tuning, such as feature extraction (where you only fine-tune the final layers of the model) and partial fine-tuning (where you fine-tune a portion of the model).\nAnd even methods such as LoRA (Low-Rank Adaptation) which fine-tunes an adaptor matrix as a compliment to the model‚Äôs parameters.\n\n\n6.5 Creating a function to build our model\nSince machine learning is very experimental, we may want to create multiple instances of our model to test various things.\nSo let‚Äôs functionize the creation of a new model with parameters for our target model name, id2label and label2id dictionaries.\n\nfrom transformers import AutoModelForObjectDetection\n\n# Setup the model\ndef create_model(pretrained_model_name_or_path: str = MODEL_NAME, \n                 label2id: dict = label2id, \n                 id2label: dict = id2label):\n    \"\"\"Creates and returns an instance of AutoModelForObjectDetection.\n    \n    Args: \n        pretrained_model_name_or_path (str): The name or path of the pretrained model to load. \n            Defaults to MODEL_NAME.\n        label2id (dict): A dictionary mapping class labels to IDs. Defaults to label2id.\n        id2label (dict): A dictionary mapping class IDs to labels. Defaults to id2label.\n    \n    Returns:\n        AutoModelForObjectDetection: A pretrained model for object detection with number of output\n            classes equivalent to len(label2id).\n    \"\"\"\n    model = AutoModelForObjectDetection.from_pretrained(\n        pretrained_model_name_or_path=pretrained_model_name_or_path,\n        label2id=label2id,\n        id2label=id2label,\n        ignore_mismatched_sizes=True, # default\n    )\n    return model\n\nPerfect!\nAnd to make sure our function works‚Ä¶\n\n# Create a new model instance\nmodel = create_model()\n# model\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\n\n\n6.6 Trying to pass a single sample through our model (part 1)\nOkay, now we‚Äôve got a model, let‚Äôs put some data through it!\nWhen we call our model, because it‚Äôs a PyTorch Module (torch.nn.Module) it will by default run the forward method.\nIn PyTorch, forward overrides the special __call__ method on functions.\nSo we can pass data into our model by running:\nmodel(input_data)\nWhich is equivalent to running:\nmodel.forward(input_data)\nTo see what happens when we call our model, let‚Äôs inspect the forward method‚Äôs docstring with model.forward?.\n\n# What happens when we call our model?\n# Note: for PyTorch modules, `forward` overrides the __call__ method, \n# so calling the model is equivalent to calling the forward method.\nmodel.forward?\n\n\n\nOutput of model.forward?\n\nSignature:\nmodel.forward(\n    pixel_values: torch.FloatTensor,\n    pixel_mask: Optional[torch.LongTensor] = None,\n    encoder_outputs: Optional[torch.FloatTensor] = None,\n    inputs_embeds: Optional[torch.FloatTensor] = None,\n    decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n    labels: Optional[List[dict]] = None,\n    output_attentions: Optional[bool] = None,\n    output_hidden_states: Optional[bool] = None,\n    return_dict: Optional[bool] = None,\n    **loss_kwargs,\n) -&gt; Union[Tuple[torch.FloatTensor], transformers.models.rt_detr_v2.modeling_rt_detr_v2.RTDetrV2ObjectDetectionOutput]\nDocstring:\nThe [`RTDetrV2ForObjectDetection`] forward method, overrides the `__call__` special method.\n\n&lt;Tip&gt;\n\nAlthough the recipe for forward pass needs to be defined within this function, one should call the [`Module`]\ninstance afterwards instead of this since the former takes care of running the pre and post processing steps while\nthe latter silently ignores them.\n\n&lt;/Tip&gt;\n\nArgs:\n    pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, image_size, image_size)`):\n        The tensors corresponding to the input images. Pixel values can be obtained using\n        [`{image_processor_class}`]. See [`{image_processor_class}.__call__`] for details ([`{processor_class}`] uses\n        [`{image_processor_class}`] for processing images).\n    pixel_mask (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*):\n        Mask to avoid performing attention on padding pixel values. Mask values selected in `[0, 1]`:\n\n        - 1 for pixels that are real (i.e. **not masked**),\n        - 0 for pixels that are padding (i.e. **masked**).\n\n        [What are attention masks?](../glossary#attention-mask)\n    encoder_outputs (`torch.FloatTensor`, *optional*):\n        Tuple consists of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)\n        `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) is a sequence of\n        hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.\n    inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you\n        can choose to directly pass a flattened representation of an image.\n    decoder_inputs_embeds (`torch.FloatTensor` of shape `(batch_size, num_queries, hidden_size)`, *optional*):\n        Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an\n        embedded representation.\n    labels (`List[dict]` of len `(batch_size,)`, *optional*):\n        Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the\n        following 2 keys: 'class_labels' and 'boxes' (the class labels and bounding boxes of an image in the batch\n        respectively). The class labels themselves should be a `torch.LongTensor` of len `(number of bounding boxes\n        in the image,)` and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image, 4)`.\n    output_attentions (`bool`, *optional*):\n        Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n        tensors for more detail.\n    output_hidden_states (`bool`, *optional*):\n        Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n        more detail.\n    return_dict (`bool`, *optional*):\n        Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\nReturns:\n    [`transformers.models.rt_detr_v2.modeling_rt_detr_v2.RTDetrV2ObjectDetectionOutput`] or `tuple(torch.FloatTensor)`: A [`transformers.models.rt_detr_v2.modeling_rt_detr_v2.RTDetrV2ObjectDetectionOutput`] or a tuple of\n    `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`) comprising various\n    elements depending on the configuration ([`RTDetrV2Config`]) and inputs.\n\n    - **loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` are provided)) -- Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a\n      bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized\n      scale-invariant IoU loss.\n    - **loss_dict** (`Dict`, *optional*) -- A dictionary containing the individual losses. Useful for logging.\n    - **logits** (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes + 1)`) -- Classification logits (including no-object) for all queries.\n    - **pred_boxes** (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`) -- Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These\n      values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding\n      possible padding). You can use [`~RTDetrV2ImageProcessor.post_process_object_detection`] to retrieve the\n      unnormalized (absolute) bounding boxes.\n    - **auxiliary_outputs** (`list[Dict]`, *optional*) -- Optional, only returned when auxiliary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)\n      and labels are provided. It is a list of dictionaries containing the two above keys (`logits` and\n      `pred_boxes`) for each decoder layer.\n    - **last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, num_queries, hidden_size)`) -- Sequence of hidden-states at the output of the last layer of the decoder of the model.\n    - **intermediate_hidden_states** (`torch.FloatTensor` of shape `(batch_size, config.decoder_layers, num_queries, hidden_size)`) -- Stacked intermediate hidden states (output of each layer of the decoder).\n    - **intermediate_logits** (`torch.FloatTensor` of shape `(batch_size, config.decoder_layers, num_queries, config.num_labels)`) -- Stacked intermediate logits (logits of each layer of the decoder).\n    - **intermediate_reference_points** (`torch.FloatTensor` of shape `(batch_size, config.decoder_layers, num_queries, 4)`) -- Stacked intermediate reference points (reference points of each layer of the decoder).\n    - **intermediate_predicted_corners** (`torch.FloatTensor` of shape `(batch_size, config.decoder_layers, num_queries, 4)`) -- Stacked intermediate predicted corners (predicted corners of each layer of the decoder).\n    - **initial_reference_points** (`torch.FloatTensor` of shape `(batch_size, config.decoder_layers, num_queries, 4)`) -- Stacked initial reference points (initial reference points of each layer of the decoder).\n    - **decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n      shape `(batch_size, num_queries, hidden_size)`. Hidden-states of the decoder at the output of each layer\n      plus the initial embedding outputs.\n    - **decoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, num_queries,\n      num_queries)`. Attentions weights of the decoder, after the attention softmax, used to compute the weighted\n      average in the self-attention heads.\n    - **cross_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_queries, num_heads, 4, 4)`.\n      Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the\n      weighted average in the cross-attention heads.\n    - **encoder_last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the encoder of the model.\n    - **encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n      shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the encoder at the output of each\n      layer plus the initial embedding outputs.\n    - **encoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_queries, num_heads, 4, 4)`.\n      Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the\n      self-attention heads.\n    - **init_reference_points** (`torch.FloatTensor` of shape  `(batch_size, num_queries, 4)`) -- Initial reference points sent through the Transformer decoder.\n    - **enc_topk_logits** (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.num_labels)`, *optional*, returned when `config.with_box_refine=True` and `config.two_stage=True`) -- Logits of predicted bounding boxes coordinates in the encoder.\n    - **enc_topk_bboxes** (`torch.FloatTensor` of shape `(batch_size, sequence_length, 4)`, *optional*, returned when `config.with_box_refine=True` and `config.two_stage=True`) -- Logits of predicted bounding boxes coordinates in the encoder.\n    - **enc_outputs_class** (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.num_labels)`, *optional*, returned when `config.with_box_refine=True` and `config.two_stage=True`) -- Predicted bounding boxes scores where the top `config.two_stage_num_proposals` scoring bounding boxes are\n      picked as region proposals in the first stage. Output of bounding box binary classification (i.e.\n      foreground and background).\n    - **enc_outputs_coord_logits** (`torch.FloatTensor` of shape `(batch_size, sequence_length, 4)`, *optional*, returned when `config.with_box_refine=True` and `config.two_stage=True`) -- Logits of predicted bounding boxes coordinates in the first stage.\n    - **denoising_meta_values** (`dict`) -- Extra dictionary for the denoising related values\n\nExamples:\n\n```python\n&gt;&gt;&gt; from transformers import RTDetrV2ImageProcessor, RTDetrV2ForObjectDetection\n&gt;&gt;&gt; from PIL import Image\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; import torch\n\n&gt;&gt;&gt; url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n&gt;&gt;&gt; image = Image.open(requests.get(url, stream=True).raw)\n\n&gt;&gt;&gt; image_processor = RTDetrV2ImageProcessor.from_pretrained(\"PekingU/RTDetrV2_r50vd\")\n&gt;&gt;&gt; model = RTDetrV2ForObjectDetection.from_pretrained(\"PekingU/RTDetrV2_r50vd\")\n\n&gt;&gt;&gt; # prepare image for the model\n&gt;&gt;&gt; inputs = image_processor(images=image, return_tensors=\"pt\")\n\n&gt;&gt;&gt; # forward pass\n&gt;&gt;&gt; outputs = model(**inputs)\n\n&gt;&gt;&gt; logits = outputs.logits\n&gt;&gt;&gt; list(logits.shape)\n[1, 300, 80]\n\n&gt;&gt;&gt; boxes = outputs.pred_boxes\n&gt;&gt;&gt; list(boxes.shape)\n[1, 300, 4]\n\n&gt;&gt;&gt; # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n&gt;&gt;&gt; target_sizes = torch.tensor([image.size[::-1]])\n&gt;&gt;&gt; results = image_processor.post_process_object_detection(outputs, threshold=0.9, target_sizes=target_sizes)[\n...     0\n... ]\n\n&gt;&gt;&gt; for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n...     box = [round(i, 2) for i in box.tolist()]\n...     print(\n...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n...         f\"{round(score.item(), 3)} at location {box}\"\n...     )\nDetected sofa with confidence 0.97 at location [0.14, 0.38, 640.13, 476.21]\nDetected cat with confidence 0.96 at location [343.38, 24.28, 640.14, 371.5]\nDetected cat with confidence 0.958 at location [13.23, 54.18, 318.98, 472.22]\nDetected remote with confidence 0.951 at location [40.11, 73.44, 175.96, 118.48]\nDetected remote with confidence 0.924 at location [333.73, 76.58, 369.97, 186.99]\nFile: ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr_v2/modeling_rt_detr_v2.py Type: method\n\n&lt;/details&gt;\n\nRunning `model.forward?` we can see that our model wants to take in `pixel_values` as well as a `pixel_mask` as arguments.\n\nWhat happens if we try to pass in a single image from our `random_sample`?\n\nLet's try!\n\n::: {.callout-note }\n\nIt's good practice to try and pass a single sample through your model as soon as possible to see what happens.\n\nIf we're lucky, it'll work.\n\nIf we're *really* lucky, we'll get an error message saying why it *didn't* work (this is usually the case because rarely does raw data flow through a model without being preprocessed first).\n\n:::\n\nWe'll do so by setting `pixel_values` to our `random_sample[\"image\"]` and `pixel_mask=None`.\n\n::: {#cell-60 .cell execution_count=20}\n``` {.python .cell-code}\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample[\"image\"],\n                              pixel_mask=None)\nrandom_sample_outputs\n:::\n\n\nOutput of random_sample_outputs\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[21], line 3\n      1 #| output: false\n      2 # Do a single forward pass with the model\n----&gt; 3 random_sample_outputs = model(pixel_values=random_sample[\"image\"],\n      4                               pixel_mask=None)\n      5 random_sample_outputs\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1751, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1749     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1750 else:\n-&gt; 1751     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1762, in Module._call_impl(self, *args, **kwargs)\n   1757 # If we don't have any hooks, we want to skip the rest of the logic in\n   1758 # this function, and just call forward.\n   1759 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1760         or _global_backward_pre_hooks or _global_backward_hooks\n   1761         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1762     return forward_call(*args, **kwargs)\n   1764 result = None\n   1765 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr_v2/modeling_rt_detr_v2.py:1967, in RTDetrV2ForObjectDetection.forward(self, pixel_values, pixel_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, labels, output_attentions, output_hidden_states, return_dict, **loss_kwargs)\n   1962 output_hidden_states = (\n   1963     output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n   1964 )\n   1965 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n-&gt; 1967 outputs = self.model(\n   1968     pixel_values,\n   1969     pixel_mask=pixel_mask,\n   1970     encoder_outputs=encoder_outputs,\n   1971     inputs_embeds=inputs_embeds,\n   1972     decoder_inputs_embeds=decoder_inputs_embeds,\n   1973     labels=labels,\n   1974     output_attentions=output_attentions,\n   1975     output_hidden_states=output_hidden_states,\n   1976     return_dict=return_dict,\n   1977 )\n   1979 denoising_meta_values = (\n   1980     outputs.denoising_meta_values if return_dict else outputs[-1] if self.training else None\n   1981 )\n   1983 outputs_class = outputs.intermediate_logits if return_dict else outputs[2]\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1751, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1749     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1750 else:\n-&gt; 1751     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1762, in Module._call_impl(self, *args, **kwargs)\n   1757 # If we don't have any hooks, we want to skip the rest of the logic in\n   1758 # this function, and just call forward.\n   1759 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1760         or _global_backward_pre_hooks or _global_backward_hooks\n   1761         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1762     return forward_call(*args, **kwargs)\n   1764 result = None\n   1765 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr_v2/modeling_rt_detr_v2.py:1658, in RTDetrV2Model.forward(self, pixel_values, pixel_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, labels, output_attentions, output_hidden_states, return_dict)\n   1653 output_hidden_states = (\n   1654     output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n   1655 )\n   1656 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n-&gt; 1658 batch_size, num_channels, height, width = pixel_values.shape\n   1659 device = pixel_values.device\n   1661 if pixel_mask is None:\n\nAttributeError: 'Image' object has no attribute 'shape'\n\nOh no!‚Ä¶ I mean‚Ä¶ Oh, yes!\nWe get an error:\n\nAttributeError: ‚ÄòImage‚Äô object has no attribute ‚Äòshape‚Äô\n\nHmmm‚Ä¶ it seems we‚Äôve tried to pass a PIL.Image to our model rather than a torch.FloatTensor of shape (batch_size, num_channels, height, width).\nIt looks like our input data might require some preprocessing before we can pass it to our model.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#different-bounding-box-formats",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#different-bounding-box-formats",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "5 Different bounding box formats",
    "text": "5 Different bounding box formats\nWhen drawing our bounding box, we discussed the terms XYXY and XYWH.\nWell, we didn‚Äôt really discuss these at all‚Ä¶\nBut that‚Äôs why we‚Äôre here.\nOne of the most confusing things in the world of object detection is the different formats bounding boxes come in.\nAre your boxes in XYXY, XYWH or CXCYWH?\nAre they in absolute format?\nOr normalized format?\nPerhaps a table will help us.\nThe following table contains a non-exhaustive list of some of the most common bounding box formats you‚Äôll come across in the wild.\n\n\n\nTable¬†1: Different bounding box formats\n\n\n\n\n\nBox format\nDescription\nAbsolute Example\nNormalized Example\nSource\n\n\n\n\nXYXY\nDescribes the top left corner coordinates (x1, y1) as well as the bottom right corner coordinates of a box.  Also referred to as:  [x1, y1, x2, y2]  or  [x_min, y_min, x_max, y_max]\n[8.9, 275.3, 867.5, 964.0]\n[0.009, 0.215, 0.904, 0.753]\nPASCAL VOC Dataset uses the absolute version of this format, torchvision.utils.draw_bounding_boxes defaults to the absolute version of this format.\n\n\nXYWH\nDescribes the top left corner coordinates (x1, y1) as well as the width (box_width) and height (box_height) of the target box. The bottom right corners (x2, y2) are found by adding the width and height to the top left corner coordinates (x1 + box_width, y1 + box_height).  Also referred to as:  [x1, y1, box_width, box_height]  or  [x_min, y_min, box_width, box_height]\n[8.9, 275.3, 858.6, 688.7]\n[0.009, 0.215, 0.894, 0.538]\nThe COCO (Common Objects in Context) dataset uses the absolute version of this format, see the section under ‚Äúbbox‚Äù.\n\n\nCXCYWH\nDescribes the center coordinates of the bounding box (center_x, center_y) as well as the width (box_width) and height (box_height) of the target box.  Also referred to as:  [center_x, center_y, box_width, box_height]\n[438.2, 619.65, 858.6, 688.7]\n[0.456, 0.484, 0.894, 0.538]\nNormalized version introduced in the YOLOv3 (You Only Look Once) paper and is used by many later forms of YOLO.\n\n\n\n\n\n\n\n5.1 Absolute or normalized format?\nIn absolute coordinate form, bounding box values are in the same format as the width and height dimensions (e.g.¬†our image is 960x1280 pixels).\nFor example in XYXY format: [\"bin\", 8.9, 275.3, 867.5, 964.0]\nAn (x1, y1) (or (x_min, y_min)) coordinate of (8.9, 275.3) means the top left corner is 8.9 pixels in on the x-axis, and 275.3 pixels down on the y-axis.\nIn normalized coordinate form, values are between [0, 1] and are proportions of the image width and height.\nFor example in XYXY format: [\"bin\", 0.009, 0.215, 0.904, 0.753]\nA normalized (x1, y1) (or (x_min, y_min)) coordinate of (0.009, 0.215) means the top left corner is 0.009 * image_width pixels in on the x-axis and 0.215 * image_height down on the y-axis.\nTo convert absolute coordinates to normalized, you can divide x-axis values by the image width and y-axis values by the image height.\n\\[\nx_{\\text{normalized}} = \\frac{x_{\\text{absolute}}}{\\text{image\\_width}} \\quad y_{\\text{normalized}} = \\frac{y_{\\text{absolute}}}{\\text{image\\_height}}\n\\]\n\n\n5.2 Which bounding box format should you use?\nThe bounding box format you use will depend on the framework, model and existing data you‚Äôre trying to use.\nFor example, the take the following frameworks:\n\nPyTorch - If you‚Äôre using PyTorch pre-trained models, for example, torchvision.models.detection.fasterrcnn_resnet50_fpn, you‚Äôll want absolute XYXY ([x1, y1, x2, y2]) format.\nHugging Face Transformers - If you‚Äôre using a Hugging Face Transformers model such as RT-DETRv2, you‚Äôll want to take note that outputs from the model can be of one type (e.g.¬†CXCYWH) but they can be post-processed into another type (e.g.¬†absolute XYXY).\nUltralytics YOLO - If you‚Äôre using a YOLO-like model such as Ultralytics YOLO, you‚Äôll want normalized CXCYWH ([center_x, center_y, width, height]) format.\nGoogle Gemini - If you‚Äôre using Google Gemini to predict bounding boxes on your images, then you‚Äôll want to pay attention to the special [y_min, x_min, y_max, x_max] (YXYX) normalized coordinates.\n\nOr if you note that someone has said their model is pre-trained on the COCO dataset, chances are the data has been formatted in XYWH format (see Table¬†1).\n\n\n\n\n\n\nNote\n\n\n\nFor more on different bounding box formats and how to draw them, see A Guide to Bounding Box Formats and How to Draw Them.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#loading-our-models-processor",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#loading-our-models-processor",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "8 Loading our model‚Äôs processor",
    "text": "8 Loading our model‚Äôs processor\nTime to get our raw data ready for our model!\nTo begin, let‚Äôs load our model‚Äôs processor.\nWe‚Äôll use this to prepare our input images for the model.\nTo do so, we‚Äôll use transformers.AutoImageProcessor and pass our target model name to the from_pretrained method.\nWe can set use_fast=True so the fast version of the processor is loaded (see more in the docs under transformers.RTDetrImageProcessorFast).\n\nfrom transformers import AutoImageProcessor\n\nMODEL_NAME = \"PekingU/rtdetr_v2_r50vd\"\n# MODEL_NAME = \"facebook/detr-resnet-50\" # Could also use this model as an another experiment\n\n# Load the image processor\nimage_processor = AutoImageProcessor.from_pretrained(pretrained_model_name_or_path=MODEL_NAME,\n                                                     use_fast=True) # load the fast version of the processor\n\n# Check out the image processor\nimage_processor\n\nRTDetrImageProcessorFast {\n  \"crop_size\": null,\n  \"data_format\": \"channels_first\",\n  \"default_to_square\": false,\n  \"device\": null,\n  \"do_center_crop\": null,\n  \"do_convert_annotations\": true,\n  \"do_convert_rgb\": null,\n  \"do_normalize\": false,\n  \"do_pad\": false,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"RTDetrImageProcessorFast\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"input_data_format\": null,\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"return_segmentation_masks\": null,\n  \"return_tensors\": null,\n  \"size\": {\n    \"height\": 640,\n    \"width\": 640\n  }\n}\n\n\nOk, a few things going on here.\nThese parameters will transform our input images before we pass them to our model.\nOne of the first things to see is the image_processor is expecting our bounding boxes to be in COCO (or coco_detection) format (this is the default).\nWe‚Äôll see what this looks like later on but our processor wants this format because that‚Äôs the format our model has been trained on (it‚Äôs generally best practice to input data to a model in the same way its been trained on, otherwise you might get poor results).\nAnother thing to notice is that our input images will be resized to the values of the size parameter.\nIn our case, it‚Äôs currently:\n\"size\": {\n    \"height\": 640,\n    \"width\": 640\n}\nWhich means that input image will get resized to be 640x640 pixels (height x width).\nWe‚Äôll keep these dimensions but we‚Äôll update it to use \"longest_edge\": 640 and \"shortest_edge: 640\" (this will maintain aspect ratio).\nYou can read more about what each of these does in the transformers.RTDetrImageProcessor documentation.\nLet‚Äôs update our instance of transformers.RTDetrImageProcessor with a few custom parameters:\n\ndo_convert_annotations=True - This is the default and it will convert our boxes to the format CXCYWH or (center_x, center_y, width, height) (see Table¬†1) in the range [0, 1].\nsize - We‚Äôll update the size dictionary so all of our images have \"longest_edge\": 640 and \"shortest_edge: 640\". We‚Äôll use a value of 640 which is a common size in world of object detection. But there are also other sizes such as 300x300, 480x480, 512x512, 800x800 and more.\n\n\n\n\n\n\n\nNote\n\n\n\nDepending on what task you‚Äôre working on, you might want to tweak the image resolution you‚Äôre working with.\nFor example, I like this quote from Lucas Beyer, a former research scientist at DeepMind and engineer at OpenAI:\n\nMy conservative claim is that you can always stretch to a square, and for:\nnatural images, meaning most photos, 224px¬≤ is enough; text in photos, phone screens, diagrams and charts, 448px¬≤ is enough; desktop screens and single-page documents, 896px¬≤ is enough.\n\nTypically, in the case of object detection, you‚Äôll want to use a higher value.\nBut this is another thing that is open to experimentation.\n\n\n\n# Set image size\nIMAGE_SIZE = 640 # we could try other sizes here: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Create a new instance of the image processor with the desired image size\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    use_fast=True, # use the fast preprocessor\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height) in range [0, 1]\n    size={\"shortest_edge\": IMAGE_SIZE, \n          \"longest_edge\": IMAGE_SIZE},\n    return_segmentation_masks=True,\n    do_pad=True # make sure all images have 640x640 size thanks to padding\n)\n\n# Optional: View the docstring of our image_processor.preprocess function\n# image_processor.preprocess?\n\n# Check out our new image processor size\nimage_processor.size\n\n{'shortest_edge': 640, 'longest_edge': 640}\n\n\nBeautiful!\nNow our images will be resized to a square of size 640x640 when we pass them to our model.\nHow about we try to preprocess our random_sample?\nTo do so, we can pass its \"image\" key and \"annotations\" key to our image_processor‚Äôs preprocess method (we can also just called image_processor directly as it will call preprocess via the __call__ method).\nLet‚Äôs try!\n\nimage_processor\n\nRTDetrImageProcessorFast {\n  \"crop_size\": null,\n  \"data_format\": \"channels_first\",\n  \"default_to_square\": false,\n  \"device\": null,\n  \"do_center_crop\": null,\n  \"do_convert_annotations\": true,\n  \"do_convert_rgb\": null,\n  \"do_normalize\": false,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"RTDetrImageProcessorFast\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"input_data_format\": null,\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"return_segmentation_masks\": true,\n  \"return_tensors\": null,\n  \"size\": {\n    \"longest_edge\": 640,\n    \"shortest_edge\": 640\n  }\n}\n\n\n\n# Try to process a single image and annotation pair (spoiler: this will error)\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample[\"annotations\"])\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[24], line 2\n      1 # Try to process a single image and annotation pair (spoiler: this will error)\n----&gt; 2 random_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n      3                                                         annotations=random_sample[\"annotations\"])\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:403, in RTDetrImageProcessorFast.preprocess(self, images, annotations, masks_path, **kwargs)\n    380 @auto_docstring\n    381 def preprocess(\n    382     self,\n   (...)\n    386     **kwargs: Unpack[RTDetrFastImageProcessorKwargs],\n    387 ) -&gt; BatchFeature:\n    388     r\"\"\"\n    389     annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n    390         List of annotations associated with the image or batch of images. If annotation is for object\n   (...)\n    401         Path to the directory containing the segmentation masks.\n    402     \"\"\"\n--&gt; 403     return super().preprocess(images, annotations, masks_path, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_processing_utils_fast.py:609, in BaseImageProcessorFast.preprocess(self, images, *args, **kwargs)\n    606 kwargs.pop(\"default_to_square\")\n    607 kwargs.pop(\"data_format\")\n--&gt; 609 return self._preprocess(images, *args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:440, in RTDetrImageProcessorFast._preprocess(self, images, annotations, masks_path, return_segmentation_masks, do_resize, size, interpolation, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, pad_size, format, return_tensors, **kwargs)\n    438 format = AnnotationFormat(format)\n    439 if annotations is not None:\n--&gt; 440     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n    442 data = {}\n    443 processed_images = []\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:919, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    917 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    918     if not valid_coco_detection_annotations(annotations):\n--&gt; 919         raise ValueError(\n    920             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    921             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    922             \"being a list of annotations in the COCO format.\"\n    923         )\n    925 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    926     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nOh no!\nWe get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\n\n8.1 Preprocessing a single image\nOkay so it turns out that our annotations aren‚Äôt in the format that the preprocess method was expecting.\nSince our pre-trained model was trained on the COCO dataset, the preprocess method expects input data to be in line with the COCO format.\nWe can fix this later on by adjusting our annotations.\nHow about we try to preprocess just a single image instead?\n\n# Preprocess our target sample\nrandom_sample_preprocessed_image_only = image_processor(images=random_sample[\"image\"],\n                                                        annotations=None, # no annotations this time \n                                                        masks_path=None, # no masks inputs\n                                                        return_tensors=\"pt\") # return as PyTorch tensors\n\n# Uncomment to see the full output\n# print(random_sample_preprocessed_image_only)\n\n# Print out the keys of the preprocessed image\nprint(random_sample_preprocessed_image_only.keys())\n\ndict_keys(['pixel_mask', 'pixel_values'])\n\n\nNice! It looks like the preprocess method works on a single image.\nAnd it seems like we get a dictionary output with the following keys:\n\npixel_values - the processed pixel values of the input image.\n(Optional) pixel_mask - a mask multiplier for the pixel values as to whether they should be paid attention to or not (a value of 0 means the pixel value should be ignored by the model and a value of 1 means the pixel value should be paid attention to by the model).\n\nBeautiful!\nNow how about we inspect our processed image‚Äôs shape?\n\n# Uncomment to inspect all preprocessed pixel values\n# print(random_sample_preprocessed_image_only[\"pixel_values\"][0])\n\nprint(f\"[INFO] Original image shape: {random_sample['image'].size} -&gt; [width, height]\")\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed_image_only['pixel_values'].shape} -&gt; [batch_size, colour_channles, height, width]\")\n\n[INFO] Original image shape: (960, 1280) -&gt; [width, height]\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channles, height, width]\n\n\nOk wonderful, it looks like our image has been downsized to [3, 640, 480] (1 item in the batch, 3 colour channels, 640 pixels high, 480 pixels wide).\nThis is down from its original size of [960, 1280] (1280 pixels high, 960 pixels wide).\n\n\n\n\n\n\nNote\n\n\n\nThe order of image dimensions can differ between libraries and frameworks.\nFor example, image tensors in PyTorch typically follow the format [colour_channels, height, width] whereas in TensorFlow they follow [height, width, colour_channels].\nAnd in PIL, the format is [width, height].\nAs you can imagine, this can get confusing.\nHowever, with some practice, you‚Äôll be able to decipher which is which.\nAnd if your images and bounding boxes start looking strange, perhaps checking the image dimension and format can help.\n\n\n\n\n8.2 Trying to pass a single sample through our model (part 2)\nThis is exciting!\nWe‚Äôve processed an image into the format our model is expecting.\nHow about we try another forward by calling model.forward(pixel_values, pixel_mask)?\nWhich is the same as calling model(pixel_values, pixel_mask).\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed_image_only[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    # pixel_mask=random_sample_preprocessed_image_only[\"pixel_mask\"], # some object detection models expect masks\n)\n\n# Inspect the outputs\n# random_sample_outputs # uncomment to see full outputs\n\n\n\nFull output of random_sample_outputs:\n\nRTDetrV2ObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[-2.4103, -3.2165, -2.1090,  ..., -2.4911, -1.6609, -2.6324],\n         [-2.5400, -3.6887, -1.6646,  ..., -2.1060, -2.1198, -2.6746],\n         [-2.4400, -3.6842, -1.4782,  ..., -2.0494, -2.0977, -2.6446],\n         ...,\n         [-2.7582, -3.9171, -1.3343,  ..., -2.2933, -2.4012, -2.4486],\n         [-2.5491, -3.2022, -1.5356,  ..., -2.5856, -2.1178, -2.7912],\n         [-2.6526, -3.0643, -1.8657,  ..., -2.4201, -2.7698, -2.2681]]],\n       grad_fn=&lt;SelectBackward0&gt;), pred_boxes=tensor([[[0.5707, 0.2961, 0.2293, 0.0371],\n         [0.3631, 0.4809, 0.4610, 0.1908],\n         [0.4239, 0.4808, 0.5838, 0.2076],\n         ...,\n         [0.3488, 0.4558, 0.3377, 0.1503],\n         [0.3869, 0.5929, 0.3553, 0.3231],\n         [0.6407, 0.7314, 0.1552, 0.1663]]], grad_fn=&lt;SelectBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 4.8664e-01,  8.1942e-01, -9.4307e-04,  ...,  2.0758e-01,\n          -1.8689e-01, -5.1746e-01],\n         [ 2.5495e-01,  9.9750e-01,  4.1035e-01,  ..., -2.5949e-02,\n          -4.6852e-02, -7.8246e-01],\n         [ 1.0380e-01,  8.7084e-01,  4.6921e-01,  ..., -1.8778e-01,\n           8.0271e-02, -6.9041e-01],\n         ...,\n         [ 1.2882e-01,  9.6441e-01,  2.7554e-01,  ..., -4.3895e-01,\n           1.3827e-01, -7.4690e-01],\n         [ 2.7624e-01,  7.5101e-01,  2.8540e-01,  ...,  1.8248e-01,\n           8.2285e-02, -5.2314e-01],\n         [ 2.9966e-01,  8.5921e-01, -6.3817e-02,  ...,  2.6486e-01,\n           8.5958e-02, -4.2009e-01]]], grad_fn=&lt;NativeLayerNormBackward0&gt;), intermediate_hidden_states=tensor([[[[-5.3139e-02,  5.8580e-01, -9.4774e-02,  ..., -1.0139e-01,\n            5.4970e-01,  7.9870e-01],\n          [-4.3604e-01,  4.7587e-01,  4.2217e-01,  ...,  2.4720e-01,\n            4.7449e-01,  4.3058e-01],\n          [-3.8533e-01,  3.1024e-01,  2.9360e-01,  ...,  3.8614e-01,\n            2.5190e-01,  5.6520e-01],\n          ...,\n          [-2.1117e-01,  2.5501e-01,  5.4156e-01,  ...,  4.3788e-01,\n            1.0951e-01,  3.3779e-01],\n          [-8.4637e-03,  2.5538e-01, -5.3647e-01,  ...,  1.1439e-01,\n           -1.5487e-01,  8.4961e-01],\n          [-6.5541e-01,  6.7535e-01, -1.4167e-01,  ...,  3.8774e-01,\n            1.6148e-01,  9.3250e-01]],\n\n         [[ 1.2810e-01,  8.7219e-01,  3.6511e-01,  ...,  2.4804e-01,\n           -5.8754e-01,  1.3489e-01],\n          [ 2.8370e-01,  1.5663e+00,  3.4950e-03,  ..., -2.2311e-01,\n            2.1730e-01, -3.5775e-01],\n          [ 2.2267e-01,  1.1197e+00,  3.1473e-02,  ..., -2.2521e-01,\n           -1.8248e-01, -2.1684e-01],\n          ...,\n          [ 2.1268e-01,  1.3836e+00,  3.6696e-01,  ..., -1.6308e-01,\n           -1.3671e-01, -5.9738e-01],\n          [ 8.2533e-01,  1.1259e+00, -9.0579e-02,  ..., -3.6533e-01,\n           -1.3390e-02, -7.2271e-01],\n          [ 5.1040e-01,  9.4933e-01, -1.5047e-01,  ..., -4.1083e-02,\n            3.6723e-01,  5.1494e-02]],\n\n         [[ 4.0047e-01,  5.0443e-01,  1.1916e-01,  ...,  2.1427e-01,\n           -4.9870e-01, -5.9084e-02],\n          [-5.3964e-01,  1.4135e+00,  3.8025e-01,  ..., -1.3144e-01,\n           -7.2814e-01, -7.3661e-01],\n          [-5.8102e-01,  1.2173e+00,  5.9914e-01,  ...,  1.2107e-01,\n           -8.4583e-01, -4.5118e-02],\n          ...,\n          [-4.3799e-01,  1.8912e+00,  6.2712e-01,  ..., -4.0048e-01,\n           -9.9042e-01, -6.5335e-01],\n          [-2.6272e-02,  9.8732e-01,  2.4686e-01,  ...,  5.3733e-01,\n           -6.8889e-01, -1.8957e-01],\n          [ 7.4871e-01,  1.0935e+00,  2.5242e-02,  ...,  2.0705e-01,\n           -4.3149e-01,  1.6533e-01]],\n\n         [[-9.6548e-02,  6.1364e-02, -3.5741e-01,  ...,  5.7603e-01,\n            1.6279e-01, -7.4688e-02],\n          [-2.9921e-01,  5.0191e-01,  3.2028e-01,  ..., -8.5623e-02,\n           -1.5414e-02, -8.6969e-01],\n          [-4.2423e-01,  2.0131e-01,  3.0605e-01,  ..., -9.9301e-02,\n           -9.4032e-03, -3.9313e-01],\n          ...,\n          [-3.3691e-01,  5.0171e-01,  8.0514e-02,  ..., -6.5877e-02,\n           -1.8204e-03, -1.4205e-01],\n          [ 3.2399e-01, -5.1599e-03, -1.0354e-01,  ...,  2.7421e-01,\n            2.0394e-01, -5.6927e-01],\n          [ 8.0265e-01,  1.9461e-01, -4.2067e-01,  ...,  2.3415e-02,\n            6.6626e-01, -4.5957e-01]],\n\n         [[ 1.4321e-01,  1.7849e-01, -6.8985e-01,  ...,  6.2630e-01,\n            1.2153e-01, -5.3756e-01],\n          [-3.5460e-01,  6.1744e-01,  7.0757e-02,  ...,  3.0924e-02,\n            7.0767e-02, -1.1299e+00],\n          [-3.5211e-01,  5.7647e-01,  5.0576e-01,  ..., -1.6950e-01,\n            1.4924e-01, -6.5683e-01],\n          ...,\n          [ 4.7732e-03,  4.8165e-01, -2.9804e-01,  ...,  1.2332e-01,\n            5.9123e-01, -6.4708e-01],\n          [ 1.1597e-01,  4.8908e-01, -2.6656e-01,  ...,  1.7284e-01,\n            5.8165e-01, -7.6454e-01],\n          [ 5.7671e-01,  3.1484e-01, -6.6855e-01,  ...,  3.9596e-01,\n            9.3491e-01, -3.5171e-01]],\n\n         [[ 4.8664e-01,  8.1942e-01, -9.4307e-04,  ...,  2.0758e-01,\n           -1.8689e-01, -5.1746e-01],\n          [ 2.5495e-01,  9.9750e-01,  4.1035e-01,  ..., -2.5949e-02,\n           -4.6852e-02, -7.8246e-01],\n          [ 1.0380e-01,  8.7084e-01,  4.6921e-01,  ..., -1.8778e-01,\n            8.0271e-02, -6.9041e-01],\n          ...,\n          [ 1.2882e-01,  9.6441e-01,  2.7554e-01,  ..., -4.3895e-01,\n            1.3827e-01, -7.4690e-01],\n          [ 2.7624e-01,  7.5101e-01,  2.8540e-01,  ...,  1.8248e-01,\n            8.2285e-02, -5.2314e-01],\n          [ 2.9966e-01,  8.5921e-01, -6.3817e-02,  ...,  2.6486e-01,\n            8.5958e-02, -4.2009e-01]]]], grad_fn=&lt;StackBackward0&gt;), intermediate_logits=tensor([[[[-2.7654, -1.9506, -3.2306,  ..., -1.7228, -5.0831, -3.3259],\n          [-1.6720, -2.0784, -3.3905,  ..., -1.8552, -4.7686, -2.3647],\n          [-1.6152, -1.7790, -3.3754,  ..., -1.7405, -4.9992, -2.6163],\n          ...,\n          [-1.7987, -1.3256, -3.1915,  ..., -1.8915, -4.8887, -2.5755],\n          [-1.8172, -1.1075, -3.1850,  ..., -1.5766, -4.7429, -2.9463],\n          [-2.3645, -1.5377, -3.2648,  ..., -0.9642, -3.8302, -2.9143]],\n\n         [[-2.2888, -0.3772, -3.3768,  ..., -2.0233, -1.4014, -2.1638],\n          [-2.3195,  0.1030, -2.7420,  ..., -1.5070, -1.5560, -1.8782],\n          [-2.1245, -0.0459, -2.9056,  ..., -1.8131, -2.3000, -1.5002],\n          ...,\n          [-1.6669, -0.5204, -2.4404,  ..., -1.5310, -2.6033, -1.8718],\n          [-2.1209, -0.0206, -2.9078,  ..., -2.4905, -1.4664, -1.9780],\n          [-2.8389, -0.9289, -1.7524,  ..., -1.9419, -2.0081, -2.5840]],\n\n         [[-1.4762, -1.8236, -2.0330,  ..., -1.9085, -3.0767, -1.0480],\n          [-1.3000, -1.9365, -1.8160,  ..., -3.6340, -2.9030,  0.1608],\n          [-1.8684, -1.3785, -2.5306,  ..., -3.2591, -3.6757,  0.0854],\n          ...,\n          [-2.1450, -2.0016, -1.9492,  ..., -3.1256, -2.6620,  0.3906],\n          [-1.2368, -1.5141, -2.7120,  ..., -3.1521, -3.3444,  0.1144],\n          [-1.2681, -1.5955, -1.4615,  ..., -2.9850, -2.3149,  0.0573]],\n\n         [[ 0.2567, -3.0313, -1.2494,  ..., -0.4495, -1.7004, -2.2419],\n          [-0.9745, -1.9402, -1.3785,  ..., -0.7464, -0.7797, -2.6964],\n          [-0.8782, -2.3249, -1.3109,  ..., -0.4191, -0.9425, -2.6211],\n          ...,\n          [-0.0977, -2.1923, -1.3370,  ..., -1.5180, -1.6462, -2.4973],\n          [-1.4765, -2.7589, -1.4049,  ..., -0.8494, -0.8584, -2.7061],\n          [-1.5082, -2.3043, -1.5386,  ..., -1.7372, -1.5837, -3.2329]],\n\n         [[-2.0384, -2.6995, -1.7593,  ..., -2.6025, -2.1955, -1.0745],\n          [-1.6715, -3.3748, -1.4403,  ..., -2.0172, -2.1580, -1.1449],\n          [-1.3890, -2.7188, -1.4331,  ..., -2.0791, -2.3328, -1.2735],\n          ...,\n          [-1.1386, -2.7756, -1.2096,  ..., -1.8302, -3.0670, -1.4466],\n          [-1.5671, -2.8469, -1.7781,  ..., -1.9640, -2.5537, -0.8333],\n          [-1.6719, -4.0084, -1.9040,  ..., -2.5117, -3.6465, -0.9080]],\n\n         [[-2.4103, -3.2165, -2.1090,  ..., -2.4911, -1.6609, -2.6324],\n          [-2.5400, -3.6887, -1.6646,  ..., -2.1060, -2.1198, -2.6746],\n          [-2.4400, -3.6842, -1.4782,  ..., -2.0494, -2.0977, -2.6446],\n          ...,\n          [-2.7582, -3.9171, -1.3343,  ..., -2.2933, -2.4012, -2.4486],\n          [-2.5491, -3.2022, -1.5356,  ..., -2.5856, -2.1178, -2.7912],\n          [-2.6526, -3.0643, -1.8657,  ..., -2.4201, -2.7698, -2.2681]]]],\n       grad_fn=&lt;StackBackward0&gt;), intermediate_reference_points=tensor([[[[0.4246, 0.3450, 0.6868, 0.0952],\n          [0.3522, 0.5075, 0.4007, 0.2292],\n          [0.4169, 0.5195, 0.5569, 0.2495],\n          ...,\n          [0.3323, 0.4641, 0.4027, 0.1624],\n          [0.3743, 0.5587, 0.4831, 0.2996],\n          [0.6440, 0.7286, 0.1657, 0.1577]],\n\n         [[0.4947, 0.3540, 0.8195, 0.0886],\n          [0.3510, 0.4977, 0.4081, 0.2191],\n          [0.4038, 0.5018, 0.5501, 0.2451],\n          ...,\n          [0.3365, 0.4615, 0.3876, 0.1573],\n          [0.3595, 0.5509, 0.4855, 0.3372],\n          [0.6372, 0.7305, 0.1418, 0.1217]],\n\n         [[0.5216, 0.3579, 0.8873, 0.0982],\n          [0.3686, 0.4920, 0.4201, 0.2134],\n          [0.4142, 0.4943, 0.5637, 0.2140],\n          ...,\n          [0.3453, 0.4565, 0.3535, 0.1386],\n          [0.3782, 0.5932, 0.4974, 0.4147],\n          [0.6417, 0.7370, 0.1343, 0.1304]],\n\n         [[0.5531, 0.3710, 0.7984, 0.0757],\n          [0.3646, 0.4909, 0.4443, 0.2195],\n          [0.4210, 0.4847, 0.5764, 0.2169],\n          ...,\n          [0.3475, 0.4538, 0.3316, 0.1413],\n          [0.3795, 0.6289, 0.3801, 0.4177],\n          [0.6398, 0.7362, 0.1482, 0.1549]],\n\n         [[0.5707, 0.2961, 0.2293, 0.0371],\n          [0.3631, 0.4809, 0.4610, 0.1908],\n          [0.4239, 0.4808, 0.5838, 0.2075],\n          ...,\n          [0.3488, 0.4558, 0.3377, 0.1503],\n          [0.3869, 0.5929, 0.3553, 0.3231],\n          [0.6407, 0.7314, 0.1552, 0.1663]],\n\n         [[0.5707, 0.2961, 0.2293, 0.0371],\n          [0.3631, 0.4809, 0.4610, 0.1908],\n          [0.4239, 0.4808, 0.5838, 0.2076],\n          ...,\n          [0.3488, 0.4558, 0.3377, 0.1503],\n          [0.3869, 0.5929, 0.3553, 0.3231],\n          [0.6407, 0.7314, 0.1552, 0.1663]]]], grad_fn=&lt;StackBackward0&gt;), intermediate_predicted_corners=None, initial_reference_points=None, decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=[tensor([[[[ 1.3938e+00,  3.6899e+00,  3.9381e+00,  ...,  2.0755e+00,\n            1.8361e+00,  1.3195e+00],\n          [ 1.3440e+00,  3.2245e+00,  1.4568e+00,  ...,  1.9746e-01,\n            2.1494e-01,  2.6737e-01],\n          [ 2.7528e-01,  2.2857e-01,  1.9231e-02,  ...,  1.8635e-01,\n           -1.4560e-01, -2.7372e-02],\n          ...,\n          [-4.3640e-01,  4.9777e-01,  3.4311e-01,  ...,  7.7798e-02,\n           -2.6776e-02,  5.2855e-02],\n          [-4.1876e-01,  1.3459e+00, -2.7879e-01,  ..., -5.2242e-01,\n           -2.5501e-01,  1.2173e-01],\n          [-5.0070e-01, -4.2214e-01, -5.4279e-01,  ..., -4.6641e-01,\n           -5.0324e-01, -3.3993e-01]],\n\n         [[ 2.4725e+00,  2.0903e-01,  2.6478e+00,  ...,  3.4342e+00,\n            9.2424e-01,  5.1411e+00],\n          [-2.3204e-01, -5.1897e-02,  1.2316e+00,  ...,  1.6147e+00,\n            1.1504e-01,  2.9225e+00],\n          [ 1.6521e+00,  1.0391e+00,  7.7571e-01,  ...,  2.1104e+00,\n            2.7364e-01,  3.4205e+00],\n          ...,\n          [ 1.5187e+00,  1.9785e-02,  3.1015e-01,  ...,  1.4698e-02,\n           -2.7163e-01,  2.8728e+00],\n          [-3.2695e-01, -4.2197e-01, -3.7899e-01,  ..., -4.1741e-01,\n           -3.8424e-01,  9.2021e-02],\n          [ 1.9287e+00, -3.8777e-02,  9.3081e-01,  ...,  2.9011e-01,\n           -4.3217e-01,  1.4951e+00]],\n\n         [[ 1.2350e+00,  4.6030e-01,  2.8556e-01,  ...,  1.9445e-01,\n            1.6401e-01,  8.9029e-01],\n          [ 3.6415e-01, -2.8295e-01, -2.6529e-01,  ..., -1.7090e-01,\n            1.7011e-03, -4.6186e-01],\n          [ 7.8289e-01,  1.4218e-01,  7.1477e-01,  ...,  1.3742e-01,\n            7.8084e-01,  7.7748e-01],\n          ...,\n          [ 8.6720e-01,  1.5243e+00, -4.3439e-01,  ...,  5.5073e-01,\n            5.3333e-01, -1.0822e-01],\n          [-3.4549e-01, -4.2964e-01, -5.3637e-01,  ...,  6.4962e-01,\n            5.0146e-01, -2.1609e-01],\n          [ 8.9138e-01,  9.1170e-02, -4.0709e-01,  ...,  5.9540e-01,\n            3.3999e-01,  1.8298e-01]],\n\n         ...,\n\n         [[ 2.1335e+00,  1.8645e+00,  6.3417e-01,  ...,  3.1492e-01,\n            8.0026e-01,  1.7273e+00],\n          [ 1.4950e+00,  3.3948e+00,  1.5539e+00,  ...,  2.7506e+00,\n            1.6872e+00,  1.6127e+00],\n          [ 1.6123e+00,  2.7481e+00,  1.6800e+00,  ...,  1.5145e+00,\n            4.7902e-01,  1.3030e+00],\n          ...,\n          [ 6.9388e-01,  7.5684e-02,  4.9832e-01,  ...,  5.0049e-01,\n            3.6597e-01,  6.8521e-01],\n          [ 1.3686e+00,  6.8740e-01,  2.7520e-01,  ...,  1.1264e-01,\n            9.8072e-01,  1.2247e+00],\n          [ 2.0563e+00,  7.3219e-01,  7.6325e-01,  ...,  1.0054e-01,\n            1.2625e+00,  1.5637e+00]],\n\n         [[-5.0865e-01, -2.1889e-01, -5.0291e-01,  ..., -4.8922e-01,\n            1.0710e-01, -1.3777e-01],\n          [-2.1542e-01,  3.0400e-02, -4.8931e-01,  ..., -4.8805e-01,\n            6.0389e-01, -2.9731e-01],\n          [-4.8478e-01, -5.2478e-01, -5.2429e-01,  ..., -3.8690e-01,\n           -3.9214e-01, -5.1093e-01],\n          ...,\n          [-3.3657e-01, -3.8390e-01, -2.0802e-01,  ...,  6.8628e-02,\n           -1.4215e-01, -4.1823e-01],\n          [ 6.0165e-01,  4.8848e-01, -2.1377e-01,  ..., -4.1432e-01,\n           -4.2646e-02, -4.9816e-01],\n          [-2.2064e-01,  1.3190e-01, -3.2296e-01,  ..., -5.4226e-01,\n           -4.9149e-01, -5.2242e-01]],\n\n         [[ 6.8631e+00,  2.0115e+00,  1.0507e+00,  ...,  7.6572e-01,\n            2.8275e+00,  4.7968e+00],\n          [ 6.0376e+00,  2.6104e+00,  1.0852e+00,  ...,  8.7101e-01,\n            3.6189e+00,  5.2539e+00],\n          [ 4.4559e+00,  1.1176e+00,  6.1536e-01,  ...,  5.0730e-01,\n            1.7848e+00,  3.4097e+00],\n          ...,\n          [ 2.7294e+00,  2.6141e+00,  2.0362e-01,  ..., -4.6068e-02,\n            7.6516e-01,  7.5494e-01],\n          [ 3.6208e+00,  2.3895e+00,  1.2078e+00,  ..., -1.6173e-01,\n            1.1155e+00,  1.2592e+00],\n          [ 4.0734e+00,  2.5129e+00,  1.4954e+00,  ..., -1.4671e-01,\n            7.0241e-01,  1.2234e+00]]]], grad_fn=&lt;AddBackward0&gt;), tensor([[[[ 0.5185,  0.3819, -0.1690,  ...,  0.1612,  0.3752,  0.8158],\n          [-0.3562, -0.1270, -0.2667,  ...,  0.0401,  0.4915, -0.2151],\n          [-0.4916, -0.5365, -0.5014,  ..., -0.3831, -0.1949, -0.1640],\n          ...,\n          [-0.1386,  0.0442, -0.1045,  ..., -0.2343, -0.3740, -0.4187],\n          [ 0.3513, -0.0980,  0.0411,  ..., -0.3251, -0.0708,  0.0967],\n          [ 0.3068,  0.0513, -0.2880,  ..., -0.5223, -0.3471,  0.1323]],\n\n         [[ 5.2011,  2.3660,  1.2325,  ...,  0.8635,  1.1357,  2.8331],\n          [ 0.2637,  0.3067,  0.3858,  ...,  1.0561,  1.7242,  0.2823],\n          [ 0.9179,  0.4715,  0.1141,  ...,  1.1161,  1.5353,  0.0766],\n          ...,\n          [-0.0186, -0.2360, -0.1069,  ...,  0.6026,  1.6307,  0.4062],\n          [ 0.2480,  0.2849,  0.9233,  ...,  1.4712,  2.0401,  0.4068],\n          [ 0.9946,  0.0223,  0.7812,  ...,  1.2851,  1.5783,  1.0995]],\n\n         [[-0.1503, -0.3740,  0.1545,  ..., -0.1221, -0.3535,  0.2091],\n          [ 0.1572, -0.3622, -0.0614,  ..., -0.3433, -0.2081, -0.3249],\n          [ 0.3192, -0.1503,  0.6414,  ..., -0.3637, -0.1499, -0.2254],\n          ...,\n          [ 0.0378,  0.5036,  0.1861,  ..., -0.5171, -0.5046, -0.5475],\n          [-0.3393, -0.4130, -0.1570,  ..., -0.3578, -0.3516, -0.4207],\n          [-0.4436, -0.1539, -0.3768,  ..., -0.5277, -0.4855, -0.4495]],\n\n         ...,\n\n         [[-0.4967, -0.3191, -0.5172,  ..., -0.3178, -0.0690, -0.5089],\n          [-0.2761,  0.0149, -0.4904,  ..., -0.2543,  0.0177, -0.2294],\n          [-0.4058, -0.4162, -0.2881,  ...,  0.0443,  0.4478, -0.4462],\n          ...,\n          [-0.4004, -0.1296,  0.1152,  ...,  0.4313,  0.6645,  0.2798],\n          [-0.4441,  0.1218, -0.4305,  ...,  0.4615,  0.6798, -0.1293],\n          [-0.5465, -0.3989, -0.5344,  ..., -0.0198,  0.0151, -0.4183]],\n\n         [[-0.3388, -0.5053, -0.5295,  ..., -0.4755, -0.4938, -0.5397],\n          [-0.4959, -0.5068, -0.5260,  ..., -0.4077, -0.4669,  0.1614],\n          [ 0.7145, -0.1875, -0.1235,  ...,  0.2665,  0.0499,  1.1588],\n          ...,\n          [-0.4128, -0.3582, -0.5506,  ...,  0.2992, -0.2863,  0.2803],\n          [ 1.0126, -0.5243,  0.2794,  ...,  1.5115,  1.1862,  1.6769],\n          [-0.5020, -0.5326, -0.5383,  ..., -0.0564,  0.1121,  0.0871]],\n\n         [[-0.5202, -0.1108, -0.1819,  ..., -0.4941, -0.4913, -0.5165],\n          [-0.2305,  0.1010, -0.2430,  ...,  0.5093,  0.1895,  0.1037],\n          [-0.4895, -0.3958, -0.3056,  ..., -0.2141, -0.0102,  0.5653],\n          ...,\n          [ 1.0310, -0.5228, -0.1168,  ..., -0.5437, -0.4989,  0.2949],\n          [-0.0247, -0.3842, -0.1510,  ..., -0.5504, -0.5146, -0.0977],\n          [-0.5410, -0.5339, -0.4973,  ..., -0.5472, -0.4962, -0.3349]]]],\n       grad_fn=&lt;AddBackward0&gt;), tensor([[[[ 1.7336e-01, -2.6222e-01, -4.2793e-01,  ..., -1.1853e-01,\n           -2.9695e-01, -2.0832e-01],\n          [-3.4296e-03, -5.1239e-01, -5.2320e-01,  ..., -4.6905e-01,\n           -5.4388e-01, -1.7963e-01],\n          [ 6.9119e-02, -4.7162e-01, -4.7037e-01,  ..., -2.3459e-01,\n           -3.6831e-01, -2.2590e-02],\n          ...,\n          [ 8.7253e-01,  7.6361e-01,  5.9890e-01,  ...,  8.0291e-01,\n            1.0609e+00,  1.1305e+00],\n          [ 6.8713e-01,  6.3124e-01,  6.0094e-01,  ...,  8.2307e-01,\n            1.2763e+00,  4.9848e-01],\n          [ 3.0797e-01,  1.7016e-01,  8.4849e-01,  ...,  3.9683e-02,\n            1.4594e-01, -7.6637e-02]],\n\n         [[-4.7298e-01, -4.7068e-01, -4.7336e-01,  ..., -4.0120e-01,\n           -3.2050e-01, -2.8249e-01],\n          [-4.7759e-01, -5.4533e-01, -4.9800e-01,  ..., -5.0616e-01,\n           -4.6732e-01, -3.0524e-01],\n          [-4.9285e-01, -5.3249e-01, -5.3137e-01,  ..., -5.2591e-01,\n           -5.4686e-01, -4.9311e-01],\n          ...,\n          [-2.4863e-02,  5.6615e-01,  1.3635e+00,  ...,  1.5708e+00,\n            9.7564e-01,  8.4283e-01],\n          [-3.4610e-02,  9.4266e-01,  9.5997e-01,  ...,  1.2739e+00,\n            7.4010e-01,  7.9288e-01],\n          [-6.2025e-02, -2.2215e-01,  4.5640e-02,  ...,  1.0250e+00,\n            1.0097e+00,  3.7875e-01]],\n\n         [[ 8.6356e-01,  9.1551e-01,  8.9298e-01,  ...,  7.6591e-01,\n            7.6748e-01,  1.3054e+00],\n          [ 5.0886e-01,  4.1404e-01,  2.8045e-01,  ...,  7.0586e-01,\n            4.6785e-01,  1.3641e+00],\n          [ 2.3436e-01,  1.8401e-01,  6.3883e-01,  ...,  6.3147e-01,\n            3.4000e-01,  3.0140e-01],\n          ...,\n          [-3.2019e-01, -2.9413e-01, -1.6662e-01,  ...,  1.5093e-02,\n            2.1418e-01,  3.8254e-01],\n          [-2.4847e-01, -2.5539e-01, -3.1744e-01,  ..., -2.7485e-01,\n           -3.5164e-01, -3.4260e-02],\n          [-2.0574e-01, -1.8172e-01, -1.6656e-01,  ..., -1.1945e-01,\n           -3.5600e-02,  1.7422e-02]],\n\n         ...,\n\n         [[ 1.0281e-01, -1.7983e-01, -2.6104e-01,  ...,  2.9685e-01,\n            2.9522e-02, -1.5922e-01],\n          [ 6.4848e-01,  2.1403e-02, -2.9381e-02,  ...,  3.1224e-01,\n            4.1161e-01,  7.7101e-01],\n          [ 1.5228e-01,  8.2648e-02, -2.4173e-02,  ...,  8.9092e-01,\n            6.4181e-01,  4.0476e-01],\n          ...,\n          [ 4.2079e-01, -3.6907e-02, -1.4251e-01,  ..., -2.9826e-01,\n           -6.7151e-02, -3.6289e-02],\n          [ 1.2386e-01, -4.1844e-01, -3.9618e-01,  ..., -5.0743e-01,\n           -3.4355e-01, -1.8816e-01],\n          [-4.4068e-01, -5.4903e-01, -4.7067e-01,  ..., -6.2028e-02,\n           -5.0896e-01, -2.2307e-01]],\n\n         [[ 9.8333e-01, -2.7065e-01, -3.3590e-01,  ..., -3.3124e-01,\n           -1.4504e-01,  7.5079e-01],\n          [ 4.1522e-01, -3.4168e-01, -3.9592e-01,  ..., -4.3886e-01,\n           -3.1252e-01,  2.9204e-01],\n          [ 5.3854e-01, -9.4371e-02, -2.8638e-01,  ..., -3.7553e-01,\n           -2.0117e-01,  5.2053e-01],\n          ...,\n          [ 7.5336e-01,  4.2127e-02, -4.7527e-01,  ..., -2.3514e-01,\n            3.8577e-01,  1.0483e+00],\n          [ 7.9049e-01,  2.1774e-02, -3.5424e-01,  ..., -2.3879e-01,\n            1.9274e-01,  7.7723e-01],\n          [ 8.9491e-01,  3.2616e-01, -1.3408e-01,  ...,  1.5268e-01,\n            5.6745e-01,  1.0702e+00]],\n\n         [[ 1.7084e-01, -3.4757e-02, -1.7290e-01,  ..., -8.5381e-02,\n            1.6041e-01,  4.4312e-01],\n          [ 3.7726e-01, -2.6368e-02, -3.0844e-01,  ...,  5.2936e-02,\n            6.6930e-03,  3.1330e-01],\n          [ 5.3114e-01, -2.7307e-02, -4.2941e-01,  ...,  3.0857e-01,\n            6.0580e-01,  1.5468e-01],\n          ...,\n          [ 4.8378e-01, -1.1162e-03, -1.8971e-01,  ..., -3.5753e-01,\n           -2.4050e-01, -2.1233e-01],\n          [ 6.9566e-01,  6.6009e-01,  7.9304e-02,  ..., -3.6931e-01,\n           -1.2620e-01, -4.8648e-02],\n          [ 4.7603e-01,  3.2894e-01, -2.1638e-01,  ..., -4.6596e-01,\n           -2.9300e-01, -7.0762e-02]]]], grad_fn=&lt;AddBackward0&gt;)], encoder_hidden_states=None, encoder_attentions=None, init_reference_points=tensor([[[-0.4862, -0.7119, -0.1336, -2.2152],\n         [-0.6809,  0.0766, -0.6053, -1.3876],\n         [-0.6570,  0.1424, -0.2582, -1.2478],\n         ...,\n         [-0.7187, -0.1965, -0.4079, -1.5115],\n         [-0.7981,  0.2656,  0.4589, -1.1378],\n         [ 0.6217,  1.1485, -1.5680, -1.7015]]]), enc_topk_logits=tensor([[[-2.3160, -1.3959, -2.2753,  ..., -1.0056, -2.1959, -2.4759],\n         [-1.8523, -2.0708, -2.8310,  ..., -0.8968, -2.3933, -2.8444],\n         [-1.8766, -1.7784, -2.8721,  ..., -0.8604, -2.3539, -3.0173],\n         ...,\n         [-2.7151, -2.0619, -2.1254,  ..., -1.1068, -2.5075, -3.0717],\n         [-2.3066, -0.9151, -1.8485,  ..., -0.6808, -2.1900, -2.4505],\n         [-0.6756, -1.9183, -0.7957,  ..., -0.7819, -1.3664, -1.9971]]],\n       grad_fn=&lt;GatherBackward0&gt;), enc_topk_bboxes=tensor([[[0.3808, 0.3292, 0.4666, 0.0984],\n         [0.3361, 0.5191, 0.3531, 0.1998],\n         [0.3414, 0.5355, 0.4358, 0.2231],\n         ...,\n         [0.3277, 0.4510, 0.3994, 0.1807],\n         [0.3104, 0.5660, 0.6128, 0.2427],\n         [0.6506, 0.7592, 0.1725, 0.1543]]], grad_fn=&lt;SigmoidBackward0&gt;), enc_outputs_class=tensor([[[-1.8213, -0.6814, -1.5843,  ..., -1.2911, -1.7899, -3.3334],\n         [-1.8213, -0.6814, -1.5843,  ..., -1.2911, -1.7899, -3.3334],\n         [-1.8213, -0.6814, -1.5843,  ..., -1.2911, -1.7899, -3.3334],\n         ...,\n         [-1.4263, -0.7852, -3.2138,  ..., -1.3979, -2.2594, -0.6975],\n         [-1.8004, -0.7145, -2.7931,  ..., -1.6721, -2.0172, -0.9661],\n         [-1.8367, -0.4701, -3.1283,  ..., -1.8585, -1.4448, -1.6497]]],\n       grad_fn=&lt;ViewBackward0&gt;), enc_outputs_coord_logits=tensor([[[ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         [ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         [ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         ...,\n         [ 1.3017e+00,  1.7718e+00, -5.1475e-01, -6.0635e-01],\n         [ 1.8548e+00,  2.4244e+00, -1.1509e+00, -1.5645e+00],\n         [ 2.9150e+00,  2.5202e+00, -2.4418e+00, -1.7639e+00]]],\n       grad_fn=&lt;AddBackward0&gt;), denoising_meta_values=None)\n\nNice!\nIt looks like it worked!\nOur model processed our random_sample_preprocessed_image_only[\"pixel_values\"] and returned a RTDetrV2ObjectDetectionOutput object as output.\nLet‚Äôs inspect the keys() method of this output and see what they are.\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'intermediate_hidden_states', 'intermediate_logits', 'intermediate_reference_points', 'encoder_last_hidden_state', 'init_reference_points', 'enc_topk_logits', 'enc_topk_bboxes', 'enc_outputs_class', 'enc_outputs_coord_logits'])\n\n\nBreaking these down:\n\nlogits - The raw outputs from the model, these are the classification logits we can later apply a softmax function/sigmoid function to to get prediction probabilties.\npred_boxes - Normalized box coordinates in CXCYWH ((center_x, center_y, width, height)) format.\nlast_hidden_state - Last hidden state of the last decoder layer of the model.\nencoder_last_hidden_state - Last hidden state of the last encoder layer of the model.\n\nHow about we inspect the shape attribute of the logits?\n\n# Inspect logits output shape\noutput_logits = random_sample_outputs.logits\nprint(f\"[INFO] Output logits shape: {output_logits.shape} -&gt; [1 image, 300 boxes, 7 classes]\")\n\n[INFO] Output logits shape: torch.Size([1, 300, 7]) -&gt; [1 image, 300 boxes, 7 classes]\n\n\nNice!\nWe get an output from our model that coincides with the shape of our data.\nThe final value of 7 in the output_logits tensor is equivalent to the number of classes we have.\nAnd the 300 is the number of boxes our model predicts for each image (this is defined by the num_queries parameter of the transformers.RTDetrV2Config, where num_queries=300 is the default).\n\n# Inspect predicted boxes output shape\noutput_pred_boxes = random_sample_outputs.pred_boxes\nprint(f\"[INFO] Output predicted boxes shape: {output_pred_boxes.shape} -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\")\n\n[INFO] Output predicted boxes shape: torch.Size([1, 300, 4]) -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\n\n\nReading the documentation for the forward method, we can determine the output format of our models predicted boxes:\n\nReturns:\npred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\nThis is good to know!\nIt means that the raw output boxes from our model come in normalized CXCYWH format (see Table¬†1 for more).\nHow about we inspect a single box?\n\n# Single example predicted bounding box coordinates\nprint(f\"[INFO] Example output box: {output_pred_boxes[:, 0, :][0].detach()} -&gt; (center_x, center_y, width, height)\")\n\n[INFO] Example output box: tensor([0.5608, 0.4045, 0.0437, 0.0570]) -&gt; (center_x, center_y, width, height)\n\n\nExcellent!\nWe can process these boxes and logits later on into different formats using the transformers.RTDetrImageProcessor.post_process_object_detection method.\nFor now, let‚Äôs figure out how to preprocess our annotations.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk-converting-our-annotations-into-coco-format",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk-converting-our-annotations-into-coco-format",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 TK Converting our annotations into COCO format",
    "text": "9 TK Converting our annotations into COCO format\nTK - discuss how we‚Äôve converted an image, now to convert our annotations\nOur image_processor.processor method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n9.1 TK - Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by image_processor.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[18], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[16], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100])\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.2 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on our random_sample from before.\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Inpsect our random sample (in original format)\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 682,\n 'annotations': {'file_name': ['10d2d2e1-039d-4726-8d66-86b6eeefa0e3.jpeg',\n   '10d2d2e1-039d-4726-8d66-86b6eeefa0e3.jpeg',\n   '10d2d2e1-039d-4726-8d66-86b6eeefa0e3.jpeg'],\n  'image_id': [682, 682, 682],\n  'category_id': [1, 5, 0],\n  'bbox': [[14.199999809265137,\n    598.2999877929688,\n    492.1000061035156,\n    670.7000122070312],\n   [401.29998779296875, 691.4000244140625, 213.0, 185.10000610351562],\n   [8.899999618530273,\n    385.79998779296875,\n    941.7999877929688,\n    511.6000061035156]],\n  'iscrowd': [0, 0, 0],\n  'area': [330051.46875, 39426.30078125, 481824.875]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 682,\n 'annotations': [{'image_id': 682,\n   'category_id': 1,\n   'bbox': [14.199999809265137,\n    598.2999877929688,\n    492.1000061035156,\n    670.7000122070312],\n   'area': 330051.46875,\n   'iscrowd': 0},\n  {'image_id': 682,\n   'category_id': 5,\n   'bbox': [401.29998779296875, 691.4000244140625, 213.0, 185.10000610351562],\n   'area': 39426.30078125,\n   'iscrowd': 0},\n  {'image_id': 682,\n   'category_id': 0,\n   'bbox': [8.899999618530273,\n    385.79998779296875,\n    941.7999877929688,\n    511.6000061035156],\n   'area': 481824.875,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.3 TK - Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with image_processor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYXY format and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\nThe `max_size` parameter is deprecated and will be removed in v4.26. Please specify in `size['longest_edge'] instead`.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() in our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'pixel_mask', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([ 82512.8672,   9856.5752, 120456.2188]),\n  'boxes': tensor([[0.2711, 0.7294, 0.5126, 0.5240],\n        [0.5290, 0.6125, 0.2219, 0.1446],\n        [0.4998, 0.5012, 0.9810, 0.3997]]),\n  'class_labels': tensor([1, 5, 0]),\n  'image_id': tensor([682]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 480])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample_preprocessed[\"pixel_values\"][0].unsqueeze(0), # model expects input [batch_size, color_channels, height, width]\n                              pixel_mask=None)\nrandom_sample_outputs\n\nConditionalDetrObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[ 0.0454, -0.0711, -0.4182,  ...,  0.2894,  0.0483,  0.0123],\n         [-0.1012, -0.1597, -0.1998,  ..., -0.0486, -0.1782, -0.2652],\n         [ 0.1434,  0.0662, -0.1789,  ...,  0.0542, -0.0454, -0.0935],\n         ...,\n         [-0.3237, -0.4062, -0.1989,  ...,  0.2875, -0.0910,  0.2941],\n         [ 0.1114, -0.0177, -0.3141,  ..., -0.0593, -0.1495, -0.1393],\n         [-0.1669, -0.1889,  0.1891,  ...,  0.1096, -0.2838, -0.0589]]],\n       grad_fn=&lt;ViewBackward0&gt;), pred_boxes=tensor([[[0.8267, 0.6865, 0.3329, 0.6065],\n         [0.6527, 0.1801, 0.0381, 0.0135],\n         [0.8987, 0.5712, 0.2006, 0.2254],\n         ...,\n         [0.3474, 0.3090, 0.6915, 0.1174],\n         [0.8373, 0.5285, 0.3022, 0.1941],\n         [0.0810, 0.2927, 0.1605, 0.0432]]], grad_fn=&lt;SigmoidBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 0.2234,  0.0444,  0.9698,  ..., -1.0443, -0.1137,  0.3582],\n         [ 0.2838, -0.6804,  0.3960,  ...,  0.7212,  0.3551,  0.3658],\n         [ 0.5051, -0.0147,  0.5885,  ..., -1.2090, -0.0941, -0.0717],\n         ...,\n         [ 0.4280, -1.5612,  0.3054,  ..., -0.8336,  0.0790, -0.3486],\n         [ 0.2858, -0.0132,  0.5693,  ..., -1.1525, -0.1821, -0.1940],\n         [ 0.2017,  0.1479, -0.3311,  ..., -1.1814, -0.0651, -0.0979]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=tensor([[[-0.3918,  0.4741, -0.3829,  ..., -0.5659,  0.4583,  0.3095],\n         [ 0.1083,  0.5762, -0.0826,  ...,  0.2379,  0.1619,  0.3629],\n         [ 0.1359,  0.6453, -0.1079,  ..., -0.1028,  0.1878,  0.3184],\n         ...,\n         [ 0.1694,  0.8391, -0.1381,  ...,  0.1942,  0.0713,  0.2323],\n         [ 0.1709,  0.6931, -0.0919,  ...,  0.2428,  0.0508,  0.1932],\n         [-0.1842,  0.4742, -0.1434,  ..., -0.1434,  0.2518,  0.2516]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), encoder_hidden_states=None, encoder_attentions=None)\n\n\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'encoder_last_hidden_state'])\n\n\n\n# We get 300 total boxes with shape the same as our number of labels\nrandom_sample_outputs.logits.shape\n\ntorch.Size([1, 300, 7])\n\n\n\nrandom_sample_outputs.pred_boxes.shape\n\ntorch.Size([1, 300, 4])\n\n\nTK - note: see forward() method for output format of boxes -&gt; https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\nFrom the docs:\n\nReturns ‚Ä¶ pred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\n\n# Example pred box output\n# Box output comes in the form CXCYWH normalized (e.g. [center_X, center_Y, width, height]) to be between 0 and 1, this is in the docs\nrandom_sample_outputs.pred_boxes[:, 0]\n\ntensor([[0.8267, 0.6865, 0.3329, 0.6065]], grad_fn=&lt;SelectBackward0&gt;)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#post-process-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#post-process-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 Post process a single output",
    "text": "9 Post process a single output\nAlways a good step to get your model working end-to-end on a single sample and then upgrading it.\nBox formats:\n\nStarting data (the input data) -&gt; [x_top_left, y_top_left, width, height] -&gt; XYWH (absolute)\nOut of image_processor.preprocess() -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized) -&gt; into model\n\nSee docs: https://huggingface.co/docs/transformers.js/en/custom_usage\n\nOut of model -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized)\n\nSee docs for forward() and output pred_boxes: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\n\nOut of image_processor.post_process_object_detection() -&gt; [x_top_left, y_top_left, x_bottom_right, y_bottom_right] -&gt; XYXY\n\nThis is PASCL VOC format - (xmin, ymin, xmax, ymax)\nSee docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.post_process_object_detection\n\n\n\n# Check the keys of the labels for the image\nrandom_sample_preprocessed[\"labels\"][0].keys()\n\ndict_keys(['size', 'image_id', 'class_labels', 'boxes', 'area', 'iscrowd', 'orig_size'])\n\n\n\nprint(f\"[INFO] Image original size: {random_sample_preprocessed.labels[0].orig_size} (height, width)\")\nprint(f\"[INFO] Image size after preprocessing: {random_sample_preprocessed.labels[0].size} (height, width)\")\n\n[INFO] Image original size: tensor([1280,  960]) (height, width)\n[INFO] Image size after preprocessing: tensor([640, 480]) (height, width)\n\n\n\n# Output logits will be post-processed to turn into prediction probabilities as well as boxes\n\n# Get pred probs from logits, this will be used for our threshold parameter in post_process_object_detection \ntorch.softmax(random_sample_outputs.logits, dim=-1)\n\ntensor([[[0.1471, 0.1309, 0.0925,  ..., 0.1878, 0.1475, 0.1423],\n         [0.1330, 0.1255, 0.1205,  ..., 0.1402, 0.1232, 0.1129],\n         [0.1611, 0.1492, 0.1167,  ..., 0.1474, 0.1334, 0.1272],\n         ...,\n         [0.0988, 0.0910, 0.1119,  ..., 0.1821, 0.1247, 0.1833],\n         [0.1683, 0.1479, 0.1100,  ..., 0.1419, 0.1297, 0.1310],\n         [0.1238, 0.1211, 0.1767,  ..., 0.1632, 0.1101, 0.1379]]],\n       grad_fn=&lt;SoftmaxBackward0&gt;)\n\n\n\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=0.3, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_sample_preprocessed[\"labels\"][0][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6839, 0.6737, 0.6616, 0.6614, 0.6574, 0.6541, 0.6478, 0.6476, 0.6475,\n          0.6475, 0.6472, 0.6472, 0.6448, 0.6444, 0.6436, 0.6434, 0.6426, 0.6419,\n          0.6416, 0.6408, 0.6404, 0.6383, 0.6382, 0.6374, 0.6372, 0.6359, 0.6354,\n          0.6352, 0.6346, 0.6338, 0.6310, 0.6308, 0.6302, 0.6280, 0.6277, 0.6273,\n          0.6272, 0.6272, 0.6271, 0.6265, 0.6265, 0.6265, 0.6259, 0.6255, 0.6248,\n          0.6243, 0.6242, 0.6241, 0.6237, 0.6229, 0.6223, 0.6221, 0.6215, 0.6213,\n          0.6207, 0.6207, 0.6203, 0.6199, 0.6196, 0.6195, 0.6185, 0.6184, 0.6183,\n          0.6177, 0.6163, 0.6160, 0.6150, 0.6144, 0.6144, 0.6139, 0.6139, 0.6137,\n          0.6135, 0.6129, 0.6125, 0.6124, 0.6108, 0.6106, 0.6104, 0.6101, 0.6100,\n          0.6099, 0.6097, 0.6092, 0.6089, 0.6089, 0.6085, 0.6085, 0.6079, 0.6076,\n          0.6070, 0.6070, 0.6068, 0.6063, 0.6057, 0.6057, 0.6056, 0.6055, 0.6053,\n          0.6051], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 4,\n          3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 4, 4, 3, 6, 3, 4, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4,\n          3, 3, 6, 3]),\n  'boxes': tensor([[ 1.5021e+02,  2.2275e+02,  9.2612e+02,  3.1100e+02],\n          [ 3.0236e+02,  2.3473e+02,  8.8168e+02,  3.0422e+02],\n          [ 5.0880e+02,  2.1115e+02,  5.5853e+02,  2.3331e+02],\n          [ 4.7810e+02,  1.9805e+02,  5.2191e+02,  2.2018e+02],\n          [ 4.3730e+02,  2.4722e+02,  9.2742e+02,  3.1818e+02],\n          [ 9.0321e+02,  3.0775e+02,  9.6117e+02,  3.3864e+02],\n          [ 7.1403e+02,  2.3229e+02,  7.5484e+02,  2.4963e+02],\n          [ 6.4448e+02,  2.3185e+02,  7.0163e+02,  2.4743e+02],\n          [ 9.7196e+01,  2.4972e+02,  8.0122e+02,  3.4492e+02],\n          [ 6.9588e+02,  2.2955e+02,  7.2308e+02,  2.4626e+02],\n          [ 6.8868e+02,  2.3618e+02,  7.3616e+02,  2.5229e+02],\n          [ 6.1711e+02,  2.2698e+02,  6.7091e+02,  2.4342e+02],\n          [ 1.1697e+02,  2.0081e+02,  5.3524e+02,  2.5107e+02],\n          [ 4.8558e+02,  2.0865e+02,  5.4637e+02,  2.3481e+02],\n          [ 7.4454e+02,  2.2994e+02,  7.8603e+02,  2.5308e+02],\n          [ 6.8199e+02,  2.3242e+02,  7.2622e+02,  2.4876e+02],\n          [ 5.3925e+02,  2.2372e+02,  5.9300e+02,  2.4156e+02],\n          [ 4.4184e+02,  2.0462e+02,  4.7448e+02,  2.2387e+02],\n          [ 6.6260e+02,  2.3085e+02,  7.0588e+02,  2.4724e+02],\n          [ 7.2336e+02,  2.3609e+02,  7.7372e+02,  2.5295e+02],\n          [ 5.9377e+02,  2.3010e+02,  6.5768e+02,  2.4654e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 2.1040e+02,  1.9925e+02,  3.2352e+02,  2.3685e+02],\n          [ 1.8045e+02,  1.5578e+02,  3.1142e+02,  1.9401e+02],\n          [ 4.2432e+02,  2.0136e+02,  4.5325e+02,  2.1855e+02],\n          [ 7.8032e+02,  2.2787e+02,  8.3353e+02,  2.5188e+02],\n          [ 6.4112e+02,  2.1902e+02,  6.7090e+02,  2.3924e+02],\n          [ 3.7899e+02,  2.4951e+02,  7.8740e+02,  3.0072e+02],\n          [ 1.6532e+02,  2.3143e+02,  3.2209e+02,  2.6452e+02],\n          [ 1.0642e+02,  2.3275e+02,  2.2752e+02,  2.5950e+02],\n          [-2.7386e+00,  2.8250e+02,  9.5569e+02,  8.3506e+02],\n          [ 5.6764e+02,  2.2579e+02,  6.0133e+02,  2.4452e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 1.3404e+02,  4.4818e+02,  9.4260e+02,  8.4707e+02],\n          [ 4.5860e+02,  4.7699e+02,  5.8809e+02,  5.3134e+02],\n          [ 1.6226e+02,  2.1322e+02,  3.1575e+02,  2.5415e+02],\n          [ 5.8245e+02,  2.3491e+02,  7.3097e+02,  2.5595e+02],\n          [ 9.5602e+02,  2.3172e+02,  9.5996e+02,  2.8035e+02],\n          [ 7.6245e+02,  2.3498e+02,  8.0948e+02,  2.5390e+02],\n          [ 8.5605e+02,  3.1974e+02,  9.6036e+02,  3.4395e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 2.1273e+00,  8.9889e+02,  9.6114e+02,  1.2628e+03],\n          [ 3.9504e+02,  2.1397e+02,  4.3043e+02,  2.2851e+02],\n          [ 3.4446e-01,  1.8749e+02,  7.8433e+01,  2.2499e+02],\n          [ 6.7294e+02,  2.5800e+02,  7.6941e+02,  2.8344e+02],\n          [ 6.0833e+02,  2.2191e+02,  6.4493e+02,  2.3915e+02],\n          [-4.1992e+00,  3.3792e+02,  9.5432e+02,  1.1725e+03],\n          [ 3.5863e+02,  2.0646e+02,  3.8990e+02,  2.3022e+02],\n          [ 4.6378e+02,  2.2039e+02,  5.2133e+02,  2.3814e+02],\n          [-5.5702e+00,  2.8453e+02,  8.7009e+02,  7.9807e+02],\n          [ 7.9385e+02,  2.3517e+02,  8.4780e+02,  2.5737e+02],\n          [ 8.8628e+02,  2.7585e+02,  9.6165e+02,  3.1819e+02],\n          [-1.4085e+01,  7.4535e+02,  9.4306e+02,  1.2644e+03],\n          [ 7.6982e-01,  4.5878e+02,  9.5951e+02,  8.9642e+02],\n          [ 3.8868e+02,  1.9604e+02,  4.2339e+02,  2.1367e+02],\n          [ 1.0205e+02,  2.3049e+02,  1.9162e+02,  2.5180e+02],\n          [ 1.5999e+02,  1.4399e+02,  2.6803e+02,  1.9518e+02],\n          [ 8.3596e+02,  2.8685e+02,  9.6574e+02,  3.4110e+02],\n          [ 4.0079e+02,  2.0236e+02,  4.3893e+02,  2.2204e+02],\n          [ 2.2829e-02,  1.7629e+02,  7.5778e+00,  2.1321e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.5052e+00,  3.2000e+02,  6.8636e+02,  8.1026e+02],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [ 8.5131e+00,  5.3675e+02,  6.7816e+02,  8.2705e+02],\n          [ 5.8866e+02,  2.2367e+02,  6.3574e+02,  2.4067e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 7.6864e+02,  3.0461e+02,  8.5804e+02,  3.3697e+02],\n          [ 3.2264e+02,  7.8797e+02,  3.9313e+02,  8.3845e+02],\n          [ 1.2273e+02,  3.3624e+02,  2.9674e+02,  3.8669e+02],\n          [ 4.9169e+02,  6.0451e+02,  5.7784e+02,  6.6474e+02],\n          [ 7.3638e+01,  1.6488e+02,  1.4301e+02,  2.1829e+02],\n          [ 8.8692e+02,  2.2889e+02,  9.5606e+02,  2.5846e+02],\n          [ 2.5381e+02,  1.2226e+03,  9.6300e+02,  1.2849e+03],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [-2.6988e+00,  2.1334e+02,  5.3616e+01,  2.4198e+02],\n          [ 8.3390e+02,  2.2830e+02,  8.8685e+02,  2.5244e+02],\n          [ 9.3645e+00,  2.3032e+02,  1.1699e+02,  2.6169e+02],\n          [ 5.2715e+02,  2.8053e+02,  5.8582e+02,  3.0946e+02],\n          [ 4.9539e+02,  2.8255e+02,  5.5250e+02,  3.0303e+02],\n          [ 8.7392e+02,  3.0168e+02,  9.6059e+02,  3.3615e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.8947e+02,  4.1488e+02,  6.1218e+02,  4.9252e+02],\n          [ 7.5197e+02,  2.5210e+02,  8.2422e+02,  2.7998e+02],\n          [ 2.5285e+02,  4.3588e+02,  9.3822e+02,  8.7275e+02],\n          [ 8.7054e+02,  2.2011e+02,  9.3370e+02,  2.4845e+02],\n          [ 9.0750e+02,  3.1742e+02,  9.6316e+02,  3.5016e+02],\n          [-4.3446e-01,  2.1810e+02,  2.3509e+01,  2.4937e+02],\n          [ 1.1742e+02,  2.1277e+02,  3.1611e+02,  2.5940e+02],\n          [ 9.6207e+01,  3.5631e+02,  9.5135e+02,  9.5458e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [ 3.7007e+02,  1.9513e+02,  4.0063e+02,  2.1357e+02],\n          [ 4.0936e+02,  5.2738e+02,  6.3709e+02,  6.3685e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 2.6593e+02,  1.8549e+02,  3.8638e+02,  2.2928e+02],\n          [ 4.9952e+02,  1.2543e+03,  8.9540e+02,  1.2808e+03],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [-4.4207e+00,  2.8687e+02,  9.5472e+02,  1.0455e+03]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\n\n\nTK - let‚Äôs visualize, visualize, visualize!\n\n# Extract scores, labels and boxes\nrandom_sample_pred_scores = random_sample_outputs_post_processed[0][\"scores\"]\nrandom_sample_pred_labels = random_sample_outputs_post_processed[0][\"labels\"]\nrandom_sample_pred_boxes = random_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_sample_pred_labels, random_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_sample_labels_to_plot}\")\n\n# Plot the random sample image with randomly predicted boxes (these will be very poor since the model is not trained on our data yet)\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=random_sample[\"image\"]),\n        boxes=random_sample_pred_boxes,\n        labels=random_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Labels with scores: ['Pred: not_hand (0.6839)', 'Pred: not_hand (0.6737)', 'Pred: not_hand (0.6616)', 'Pred: not_hand (0.6614)', 'Pred: not_hand (0.6574)', 'Pred: not_hand (0.6541)', 'Pred: not_hand (0.6478)', 'Pred: not_hand (0.6476)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6448)', 'Pred: not_hand (0.6444)', 'Pred: not_hand (0.6436)', 'Pred: not_hand (0.6434)', 'Pred: not_hand (0.6426)', 'Pred: not_hand (0.6419)', 'Pred: not_hand (0.6416)', 'Pred: not_hand (0.6408)', 'Pred: not_hand (0.6404)', 'Pred: not_hand (0.6383)', 'Pred: not_hand (0.6382)', 'Pred: not_hand (0.6374)', 'Pred: not_hand (0.6372)', 'Pred: not_hand (0.6359)', 'Pred: not_hand (0.6354)', 'Pred: not_hand (0.6352)', 'Pred: not_hand (0.6346)', 'Pred: not_hand (0.6338)', 'Pred: not_hand (0.631)', 'Pred: not_hand (0.6308)', 'Pred: not_hand (0.6302)', 'Pred: not_hand (0.628)', 'Pred: not_hand (0.6277)', 'Pred: not_hand (0.6273)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6271)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6265)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6259)', 'Pred: not_hand (0.6255)', 'Pred: not_hand (0.6248)', 'Pred: not_hand (0.6243)', 'Pred: not_hand (0.6242)', 'Pred: not_trash (0.6241)', 'Pred: not_hand (0.6237)', 'Pred: not_trash (0.6229)', 'Pred: not_hand (0.6223)', 'Pred: not_hand (0.6221)', 'Pred: not_hand (0.6215)', 'Pred: not_hand (0.6213)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6203)', 'Pred: not_hand (0.6199)', 'Pred: not_hand (0.6196)', 'Pred: not_hand (0.6195)', 'Pred: not_hand (0.6185)', 'Pred: trash_arm (0.6184)', 'Pred: not_trash (0.6183)', 'Pred: not_trash (0.6177)', 'Pred: not_hand (0.6163)', 'Pred: trash_arm (0.616)', 'Pred: not_hand (0.615)', 'Pred: not_trash (0.6144)', 'Pred: not_hand (0.6144)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6137)', 'Pred: not_hand (0.6135)', 'Pred: not_hand (0.6129)', 'Pred: not_hand (0.6125)', 'Pred: not_hand (0.6124)', 'Pred: not_hand (0.6108)', 'Pred: not_hand (0.6106)', 'Pred: not_trash (0.6104)', 'Pred: not_hand (0.6101)', 'Pred: not_trash (0.61)', 'Pred: not_hand (0.6099)', 'Pred: not_hand (0.6097)', 'Pred: not_trash (0.6092)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6085)', 'Pred: not_hand (0.6085)', 'Pred: not_trash (0.6079)', 'Pred: not_hand (0.6076)', 'Pred: not_trash (0.607)', 'Pred: not_trash (0.607)', 'Pred: not_hand (0.6068)', 'Pred: not_hand (0.6063)', 'Pred: not_trash (0.6057)', 'Pred: not_trash (0.6057)', 'Pred: not_hand (0.6056)', 'Pred: not_hand (0.6055)', 'Pred: trash_arm (0.6053)', 'Pred: not_hand (0.6051)']\n\n\n\n\n\n\n\n\n\nOur predictions are poor since our model hasn‚Äôt been specifically trained on our data.\nBut we can improve them by fine-tuning the model to our dataset.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#post-processing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#post-processing-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 Post processing a single output",
    "text": "9 Post processing a single output\nAlways a good step to get your model working end-to-end on a single sample and then upgrading it.\nBox formats:\n\nStarting data (the input data) -&gt; [x_top_left, y_top_left, width, height] -&gt; XYWH (absolute)\nOut of image_processor.preprocess() -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized) -&gt; into model\n\nSee docs: https://huggingface.co/docs/transformers.js/en/custom_usage\n\nOut of model -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized)\n\nSee docs for forward() and output pred_boxes: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\n\nOut of image_processor.post_process_object_detection() -&gt; [x_top_left, y_top_left, x_bottom_right, y_bottom_right] -&gt; XYXY\n\nThis is PASCL VOC format - (xmin, ymin, xmax, ymax)\nSee docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.post_process_object_detection\n\n\n\n# Check the keys of the labels for the image\nrandom_sample_preprocessed[\"labels\"][0].keys()\n\ndict_keys(['size', 'image_id', 'class_labels', 'boxes', 'area', 'iscrowd', 'orig_size'])\n\n\n\nprint(f\"[INFO] Image original size: {random_sample_preprocessed.labels[0].orig_size} (height, width)\")\nprint(f\"[INFO] Image size after preprocessing: {random_sample_preprocessed.labels[0].size} (height, width)\")\n\n[INFO] Image original size: tensor([1280,  960]) (height, width)\n[INFO] Image size after preprocessing: tensor([640, 480]) (height, width)\n\n\n\n# Output logits will be post-processed to turn into prediction probabilities as well as boxes\n\n# Get pred probs from logits, this will be used for our threshold parameter in post_process_object_detection \ntorch.softmax(random_sample_outputs.logits, dim=-1)\n\ntensor([[[0.1471, 0.1309, 0.0925,  ..., 0.1878, 0.1475, 0.1423],\n         [0.1330, 0.1255, 0.1205,  ..., 0.1402, 0.1232, 0.1129],\n         [0.1611, 0.1492, 0.1167,  ..., 0.1474, 0.1334, 0.1272],\n         ...,\n         [0.0988, 0.0910, 0.1119,  ..., 0.1821, 0.1247, 0.1833],\n         [0.1683, 0.1479, 0.1100,  ..., 0.1419, 0.1297, 0.1310],\n         [0.1238, 0.1211, 0.1767,  ..., 0.1632, 0.1101, 0.1379]]],\n       grad_fn=&lt;SoftmaxBackward0&gt;)\n\n\n\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=0.3, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_sample_preprocessed[\"labels\"][0][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6839, 0.6737, 0.6616, 0.6614, 0.6574, 0.6541, 0.6478, 0.6476, 0.6475,\n          0.6475, 0.6472, 0.6472, 0.6448, 0.6444, 0.6436, 0.6434, 0.6426, 0.6419,\n          0.6416, 0.6408, 0.6404, 0.6383, 0.6382, 0.6374, 0.6372, 0.6359, 0.6354,\n          0.6352, 0.6346, 0.6338, 0.6310, 0.6308, 0.6302, 0.6280, 0.6277, 0.6273,\n          0.6272, 0.6272, 0.6271, 0.6265, 0.6265, 0.6265, 0.6259, 0.6255, 0.6248,\n          0.6243, 0.6242, 0.6241, 0.6237, 0.6229, 0.6223, 0.6221, 0.6215, 0.6213,\n          0.6207, 0.6207, 0.6203, 0.6199, 0.6196, 0.6195, 0.6185, 0.6184, 0.6183,\n          0.6177, 0.6163, 0.6160, 0.6150, 0.6144, 0.6144, 0.6139, 0.6139, 0.6137,\n          0.6135, 0.6129, 0.6125, 0.6124, 0.6108, 0.6106, 0.6104, 0.6101, 0.6100,\n          0.6099, 0.6097, 0.6092, 0.6089, 0.6089, 0.6085, 0.6085, 0.6079, 0.6076,\n          0.6070, 0.6070, 0.6068, 0.6063, 0.6057, 0.6057, 0.6056, 0.6055, 0.6053,\n          0.6051], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 4,\n          3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 4, 4, 3, 6, 3, 4, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4,\n          3, 3, 6, 3]),\n  'boxes': tensor([[ 1.5021e+02,  2.2275e+02,  9.2612e+02,  3.1100e+02],\n          [ 3.0236e+02,  2.3473e+02,  8.8168e+02,  3.0422e+02],\n          [ 5.0880e+02,  2.1115e+02,  5.5853e+02,  2.3331e+02],\n          [ 4.7810e+02,  1.9805e+02,  5.2191e+02,  2.2018e+02],\n          [ 4.3730e+02,  2.4722e+02,  9.2742e+02,  3.1818e+02],\n          [ 9.0321e+02,  3.0775e+02,  9.6117e+02,  3.3864e+02],\n          [ 7.1403e+02,  2.3229e+02,  7.5484e+02,  2.4963e+02],\n          [ 6.4448e+02,  2.3185e+02,  7.0163e+02,  2.4743e+02],\n          [ 9.7196e+01,  2.4972e+02,  8.0122e+02,  3.4492e+02],\n          [ 6.9588e+02,  2.2955e+02,  7.2308e+02,  2.4626e+02],\n          [ 6.8868e+02,  2.3618e+02,  7.3616e+02,  2.5229e+02],\n          [ 6.1711e+02,  2.2698e+02,  6.7091e+02,  2.4342e+02],\n          [ 1.1697e+02,  2.0081e+02,  5.3524e+02,  2.5107e+02],\n          [ 4.8558e+02,  2.0865e+02,  5.4637e+02,  2.3481e+02],\n          [ 7.4454e+02,  2.2994e+02,  7.8603e+02,  2.5308e+02],\n          [ 6.8199e+02,  2.3242e+02,  7.2622e+02,  2.4876e+02],\n          [ 5.3925e+02,  2.2372e+02,  5.9300e+02,  2.4156e+02],\n          [ 4.4184e+02,  2.0462e+02,  4.7448e+02,  2.2387e+02],\n          [ 6.6260e+02,  2.3085e+02,  7.0588e+02,  2.4724e+02],\n          [ 7.2336e+02,  2.3609e+02,  7.7372e+02,  2.5295e+02],\n          [ 5.9377e+02,  2.3010e+02,  6.5768e+02,  2.4654e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 2.1040e+02,  1.9925e+02,  3.2352e+02,  2.3685e+02],\n          [ 1.8045e+02,  1.5578e+02,  3.1142e+02,  1.9401e+02],\n          [ 4.2432e+02,  2.0136e+02,  4.5325e+02,  2.1855e+02],\n          [ 7.8032e+02,  2.2787e+02,  8.3353e+02,  2.5188e+02],\n          [ 6.4112e+02,  2.1902e+02,  6.7090e+02,  2.3924e+02],\n          [ 3.7899e+02,  2.4951e+02,  7.8740e+02,  3.0072e+02],\n          [ 1.6532e+02,  2.3143e+02,  3.2209e+02,  2.6452e+02],\n          [ 1.0642e+02,  2.3275e+02,  2.2752e+02,  2.5950e+02],\n          [-2.7386e+00,  2.8250e+02,  9.5569e+02,  8.3506e+02],\n          [ 5.6764e+02,  2.2579e+02,  6.0133e+02,  2.4452e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 1.3404e+02,  4.4818e+02,  9.4260e+02,  8.4707e+02],\n          [ 4.5860e+02,  4.7699e+02,  5.8809e+02,  5.3134e+02],\n          [ 1.6226e+02,  2.1322e+02,  3.1575e+02,  2.5415e+02],\n          [ 5.8245e+02,  2.3491e+02,  7.3097e+02,  2.5595e+02],\n          [ 9.5602e+02,  2.3172e+02,  9.5996e+02,  2.8035e+02],\n          [ 7.6245e+02,  2.3498e+02,  8.0948e+02,  2.5390e+02],\n          [ 8.5605e+02,  3.1974e+02,  9.6036e+02,  3.4395e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 2.1273e+00,  8.9889e+02,  9.6114e+02,  1.2628e+03],\n          [ 3.9504e+02,  2.1397e+02,  4.3043e+02,  2.2851e+02],\n          [ 3.4446e-01,  1.8749e+02,  7.8433e+01,  2.2499e+02],\n          [ 6.7294e+02,  2.5800e+02,  7.6941e+02,  2.8344e+02],\n          [ 6.0833e+02,  2.2191e+02,  6.4493e+02,  2.3915e+02],\n          [-4.1992e+00,  3.3792e+02,  9.5432e+02,  1.1725e+03],\n          [ 3.5863e+02,  2.0646e+02,  3.8990e+02,  2.3022e+02],\n          [ 4.6378e+02,  2.2039e+02,  5.2133e+02,  2.3814e+02],\n          [-5.5702e+00,  2.8453e+02,  8.7009e+02,  7.9807e+02],\n          [ 7.9385e+02,  2.3517e+02,  8.4780e+02,  2.5737e+02],\n          [ 8.8628e+02,  2.7585e+02,  9.6165e+02,  3.1819e+02],\n          [-1.4085e+01,  7.4535e+02,  9.4306e+02,  1.2644e+03],\n          [ 7.6982e-01,  4.5878e+02,  9.5951e+02,  8.9642e+02],\n          [ 3.8868e+02,  1.9604e+02,  4.2339e+02,  2.1367e+02],\n          [ 1.0205e+02,  2.3049e+02,  1.9162e+02,  2.5180e+02],\n          [ 1.5999e+02,  1.4399e+02,  2.6803e+02,  1.9518e+02],\n          [ 8.3596e+02,  2.8685e+02,  9.6574e+02,  3.4110e+02],\n          [ 4.0079e+02,  2.0236e+02,  4.3893e+02,  2.2204e+02],\n          [ 2.2829e-02,  1.7629e+02,  7.5778e+00,  2.1321e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.5052e+00,  3.2000e+02,  6.8636e+02,  8.1026e+02],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [ 8.5131e+00,  5.3675e+02,  6.7816e+02,  8.2705e+02],\n          [ 5.8866e+02,  2.2367e+02,  6.3574e+02,  2.4067e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 7.6864e+02,  3.0461e+02,  8.5804e+02,  3.3697e+02],\n          [ 3.2264e+02,  7.8797e+02,  3.9313e+02,  8.3845e+02],\n          [ 1.2273e+02,  3.3624e+02,  2.9674e+02,  3.8669e+02],\n          [ 4.9169e+02,  6.0451e+02,  5.7784e+02,  6.6474e+02],\n          [ 7.3638e+01,  1.6488e+02,  1.4301e+02,  2.1829e+02],\n          [ 8.8692e+02,  2.2889e+02,  9.5606e+02,  2.5846e+02],\n          [ 2.5381e+02,  1.2226e+03,  9.6300e+02,  1.2849e+03],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [-2.6988e+00,  2.1334e+02,  5.3616e+01,  2.4198e+02],\n          [ 8.3390e+02,  2.2830e+02,  8.8685e+02,  2.5244e+02],\n          [ 9.3645e+00,  2.3032e+02,  1.1699e+02,  2.6169e+02],\n          [ 5.2715e+02,  2.8053e+02,  5.8582e+02,  3.0946e+02],\n          [ 4.9539e+02,  2.8255e+02,  5.5250e+02,  3.0303e+02],\n          [ 8.7392e+02,  3.0168e+02,  9.6059e+02,  3.3615e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.8947e+02,  4.1488e+02,  6.1218e+02,  4.9252e+02],\n          [ 7.5197e+02,  2.5210e+02,  8.2422e+02,  2.7998e+02],\n          [ 2.5285e+02,  4.3588e+02,  9.3822e+02,  8.7275e+02],\n          [ 8.7054e+02,  2.2011e+02,  9.3370e+02,  2.4845e+02],\n          [ 9.0750e+02,  3.1742e+02,  9.6316e+02,  3.5016e+02],\n          [-4.3446e-01,  2.1810e+02,  2.3509e+01,  2.4937e+02],\n          [ 1.1742e+02,  2.1277e+02,  3.1611e+02,  2.5940e+02],\n          [ 9.6207e+01,  3.5631e+02,  9.5135e+02,  9.5458e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [ 3.7007e+02,  1.9513e+02,  4.0063e+02,  2.1357e+02],\n          [ 4.0936e+02,  5.2738e+02,  6.3709e+02,  6.3685e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 2.6593e+02,  1.8549e+02,  3.8638e+02,  2.2928e+02],\n          [ 4.9952e+02,  1.2543e+03,  8.9540e+02,  1.2808e+03],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [-4.4207e+00,  2.8687e+02,  9.5472e+02,  1.0455e+03]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\n\n\nTK - let‚Äôs visualize, visualize, visualize!\n\n# Extract scores, labels and boxes\nrandom_sample_pred_scores = random_sample_outputs_post_processed[0][\"scores\"]\nrandom_sample_pred_labels = random_sample_outputs_post_processed[0][\"labels\"]\nrandom_sample_pred_boxes = random_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_sample_pred_labels, random_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_sample_labels_to_plot}\")\n\n# Plot the random sample image with randomly predicted boxes (these will be very poor since the model is not trained on our data yet)\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=random_sample[\"image\"]),\n        boxes=random_sample_pred_boxes,\n        labels=random_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Labels with scores: ['Pred: not_hand (0.6839)', 'Pred: not_hand (0.6737)', 'Pred: not_hand (0.6616)', 'Pred: not_hand (0.6614)', 'Pred: not_hand (0.6574)', 'Pred: not_hand (0.6541)', 'Pred: not_hand (0.6478)', 'Pred: not_hand (0.6476)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6448)', 'Pred: not_hand (0.6444)', 'Pred: not_hand (0.6436)', 'Pred: not_hand (0.6434)', 'Pred: not_hand (0.6426)', 'Pred: not_hand (0.6419)', 'Pred: not_hand (0.6416)', 'Pred: not_hand (0.6408)', 'Pred: not_hand (0.6404)', 'Pred: not_hand (0.6383)', 'Pred: not_hand (0.6382)', 'Pred: not_hand (0.6374)', 'Pred: not_hand (0.6372)', 'Pred: not_hand (0.6359)', 'Pred: not_hand (0.6354)', 'Pred: not_hand (0.6352)', 'Pred: not_hand (0.6346)', 'Pred: not_hand (0.6338)', 'Pred: not_hand (0.631)', 'Pred: not_hand (0.6308)', 'Pred: not_hand (0.6302)', 'Pred: not_hand (0.628)', 'Pred: not_hand (0.6277)', 'Pred: not_hand (0.6273)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6271)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6265)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6259)', 'Pred: not_hand (0.6255)', 'Pred: not_hand (0.6248)', 'Pred: not_hand (0.6243)', 'Pred: not_hand (0.6242)', 'Pred: not_trash (0.6241)', 'Pred: not_hand (0.6237)', 'Pred: not_trash (0.6229)', 'Pred: not_hand (0.6223)', 'Pred: not_hand (0.6221)', 'Pred: not_hand (0.6215)', 'Pred: not_hand (0.6213)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6203)', 'Pred: not_hand (0.6199)', 'Pred: not_hand (0.6196)', 'Pred: not_hand (0.6195)', 'Pred: not_hand (0.6185)', 'Pred: trash_arm (0.6184)', 'Pred: not_trash (0.6183)', 'Pred: not_trash (0.6177)', 'Pred: not_hand (0.6163)', 'Pred: trash_arm (0.616)', 'Pred: not_hand (0.615)', 'Pred: not_trash (0.6144)', 'Pred: not_hand (0.6144)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6137)', 'Pred: not_hand (0.6135)', 'Pred: not_hand (0.6129)', 'Pred: not_hand (0.6125)', 'Pred: not_hand (0.6124)', 'Pred: not_hand (0.6108)', 'Pred: not_hand (0.6106)', 'Pred: not_trash (0.6104)', 'Pred: not_hand (0.6101)', 'Pred: not_trash (0.61)', 'Pred: not_hand (0.6099)', 'Pred: not_hand (0.6097)', 'Pred: not_trash (0.6092)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6085)', 'Pred: not_hand (0.6085)', 'Pred: not_trash (0.6079)', 'Pred: not_hand (0.6076)', 'Pred: not_trash (0.607)', 'Pred: not_trash (0.607)', 'Pred: not_hand (0.6068)', 'Pred: not_hand (0.6063)', 'Pred: not_trash (0.6057)', 'Pred: not_trash (0.6057)', 'Pred: not_hand (0.6056)', 'Pred: not_hand (0.6055)', 'Pred: trash_arm (0.6053)', 'Pred: not_hand (0.6051)']\n\n\n\n\n\n\n\n\n\nOur predictions are poor since our model hasn‚Äôt been specifically trained on our data.\nBut we can improve them by fine-tuning the model to our dataset.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---post-processing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---post-processing-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "10 TK - Post processing a single output",
    "text": "10 TK - Post processing a single output\nAlways a good step to get your model working end-to-end on a single sample and then upgrading it.\nTK - turn this into a nice table\nBox formats:\n\nStarting data (the input data) -&gt; [x_top_left, y_top_left, width, height] -&gt; XYWH (absolute)\nOut of image_processor.preprocess() -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized) -&gt; into model\n\nSee docs: https://huggingface.co/docs/transformers.js/en/custom_usage\n\nOut of model -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized)\n\nSee docs for forward() and output pred_boxes: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\n\nOut of image_processor.post_process_object_detection() -&gt; [x_top_left, y_top_left, x_bottom_right, y_bottom_right] -&gt; XYXY\n\nThis is PASCL VOC format - (xmin, ymin, xmax, ymax)\nSee docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.post_process_object_detection\n\n\n\n# Check the keys of the labels for the image\nrandom_sample_preprocessed[\"labels\"][0].keys()\n\ndict_keys(['size', 'image_id', 'class_labels', 'boxes', 'area', 'iscrowd', 'orig_size'])\n\n\n\nprint(f\"[INFO] Image original size: {random_sample_preprocessed.labels[0].orig_size} (height, width)\")\nprint(f\"[INFO] Image size after preprocessing: {random_sample_preprocessed.labels[0].size} (height, width)\")\n\n[INFO] Image original size: tensor([1280,  960]) (height, width)\n[INFO] Image size after preprocessing: tensor([640, 480]) (height, width)\n\n\n\n# Output logits will be post-processed to turn into prediction probabilities as well as boxes\n\n# Get pred probs from logits, this will be used for our threshold parameter in post_process_object_detection \ntorch.softmax(random_sample_outputs.logits, dim=-1)\n\ntensor([[[0.1471, 0.1309, 0.0925,  ..., 0.1878, 0.1475, 0.1423],\n         [0.1330, 0.1255, 0.1205,  ..., 0.1402, 0.1232, 0.1129],\n         [0.1611, 0.1492, 0.1167,  ..., 0.1474, 0.1334, 0.1272],\n         ...,\n         [0.0988, 0.0910, 0.1119,  ..., 0.1821, 0.1247, 0.1833],\n         [0.1683, 0.1479, 0.1100,  ..., 0.1419, 0.1297, 0.1310],\n         [0.1238, 0.1211, 0.1767,  ..., 0.1632, 0.1101, 0.1379]]],\n       grad_fn=&lt;SoftmaxBackward0&gt;)\n\n\n\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=0.3, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_sample_preprocessed[\"labels\"][0][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6839, 0.6737, 0.6616, 0.6614, 0.6574, 0.6541, 0.6478, 0.6476, 0.6475,\n          0.6475, 0.6472, 0.6472, 0.6448, 0.6444, 0.6436, 0.6434, 0.6426, 0.6419,\n          0.6416, 0.6408, 0.6404, 0.6383, 0.6382, 0.6374, 0.6372, 0.6359, 0.6354,\n          0.6352, 0.6346, 0.6338, 0.6310, 0.6308, 0.6302, 0.6280, 0.6277, 0.6273,\n          0.6272, 0.6272, 0.6271, 0.6265, 0.6265, 0.6265, 0.6259, 0.6255, 0.6248,\n          0.6243, 0.6242, 0.6241, 0.6237, 0.6229, 0.6223, 0.6221, 0.6215, 0.6213,\n          0.6207, 0.6207, 0.6203, 0.6199, 0.6196, 0.6195, 0.6185, 0.6184, 0.6183,\n          0.6177, 0.6163, 0.6160, 0.6150, 0.6144, 0.6144, 0.6139, 0.6139, 0.6137,\n          0.6135, 0.6129, 0.6125, 0.6124, 0.6108, 0.6106, 0.6104, 0.6101, 0.6100,\n          0.6099, 0.6097, 0.6092, 0.6089, 0.6089, 0.6085, 0.6085, 0.6079, 0.6076,\n          0.6070, 0.6070, 0.6068, 0.6063, 0.6057, 0.6057, 0.6056, 0.6055, 0.6053,\n          0.6051], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 4,\n          3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 4, 4, 3, 6, 3, 4, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4,\n          3, 3, 6, 3]),\n  'boxes': tensor([[ 1.5021e+02,  2.2275e+02,  9.2612e+02,  3.1100e+02],\n          [ 3.0236e+02,  2.3473e+02,  8.8168e+02,  3.0422e+02],\n          [ 5.0880e+02,  2.1115e+02,  5.5853e+02,  2.3331e+02],\n          [ 4.7810e+02,  1.9805e+02,  5.2191e+02,  2.2018e+02],\n          [ 4.3730e+02,  2.4722e+02,  9.2742e+02,  3.1818e+02],\n          [ 9.0321e+02,  3.0775e+02,  9.6117e+02,  3.3864e+02],\n          [ 7.1403e+02,  2.3229e+02,  7.5484e+02,  2.4963e+02],\n          [ 6.4448e+02,  2.3185e+02,  7.0163e+02,  2.4743e+02],\n          [ 9.7196e+01,  2.4972e+02,  8.0122e+02,  3.4492e+02],\n          [ 6.9588e+02,  2.2955e+02,  7.2308e+02,  2.4626e+02],\n          [ 6.8868e+02,  2.3618e+02,  7.3616e+02,  2.5229e+02],\n          [ 6.1711e+02,  2.2698e+02,  6.7091e+02,  2.4342e+02],\n          [ 1.1697e+02,  2.0081e+02,  5.3524e+02,  2.5107e+02],\n          [ 4.8558e+02,  2.0865e+02,  5.4637e+02,  2.3481e+02],\n          [ 7.4454e+02,  2.2994e+02,  7.8603e+02,  2.5308e+02],\n          [ 6.8199e+02,  2.3242e+02,  7.2622e+02,  2.4876e+02],\n          [ 5.3925e+02,  2.2372e+02,  5.9300e+02,  2.4156e+02],\n          [ 4.4184e+02,  2.0462e+02,  4.7448e+02,  2.2387e+02],\n          [ 6.6260e+02,  2.3085e+02,  7.0588e+02,  2.4724e+02],\n          [ 7.2336e+02,  2.3609e+02,  7.7372e+02,  2.5295e+02],\n          [ 5.9377e+02,  2.3010e+02,  6.5768e+02,  2.4654e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 2.1040e+02,  1.9925e+02,  3.2352e+02,  2.3685e+02],\n          [ 1.8045e+02,  1.5578e+02,  3.1142e+02,  1.9401e+02],\n          [ 4.2432e+02,  2.0136e+02,  4.5325e+02,  2.1855e+02],\n          [ 7.8032e+02,  2.2787e+02,  8.3353e+02,  2.5188e+02],\n          [ 6.4112e+02,  2.1902e+02,  6.7090e+02,  2.3924e+02],\n          [ 3.7899e+02,  2.4951e+02,  7.8740e+02,  3.0072e+02],\n          [ 1.6532e+02,  2.3143e+02,  3.2209e+02,  2.6452e+02],\n          [ 1.0642e+02,  2.3275e+02,  2.2752e+02,  2.5950e+02],\n          [-2.7386e+00,  2.8250e+02,  9.5569e+02,  8.3506e+02],\n          [ 5.6764e+02,  2.2579e+02,  6.0133e+02,  2.4452e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 1.3404e+02,  4.4818e+02,  9.4260e+02,  8.4707e+02],\n          [ 4.5860e+02,  4.7699e+02,  5.8809e+02,  5.3134e+02],\n          [ 1.6226e+02,  2.1322e+02,  3.1575e+02,  2.5415e+02],\n          [ 5.8245e+02,  2.3491e+02,  7.3097e+02,  2.5595e+02],\n          [ 9.5602e+02,  2.3172e+02,  9.5996e+02,  2.8035e+02],\n          [ 7.6245e+02,  2.3498e+02,  8.0948e+02,  2.5390e+02],\n          [ 8.5605e+02,  3.1974e+02,  9.6036e+02,  3.4395e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 2.1273e+00,  8.9889e+02,  9.6114e+02,  1.2628e+03],\n          [ 3.9504e+02,  2.1397e+02,  4.3043e+02,  2.2851e+02],\n          [ 3.4446e-01,  1.8749e+02,  7.8433e+01,  2.2499e+02],\n          [ 6.7294e+02,  2.5800e+02,  7.6941e+02,  2.8344e+02],\n          [ 6.0833e+02,  2.2191e+02,  6.4493e+02,  2.3915e+02],\n          [-4.1992e+00,  3.3792e+02,  9.5432e+02,  1.1725e+03],\n          [ 3.5863e+02,  2.0646e+02,  3.8990e+02,  2.3022e+02],\n          [ 4.6378e+02,  2.2039e+02,  5.2133e+02,  2.3814e+02],\n          [-5.5702e+00,  2.8453e+02,  8.7009e+02,  7.9807e+02],\n          [ 7.9385e+02,  2.3517e+02,  8.4780e+02,  2.5737e+02],\n          [ 8.8628e+02,  2.7585e+02,  9.6165e+02,  3.1819e+02],\n          [-1.4085e+01,  7.4535e+02,  9.4306e+02,  1.2644e+03],\n          [ 7.6982e-01,  4.5878e+02,  9.5951e+02,  8.9642e+02],\n          [ 3.8868e+02,  1.9604e+02,  4.2339e+02,  2.1367e+02],\n          [ 1.0205e+02,  2.3049e+02,  1.9162e+02,  2.5180e+02],\n          [ 1.5999e+02,  1.4399e+02,  2.6803e+02,  1.9518e+02],\n          [ 8.3596e+02,  2.8685e+02,  9.6574e+02,  3.4110e+02],\n          [ 4.0079e+02,  2.0236e+02,  4.3893e+02,  2.2204e+02],\n          [ 2.2829e-02,  1.7629e+02,  7.5778e+00,  2.1321e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.5052e+00,  3.2000e+02,  6.8636e+02,  8.1026e+02],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [ 8.5131e+00,  5.3675e+02,  6.7816e+02,  8.2705e+02],\n          [ 5.8866e+02,  2.2367e+02,  6.3574e+02,  2.4067e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 7.6864e+02,  3.0461e+02,  8.5804e+02,  3.3697e+02],\n          [ 3.2264e+02,  7.8797e+02,  3.9313e+02,  8.3845e+02],\n          [ 1.2273e+02,  3.3624e+02,  2.9674e+02,  3.8669e+02],\n          [ 4.9169e+02,  6.0451e+02,  5.7784e+02,  6.6474e+02],\n          [ 7.3638e+01,  1.6488e+02,  1.4301e+02,  2.1829e+02],\n          [ 8.8692e+02,  2.2889e+02,  9.5606e+02,  2.5846e+02],\n          [ 2.5381e+02,  1.2226e+03,  9.6300e+02,  1.2849e+03],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [-2.6988e+00,  2.1334e+02,  5.3616e+01,  2.4198e+02],\n          [ 8.3390e+02,  2.2830e+02,  8.8685e+02,  2.5244e+02],\n          [ 9.3645e+00,  2.3032e+02,  1.1699e+02,  2.6169e+02],\n          [ 5.2715e+02,  2.8053e+02,  5.8582e+02,  3.0946e+02],\n          [ 4.9539e+02,  2.8255e+02,  5.5250e+02,  3.0303e+02],\n          [ 8.7392e+02,  3.0168e+02,  9.6059e+02,  3.3615e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.8947e+02,  4.1488e+02,  6.1218e+02,  4.9252e+02],\n          [ 7.5197e+02,  2.5210e+02,  8.2422e+02,  2.7998e+02],\n          [ 2.5285e+02,  4.3588e+02,  9.3822e+02,  8.7275e+02],\n          [ 8.7054e+02,  2.2011e+02,  9.3370e+02,  2.4845e+02],\n          [ 9.0750e+02,  3.1742e+02,  9.6316e+02,  3.5016e+02],\n          [-4.3446e-01,  2.1810e+02,  2.3509e+01,  2.4937e+02],\n          [ 1.1742e+02,  2.1277e+02,  3.1611e+02,  2.5940e+02],\n          [ 9.6207e+01,  3.5631e+02,  9.5135e+02,  9.5458e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [ 3.7007e+02,  1.9513e+02,  4.0063e+02,  2.1357e+02],\n          [ 4.0936e+02,  5.2738e+02,  6.3709e+02,  6.3685e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 2.6593e+02,  1.8549e+02,  3.8638e+02,  2.2928e+02],\n          [ 4.9952e+02,  1.2543e+03,  8.9540e+02,  1.2808e+03],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [-4.4207e+00,  2.8687e+02,  9.5472e+02,  1.0455e+03]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\n\n\nTK - let‚Äôs visualize, visualize, visualize!\n\n# Extract scores, labels and boxes\nrandom_sample_pred_scores = random_sample_outputs_post_processed[0][\"scores\"]\nrandom_sample_pred_labels = random_sample_outputs_post_processed[0][\"labels\"]\nrandom_sample_pred_boxes = random_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_sample_pred_labels, random_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_sample_labels_to_plot}\")\n\n# Plot the random sample image with randomly predicted boxes (these will be very poor since the model is not trained on our data yet)\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=random_sample[\"image\"]),\n        boxes=random_sample_pred_boxes,\n        labels=random_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Labels with scores: ['Pred: not_hand (0.6839)', 'Pred: not_hand (0.6737)', 'Pred: not_hand (0.6616)', 'Pred: not_hand (0.6614)', 'Pred: not_hand (0.6574)', 'Pred: not_hand (0.6541)', 'Pred: not_hand (0.6478)', 'Pred: not_hand (0.6476)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6448)', 'Pred: not_hand (0.6444)', 'Pred: not_hand (0.6436)', 'Pred: not_hand (0.6434)', 'Pred: not_hand (0.6426)', 'Pred: not_hand (0.6419)', 'Pred: not_hand (0.6416)', 'Pred: not_hand (0.6408)', 'Pred: not_hand (0.6404)', 'Pred: not_hand (0.6383)', 'Pred: not_hand (0.6382)', 'Pred: not_hand (0.6374)', 'Pred: not_hand (0.6372)', 'Pred: not_hand (0.6359)', 'Pred: not_hand (0.6354)', 'Pred: not_hand (0.6352)', 'Pred: not_hand (0.6346)', 'Pred: not_hand (0.6338)', 'Pred: not_hand (0.631)', 'Pred: not_hand (0.6308)', 'Pred: not_hand (0.6302)', 'Pred: not_hand (0.628)', 'Pred: not_hand (0.6277)', 'Pred: not_hand (0.6273)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6271)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6265)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6259)', 'Pred: not_hand (0.6255)', 'Pred: not_hand (0.6248)', 'Pred: not_hand (0.6243)', 'Pred: not_hand (0.6242)', 'Pred: not_trash (0.6241)', 'Pred: not_hand (0.6237)', 'Pred: not_trash (0.6229)', 'Pred: not_hand (0.6223)', 'Pred: not_hand (0.6221)', 'Pred: not_hand (0.6215)', 'Pred: not_hand (0.6213)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6203)', 'Pred: not_hand (0.6199)', 'Pred: not_hand (0.6196)', 'Pred: not_hand (0.6195)', 'Pred: not_hand (0.6185)', 'Pred: trash_arm (0.6184)', 'Pred: not_trash (0.6183)', 'Pred: not_trash (0.6177)', 'Pred: not_hand (0.6163)', 'Pred: trash_arm (0.616)', 'Pred: not_hand (0.615)', 'Pred: not_trash (0.6144)', 'Pred: not_hand (0.6144)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6137)', 'Pred: not_hand (0.6135)', 'Pred: not_hand (0.6129)', 'Pred: not_hand (0.6125)', 'Pred: not_hand (0.6124)', 'Pred: not_hand (0.6108)', 'Pred: not_hand (0.6106)', 'Pred: not_trash (0.6104)', 'Pred: not_hand (0.6101)', 'Pred: not_trash (0.61)', 'Pred: not_hand (0.6099)', 'Pred: not_hand (0.6097)', 'Pred: not_trash (0.6092)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6085)', 'Pred: not_hand (0.6085)', 'Pred: not_trash (0.6079)', 'Pred: not_hand (0.6076)', 'Pred: not_trash (0.607)', 'Pred: not_trash (0.607)', 'Pred: not_hand (0.6068)', 'Pred: not_hand (0.6063)', 'Pred: not_trash (0.6057)', 'Pred: not_trash (0.6057)', 'Pred: not_hand (0.6056)', 'Pred: not_hand (0.6055)', 'Pred: trash_arm (0.6053)', 'Pred: not_hand (0.6051)']\n\n\n\n\n\n\n\n\n\nOur predictions are poor since our model hasn‚Äôt been specifically trained on our data.\nBut we can improve them by fine-tuning the model to our dataset.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#aside-processor-to-model-pattern",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#aside-processor-to-model-pattern",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "7 Aside: Processor to Model Pattern",
    "text": "7 Aside: Processor to Model Pattern\nMany Hugging Face data loading and modelling workflows as well as machine learning workflows in general follow the pattern of:\n\nData -&gt; Preprocessor -&gt; Model\n\n\n\n\nWorkflow we‚Äôll follow to create our own custom object detection model. We‚Äôll start with images labelled with boxes of trash, bin and hand (and other classes), preprocess the process to be ready for use with a model and then we‚Äôll train the model on our preprocessed custom data.\n\n\nMeaning, the raw input data gets preprocessed or transformed in some way before being passed to a model.\nPreprocessors and models are often loaded with an Auto Class.\nAn Auto Class pairs a preprocessor and model based on their model name or key.\nFor example:\nfrom transformers import AutoProcessor, AutoModel\n\n# Load raw data\nraw_data = load_data()\n\n# Define target model name\nMODEL_NAME = \"...\"\n\n# Load preprocessor and model (these two are often paired)\npreprocessor = AutoProcessor.from_pretrained(MODEL_NAME)\nmodel = AutoModel.from_pretrained(MODEL_NAME)\n\n# Preprocess data\npreprocessed_data = preprocessor.preprocess(raw_data)\n\n# Pass preprocessed data to model\noutput = model(preprocessed_data)\nThis is the same for our Trashify üöÆ project.\nWe‚Äôve got our raw data (images and bounding boxes), however, they need to be preprocessed in order for our model to be able to handle them.\nPreviously we tried to pass a sample of raw data to our model and this errored.\nWe can fix this by first preprocessing our raw data with our model‚Äôs pair preprocessor and then passing to our model again.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#aside-preprocessor-to-model-pattern",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#aside-preprocessor-to-model-pattern",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "7 Aside: Preprocessor to Model Pattern",
    "text": "7 Aside: Preprocessor to Model Pattern\nMany Hugging Face data loading and modelling workflows as well as machine learning workflows in general follow the pattern of:\n\nData -&gt; Preprocessor -&gt; Model\n\nMeaning, the raw input data gets preprocessed or transformed in some way before being passed to a model.\nPreprocessors and models are often loaded with an Auto Class.\nAn Auto Class pairs a preprocessor and model based on their model name or key.\nFor example:\nfrom transformers import AutoProcessor, AutoModel\n\n# Load raw data\nraw_data = load_data()\n\n# Define target model name\nMODEL_NAME = \"...\"\n\n# Load preprocessor and model (these two are often paired)\npreprocessor = AutoProcessor.from_pretrained(MODEL_NAME)\nmodel = AutoModel.from_pretrained(MODEL_NAME)\n\n# Preprocess data\npreprocessed_data = preprocessor.preprocess(raw_data)\n\n# Pass preprocessed data to model\noutput = model(preprocessed_data)\nThis is the same for our Trashify üöÆ project.\nWe‚Äôve got our raw data (images and bounding boxes), however, they need to be preprocessed in order for our model to be able to handle them.\nPreviously we tried to pass a sample of raw data to our model and this errored.\nWe can fix this by first preprocessing our raw data with our model‚Äôs pair preprocessor and then passing to our model again.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk-preprocessing-our-annotations-for-use-with-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk-preprocessing-our-annotations-for-use-with-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 TK Preprocessing our annotations for use with our model",
    "text": "9 TK Preprocessing our annotations for use with our model\nTK - discuss how we‚Äôve converted an image, now to convert our annotations\nOur image_processor.processor method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n9.1 TK - Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by image_processor.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[18], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[16], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100])\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.2 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on our random_sample from before.\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Inpsect our random sample (in original format)\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 682,\n 'annotations': {'file_name': ['10d2d2e1-039d-4726-8d66-86b6eeefa0e3.jpeg',\n   '10d2d2e1-039d-4726-8d66-86b6eeefa0e3.jpeg',\n   '10d2d2e1-039d-4726-8d66-86b6eeefa0e3.jpeg'],\n  'image_id': [682, 682, 682],\n  'category_id': [1, 5, 0],\n  'bbox': [[14.199999809265137,\n    598.2999877929688,\n    492.1000061035156,\n    670.7000122070312],\n   [401.29998779296875, 691.4000244140625, 213.0, 185.10000610351562],\n   [8.899999618530273,\n    385.79998779296875,\n    941.7999877929688,\n    511.6000061035156]],\n  'iscrowd': [0, 0, 0],\n  'area': [330051.46875, 39426.30078125, 481824.875]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 682,\n 'annotations': [{'image_id': 682,\n   'category_id': 1,\n   'bbox': [14.199999809265137,\n    598.2999877929688,\n    492.1000061035156,\n    670.7000122070312],\n   'area': 330051.46875,\n   'iscrowd': 0},\n  {'image_id': 682,\n   'category_id': 5,\n   'bbox': [401.29998779296875, 691.4000244140625, 213.0, 185.10000610351562],\n   'area': 39426.30078125,\n   'iscrowd': 0},\n  {'image_id': 682,\n   'category_id': 0,\n   'bbox': [8.899999618530273,\n    385.79998779296875,\n    941.7999877929688,\n    511.6000061035156],\n   'area': 481824.875,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.3 TK - Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with image_processor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYXY format and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\nThe `max_size` parameter is deprecated and will be removed in v4.26. Please specify in `size['longest_edge'] instead`.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() in our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'pixel_mask', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([ 82512.8672,   9856.5752, 120456.2188]),\n  'boxes': tensor([[0.2711, 0.7294, 0.5126, 0.5240],\n        [0.5290, 0.6125, 0.2219, 0.1446],\n        [0.4998, 0.5012, 0.9810, 0.3997]]),\n  'class_labels': tensor([1, 5, 0]),\n  'image_id': tensor([682]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 480])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample_preprocessed[\"pixel_values\"][0].unsqueeze(0), # model expects input [batch_size, color_channels, height, width]\n                              pixel_mask=None)\nrandom_sample_outputs\n\nConditionalDetrObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[ 0.0454, -0.0711, -0.4182,  ...,  0.2894,  0.0483,  0.0123],\n         [-0.1012, -0.1597, -0.1998,  ..., -0.0486, -0.1782, -0.2652],\n         [ 0.1434,  0.0662, -0.1789,  ...,  0.0542, -0.0454, -0.0935],\n         ...,\n         [-0.3237, -0.4062, -0.1989,  ...,  0.2875, -0.0910,  0.2941],\n         [ 0.1114, -0.0177, -0.3141,  ..., -0.0593, -0.1495, -0.1393],\n         [-0.1669, -0.1889,  0.1891,  ...,  0.1096, -0.2838, -0.0589]]],\n       grad_fn=&lt;ViewBackward0&gt;), pred_boxes=tensor([[[0.8267, 0.6865, 0.3329, 0.6065],\n         [0.6527, 0.1801, 0.0381, 0.0135],\n         [0.8987, 0.5712, 0.2006, 0.2254],\n         ...,\n         [0.3474, 0.3090, 0.6915, 0.1174],\n         [0.8373, 0.5285, 0.3022, 0.1941],\n         [0.0810, 0.2927, 0.1605, 0.0432]]], grad_fn=&lt;SigmoidBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 0.2234,  0.0444,  0.9698,  ..., -1.0443, -0.1137,  0.3582],\n         [ 0.2838, -0.6804,  0.3960,  ...,  0.7212,  0.3551,  0.3658],\n         [ 0.5051, -0.0147,  0.5885,  ..., -1.2090, -0.0941, -0.0717],\n         ...,\n         [ 0.4280, -1.5612,  0.3054,  ..., -0.8336,  0.0790, -0.3486],\n         [ 0.2858, -0.0132,  0.5693,  ..., -1.1525, -0.1821, -0.1940],\n         [ 0.2017,  0.1479, -0.3311,  ..., -1.1814, -0.0651, -0.0979]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=tensor([[[-0.3918,  0.4741, -0.3829,  ..., -0.5659,  0.4583,  0.3095],\n         [ 0.1083,  0.5762, -0.0826,  ...,  0.2379,  0.1619,  0.3629],\n         [ 0.1359,  0.6453, -0.1079,  ..., -0.1028,  0.1878,  0.3184],\n         ...,\n         [ 0.1694,  0.8391, -0.1381,  ...,  0.1942,  0.0713,  0.2323],\n         [ 0.1709,  0.6931, -0.0919,  ...,  0.2428,  0.0508,  0.1932],\n         [-0.1842,  0.4742, -0.1434,  ..., -0.1434,  0.2518,  0.2516]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), encoder_hidden_states=None, encoder_attentions=None)\n\n\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'encoder_last_hidden_state'])\n\n\n\n# We get 300 total boxes with shape the same as our number of labels\nrandom_sample_outputs.logits.shape\n\ntorch.Size([1, 300, 7])\n\n\n\nrandom_sample_outputs.pred_boxes.shape\n\ntorch.Size([1, 300, 4])\n\n\nTK - note: see forward() method for output format of boxes -&gt; https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\nFrom the docs:\n\nReturns ‚Ä¶ pred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\n\n# Example pred box output\n# Box output comes in the form CXCYWH normalized (e.g. [center_X, center_Y, width, height]) to be between 0 and 1, this is in the docs\nrandom_sample_outputs.pred_boxes[:, 0]\n\ntensor([[0.8267, 0.6865, 0.3329, 0.6065]], grad_fn=&lt;SelectBackward0&gt;)",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk-preprocessing-our-annotations",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk-preprocessing-our-annotations",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 TK Preprocessing our annotations",
    "text": "9 TK Preprocessing our annotations\nOne of the most tricky parts of any machine learning problem is getting your data in the right format.\nWe‚Äôve done it for our images.\nNow let‚Äôs do it for our annotations.\n\n9.1 Trying to preprocess a single annotation\nRecall in a previous section we tried to preprocess a single image and its annotation.\nAnd we got an error.\nLet‚Äôs make sure we‚Äôre not crazy and this is still the case.\n\n# Preprocess a single image and annotation pair\nimage_processor.preprocess(\n    images=random_sample[\"image\"], \n    annotations=random_sample[\"annotations\"]\n)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[70], line 2\n      1 # Preprocess a single image and annotation pair\n----&gt; 2 image_processor.preprocess(\n      3     images=random_sample[\"image\"], \n      4     annotations=random_sample[\"annotations\"]\n      5 )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/image_processing_conditional_detr.py:1422, in ConditionalDetrImageProcessor.preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, resample, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, format, return_tensors, data_format, input_data_format, pad_size, **kwargs)\n   1420 format = AnnotationFormat(format)\n   1421 if annotations is not None:\n-&gt; 1422     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n   1424 if (\n   1425     masks_path is not None\n   1426     and format == AnnotationFormat.COCO_PANOPTIC\n   1427     and not isinstance(masks_path, (pathlib.Path, str))\n   1428 ):\n   1429     raise ValueError(\n   1430         \"The path to the directory containing the mask PNG files should be provided as a\"\n   1431         f\" `pathlib.Path` or string object, but is {type(masks_path)} instead.\"\n   1432     )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:851, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    849 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    850     if not valid_coco_detection_annotations(annotations):\n--&gt; 851         raise ValueError(\n    852             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    853             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    854             \"being a list of annotations in the COCO format.\"\n    855         )\n    857 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    858     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nWonderful!\nWe‚Äôre not crazy‚Ä¶\nBut we still get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nIn this section, we‚Äôre going to fix it.\n\n\n9.2 Discussing the format our annotations need to be in\nAccording the error we got in the previous segment, the transformers.ConditionalDetrImageProcessor.preprocess method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n\n9.3 Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by transformers.ConditionalDetrImageProcessor.preprocess.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[73], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[71], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100]) # correct number of values\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.4 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face in the beginning).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on our random_sample from before.\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Inpsect our random sample (in original format)\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 149,\n 'annotations': {'file_name': ['a9b1131c-6d45-48c9-ab91-dbecb9baa187.jpeg',\n   'a9b1131c-6d45-48c9-ab91-dbecb9baa187.jpeg',\n   'a9b1131c-6d45-48c9-ab91-dbecb9baa187.jpeg',\n   'a9b1131c-6d45-48c9-ab91-dbecb9baa187.jpeg'],\n  'image_id': [149, 149, 149, 149],\n  'category_id': [5, 0, 1, 4],\n  'bbox': [[216.3000030517578,\n    508.79998779296875,\n    389.20001220703125,\n    369.29998779296875],\n   [389.0, 372.6000061035156, 264.8999938964844, 401.1000061035156],\n   [51.599998474121094,\n    697.9000244140625,\n    358.20001220703125,\n    375.6000061035156],\n   [8.899999618530273,\n    947.7999877929688,\n    269.6000061035156,\n    320.8999938964844]],\n  'iscrowd': [0, 0, 0, 0],\n  'area': [143731.5625, 106251.390625, 134539.921875, 86514.640625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 149,\n 'annotations': [{'image_id': 149,\n   'category_id': 5,\n   'bbox': [216.3000030517578,\n    508.79998779296875,\n    389.20001220703125,\n    369.29998779296875],\n   'area': 143731.5625,\n   'iscrowd': 0},\n  {'image_id': 149,\n   'category_id': 0,\n   'bbox': [389.0, 372.6000061035156, 264.8999938964844, 401.1000061035156],\n   'area': 106251.390625,\n   'iscrowd': 0},\n  {'image_id': 149,\n   'category_id': 1,\n   'bbox': [51.599998474121094,\n    697.9000244140625,\n    358.20001220703125,\n    375.6000061035156],\n   'area': 134539.921875,\n   'iscrowd': 0},\n  {'image_id': 149,\n   'category_id': 4,\n   'bbox': [8.899999618530273,\n    947.7999877929688,\n    269.6000061035156,\n    320.8999938964844],\n   'area': 86514.640625,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we may have just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.5 Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with transformers.ConditionalDetrImageProcessor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYWH format (the format we downloaded them in) and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\nThe `max_size` parameter is deprecated and will be removed in v4.26. Please specify in `size['longest_edge'] instead`.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() method of our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'pixel_mask', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([ 82512.8672,   9856.5752, 120456.2188]),\n  'boxes': tensor([[0.2711, 0.7294, 0.5126, 0.5240],\n        [0.5290, 0.6125, 0.2219, 0.1446],\n        [0.4998, 0.5012, 0.9810, 0.3997]]),\n  'class_labels': tensor([1, 5, 0]),\n  'image_id': tensor([682]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 480])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\nWoohoo!\nWe‚Äôve done it!\nWe‚Äôve officially preprocessed a single sample of our own data, both the image and its annotation pair.\nWe‚Äôll write some code later on to scale this up to our whole dataset.\nFor now, let‚Äôs see what it looks like postprocessing a single output.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#tk---postprocessing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#tk---postprocessing-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "10 TK - Postprocessing a single output",
    "text": "10 TK - Postprocessing a single output\nUPTOHERE - writing about postprocessing a single output from the model to see what it looks like, can plot the random outputs from the model and see that they are poor predictions and then go from there * goal of this section is to go end-to-end on a single sample and showcase the default poor predictions of a model, then we can improve them later on with fine-tuning\nTK Tip: Always a good step to get your model working end-to-end on a single sample and then upgrading it.\nTK image - turn this into a nice table/image\nBox formats:\n\nStarting data (the input data) -&gt; [x_top_left, y_top_left, width, height] -&gt; XYWH (absolute)\nOut of image_processor.preprocess() -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized) -&gt; into model\n\nSee docs: https://huggingface.co/docs/transformers.js/en/custom_usage\n\nOut of model -&gt; [center_x, center_y, width, height] -&gt; CXCYWH (normalized)\n\nSee docs for forward() and output pred_boxes: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection.forward\n\nOut of image_processor.post_process_object_detection() -&gt; [x_top_left, y_top_left, x_bottom_right, y_bottom_right] -&gt; XYXY\n\nThis is PASCL VOC format - (xmin, ymin, xmax, ymax)\nSee docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.post_process_object_detection\n\n\n\n# Check the keys of the labels for the image\nrandom_sample_preprocessed[\"labels\"][0].keys()\n\ndict_keys(['size', 'image_id', 'class_labels', 'boxes', 'area', 'iscrowd', 'orig_size'])\n\n\n\nprint(f\"[INFO] Image original size: {random_sample_preprocessed.labels[0].orig_size} (height, width)\")\nprint(f\"[INFO] Image size after preprocessing: {random_sample_preprocessed.labels[0].size} (height, width)\")\n\n[INFO] Image original size: tensor([1280,  960]) (height, width)\n[INFO] Image size after preprocessing: tensor([640, 480]) (height, width)\n\n\n\n# Output logits will be post-processed to turn into prediction probabilities as well as boxes\n\n# Get pred probs from logits, this will be used for our threshold parameter in post_process_object_detection \ntorch.softmax(random_sample_outputs.logits, dim=-1)\n\ntensor([[[0.1471, 0.1309, 0.0925,  ..., 0.1878, 0.1475, 0.1423],\n         [0.1330, 0.1255, 0.1205,  ..., 0.1402, 0.1232, 0.1129],\n         [0.1611, 0.1492, 0.1167,  ..., 0.1474, 0.1334, 0.1272],\n         ...,\n         [0.0988, 0.0910, 0.1119,  ..., 0.1821, 0.1247, 0.1833],\n         [0.1683, 0.1479, 0.1100,  ..., 0.1419, 0.1297, 0.1310],\n         [0.1238, 0.1211, 0.1767,  ..., 0.1632, 0.1101, 0.1379]]],\n       grad_fn=&lt;SoftmaxBackward0&gt;)\n\n\n\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=0.3, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_sample_preprocessed[\"labels\"][0][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6839, 0.6737, 0.6616, 0.6614, 0.6574, 0.6541, 0.6478, 0.6476, 0.6475,\n          0.6475, 0.6472, 0.6472, 0.6448, 0.6444, 0.6436, 0.6434, 0.6426, 0.6419,\n          0.6416, 0.6408, 0.6404, 0.6383, 0.6382, 0.6374, 0.6372, 0.6359, 0.6354,\n          0.6352, 0.6346, 0.6338, 0.6310, 0.6308, 0.6302, 0.6280, 0.6277, 0.6273,\n          0.6272, 0.6272, 0.6271, 0.6265, 0.6265, 0.6265, 0.6259, 0.6255, 0.6248,\n          0.6243, 0.6242, 0.6241, 0.6237, 0.6229, 0.6223, 0.6221, 0.6215, 0.6213,\n          0.6207, 0.6207, 0.6203, 0.6199, 0.6196, 0.6195, 0.6185, 0.6184, 0.6183,\n          0.6177, 0.6163, 0.6160, 0.6150, 0.6144, 0.6144, 0.6139, 0.6139, 0.6137,\n          0.6135, 0.6129, 0.6125, 0.6124, 0.6108, 0.6106, 0.6104, 0.6101, 0.6100,\n          0.6099, 0.6097, 0.6092, 0.6089, 0.6089, 0.6085, 0.6085, 0.6079, 0.6076,\n          0.6070, 0.6070, 0.6068, 0.6063, 0.6057, 0.6057, 0.6056, 0.6055, 0.6053,\n          0.6051], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 4,\n          3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 4, 4, 3, 6, 3, 4, 3, 3, 3, 3,\n          3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4,\n          3, 3, 6, 3]),\n  'boxes': tensor([[ 1.5021e+02,  2.2275e+02,  9.2612e+02,  3.1100e+02],\n          [ 3.0236e+02,  2.3473e+02,  8.8168e+02,  3.0422e+02],\n          [ 5.0880e+02,  2.1115e+02,  5.5853e+02,  2.3331e+02],\n          [ 4.7810e+02,  1.9805e+02,  5.2191e+02,  2.2018e+02],\n          [ 4.3730e+02,  2.4722e+02,  9.2742e+02,  3.1818e+02],\n          [ 9.0321e+02,  3.0775e+02,  9.6117e+02,  3.3864e+02],\n          [ 7.1403e+02,  2.3229e+02,  7.5484e+02,  2.4963e+02],\n          [ 6.4448e+02,  2.3185e+02,  7.0163e+02,  2.4743e+02],\n          [ 9.7196e+01,  2.4972e+02,  8.0122e+02,  3.4492e+02],\n          [ 6.9588e+02,  2.2955e+02,  7.2308e+02,  2.4626e+02],\n          [ 6.8868e+02,  2.3618e+02,  7.3616e+02,  2.5229e+02],\n          [ 6.1711e+02,  2.2698e+02,  6.7091e+02,  2.4342e+02],\n          [ 1.1697e+02,  2.0081e+02,  5.3524e+02,  2.5107e+02],\n          [ 4.8558e+02,  2.0865e+02,  5.4637e+02,  2.3481e+02],\n          [ 7.4454e+02,  2.2994e+02,  7.8603e+02,  2.5308e+02],\n          [ 6.8199e+02,  2.3242e+02,  7.2622e+02,  2.4876e+02],\n          [ 5.3925e+02,  2.2372e+02,  5.9300e+02,  2.4156e+02],\n          [ 4.4184e+02,  2.0462e+02,  4.7448e+02,  2.2387e+02],\n          [ 6.6260e+02,  2.3085e+02,  7.0588e+02,  2.4724e+02],\n          [ 7.2336e+02,  2.3609e+02,  7.7372e+02,  2.5295e+02],\n          [ 5.9377e+02,  2.3010e+02,  6.5768e+02,  2.4654e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 2.1040e+02,  1.9925e+02,  3.2352e+02,  2.3685e+02],\n          [ 1.8045e+02,  1.5578e+02,  3.1142e+02,  1.9401e+02],\n          [ 4.2432e+02,  2.0136e+02,  4.5325e+02,  2.1855e+02],\n          [ 7.8032e+02,  2.2787e+02,  8.3353e+02,  2.5188e+02],\n          [ 6.4112e+02,  2.1902e+02,  6.7090e+02,  2.3924e+02],\n          [ 3.7899e+02,  2.4951e+02,  7.8740e+02,  3.0072e+02],\n          [ 1.6532e+02,  2.3143e+02,  3.2209e+02,  2.6452e+02],\n          [ 1.0642e+02,  2.3275e+02,  2.2752e+02,  2.5950e+02],\n          [-2.7386e+00,  2.8250e+02,  9.5569e+02,  8.3506e+02],\n          [ 5.6764e+02,  2.2579e+02,  6.0133e+02,  2.4452e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 1.3404e+02,  4.4818e+02,  9.4260e+02,  8.4707e+02],\n          [ 4.5860e+02,  4.7699e+02,  5.8809e+02,  5.3134e+02],\n          [ 1.6226e+02,  2.1322e+02,  3.1575e+02,  2.5415e+02],\n          [ 5.8245e+02,  2.3491e+02,  7.3097e+02,  2.5595e+02],\n          [ 9.5602e+02,  2.3172e+02,  9.5996e+02,  2.8035e+02],\n          [ 7.6245e+02,  2.3498e+02,  8.0948e+02,  2.5390e+02],\n          [ 8.5605e+02,  3.1974e+02,  9.6036e+02,  3.4395e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 2.1273e+00,  8.9889e+02,  9.6114e+02,  1.2628e+03],\n          [ 3.9504e+02,  2.1397e+02,  4.3043e+02,  2.2851e+02],\n          [ 3.4446e-01,  1.8749e+02,  7.8433e+01,  2.2499e+02],\n          [ 6.7294e+02,  2.5800e+02,  7.6941e+02,  2.8344e+02],\n          [ 6.0833e+02,  2.2191e+02,  6.4493e+02,  2.3915e+02],\n          [-4.1992e+00,  3.3792e+02,  9.5432e+02,  1.1725e+03],\n          [ 3.5863e+02,  2.0646e+02,  3.8990e+02,  2.3022e+02],\n          [ 4.6378e+02,  2.2039e+02,  5.2133e+02,  2.3814e+02],\n          [-5.5702e+00,  2.8453e+02,  8.7009e+02,  7.9807e+02],\n          [ 7.9385e+02,  2.3517e+02,  8.4780e+02,  2.5737e+02],\n          [ 8.8628e+02,  2.7585e+02,  9.6165e+02,  3.1819e+02],\n          [-1.4085e+01,  7.4535e+02,  9.4306e+02,  1.2644e+03],\n          [ 7.6982e-01,  4.5878e+02,  9.5951e+02,  8.9642e+02],\n          [ 3.8868e+02,  1.9604e+02,  4.2339e+02,  2.1367e+02],\n          [ 1.0205e+02,  2.3049e+02,  1.9162e+02,  2.5180e+02],\n          [ 1.5999e+02,  1.4399e+02,  2.6803e+02,  1.9518e+02],\n          [ 8.3596e+02,  2.8685e+02,  9.6574e+02,  3.4110e+02],\n          [ 4.0079e+02,  2.0236e+02,  4.3893e+02,  2.2204e+02],\n          [ 2.2829e-02,  1.7629e+02,  7.5778e+00,  2.1321e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.5052e+00,  3.2000e+02,  6.8636e+02,  8.1026e+02],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [ 8.5131e+00,  5.3675e+02,  6.7816e+02,  8.2705e+02],\n          [ 5.8866e+02,  2.2367e+02,  6.3574e+02,  2.4067e+02],\n          [ 1.4028e+01,  2.9742e+02,  6.6831e+02,  7.8667e+02],\n          [ 7.6864e+02,  3.0461e+02,  8.5804e+02,  3.3697e+02],\n          [ 3.2264e+02,  7.8797e+02,  3.9313e+02,  8.3845e+02],\n          [ 1.2273e+02,  3.3624e+02,  2.9674e+02,  3.8669e+02],\n          [ 4.9169e+02,  6.0451e+02,  5.7784e+02,  6.6474e+02],\n          [ 7.3638e+01,  1.6488e+02,  1.4301e+02,  2.1829e+02],\n          [ 8.8692e+02,  2.2889e+02,  9.5606e+02,  2.5846e+02],\n          [ 2.5381e+02,  1.2226e+03,  9.6300e+02,  1.2849e+03],\n          [-1.0880e+01,  4.2899e+02,  9.4746e+02,  8.7154e+02],\n          [-2.6988e+00,  2.1334e+02,  5.3616e+01,  2.4198e+02],\n          [ 8.3390e+02,  2.2830e+02,  8.8685e+02,  2.5244e+02],\n          [ 9.3645e+00,  2.3032e+02,  1.1699e+02,  2.6169e+02],\n          [ 5.2715e+02,  2.8053e+02,  5.8582e+02,  3.0946e+02],\n          [ 4.9539e+02,  2.8255e+02,  5.5250e+02,  3.0303e+02],\n          [ 8.7392e+02,  3.0168e+02,  9.6059e+02,  3.3615e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.8947e+02,  4.1488e+02,  6.1218e+02,  4.9252e+02],\n          [ 7.5197e+02,  2.5210e+02,  8.2422e+02,  2.7998e+02],\n          [ 2.5285e+02,  4.3588e+02,  9.3822e+02,  8.7275e+02],\n          [ 8.7054e+02,  2.2011e+02,  9.3370e+02,  2.4845e+02],\n          [ 9.0750e+02,  3.1742e+02,  9.6316e+02,  3.5016e+02],\n          [-4.3446e-01,  2.1810e+02,  2.3509e+01,  2.4937e+02],\n          [ 1.1742e+02,  2.1277e+02,  3.1611e+02,  2.5940e+02],\n          [ 9.6207e+01,  3.5631e+02,  9.5135e+02,  9.5458e+02],\n          [ 2.7833e+02,  4.6456e+02,  9.4896e+02,  9.1551e+02],\n          [ 4.0679e+02,  2.0669e+02,  4.4338e+02,  2.2396e+02],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [ 3.7007e+02,  1.9513e+02,  4.0063e+02,  2.1357e+02],\n          [ 4.0936e+02,  5.2738e+02,  6.3709e+02,  6.3685e+02],\n          [ 6.5659e+02,  2.3656e+02,  7.1577e+02,  2.5289e+02],\n          [ 7.2771e+02,  2.3997e+02,  7.9102e+02,  2.5931e+02],\n          [ 2.6593e+02,  1.8549e+02,  3.8638e+02,  2.2928e+02],\n          [ 4.9952e+02,  1.2543e+03,  8.9540e+02,  1.2808e+03],\n          [-1.1057e+01,  2.5194e+02,  3.7717e+02,  7.1443e+02],\n          [-4.4207e+00,  2.8687e+02,  9.5472e+02,  1.0455e+03]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\n\n\nTK - let‚Äôs visualize, visualize, visualize!\n\n# Extract scores, labels and boxes\nrandom_sample_pred_scores = random_sample_outputs_post_processed[0][\"scores\"]\nrandom_sample_pred_labels = random_sample_outputs_post_processed[0][\"labels\"]\nrandom_sample_pred_boxes = random_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_sample_pred_labels, random_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_sample_labels_to_plot}\")\n\n# Plot the random sample image with randomly predicted boxes (these will be very poor since the model is not trained on our data yet)\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=random_sample[\"image\"]),\n        boxes=random_sample_pred_boxes,\n        labels=random_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Labels with scores: ['Pred: not_hand (0.6839)', 'Pred: not_hand (0.6737)', 'Pred: not_hand (0.6616)', 'Pred: not_hand (0.6614)', 'Pred: not_hand (0.6574)', 'Pred: not_hand (0.6541)', 'Pred: not_hand (0.6478)', 'Pred: not_hand (0.6476)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6475)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6472)', 'Pred: not_hand (0.6448)', 'Pred: not_hand (0.6444)', 'Pred: not_hand (0.6436)', 'Pred: not_hand (0.6434)', 'Pred: not_hand (0.6426)', 'Pred: not_hand (0.6419)', 'Pred: not_hand (0.6416)', 'Pred: not_hand (0.6408)', 'Pred: not_hand (0.6404)', 'Pred: not_hand (0.6383)', 'Pred: not_hand (0.6382)', 'Pred: not_hand (0.6374)', 'Pred: not_hand (0.6372)', 'Pred: not_hand (0.6359)', 'Pred: not_hand (0.6354)', 'Pred: not_hand (0.6352)', 'Pred: not_hand (0.6346)', 'Pred: not_hand (0.6338)', 'Pred: not_hand (0.631)', 'Pred: not_hand (0.6308)', 'Pred: not_hand (0.6302)', 'Pred: not_hand (0.628)', 'Pred: not_hand (0.6277)', 'Pred: not_hand (0.6273)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6272)', 'Pred: not_hand (0.6271)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6265)', 'Pred: not_hand (0.6265)', 'Pred: not_trash (0.6259)', 'Pred: not_hand (0.6255)', 'Pred: not_hand (0.6248)', 'Pred: not_hand (0.6243)', 'Pred: not_hand (0.6242)', 'Pred: not_trash (0.6241)', 'Pred: not_hand (0.6237)', 'Pred: not_trash (0.6229)', 'Pred: not_hand (0.6223)', 'Pred: not_hand (0.6221)', 'Pred: not_hand (0.6215)', 'Pred: not_hand (0.6213)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6207)', 'Pred: not_hand (0.6203)', 'Pred: not_hand (0.6199)', 'Pred: not_hand (0.6196)', 'Pred: not_hand (0.6195)', 'Pred: not_hand (0.6185)', 'Pred: trash_arm (0.6184)', 'Pred: not_trash (0.6183)', 'Pred: not_trash (0.6177)', 'Pred: not_hand (0.6163)', 'Pred: trash_arm (0.616)', 'Pred: not_hand (0.615)', 'Pred: not_trash (0.6144)', 'Pred: not_hand (0.6144)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6139)', 'Pred: not_hand (0.6137)', 'Pred: not_hand (0.6135)', 'Pred: not_hand (0.6129)', 'Pred: not_hand (0.6125)', 'Pred: not_hand (0.6124)', 'Pred: not_hand (0.6108)', 'Pred: not_hand (0.6106)', 'Pred: not_trash (0.6104)', 'Pred: not_hand (0.6101)', 'Pred: not_trash (0.61)', 'Pred: not_hand (0.6099)', 'Pred: not_hand (0.6097)', 'Pred: not_trash (0.6092)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6089)', 'Pred: not_hand (0.6085)', 'Pred: not_hand (0.6085)', 'Pred: not_trash (0.6079)', 'Pred: not_hand (0.6076)', 'Pred: not_trash (0.607)', 'Pred: not_trash (0.607)', 'Pred: not_hand (0.6068)', 'Pred: not_hand (0.6063)', 'Pred: not_trash (0.6057)', 'Pred: not_trash (0.6057)', 'Pred: not_hand (0.6056)', 'Pred: not_hand (0.6055)', 'Pred: trash_arm (0.6053)', 'Pred: not_hand (0.6051)']\n\n\n\n\n\n\n\n\n\nOur predictions are poor since our model hasn‚Äôt been specifically trained on our data.\nBut we can improve them by fine-tuning the model to our dataset.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "(Work in progress) Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#overview",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#overview",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "1 Overview",
    "text": "1 Overview\nWelcome to the Learn Hugging Face Object Detection project!\nInside this project, we‚Äôll learn bits and pieces about the Hugging Face ecosystem as well as how to build our own custom object detection model.\nWe‚Äôll start with a collection of images with bounding box files as our dataset, fine-tune an existing computer vision model to detect items in an image and then share our model as a demo others can use.\n\n\n\nWe‚Äôre going to put on our startup hats and build a Trashify object detection model using tools from the Hugging Face ecosystem.\n\n\n\n\n\n\n\n\nNote\n\n\n\nFeel to keep reading through the notebook but if you‚Äôd like to run the code yourself, be sure to go through the setup guide first.\n\n\n\n1.1 What we‚Äôre going to build\nWe‚Äôre going to be bulding Trashify üöÆ, an object detection model which incentivises people to pick up trash in their local area by detecting bin, trash, hand.\nIf all three items are detected, a person gets +1 point!\nFor example, say you were going for a walk around your neighbourhood and took a photo of yourself picking up a piece (with your hand or trash arm) of trash and putting it in the bin, you would get a point.\nWith this object detection model, you could deploy it to an application which would automatically detect the target classes and then save the result to an online leaderboard.\nThe incentive would be to score the most points, in turn, picking up the most piecces of trash, in a given area.\nMore specifically, we‚Äôre going to follow the following steps:\n\nData: Problem defintion and dataset preparation - Getting a dataset/setting up the problem space.\nModel: Finding, training and evaluating a model - Finding an object detection model suitable for our problem on Hugging Face and customizing it to our own dataset.\nDemo: Creating a demo and put our model into the real world - Sharing our trained model in a way others can access and use.\n\nBy the end of this project, you‚Äôll have a trained model and demo on Hugging Face you can share with others:\n\nfrom IPython.display import HTML \n\nHTML(\"\"\"\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v4.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"1150\"\n&gt;&lt;/iframe&gt;\n\"\"\")\n\n\n\n\n\n\n\n1.2 What is object detection?\nObject detection is the process of identifying and locating an item in an image.\nWhere item can mean almost anything.\nFor example:\n\nDetecting car licence plates in a video feed (videos are a series of images) for a parking lot entrance.\nDetecting delivery people walking towards your front door on a security camera.\nDetecting defects on a manufacturing line.\nDetecting pot holes in the road so repair works can automatically be scheduled.\nDetecting small pests (Varroa Mite) on the bodies of bees.\nDetecting weeds in a field so you know what to remove and what to keep.\n\nAnd for some trash identification examples:\n\nGoogle open-sourcing CircularNet for helping to detect and identify different kinds of trash in waste management facilities.\nA machine learning paper for using a computer vision model on a Raspberry Pi (a small computer) for waste identification.\nAmeru is a company building a trash-identifying bin to sort automatically sort trash as people put it in, see the case study of hose they created their own custom dataset using Label Studio.\n\n\n\n\nDifferent problems where object detection can be used: license plate detection, trash type identification, pest detection on bees and pothole detection.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote: Object detection is also sometimes referred to as image localization or object localization. For consistency, I will use the term object detection, however, either of these terms could substitute.\n\n\nImage classification deals with classifying an image as a whole into a single class, object detection endeavours to find the specific target item and where it is in an image.\nOne of the most common ways of showing where an item is in an image is by displaying a bounding box (a rectangle-like box around the target item).\nAn object detection model will often take an input image tensor in the shape [3, 640, 640] ([colour_channels, height, width]) and output a tensor in the form [class_name, x_min, y_min, x_max, y_max] or [class_name, x1, y1, x2, y2] (this is two ways to write the same example format, there are more formats, we‚Äôll see these below in Table¬†1).\nWhere:\n\nclass_name = The classification of the target item (e.g.¬†\"car\", \"person\", \"banana\", \"piece_of_trash\", this could be almost anything).\nx_min = The x value of the top left corner of the box.\ny_min = The y value of the top left corner of the box.\nx_max = The x value of the bottom right corner of the box.\ny_max = The y value of the bottom right corner of the box.\n\n\n\n\nNormalized bounding box coordinates in CXCYWH format as well as an absolute bounding in XYXY format.\n\n\n\n\n\n\n\n\nObject detection bounding box formats\n\n\n\nWhen you get into the world of object detection, you will find that there are several different bounding box formats.\nThere are three major formats you should be familiar with: XYXY, XYWH, CXCYWH (there are more but these are the most common).\nKnowing which bounding box format you‚Äôre working with can be the difference between a good model and a very poor model (wrong bounding boxes = wrong outcome).\nWe‚Äôll get hands-on with a couple of these in this project.\nBut for an in-depth example of all three, I created a guide on different bounding box formats and how to draw them, reading this should give a good intuition behind each style of bounding box.\n\n\n\n\n1.3 Why train your own object detection models?\nYou can customize pre-trained models for object detection as well as API-powered models and LLMs such as Gemini, LandingAI and DINO-X.\nDepending on your requirements, there are several pros and cons for using your own model versus using an API.\nTraining/fine-tuning your own model:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nControl: Full control over model lifecycle.\nCan be complex to get setup.\n\n\nNo usage limits (aside from compute constraints).\nRequires dedicated compute resources for training/inference.\n\n\nCan train once and deploy everywhere/whenever you want (for example, Tesla deploying a model to all self-driving cars).\nRequires maintenance over time to ensure performance remains up to par.\n\n\nPrivacy: Data can be kept in-house/app and doesn‚Äôt need to go to a third party.\nCan require longer development cycles compared to using existing APIs.\n\n\nSpeed: Customizing a small model for a specific use case often means it runs much faster on local hardware, for example, modern object detection models can achieve 70-100+ FPS (frames per second) on modern GPU hardware.\n\n\n\n\nUsing a pre-built model API:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nEase of use: often can be setup within a few lines of code.\nIf the model API goes down, your service goes down.\n\n\nNo maintenance of compute resources.\nData is required to be sent to a third-party for processing.\n\n\nAccess to the most advanced models.\nThe API may have usage limits per day/time period.\n\n\nCan scale if usage increases.\nCan be much slower than using dedicated models due to requiring an API call.\n\n\n\nFor this project, we‚Äôre going to focus on fine-tuning our own model.\n\n\n1.4 Workflow we‚Äôre going to follow\nThe good news for us is that the Hugging Face ecosystem makes working on custom machine learning projects an absolute blast.\nAnd workflow is reproducible across several kinds of projects.\nStart with data (or skip this step and go straight to a model) -&gt; get/customize a model -&gt; build and share a demo.\nWith this in mind, our motto is data, model, demo!\nMore specifically, we‚Äôre going to follow the rough workflow of:\n\nCreate, preprocess and load data using Hugging Face Datasets.\nDefine the model we‚Äôd like use with transformers.AutoModelForObjectDetection (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nI say rough because machine learning projects are often non-linear in nature.\nAs in, because machine learning projects involve many experiments, they can kind of be all over the place.\nBut this worfklow will give us some good guidelines to follow.\n\n\n\n\nA general Hugging Face workflow from idea to shared model and demo using tools from the Hugging Face ecosystem. You‚Äôll notice some of the steps don‚Äôt match with our workflow outline above. This is because the text-based workflow outline above breaks some of the steps down for educational purposes. These kind of workflows are not set in stone and are more of guide than specific directions. See information on each of the tools in the Hugging Face documentation.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#importing-necessary-libraries",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#importing-necessary-libraries",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "2 Importing necessary libraries",
    "text": "2 Importing necessary libraries\nLet‚Äôs get started!\nFirst, we‚Äôll import the required libraries.\nIf you‚Äôre running on your local computer, be sure to check out the getting setup guide to make sure you have everything you need.\nIf you‚Äôre using Google Colab, many of them the following libraries will be installed by default.\nHowever, we‚Äôll have to install a few extras to get everything working.\n\n\n\n\n\n\nNote\n\n\n\nIf you‚Äôre running on Google Colab, this notebook will work best with access to a GPU. To enable a GPU, go to Runtime ‚û°Ô∏è Change runtime type ‚û°Ô∏è Hardware accelerator ‚û°Ô∏è GPU.\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio.\nOptional: evaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\nOptional: accelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\n\nAnd the following library is not part of the Hugging Face ecosystem but it is helpful for evaluating our models:\n\ntorchmetrics - a library containing many evaluation metrics compatible with PyTorch/Transformers, you can install it via pip install torchmetrics.\n\nWe can also check the versions of our software with package_name.__version__.\n\n# Install/import dependencies (this is mostly for Google Colab, as the other dependences are available by default in Colab)\ntry:\n  import datasets\n  import gradio as gr\n  import torchmetrics\n  import pycocotools \nexcept ModuleNotFoundError:\n  \n  # If a module isn't found, install it \n  !pip install -U datasets gradio # -U stands for \"upgrade\" so we'll get the latest version by default\n  !pip install -U torchmetrics[detection]\n\n  import datasets\n  import gradio as gr\n\n  # Required for evalation\n  import torchmetrics\n  import pycocotools # make sure we have this for torchmetrics\n\nimport random\n\nimport numpy as np\n\nimport torch\nimport transformers\n\n# Check versions (as long as you've got the following versions or higher, you should be good)\nprint(f\"Using transformers version: {transformers.__version__}\")\nprint(f\"Using datasets version: {datasets.__version__}\")\nprint(f\"Using torch version: {torch.__version__}\")\nprint(f\"Using torchmetrics version: {torchmetrics.__version__}\")\n\nUsing transformers version: 4.52.4\nUsing datasets version: 3.6.0\nUsing torch version: 2.7.0+cu126\nUsing torchmetrics version: 1.7.1\n\n\nWonderful, as long as your versions are the same or higher to the versions above, you should be able to run the code below.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#preprocessing-our-annotations",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#preprocessing-our-annotations",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 Preprocessing our annotations",
    "text": "9 Preprocessing our annotations\nOne of the most tricky parts of any machine learning problem is getting your data in the right format.\nWe‚Äôve done it for our images.\nNow let‚Äôs do it for our annotations.\n\n9.1 Trying to preprocess a single annotation\nRecall in a previous section we tried to preprocess a single image and its annotation.\nAnd we got an error.\nLet‚Äôs make sure we‚Äôre not crazy and this is still the case.\n\n# Preprocess a single image and annotation pair\nimage_processor.preprocess(\n    images=random_sample[\"image\"], \n    annotations=random_sample[\"annotations\"]\n)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[32], line 2\n      1 # Preprocess a single image and annotation pair\n----&gt; 2 image_processor.preprocess(\n      3     images=random_sample[\"image\"], \n      4     annotations=random_sample[\"annotations\"]\n      5 )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:403, in RTDetrImageProcessorFast.preprocess(self, images, annotations, masks_path, **kwargs)\n    380 @auto_docstring\n    381 def preprocess(\n    382     self,\n   (...)\n    386     **kwargs: Unpack[RTDetrFastImageProcessorKwargs],\n    387 ) -&gt; BatchFeature:\n    388     r\"\"\"\n    389     annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n    390         List of annotations associated with the image or batch of images. If annotation is for object\n   (...)\n    401         Path to the directory containing the segmentation masks.\n    402     \"\"\"\n--&gt; 403     return super().preprocess(images, annotations, masks_path, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_processing_utils_fast.py:609, in BaseImageProcessorFast.preprocess(self, images, *args, **kwargs)\n    606 kwargs.pop(\"default_to_square\")\n    607 kwargs.pop(\"data_format\")\n--&gt; 609 return self._preprocess(images, *args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:440, in RTDetrImageProcessorFast._preprocess(self, images, annotations, masks_path, return_segmentation_masks, do_resize, size, interpolation, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, pad_size, format, return_tensors, **kwargs)\n    438 format = AnnotationFormat(format)\n    439 if annotations is not None:\n--&gt; 440     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n    442 data = {}\n    443 processed_images = []\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:919, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    917 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    918     if not valid_coco_detection_annotations(annotations):\n--&gt; 919         raise ValueError(\n    920             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    921             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    922             \"being a list of annotations in the COCO format.\"\n    923         )\n    925 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    926     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nWonderful!\nWe‚Äôre not crazy‚Ä¶\nBut we still get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nIn this section, we‚Äôre going to fix it.\n\n\n9.2 Discussing the format our annotations need to be in\nAccording the error we got in the previous segment, the transformers.RTDetrImageProcessor.preprocess method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n\n9.3 Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by transformers.RTDetrImageProcessor.preprocess.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[35], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[33], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100]) # correct number of values\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.4 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face in the beginning).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on a new not so random_sample (we‚Äôll make a random_sample with a known index for reproducibility).\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Create a not so random sample and inspect it \nrandom_sample = dataset[\"train\"][77]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 558,\n 'annotations': {'file_name': ['13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg'],\n  'image_id': [558, 558, 558],\n  'category_id': [5, 0, 1],\n  'bbox': [[261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125]],\n  'iscrowd': [0, 0, 0],\n  'area': [39323.33984375, 500634.0, 187150.734375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 558,\n 'annotations': [{'image_id': 558,\n   'category_id': 5,\n   'bbox': [261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   'area': 39323.33984375,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 0,\n   'bbox': [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   'area': 500634.0,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 1,\n   'bbox': [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125],\n   'area': 187150.734375,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we may have just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.5 Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with transformers.RTDetrImageProcessor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYWH format (the format we downloaded them in) and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() method of our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_mask', 'pixel_values', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\n(Optional) pixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([  9830.8350, 125158.5000,  46787.6836]),\n  'boxes': tensor([[0.3675, 0.6583, 0.1894, 0.1690],\n        [0.4842, 0.4360, 0.7604, 0.5358],\n        [0.1916, 0.7997, 0.3832, 0.3974]]),\n  'class_labels': tensor([5, 0, 1]),\n  'image_id': tensor([558]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 480])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\nWoohoo!\nWe‚Äôve done it!\nWe‚Äôve officially preprocessed a single sample of our own data, both the image and its annotation pair.\nWe‚Äôll write some code later on to scale this up to our whole dataset.\nFor now, let‚Äôs see what it looks like postprocessing a single output.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#postprocessing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#postprocessing-a-single-output",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "10 Postprocessing a single output",
    "text": "10 Postprocessing a single output\nWe‚Äôve got our inputs processed and successfully passed them through our model.\nHow about we postprocess the outputs of our model?\nDoing so will make our model‚Äôs outputs far more usable.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#going-end-to-end-on-a-single-sample",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#going-end-to-end-on-a-single-sample",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "11 Going end-to-end on a single sample",
    "text": "11 Going end-to-end on a single sample\nWhen working on a new problem or with a custom dataset and an existing model, it‚Äôs good practice to go end-to-end on a single sample.\nFor example, preprocess one of your samples, pass it through the model and then postprocess it (just like we‚Äôre in the middle of doing here).\nBeing able to go end-to-end on a single sample will help you see the overall process and discover any bugs that may hinder you later on.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "12 Aside: Bounding box formats in and out of our model",
    "text": "12 Aside: Bounding box formats in and out of our model\nWe‚Äôve done a fair bit of data transformation to get our data ready to go into our model and we‚Äôve also taken a fair few steps to postprocess it into a usable format.\nThis is often a standard practice in many machine learning workflows.\nMuch of the work before ever training a model is preparing the data for the model.\nAnd much of the work after training a model is preparing the data for your use case.\nThe following table highlights the different states our bounding boxes go in and out of.\n\n\n\nStep\nBox format\nScale\nGoes into\n\n\n\n\nStarting data (default downloaded from our Hugging Face dataset, note: not all boxes start in this format)\nXYWH or [x1, y1, width, height]\nAbsolute\npreprocess() method\n\n\nOut of preprocess()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\nmodel.forward()\n\n\nOut of model.forward()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\npost_process_object_detection()\n\n\nOut of post_process_object_detection()\nXYXY or [x_top_left, y_top_left, x_bottom_right, y_bottom_right]\nAbsolute (in relation to the target_sizes parameter).\nPlotting or display function.\n\n\n\n\n\n\nOur bounding boxes go through a series of format changes from input to final output. Keeping track of what format our boduning boxes are in is important for both training models and visualizing boxes on images. If we use the wrong format for plotting boxes on images, we may falsely assume our model is performing better or worse than it actually is.\n\n\nKeeping track of these input and output formats is helpful for knowing the state of your data.\nBut remember, just because our current workflow is like this, doesn‚Äôt mean all future workflows you work on will have the same transformation steps.\nFor more on different bounding box formats, see the bounding box formats guide.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#preparing-data-at-scale",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#preparing-data-at-scale",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "13 Preparing data at scale",
    "text": "13 Preparing data at scale\nWe‚Äôve performed preprocessing and postprocessing steps on a single data sample.\nHowever, in practice, we‚Äôll likely want to work with many more samples.\nOur model is hungry for more data.\nSo let‚Äôs step it up a notch and write some code that‚Äôs capable of preprocessing many samples to pass to our model.\nWe‚Äôll break it down into three subsections:\n\nSplitting the data into training, validation and test sets. We‚Äôll train our model on the training set and check its performance on the validation and test sets (our model won‚Äôt see any of these samples during training). We perform these splits before preprocessing the samples in them in case we‚Äôd like to perform different preprocessing steps depending on the split. For example, we may want to use data augmentation on the training set and not use it on the testing set.\nPreprocessing multiple samples at a time by iterating over groups of samples. Rather than preprocess a single sample at a time, we‚Äôll write code capable of processing lists of examples simultaneously.\nCollate samples into batches so our model can view multiple samples simultaneously. Rather than performing a forward pass on a single sample at a time, we‚Äôll pass batches of data to the model. For example, we may pass 32 samples (image and label pairs) at a time to our model for it to try and learn the patterns between them. We use batches of data rather than the whole dataset as it‚Äôs often much more memory efficient. If you have a really large dataset, all of your samples may not fit into memory at once, so in practice, you break it up into smaller batches of samples.\n\nLet‚Äôs start by splitting the data into different sets.\n\n13.1 Splitting the data into training and test sets\nRight now our data is all in one big group.\nHowever, it‚Äôs best practice to split our data into two (or three) different sets:\n\nTraining set (~70-80% of data) - This is the data the model will learn from, all samples in this set are seen by the model during training.\nValidation set (~5-20% of data) - This is the data we can fine-tune our model‚Äôs hyperparameters on, all samples in this set are not seen by the model during training.\nTest set (~5-20% of data) - This is the data we will evaluate what our model has learned after going through the training set, all samples in this set are not seen by the model during training.\n\nUsing the analogy of a student at univeristy, the training set would be the course materials throughout the semester, the validation set would be the practice exam and the test set would be the final exam.\nIf a student doesn‚Äôt perform well on the final exam, then we would usually say perhaps the course materials weren‚Äôt of the highest quality.\nThis is similar to our machine learning workflow.\nIn an ideal world, the samples in the training set are sufficiently representative of those in the test set and in turn, sufficiently representative of samples in the wild.\nBefore we split our dataset into different sets, let‚Äôs remind ourselves of what it looks like.\n\n# Original dataset (only a \"train\" split)\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\noriginal_dataset_length = len(dataset[\"train\"])\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nWonderful! Right now, we‚Äôve only got one split, \"train\".\nTo make our required splits, we can call the train_test_split() method on our dataset and pass in the size of the split we‚Äôd like via the test_size parameter.\nFor example, test_size=0.3 means 30% of the data will go to the test set and 70% will go to the training set.\nWe‚Äôll make the following splits:\n\n70% of data to training set.\n~10% of data to validation set.\n~20% of data to testing set.\n\nTo do so, we‚Äôll call train_test_split() twice with different amounts:\n\nFirst on dataset[\"train\"] with test_size=0.3 to make the 70/30 training/test split, we‚Äôll save this split to the variable dataset_split.\nNext on dataset_split[\"test\"] with test_size=0.66 to make the 66/33 test/validation split, we‚Äôll set this variable to dataset_test_val_split.\n\n\n\n\nAn approximate breakdown of the different dataset splits we‚Äôre going to create. We‚Äôll start with the whole dataset and then break it into training and test splits before breaking the subsequent test split into test and validation splits. Our model will train on the training data and be evaluated on the validation and testing data.\n\n\nOnce we‚Äôve done this, we‚Äôll reassign all of the splits back to our original dataset.\nWe‚Äôll also set seed=42 for reproducibility.\nLet‚Äôs do it!\n\n# Note: Be careful of running this cell multiple times, if you do, the dataset size will get smaller. \n# If this happens, just reload the whole `dataset` as above.\n\n# 1. Split the data into \"train\" and \"test\" splits\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\n\n# 2. Split the test split into \"test\" and \"validation\" splits\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.66, seed=42) # split the test set into 40/60 validation/test\n\n# Create \"train\" split from 1.\ndataset[\"train\"] = dataset_split[\"train\"]\n\n# Create a \"validation\" and \"test\" split from 2.\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\n# Ensure splits lengths add to equal original dataset length (otherwise there's a mistmatch somewhere)\nassert original_dataset_length == len(dataset[\"train\"]) + len(dataset[\"validation\"]) + len(dataset[\"test\"]), \"Total dataset split lengths don't equal original dataset length, is there a mismatch? Perhaps try reloading the original dataset and re-running this cell.\"\n\n# View the dataset (now with splits)\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 115\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 224\n    })\n})\n\n\nPerfect!\nNow we‚Äôve got three splits of our dataset to work with.\nWe‚Äôll make sure our model never sees the validation and test splits during training, so when evaluate it we know that it‚Äôs only seeing new samples.\n\n\n13.2 Writing a function for preprocessing multiple samples at a time\nWe‚Äôve preprocessed and passed one sample through our model, new let‚Äôs do the same for multiple samples.\nWe‚Äôre going to work towards having a function that can go from a group or batch of samples (images and their annotations) and return them in preprocessed form (via transformers.RTDetrImageProcessor.preprocess) ready to be used with our model.\nLet‚Äôs first remind ourselves of what a single unprocessed sample looks like.\n\n# Get one sample from the training dataset \none_sample = dataset[\"train\"][42]\none_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 663,\n 'annotations': {'file_name': ['1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg',\n   '1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg'],\n  'image_id': [663, 663],\n  'category_id': [1, 5],\n  'bbox': [[413.29998779296875,\n    529.7000122070312,\n    343.6000061035156,\n    687.0999755859375],\n   [435.8999938964844, 463.0, 77.19999694824219, 99.9000015258789]],\n  'iscrowd': [0, 0],\n  'area': [236087.5625, 7712.27978515625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nAwesome, we get an image in PIL.Image.Image form as well as a single dictionary of annotations.\nHow about if we were to inspect a group of three samples?\n\n# Get three samples from the training set\ngroup_of_samples = dataset[\"train\"][0:3]\n\n# Uncomment for full output (commented for brevity)\n# group_of_samples \n\n\n\nOutput of random_samples\n\nSignature:\n{'image': [&lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;],\n 'image_id': [69, 1027, 1092],\n 'annotations': [{'file_name': ['c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg'],\n   'image_id': [69, 69, 69, 69, 69, 69, 69, 69],\n   'category_id': [5, 0, 1, 4, 4, 4, 4, 4],\n   'bbox': [[360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n    [298.29998779296875,\n     495.1000061035156,\n     381.1000061035156,\n     505.70001220703125],\n    [81.5999984741211,\n     592.0999755859375,\n     358.79998779296875,\n     316.29998779296875],\n    [1.2999999523162842,\n     776.7000122070312,\n     193.8000030517578,\n     211.89999389648438],\n    [301.1000061035156, 60.79999923706055, 146.89999389648438, 115.0],\n    [501.0, 75.9000015258789, 24.200000762939453, 71.19999694824219],\n    [546.4000244140625,\n     54.70000076293945,\n     130.3000030517578,\n     115.0999984741211],\n    [862.9000244140625,\n     41.099998474121094,\n     75.69999694824219,\n     80.19999694824219]],\n   'iscrowd': [0, 0, 0, 0, 0, 0, 0, 0],\n   'area': [46390.9609375,\n    192722.265625,\n    113488.4375,\n    41066.21875,\n    16893.5,\n    1723.0400390625,\n    14997.5302734375,\n    6071.14013671875]},\n  {'file_name': ['b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg'],\n   'image_id': [1027, 1027, 1027, 1027, 1027],\n   'category_id': [5, 4, 1, 0, 0],\n   'bbox': [[378.29998779296875, 657.5, 139.8000030517578, 165.10000610351562],\n    [463.29998779296875, 754.5, 39.400001525878906, 30.299999237060547],\n    [451.20001220703125,\n     734.7999877929688,\n     109.19999694824219,\n     163.8000030517578],\n    [140.39999389648438, 400.29998779296875, 460.8999938964844, 491.5],\n    [2.299999952316284,\n     322.29998779296875,\n     201.6999969482422,\n     429.20001220703125]],\n   'iscrowd': [0, 0, 0, 0, 0],\n   'area': [23080.98046875,\n    1193.8199462890625,\n    17886.9609375,\n    226532.34375,\n    86569.640625]},\n  {'file_name': ['d822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg'],\n   'image_id': [1092, 1092, 1092, 1092],\n   'category_id': [2, 5, 1, 0],\n   'bbox': [[97.80000305175781, 93.30000305175781, 177.5, 101.5999984741211],\n    [342.20001220703125, 572.5999755859375, 350.0, 344.20001220703125],\n    [185.1999969482422, 803.0, 304.3999938964844, 371.6000061035156],\n    [219.39999389648438, 259.1000061035156, 598.7000122070312, 584.5]],\n   'iscrowd': [0, 0, 0, 0],\n   'area': [18034.0, 120470.0, 113115.0390625, 349940.15625]}],\n 'label_source': ['manual_prodigy_label',\n  'manual_prodigy_label',\n  'manual_prodigy_label'],\n 'image_source': ['manual_taken_photo',\n  'manual_taken_photo',\n  'manual_taken_photo']}\n\nOkay, now we get a list of image objects as well as a list of annotation dictionaries and more in the format:\n{\n    \"image\": [&lt;PIL.Image.Image&gt;, &lt;PIL.Image.Image&gt;, ...],\n    \"image_id\": [int, int, ...],\n    \"annotations\": [\n        {\n            \"file_name\": [str, str, ...],\n            \"image_id\": [int, int, ...],\n            \"category_id\": [int, int, ...],\n            \"bbox\": [[float, float, float, float], ...],\n            \"iscrowd\": [int, int, ...],\n            \"area\": [float, float, ...]\n        },\n        {...},\n        {...}\n    ],\n    \"label_source\": [str, str, ...],\n    \"image_source\": [str, str, ...]\n}\nKnowing this structure, we‚Äôll want to write a function capable of taking it as input and then preparing it for the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nOur data is in this structure (a dictionary of lists, rather than a list of dictionaries) because it is built on Hugging Face Datasets and Hugging Face Datasets is built on Apache Arrow.\nAnd Apache Arrow is column-orientated in nature.\nSo instead of our dataset being represented as many rows (list of dictionaries), it is represented as many columns (dictionary of lists).\n\n\nThe preprocess method expects a list of images as well as COCO formatted annotations as input.\nSo to create our preprocess_batch function we‚Äôll:\n\nTake in a list of examples (these will be in the format above), an image_processor and optional transforms (we don‚Äôt need to pass these in for now but it‚Äôs good to have the option).\nCreate empty lists of images and coco_annotations we‚Äôll fill throughout the rest of the function.\nExtract the image, image_id and annotations_dict from our list of input examples.\nCreate lists of annotations attributes such as bbox, category_id and area (these are required for our format_image_annotations_as_coco function.\nOptionally perform transforms/augmentations on the image and related boxes (because in object detection if you transform an image, should transform the related boxes as well).\nConvert the annotations into COCO format using the format_image_annotations_as_coco helper function we created earlier.\nAppend the images and COCO formatted annotations to the empty lists created in 2.\nPass the list of images and COCO formatted annotations to the image_processor.preprocess method to get the preprocessed batch.\nReturn the preprocessed batch.\n\nLet‚Äôs do it!\n\n# 1. Take in a list of examples, image processor and optional transforms\ndef preprocess_batch(examples, \n                     image_processor,\n                     transforms=None, # Note: Could optionally add transforms (e.g. data augmentation) here \n                     ):\n    \"\"\"\n    Preprocesses a batch of image data with annotations for object detection models.\n\n    This function takes a batch of examples in a custom dataset format, extracts images and\n    their corresponding annotations, and converts them into a format suitable for model training\n    or inference using the provided image processor.\n\n    Args:\n        examples (dict): A dictionary containing the batch data with the following structure:\n            - \"image\" (List[PIL.Image.Image]): List of PIL Image objects\n            - \"image_id\" (List[int]): List of unique image identifiers\n            - \"annotations\" (List[dict]): List of annotation dictionaries, where each contains:\n                - \"file_name\" (List[str]): List of image filenames\n                - \"image_id\" (List[int]): List of image identifiers\n                - \"category_id\" (List[int]): List of object category IDs\n                - \"bbox\" (List[List[float]]): List of bounding boxes as [x, y, width, height]\n                - \"iscrowd\" (List[int]): List of crowd indicators (0 or 1)\n                - \"area\" (List[float]): List of object areas\n            - \"label_source\" (List[str]): List of label sources\n            - \"image_source\" (List[str]): List of image sources\n\n        image_processor: An image processor object to preprocess images for model input.\n            For example, can be `transformers.RTDetrDetrImageProcessor`.\n\n        transforms (optional): Image and annotations transforms for data augmentation.\n            Defaults to None.\n\n    Returns:\n        dict: Preprocessed batch with images and annotations converted to tensors\n            in the format required for a `transformers.RTDetrV2ForObjectDetection` model.\n\n    Note:\n        The `format_image_annotations_as_coco` function converts the input annotation format to COCO\n        format before applying the image_processor. This is required as the image_processor is designed\n        to handle COCO format annotations. \n    \"\"\"\n    # 2. Create empty lists to store images and annotations\n    images = []\n    coco_annotations = [] \n\n    # 3. Extract the image, image_id and annotations from the examples\n    for image, image_id, annotations_dict in zip(examples[\"image\"], \n                                                 examples[\"image_id\"], \n                                                 examples[\"annotations\"]):\n\n        # 4. Create lists of annotation attributes\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n\n        ###\n        # 5. Note: Could optionally apply a transform/augmentation here.\n        if transforms:\n            # Perform transform on image/boxes\n            pass\n        ###\n\n        # 6. Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # 7. Add images/annotations to their respective lists\n        images.append(image) # Note: may need to open image if it is an image path rather than PIL.Image\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # 8. Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\")\n\n    # 9. Return the preprocessed batch\n    return preprocessed_batch\n\nNice!\nNow how about we test it out on our group_of_samples?\n\npreprocessed_samples = preprocess_batch(examples=group_of_samples,\n                                        image_processor=image_processor)\n\npreprocessed_samples.keys()\n\ndict_keys(['pixel_mask', 'pixel_values', 'labels'])\n\n\nPerfect, we get the same keys() as with our single sample.\nExcept this time, we‚Äôve got multiple samples, let‚Äôs check the shape.\n\n# Check the shape of our preprocessed samples\nprint(f\"[INFO] Shape of preprocessed samples: {preprocessed_samples['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Shape of preprocessed samples: torch.Size([3, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nWonderful, our batch of three samples have been preprocessed and are ready for input to our model.\n\n\n13.3 Applying our preprocessing function to each data split\nWe‚Äôve seen our preprocess_batch function in action on a small group of samples.\nNow let‚Äôs apply it to our different data splits.\nTo do so, we can call the with_transform() method on our target dataset split and pass it our desired transform.\nUsing with_transform() means our transformations will be applied on-the-fly when we call on our split datasets.\nBecause the with_transform() method expects a callable with a single argument (the input examples), we‚Äôll turn our preprocess_batch into a Python partial function.\nDoing this will mean we can prefill the image_processor and optionally the transforms parameter of our preprocess_batch function meaning it will only take examples as input, this is inline with the with_transform() method.\n\n# Create a partial function for preprocessing\nfrom functools import partial\n\n# Note: Could create separate preprocess functions with different inputs depending on the split \n# (e.g. use data augmentation on training but not on validation/test)\npreprocess_batch_partial = partial(preprocess_batch,\n                                   image_processor=image_processor,\n                                   transforms=None) # could use transforms here if wanted\n\n# Inspect the preprocess_batch_partial function\n# preprocess_batch_partial\n\nBeautiful, now let‚Äôs pass the preprocess_batch_partial function to the with_transform() method on each of our data splits.\n\n# Create a copy of the original dataset \n# (we don't need to do this, this is just so we can inspect the original dataset later on)\nprocessed_dataset = dataset.copy()\n\n# Apply the preprocessing function to the datasets (the preprocessing will happen on the fly, e.g. when the dataset is called rather than in-place)\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(transform=preprocess_batch_partial)\n\nNow when we get (via __getitem__) one of our samples from a processed_dataset split, it will be preprocessed on the fly.\n\n# Get an item from the dataset (in will be preprocessed as we get it)\nprocessed_dataset[\"train\"][42]\n\n{'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'pixel_values': tensor([[[0.0824, 0.2275, 0.2471,  ..., 0.3255, 0.3059, 0.3804],\n          [0.2588, 0.1608, 0.2706,  ..., 0.4000, 0.4588, 0.4667],\n          [0.2706, 0.2588, 0.2549,  ..., 0.7059, 0.5686, 0.4431],\n          ...,\n          [0.4941, 0.3137, 0.2235,  ..., 0.2745, 0.2314, 0.1647],\n          [0.4824, 0.5490, 0.2392,  ..., 0.1725, 0.1451, 0.2157],\n          [0.3176, 0.5294, 0.3137,  ..., 0.2039, 0.1059, 0.1490]],\n \n         [[0.0941, 0.2392, 0.2549,  ..., 0.3176, 0.2941, 0.3765],\n          [0.2706, 0.1686, 0.2784,  ..., 0.3922, 0.4471, 0.4588],\n          [0.2784, 0.2667, 0.2588,  ..., 0.6980, 0.5569, 0.4353],\n          ...,\n          [0.4667, 0.2824, 0.1882,  ..., 0.2902, 0.2549, 0.2000],\n          [0.4510, 0.5098, 0.2000,  ..., 0.1922, 0.1843, 0.2588],\n          [0.2824, 0.4902, 0.2706,  ..., 0.2353, 0.1529, 0.2000]],\n \n         [[0.0353, 0.1725, 0.1647,  ..., 0.1686, 0.1373, 0.1804],\n          [0.1882, 0.1020, 0.1725,  ..., 0.2353, 0.2824, 0.2667],\n          [0.1922, 0.1804, 0.1490,  ..., 0.5412, 0.3804, 0.2471],\n          ...,\n          [0.3137, 0.1922, 0.1255,  ..., 0.1451, 0.1333, 0.0745],\n          [0.2863, 0.3922, 0.1333,  ..., 0.0667, 0.0549, 0.1137],\n          [0.1373, 0.3490, 0.2000,  ..., 0.0863, 0.0118, 0.0510]]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([663]), 'class_labels': tensor([1, 5]), 'boxes': tensor([[0.6095, 0.6822, 0.3579, 0.5368],\n         [0.4943, 0.4007, 0.0804, 0.0780]]), 'area': tensor([59021.8906,  1928.0699]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\nAnd the same happens when we get multiple (a batch) samples!\n\n# Now when we call one or more of our samples, the preprocessing will take place\nbatch_size_to_get = 32\nprint(f\"[INFO] Shape of preprocessed images: {processed_dataset['train'][:batch_size_to_get]['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Shape of preprocessed images: torch.Size([32, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\n\n# We can pass these straight to our model! (note: may take a while if it's on CPU)\n# model(processed_dataset[\"train\"][:batch_size_to_get][\"pixel_values\"]) # uncomment to view output\n\n\n\n13.4 Creating a collation function\nWe now preprocess multiple samples at once.\nTime to create a collation function which will tell our model trainer how to stack these samples together into batches.\nWe do this because processing more samples at once (e.g.¬†32 samples in a batch) in a batch is generally more efficient than one sample at a time or trying to process all samples at once.\nOur collation function will be used for the data_collator parameter in our transformers.Trainer instance later on.\nThe input to our data collation function will be the output of image_processor.preprocess() (a preprocessed sample).\nAnd the output will be passed as a batch (we‚Äôll define the batch size later on) to our model‚Äôs forward() method.\n\n\n\n\n\n\nNote\n\n\n\nWhat batch size should I use?\nYou should generally use the batch size which uses the maximum amount of GPU memory you have.\nFor example, if you have 16GB of GPU memory and a batch size of 32 only uses 8GB of that memory, you should try doubling the batch size to 64.\nThe ideal batch size for a given dataset/model/hardware is often discovered in an iterative process.\n\n\n\nfrom typing import List, Dict, Any\n\ndef data_collate_function(preprocessed_batch: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    \"\"\"Stacks together groups of preprocessed samples into batches for our model.\n\n    Args:\n        preprocessed_batch: A list of dictionaries where each dictionary represnets a preprocessed sample.\n\n    Returns:\n        collated_data: A dictionary containing the batched data ready in the format our model\n            is expecting. The dictionary has the following keys: \n                - \"pixel_values\": A stacked tensor of preprocessed pixel values.\n                - \"labels\": A list of label dictionaries.\n                - \"pixel_mask\": (Optional) A stacked tensor of pixel masks (this will be present \n                    only if the input contains a \"pixel_mask\" key.\n    \"\"\"\n    # Create an empty dictionary (our model wants a dictionary input) \n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in preprocessed_batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in preprocessed_batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in preprocessed_batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in preprocessed_batch])\n\n    return collated_data\n\nExcellent! Now let‚Äôs try out our data collation function.\n\n%%time\n\n# Try data_collate_function \nexample_collated_data_batch = data_collate_function(processed_dataset[\"train\"].select(range(32)))\nexample_collated_data_batch.keys()\n\nCPU times: user 9.67 s, sys: 319 ms, total: 9.99 s\nWall time: 865 ms\n\n\ndict_keys(['pixel_values', 'labels', 'pixel_mask'])\n\n\nPerfect! Looks like it worked. We‚Äôve now got a batch of preprocessed images and label pairs.\nLet‚Äôs check the shapes.\n\n# Check shapes of batched preprocessed samples\nprint(f\"[INFO] Batch of pixel value shapes: {example_collated_data_batch['pixel_values'].shape}\")\nprint(f\"[INFO] Batch of labels: {example_collated_data_batch['labels']}\")\nif \"pixel_mask\" in example_collated_data_batch:\n    print(f\"[INFO] Batch of pixel masks: {example_collated_data_batch['pixel_mask'].shape}\")\n\n[INFO] Batch of pixel value shapes: torch.Size([32, 3, 640, 480])\n[INFO] Batch of labels: [{'size': tensor([640, 480]), 'image_id': tensor([69]), 'class_labels': tensor([5, 0, 1, 4, 4, 4, 4, 4]), 'boxes': tensor([[0.4675, 0.5152, 0.1846, 0.2045],\n        [0.5092, 0.5843, 0.3970, 0.3951],\n        [0.2719, 0.5861, 0.3738, 0.2471],\n        [0.1023, 0.6896, 0.2019, 0.1655],\n        [0.3902, 0.0924, 0.1530, 0.0898],\n        [0.5345, 0.0871, 0.0252, 0.0556],\n        [0.6370, 0.0877, 0.1357, 0.0899],\n        [0.9383, 0.0634, 0.0789, 0.0627]]), 'area': tensor([11597.7402, 48180.5664, 28372.1094, 10266.5547,  4223.3750,   430.7600,\n         3749.3826,  1517.7850]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1027]), 'class_labels': tensor([5, 4, 1, 0, 0]), 'boxes': tensor([[0.4669, 0.5782, 0.1456, 0.1290],\n        [0.5031, 0.6013, 0.0410, 0.0237],\n        [0.5269, 0.6380, 0.1138, 0.1280],\n        [0.3863, 0.5047, 0.4801, 0.3840],\n        [0.1074, 0.4195, 0.2101, 0.3353]]), 'area': tensor([ 5770.2451,   298.4550,  4471.7402, 56633.0859, 21642.4102]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1092]), 'class_labels': tensor([2, 5, 1, 0]), 'boxes': tensor([[0.1943, 0.1126, 0.1849, 0.0794],\n        [0.5387, 0.5818, 0.3646, 0.2689],\n        [0.3515, 0.7725, 0.3171, 0.2903],\n        [0.5404, 0.4307, 0.6236, 0.4566]]), 'area': tensor([ 4508.5000, 30117.5000, 28278.7598, 87485.0391]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([228]), 'class_labels': tensor([0]), 'boxes': tensor([[0.5187, 0.5418, 0.4982, 0.5698]]), 'area': tensor([87218.0078]), 'iscrowd': tensor([0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([511]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5284, 0.5886, 0.2903, 0.3347],\n        [0.7784, 0.7873, 0.4400, 0.4222]]), 'area': tensor([29848.7695, 57066.2383]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([338]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4990, 0.5424, 0.2227, 0.1716],\n        [0.5455, 0.5335, 0.3754, 0.3595],\n        [0.7111, 0.6979, 0.3313, 0.2838]]), 'area': tensor([11742.9648, 41455.0117, 28882.3496]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([405]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.4952, 0.6559, 0.6088, 0.4872],\n        [0.2074, 0.7760, 0.4117, 0.4459],\n        [0.4132, 0.5714, 0.0663, 0.0580]]), 'area': tensor([91107.9609, 56385.1602,  1179.7800]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([3]), 'class_labels': tensor([0, 5, 1, 4, 4, 4]), 'boxes': tensor([[0.5020, 0.4466, 0.6579, 0.5829],\n        [0.5148, 0.5684, 0.2288, 0.1367],\n        [0.7040, 0.7836, 0.4468, 0.4219],\n        [0.3160, 0.8416, 0.3991, 0.2993],\n        [0.4095, 0.0661, 0.0888, 0.0666],\n        [0.7489, 0.1356, 0.3843, 0.2637]]), 'area': tensor([117809.1875,   9607.5000,  57901.5000,  36691.4023,   1814.7600,\n         31125.9375]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([182]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.5786, 0.5016, 0.5992, 0.4539],\n        [0.6307, 0.7197, 0.4165, 0.3323],\n        [0.4415, 0.6429, 0.1546, 0.2070]]), 'area': tensor([83547.7969, 42508.7344,  9827.7900]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([640]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.5314, 0.6391, 0.2920, 0.4553],\n        [0.7088, 0.7733, 0.5596, 0.4422],\n        [0.5282, 0.5060, 0.5678, 0.4612]]), 'area': tensor([40839.7109, 76013.7969, 80443.1328]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1126]), 'class_labels': tensor([5, 1, 0, 0, 4]), 'boxes': tensor([[0.4897, 0.6114, 0.2720, 0.2612],\n        [0.6082, 0.7287, 0.2006, 0.2145],\n        [0.4549, 0.5349, 0.4550, 0.3859],\n        [0.1698, 0.4514, 0.3276, 0.2998],\n        [0.6611, 0.1925, 0.4202, 0.1516]]), 'area': tensor([21821.4316, 13217.1748, 53944.8008, 30168.4121, 19574.9844]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([902]), 'class_labels': tensor([5, 1, 0, 4]), 'boxes': tensor([[0.5237, 0.4816, 0.0443, 0.0498],\n        [0.6509, 0.3957, 0.2670, 0.1695],\n        [0.3200, 0.4485, 0.6094, 0.6062],\n        [0.6201, 0.1730, 0.1955, 0.0725]]), 'area': tensor([   676.8125,  13904.2754, 113490.0000,   4354.6401]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([166]), 'class_labels': tensor([5, 1, 0, 4, 0]), 'boxes': tensor([[0.4320, 0.5441, 0.2114, 0.1963],\n        [0.2735, 0.6612, 0.3580, 0.2412],\n        [0.5321, 0.5080, 0.3639, 0.3277],\n        [0.1142, 0.7866, 0.2067, 0.1561],\n        [0.7246, 0.4182, 0.2477, 0.2401]]), 'area': tensor([12742.1201, 26533.6406, 36624.1055,  9910.0801, 18268.9844]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([409]), 'class_labels': tensor([0, 4, 4, 5, 1]), 'boxes': tensor([[0.3715, 0.6465, 0.7429, 0.5014],\n        [0.5047, 0.6748, 0.2114, 0.1916],\n        [0.1167, 0.7180, 0.2303, 0.1904],\n        [0.4180, 0.6086, 0.0883, 0.0780],\n        [0.3020, 0.6926, 0.3045, 0.2649]]), 'area': tensor([114432.9375,  12437.7695,  13470.5176,   2117.8799,  24779.7324]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([504]), 'class_labels': tensor([1, 0]), 'boxes': tensor([[0.2105, 0.6075, 0.3550, 0.2591],\n        [0.4267, 0.5508, 0.5474, 0.3703]]), 'area': tensor([28260.8398, 62271.7500]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1012]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.4518, 0.4870, 0.5355, 0.5652],\n        [0.9084, 0.5812, 0.1724, 0.4217]]), 'area': tensor([92987.8359, 22334.2246]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([769]), 'class_labels': tensor([6, 5, 0, 2]), 'boxes': tensor([[0.7015, 0.4236, 0.5892, 0.0759],\n        [0.4368, 0.4307, 0.1043, 0.1327],\n        [0.2781, 0.5959, 0.3932, 0.4465],\n        [0.6999, 0.3721, 0.5797, 0.7238]]), 'area': tensor([ 13744.0801,   4249.2451,  53935.3125, 128899.3125]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([510]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.3557, 0.4248, 0.2382, 0.1798],\n        [0.6917, 0.7145, 0.6135, 0.5677]]), 'area': tensor([ 13155.9678, 106991.8516]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([429]), 'class_labels': tensor([4, 0, 1, 5]), 'boxes': tensor([[0.4661, 0.8003, 0.4432, 0.1715],\n        [0.4992, 0.6146, 0.9984, 0.6917],\n        [0.2310, 0.6193, 0.3612, 0.2520],\n        [0.4227, 0.5342, 0.0790, 0.0650]]), 'area': tensor([ 23349.3125, 212163.9688,  27969.4199,   1576.6400]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([714]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.3350, 0.6024, 0.2067, 0.2968],\n        [0.2292, 0.7662, 0.4445, 0.4472],\n        [0.5794, 0.6870, 0.6228, 0.5439]]), 'area': tensor([ 18843.0391,  61060.7695, 104064.4922]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([301]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4706, 0.5429, 0.0994, 0.0970],\n        [0.2963, 0.6009, 0.3128, 0.2155],\n        [0.4525, 0.4761, 0.8737, 0.6209]]), 'area': tensor([  2959.7849,  20713.1934, 166669.5625]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([816]), 'class_labels': tensor([6, 5, 0]), 'boxes': tensor([[0.7607, 0.7381, 0.4707, 0.3945],\n        [0.5418, 0.5427, 0.1593, 0.1055],\n        [0.4945, 0.5723, 0.5662, 0.4344]]), 'area': tensor([57052.3750,  5160.3750, 75560.3984]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([392]), 'class_labels': tensor([5, 1, 4, 4, 4]), 'boxes': tensor([[0.4599, 0.6063, 0.0836, 0.0493],\n        [0.2533, 0.7866, 0.5063, 0.4221],\n        [0.5349, 0.6495, 0.7540, 0.5713],\n        [0.8369, 0.9173, 0.3234, 0.1632],\n        [0.5333, 0.9232, 0.1924, 0.1514]]), 'area': tensor([  1266.7325,  65646.4531, 132310.6406,  16215.8623,   8948.7148]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([439]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4638, 0.6099, 0.2429, 0.3724],\n        [0.4283, 0.5034, 0.4528, 0.3891],\n        [0.7492, 0.6229, 0.4982, 0.4316]]), 'area': tensor([27791.6094, 54120.1484, 66053.2266]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([319]), 'class_labels': tensor([5, 1, 0, 4, 4]), 'boxes': tensor([[0.4927, 0.4708, 0.1688, 0.0946],\n        [0.7135, 0.5453, 0.3644, 0.2980],\n        [0.4998, 0.5359, 0.6276, 0.4492],\n        [0.5456, 0.8173, 0.1482, 0.1584],\n        [0.4667, 0.9237, 0.1009, 0.1277]]), 'area': tensor([ 4904.5498, 33353.4297, 86609.3750,  7214.6099,  3960.7876]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1106]), 'class_labels': tensor([5, 1, 4, 0]), 'boxes': tensor([[0.4597, 0.4787, 0.1184, 0.0961],\n        [0.5932, 0.6244, 0.2401, 0.2405],\n        [0.6587, 0.7589, 0.2219, 0.1490],\n        [0.3902, 0.5373, 0.7309, 0.5996]]), 'area': tensor([  3496.2749,  17742.7383,  10154.7754, 134638.6875]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([763]), 'class_labels': tensor([0, 0, 0, 5, 1]), 'boxes': tensor([[0.4510, 0.5231, 0.5637, 0.4548],\n        [0.7868, 0.4366, 0.4092, 0.3365],\n        [0.2204, 0.4396, 0.3318, 0.3187],\n        [0.5497, 0.5397, 0.2101, 0.0714],\n        [0.6421, 0.6682, 0.3070, 0.2901]]), 'area': tensor([78758.1328, 42294.7383, 32479.0371,  4608.8452, 27355.5273]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([379]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5053, 0.5406, 0.5852, 0.7876],\n        [0.7293, 0.6370, 0.5284, 0.4556]]), 'area': tensor([141587.6406,  73964.3438]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([394]), 'class_labels': tensor([1, 5, 0]), 'boxes': tensor([[0.2053, 0.7470, 0.4101, 0.4966],\n        [0.4299, 0.5713, 0.1728, 0.0933],\n        [0.4994, 0.6560, 0.9984, 0.6693]]), 'area': tensor([ 62568.7734,   4952.1152, 205286.7344]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([665]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.5282, 0.6071, 0.4164, 0.3630],\n        [0.6520, 0.8419, 0.5095, 0.2905]]), 'area': tensor([46425.1562, 45461.8438]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([362]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4643, 0.5164, 0.3293, 0.3087],\n        [0.6197, 0.7712, 0.7412, 0.4446],\n        [0.4982, 0.5305, 0.9742, 0.8731]]), 'area': tensor([ 31222.7773, 101242.8906, 261294.8750]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1019]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4699, 0.5841, 0.2358, 0.3263],\n        [0.5916, 0.6374, 0.2653, 0.2050],\n        [0.4858, 0.5195, 0.6066, 0.5119]]), 'area': tensor([23641.8203, 16708.3203, 95380.7422]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}]\n[INFO] Batch of pixel masks: torch.Size([32, 640, 480])\n\n\nNow let‚Äôs try to pass the \"pixel_values\" through our model.\n\n%%time \n\n# Try pass a batch through our model (note: this will be relatively slow if our model is on the CPU)\nmodel = create_model()\n\n# example_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\nexample_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\n# example_batch_outputs # uncomment for full output\nexample_batch_outputs.keys()\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nCPU times: user 1min 44s, sys: 1min 7s, total: 2min 52s\nWall time: 14.2 s\n\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'intermediate_hidden_states', 'intermediate_logits', 'intermediate_reference_points', 'encoder_last_hidden_state', 'init_reference_points', 'enc_topk_logits', 'enc_topk_bboxes', 'enc_outputs_class', 'enc_outputs_coord_logits'])\n\n\n\n# We get 300 predictions per image in our batch, each with a logit value for each of the classes in our dataset \nexample_batch_outputs.logits.shape\n\ntorch.Size([32, 300, 7])\n\n\nThis is what will happen during training, our model will continually go over batches (the size of these batches will be defined by us) over data and try to match its own predictions with the ground truth labels.\nIn summary, we‚Äôve created two major steps:\n\npreprocess_batch - Preprocesses single or groups of samples into the specific format required by our model.\ndata_collate_function - Stacks together groups/batches of samples to be passed to our model‚Äôs forward() method.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "14 Setting up TrainingArguments and a Trainer instance to train our model",
    "text": "14 Setting up TrainingArguments and a Trainer instance to train our model\nData ready and prepared, time to train a model!\nWe‚Äôll use transformers.TrainingArguments to set various hyperparameters for our model (many of these will be set by default, however, we can tweak them to our liking).\nWe‚Äôll also create an instance of transformers.Trainer which we can pass our preprocessed datasets for it to train/evaluate on.\nTo train a model, we‚Äôll go through the following steps:\n\nCreate a fresh instance of our model using the create_model() function.\nMake a directory for saving our trained models to.\nDefine our model‚Äôs hyperparameters using transformers.TrainingArguments, we‚Äôll take many of these settings from the assosciated research papers that introduced our model.\nCreate an evaluation function we can pass to our transformers.Trainer instance as the compute_metrics parameter to evaluate our model.\nCreate an instance of transformers.Trainer and pass it our training arguments from 2 as well as our preprocessed data.\nCall transformers.Trainer.train() to train the model from 1 on our own data.\n\nLet‚Äôs do it!\n\n# 1. Create a model instance \nmodel = create_model()\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nModel ready, let‚Äôs now create a folder where we can save our trained models to.\n\nfrom pathlib import Path\n\n# 2. Make a models directory for saving models\nmodels_dir = Path(\"models\")\nmodels_dir.mkdir(parents=True, exist_ok=True)\n\nPerfect! Time to setup our model‚Äôs hyperparameters with transformers.TrainingArguments.\n\n14.1 Setting up our TrainingArguments\nThe transformers.TrainingArguments class holds many of the hyperparameters/settings for training our model.\nMany of them are set by default in the transformers.RTDetrV2Config class.\nHowever, we can tweak any of them to our own liking.\nWhere do we get the settings from?\nThe original RT-DETRv2: Improved Baseline with Bag-of-Freebies for Real-Time Detection Transformer paper states that all hyperparameters are the same as the original RT-DETR (see Table A in DETRs Beat YOLOs on Real-time Object Detection).\nThe main hyperparameters we are going to set are:\n\n\n\nHyperparameter\nValue\nWhat does it do?\n\n\n\n\nper_device_train_batch_size, per_device_eval_batch_size\n16, 32 or larger (hardware dependent)\nDefines the number of samples passed to our model at one time. For example, if batch size is 16, our model will see 16 samples at a time. It‚Äôs usually best practice to set this value to the highest your hardware can handle.\n\n\nlearning_rate\n0.0001 (as per the listed papers)\nDefines the multiplier on the size of gradient updates during training. Too high and gradients will explode, too low and gradients won‚Äôt update, both lead to poor training results. The papers mention two different learning rates for the backbone and the detection head, I tried these and got poor results (likely because of our smaller dataset), a single learning rate for the whole network turned out to be better.\n\n\nweight_decay\n0.0001 (as per the listed papers)\nPrevents model weights from getting too large by applying a small decay penalty over time. This prevents a single weight providing too much information. In essence, the model is forced to learn smaller, simpler weights to represent the data. A form of regularization (overfitting prevention). See more at paperswithcode.com/method/weight-decay.\n\n\nmax_grad_norm\n0.1 (as per the listed papers)\nPrevents gradients from getting too large during training. This will help to ensure stable training. See more at paperswithcode.com/method/gradient-clipping.\n\n\nnum_train_epochs\n25 (depends on training data and available time)\nDefines how many laps of the data your model will do. For example, setting epochs to 25 means the model will do 25 laps of the training data to learn different patterns. In practice, I‚Äôve found this value to be a good starting point for our dataset and also because we are fine-tuning rather than training from scratch. However, if you had more data you might want to do more epochs (when training from scratch, the papers did 300 epochs).\n\n\nwarmup_ratio\n0.05\nPercentage of total training steps to take learning rate from 0 to to the set value (e.g.¬†0.0001). Can help with training stability in the early training steps of the model by not doing too large updates when first starting out. The papers state 2000 warmup steps, however, in practice I found this to be too many for our smaller dataset.\n\n\ndataloader_num_workers\n4 (hardware dependent)\nNumber of workers to load data from the CPU to the GPU. Higher is generally better if it is available, however, it can often cap out. Experimentally I‚Äôve found that 0.5 * os.cpu_count() generally works well.\n\n\n\n\n\n\nDifferent hyperparameter settings from the official papers for the RT-DETR model (left) and the original DETR model (right).\n\n\nIt‚Äôs important to note that all of these values can be experimented with.\nAnd just because a research paper mentions a specific value, doesn‚Äôt mean you have to use.\nFor example, all the mentioned research papers tend to focus on training a model from scratch on the COCO dataset (330k images, 80 classes).\nWhich is a much larger dataset with more classes than our dataset (1k images, 7 classes) which we are trying to fine-tune an existing model on rather than train from scratch.\nThere are many more possible arguments/settings we‚Äôve left out in the above table but if you‚Äôd like to explore these, I‚Äôd encourage you to check out the documentation for transformers.TrainingArguments.\n\n# 3. Create an instance of TrainingArguments to pass to Trainer\nfrom transformers import TrainingArguments\n\n# Hardware dependent hyperparameters\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 \n# without running out of memory\nBATCH_SIZE = 16\nDATALOADER_NUM_WORKERS = 4 # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0 \n\n# Set number of epochs to how many laps you'd like to do over the data\nNUM_EPOCHS = 10\n\n# Setup hyperameters for training from the DETR paper(s)\nLEARNING_RATE = 1e-4\nWEIGHT_DECAY = 1e-4\nMAX_GRAD_NORM = 0.1 \nWARMUP_RATIO = 0.05 # learning rate warmup from 0 to learning_rate as a ratio of total steps (e.g. 0.05 = 5% of total steps)\n\n# Create directory to save models to \nOUTPUT_DIR = Path(models_dir, \"rt_detrv2_finetuned_trashify_box_detector_v1\")\nprint(f\"[INFO] Saving model to: {OUTPUT_DIR}\")\n\n# Create TrainingArguments to pass to Trainer\ntraining_args = TrainingArguments(\n    output_dir=OUTPUT_DIR,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=LEARNING_RATE,\n    weight_decay=WEIGHT_DECAY,\n    max_grad_norm=MAX_GRAD_NORM,\n    num_train_epochs=NUM_EPOCHS,\n    lr_scheduler_type=\"linear\",\n    warmup_ratio=WARMUP_RATIO, \n    # warmup_steps=2000, # number of warmup steps from 0 to learning_rate (overrides warmup_ratio, found this to be too long for our dataset)\n    logging_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    fp16=True, # use mixed precision training\n    dataloader_num_workers=DATALOADER_NUM_WORKERS, # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0\n    eval_strategy=\"epoch\",\n    load_best_model_at_end=True, \n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False, # want to minimize eval_loss (e.g. lower is better)\n    report_to=\"none\", # don't save experiments to a third party service\n    push_to_hub=False,\n    eval_do_concat_batches=False, # this defaults to True but we'll set it to False for our evaluation function\n    # save_safetensors=False # turn this off to prevent potential checkpoint issues\n)\n\n[INFO] Saving model to: models/rt_detrv2_finetuned_trashify_box_detector_v1\n\n\n\n\n14.2 Optional: Setting up an optimizer for multiple learning rates\nIn the papers that mentioned the DETR model we‚Äôre using (see Table 1 in the RT-DETRv2 paper), they state that they used a different learning rate value for the backbone (learning_rate=1e-5) as well as the object detection head (learning_rate=1e-4).\n\n\n\nDifferent learning rates used for different sections of the model from the RT-DETRv2 paper. The backbone uses a slightly lower learning rate than the detection head.\n\n\nTo set this up ourselves, we can extract which parameters of our model belong to the backbone as well as which don‚Äôt.\nTo find the backbone parameters, we can loop through our model‚Äôs named_parameters() method and filter for any which contain the string \"backbone\" in their name.\nWe‚Äôll append these to a list called backbone_parameters and assume any that don‚Äôt have \"backbone\" in their name are not part of the model‚Äôs backbone.\nWe can use these two lists of parameters to pass to torch.optim.AdamW with different learning rate values for each.\n\n\n\n\n\n\nNote\n\n\n\nIn my experiments with our smaller dataset size (~1100 images), I found that setting two different learning rates for the backbone and the object detection head led to poorer performance than just setting a single learning rate for the whole model.\nThe code below is an example of how to create a custom optimizer with different learning rates for different parts of the model.\nHowever, in our actual training code, we‚Äôll use a single learning rate for the whole model.\n\n\nWe can then subclass transformers.Trainer and update the method create_optimizer() to use our custom optimizer.\n\nfrom transformers import Trainer\n\n# Create lists for different kinds of parameters\nbackbone_parameters = []\nother_parameters = []\n\n# Can loop through model parameters and extract different model sections\nfor name, param in model.model.named_parameters(): \n    if \"backbone\" in name:\n        # print(f\"Backbone parameter: {name}\")\n        backbone_parameters.append(param)\n    else:\n        # print(f\"Other parameter: {name}\")\n        other_parameters.append(param)\n\nprint(f\"[INFO] Number of backbone parameter modules: {len(backbone_parameters)}\")\nprint(f\"[INFO] Number of other parameter modules: {len(other_parameters)}\")\n\n# Setup a custom subclass of Trainer to use different learning rates for different parts of the model\nclass CustomTrainer(Trainer):\n    def create_optimizer(self):\n        self.optimizer = torch.optim.AdamW([\n            {\"params\": backbone_parameters, \"lr\": 1e-4},\n            {\"params\": other_parameters, \"lr\": 1e-4}\n        ], weight_decay=0.0001)\n        return self.optimizer\n\n[INFO] Number of backbone parameter modules: 55\n[INFO] Number of other parameter modules: 363\n\n\nAwesome!\nNow if we wanted to use our custom optimizer, we could use CustomTrainer instead of Trainer.\n\n\n14.3 Creating an evaluation function\nEvaluating a model‚Äôs performance is just as important as training a model.\nAfter all, if you don‚Äôt know how well your model is performing, how can you be confident in deploying it or using it in the real world?\nIn this section, let‚Äôs create an evaluation function we can pass to transformers.Trainer‚Äôs compute_metrics parameter.\nThe main goal of an evaluation function is to compare the model‚Äôs predictions to the ground truth labels.\nFor example, how does a model‚Äôs box predictions look like compared to the ground truth box predictions?\nOnce we‚Äôve got a trained model, we can inspect these visually by plotting them on images.\nHowever, during model training, we‚Äôll get our Trainer instance to output evaluation metrics so we can get a snapshot of performance along the way.\nSome things to note about the evaluation function we‚Äôll create:\n\nReading the documentation for the compute_metrics parameter, we can see our evaluation function will be required to take a transformers.EvalPrediction as input.\n\nThis contains our model‚Äôs predictions and labels as predictions and label_ids attributes respectively.\n\nWe must also return a dictionary with string to metric values for it to be displayed during training. For example, {\"metric_value\": 42, ...}.\nTo evaluate our object detection model we‚Äôre going to use the mAP metric (Mean Average Precision, a standard metric used amongst object detection models, see the COCO evaluation section for more details). To do so, we‚Äôll use torchmetrics package, specifically torchmetrics.detection.mean_ap.MeanAveragePrecision.\n\nThis method expects boxes in format XYXY absolute format by default.\n\nOur evaluation function will be an adaptation of the code example in the object detection example on the Hugging Face GitHub.\nFor an in-depth overview on object detection metrics, see the Roboflow Guide to Object Detection Metrics.\n\nPhew! A fair bit to take in.\nBut nothing we can‚Äôt handle.\nLet‚Äôs create our function.\nWe‚Äôll start by making a small helper function to convert bounding boxes from CXCYWH normalized format to XYXY absolute format.\n\ndef convert_bbox_cxcywh_to_xyxy_absolute(boxes, \n                                         image_size_target):\n    \"\"\"\n    Converts CXCYWH normalized boxes to XYXY absolute boxes.\n\n    The output of our preprocess method puts boxes in CXCYWH format.\n\n    But our evaluation metric torchmetrics.detection.mean_ap.MeanAveragePrecision expects\n        boxes in XYXY absolute format.\n\n    Args:\n        boxes (torch.Tensor): A tensor of shape (N, 4) where N is the number of boxes and each box is in CXCYWH format.\n        image_size_target (tuple): A tuple containing the target image size as (height, width).\n    \n    Returns:\n        torch.Tensor: A tensor of shape (N, 4) where each box is converted to XYXY absolute format.\n    \"\"\"\n    # Convert normalized CXCYWH (output of model) -&gt; absolute XYXY format (required for evaluation)\n    boxes = box_convert(boxes=boxes, in_fmt=\"cxcywh\", out_fmt=\"xyxy\")\n\n    # Convert normalized box coordinates to absolute pixel values based on the target size \n    image_size_target_height = image_size_target[0]\n    image_size_target_width = image_size_target[1]\n    boxes = boxes * torch.tensor([image_size_target_width, \n                                  image_size_target_height, \n                                  image_size_target_width, \n                                  image_size_target_height]) # Multiply X coordinates by the width and Y coordinates by the height\n\n    return boxes\n\nPerfect!\nTime to craft our compute_metrics function.\nThe main goal of the function will be to take a transformers.EvalPrediction output from our model and return a dictionary mapping metric names to values, for example, {\"metric_name\": 42.0 ...}.\nTo do so, we‚Äôll go through the following steps:\n\nCreate a Python dataclass to hold our model‚Äôs outputs. We could use a dictionary but this will give our code a bit more structure.\nCreate a compute_metrics function which takes in an EvalPrediction object as well as other required evaluation parameters such as image_processor (for post processing boxes), id2label (for mapping metrics to class names) and threshold (for assigning a prediction probability threshold to boxes).\nExtract predictions and targets from EvalPrediction via EvalPrediction.predictions and EvalPrediction.label_ids respectively.\nCreate empty lists of image_sizes (for post processing boxes), post_processed_predictions and post_processed_targets (we‚Äôll compare the latter two to each other).\nCollect target samples in format required for torchmetrics.detection.mean_ap.MeanAveragePrecision, for example, [{\"boxes\": [...], \"labels\": [...]}].\nCollect predictions in the required formart for MeanAveragePrecision, our model produces boxes in CXCYWH format, then we use image_processor.post_process_object_detection to convert the predictions to XYXY format, and append them to post_processed_predictions in form [{\"boxes\": [...], \"labels\": [...], \"scores\": [...]}].\nInitialize an instance of torchmetrics.detection.mean_ap.MeanAveragePrecision (see documentation for output of MeanAveragePrecision) and pass it predictions and labels to compute on.\nExtract lists of target metrics from the output of MeanAveragePrecision, for example, with metrics.pop(\"target_item\").\nPrepare metrics for output in the form of a dict with metric names -&gt; values, for example, {\"metric_name\": 42.0, ...}.\nRound metric values in output dictionary for visual display during training.\nCreate a partial function we can pass to transformers.Trainer‚Äôs compute_metrics parameter to run as a callable with appropriate parameter inputs to our compute_metrics function.\n\nEasy.\nWe‚Äôve got this.\n\n# Create an evaluation function to test our model's performance\nimport numpy as np\n\nfrom typing import Optional, Mapping\n\nfrom transformers import EvalPrediction\n\nfrom torchvision.ops import box_convert\n\nfrom torchmetrics.detection.mean_ap import MeanAveragePrecision\n\n# 1. Create a dataclass to hold our model's outputs\n@dataclass\nclass ModelOutput:\n    logits: torch.Tensor\n    pred_boxes: torch.Tensor\n\n# 2. Create a compute_metrics function which takes in EvalPrediction and other required parameters\n@torch.no_grad()\ndef compute_metrics(\n    evaluation_results: EvalPrediction, # these come out of the Trainer.evaluate method, see: https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction \n    image_processor: AutoImageProcessor,\n    threshold: float = 0.0,\n    id2label: Optional[Mapping[int, str]] = None,\n) -&gt; Mapping[str, float]:\n    \"\"\"\n    Compute mean average mAP, mAR and their variants for the object detection task.\n\n    Args:\n        evaluation_results (EvalPrediction): Predictions and targets from evaluation.\n        threshold (float, optional): Threshold to filter predicted boxes by confidence. Defaults to 0.0.\n        id2label (Optional[dict], optional): Mapping from class id to class name. Defaults to None.\n\n    Returns:\n        Mapping[str, float]: Metrics in a form of dictionary {&lt;metric_name&gt;: &lt;metric_value&gt;}\n    \"\"\"\n\n    # 3. Extract predictions and targets from EvalPrediction\n    predictions, targets = evaluation_results.predictions, evaluation_results.label_ids\n\n    # For metric computation we need to provide to MeanAveragePrecision\n    #  - 'targets' in a form of list of dictionaries with keys \"boxes\", \"labels\"\n    #  - 'predictions' in a form of list of dictionaries with keys \"boxes\", \"scores\", \"labels\"\n\n    # 4. Get a list of image sizes, processed targets and processed predictions\n    image_sizes = []\n    post_processed_targets = []\n    post_processed_predictions = []\n\n    ### Target collection ###\n\n    # 5. Collect target attributes in the required format for metric computation\n    for batch in targets:\n        # Collect ground truth image sizes, we will need them for predictions post processing\n        batch_image_sizes = torch.tensor(np.array([x[\"orig_size\"] for x in batch])) # turn into a list of numpy arrays first, then tensors\n        image_sizes.append(batch_image_sizes)\n\n        # Collect targets in the required format for metric computation\n        # boxes were converted to YOLO format needed for model training\n        # here we will convert them to Pascal VOC format (x_min, y_min, x_max, y_max) \n        # or XYXY format. We do this because the boxes out of preprocess() are in \n        # CXCYWH normalized format.\n        for image_target in batch:\n\n            # Get boxes and convert from CXCYWH to XYXY\n            boxes = torch.tensor(image_target[\"boxes\"])\n            boxes = convert_bbox_cxcywh_to_xyxy_absolute(boxes=boxes, \n                                                         image_size_target=image_target[\"orig_size\"])\n            \n            # Get labels\n            labels = torch.tensor(image_target[\"class_labels\"])\n\n            # Append box and label pairs in format requried for MeanAveragePrecision class\n            post_processed_targets.append({\"boxes\": boxes, \n                                           \"labels\": labels})\n    \n    ### Prediction collection ###\n\n    # 6. Collect predictions in the required format for metric computation,\n    # model produce boxes in YOLO format (CXCYWH), then image_processor.post_process_object_detection to \n    # convert them to Pascal VOC format (XYXY).\n    for batch, target_sizes in zip(predictions, image_sizes):\n        batch_logits, batch_boxes = batch[1], batch[2]\n        output = ModelOutput(logits=torch.tensor(batch_logits), \n                             pred_boxes=torch.tensor(batch_boxes))\n        \n        # Post process the model outputs\n        post_processed_output = image_processor.post_process_object_detection(\n                                                    outputs=output, \n                                                    threshold=threshold, \n                                                    target_sizes=target_sizes) # target sizes required to shape boxes in correct ratio of original image\n        \n        # Append post_processed_output in form `[{\"boxes\": [...], \"labels\": [...], \"scores\": [...]}]`\n        post_processed_predictions.extend(post_processed_output)\n\n    # 7. Compute mAP\n    max_detection_thresholds = [1, 10, 100] # 1 = mar@1, mar@10, mar@100 (100 = default max total boxes for post processed predictions out of object detection model)\n    metric = MeanAveragePrecision(box_format=\"xyxy\", \n                                  class_metrics=True,\n                                  max_detection_thresholds=max_detection_thresholds) \n    metric.warn_on_many_detections = False # don't output a warning when large amount of detections come out (the sorting handles this anyway)\n    metric.update(post_processed_predictions, \n                  post_processed_targets)\n    metrics = metric.compute()\n    \n    # Optional: print metrics dict for troubleshooting\n    # print(metrics)\n\n    # 8. Extract list of per class metrics with separate metric for each class\n    classes = metrics.pop(\"classes\")\n    map_per_class = metrics.pop(\"map_per_class\")\n\n    # Optional: mAR@N per class (mAR = Mean Average Recall)\n    mar_per_class = metrics.pop(\"mar_100_per_class\")\n    \n    # 9. Prepare metrics per class in the form of a dict with metric names -&gt; values, e.g. {\"metric_name\": 42.0, ...}\n    # for class_id, class_map in zip(classes, map_per_class):\n    for class_id, class_map, class_mar in zip(classes, map_per_class, mar_per_class):\n        class_name = id2label[class_id.item()] if id2label is not None else class_id.item()\n        metrics[f\"map_{class_name}\"] = class_map\n\n        # Optional: mAR@100 per class\n        metrics[f\"mar_100_{class_name}\"] = class_mar\n    \n    # 10. Round metrics for suitable visual output\n    metrics = {k: round(v.item(), 4) for k, v in metrics.items()}\n    \n    # Optional: print metrics dict for troubleshooting\n    # print(metrics)\n\n    return metrics\n\n# 11. Create a partial function for our compute_metrics function (we'll pass this to compute_metrics in Trainer)\neval_compute_metrics_fn = partial(\n        compute_metrics, \n        image_processor=image_processor, \n        threshold=0.0,\n        id2label=id2label, \n)\n\n\n\n14.4 Training our model with Trainer\nWe‚Äôve now got all the ingredients needed to train our model!\nThe good news is since we‚Äôve put so much effort into preparing our dataset, creating an evaluation function and setting up our training arguments, we can train our model in a few lines of code.\nTo train our model, we‚Äôll set up an instance of transformers.Trainer and then we‚Äôll pass it the following arguments:\n\nmodel - The model we‚Äôd like to train. In our case it will be the fresh insteand of model we created using our create_model() function.\nargs - An instance of transformers.TrainingArguments (or training_args in our case) containing various hyperparameter settings to use for our model.\ndata_collator - The function to use which will turn a list of samples from train_dataset into a batch of samples.\ntrain_dataset - The dataset we‚Äôd like our model to train on, in our case this will be processed_dataset[\"train\"], the dataset we‚Äôve already preprocessed.\neval_dataset - The dataset we‚Äôd like our model to be evaluated on, in our case this will be processed_dataset[\"validation\"], our model will never see these samples during training, it will only test itself on these.\ncompute_metrics - A Callable which takes in [EvalPrediction] and is able to return a string to metric ({\"metric_name\": value}) dictionary, these will displayed during training.\n\nAfter we‚Äôve done all that, we can start to train our model with by calling transformers.Trainer.train().\n\n# Note: Depending on the size/speed of your GPU, this may take a while\nfrom transformers import Trainer\n\n# 5. Setup instance of Trainer\nmodel_v1_trainer = Trainer(\n    model=model,\n    args=training_args,\n    data_collator=data_collate_function,\n    train_dataset=processed_dataset[\"train\"], # pass in the already preprocessed data\n    eval_dataset=processed_dataset[\"validation\"],\n    compute_metrics=eval_compute_metrics_fn,\n)\n\n# 6. Train the model \nmodel_v1_results = model_v1_trainer.train(\n    # resume_from_checkpoint=False # you can continue training a model here by passing in the path to a previous checkpoint\n) \n\n\n    \n      \n      \n      [500/500 03:29, Epoch 10/10]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\nMap\nMap 50\nMap 75\nMap Small\nMap Medium\nMap Large\nMar 1\nMar 10\nMar 100\nMar Small\nMar Medium\nMar Large\nMap Bin\nMar 100 Bin\nMap Hand\nMar 100 Hand\nMap Not Bin\nMar 100 Not Bin\nMap Not Hand\nMar 100 Not Hand\nMap Not Trash\nMar 100 Not Trash\nMap Trash\nMar 100 Trash\nMap Trash Arm\nMar 100 Trash Arm\n\n\n\n\n1\n187.744900\n76.783653\n0.075800\n0.142000\n0.070300\n0.000000\n0.014500\n0.078600\n0.133100\n0.287500\n0.328500\n0.000000\n0.185800\n0.365700\n0.169400\n0.644000\n0.198200\n0.350000\n0.010300\n0.428600\n-1.000000\n-1.000000\n0.002000\n0.170800\n0.075000\n0.377900\n0.000000\n0.000000\n\n\n2\n62.347700\n24.752775\n0.199900\n0.306500\n0.186000\n0.000000\n0.056000\n0.210900\n0.326700\n0.533600\n0.550300\n0.000000\n0.175600\n0.576500\n0.283500\n0.752500\n0.441200\n0.692200\n0.006400\n0.335700\n-1.000000\n-1.000000\n0.113600\n0.304200\n0.175600\n0.684100\n0.178900\n0.533300\n\n\n3\n25.808900\n14.790608\n0.255100\n0.387700\n0.276000\n0.000000\n0.073300\n0.266500\n0.381400\n0.590300\n0.650800\n0.000000\n0.317600\n0.694500\n0.207500\n0.866000\n0.461000\n0.689200\n0.017200\n0.507100\n-1.000000\n-1.000000\n0.098200\n0.411100\n0.164100\n0.664600\n0.582700\n0.766700\n\n\n4\n18.084500\n11.792915\n0.331600\n0.491200\n0.374800\n0.050000\n0.091300\n0.354400\n0.411600\n0.608600\n0.688000\n0.100000\n0.509100\n0.720100\n0.497400\n0.867400\n0.536700\n0.785300\n0.099700\n0.628600\n-1.000000\n-1.000000\n0.181500\n0.465300\n0.281600\n0.681400\n0.392900\n0.700000\n\n\n5\n15.275100\n11.574305\n0.369100\n0.576400\n0.393500\n0.150000\n0.058200\n0.390900\n0.432400\n0.594200\n0.672200\n0.150000\n0.343200\n0.716800\n0.563300\n0.851800\n0.512100\n0.795100\n0.089900\n0.585700\n-1.000000\n-1.000000\n0.165100\n0.515300\n0.317600\n0.652200\n0.566500\n0.633300\n\n\n6\n13.623300\n10.943520\n0.424000\n0.611300\n0.483300\n0.088900\n0.062400\n0.446400\n0.506400\n0.658900\n0.731000\n0.300000\n0.356800\n0.768600\n0.625800\n0.861700\n0.532900\n0.767600\n0.106700\n0.614300\n-1.000000\n-1.000000\n0.177500\n0.588900\n0.376900\n0.686700\n0.724300\n0.866700\n\n\n7\n12.436100\n10.461347\n0.442100\n0.641400\n0.509000\n0.066700\n0.075100\n0.469800\n0.495100\n0.640100\n0.720900\n0.200000\n0.386900\n0.759600\n0.641300\n0.891500\n0.485900\n0.767600\n0.155600\n0.621400\n-1.000000\n-1.000000\n0.221000\n0.581900\n0.414800\n0.696500\n0.733800\n0.766700\n\n\n8\n11.657900\n10.532933\n0.430400\n0.610300\n0.473200\n0.035400\n0.061900\n0.456400\n0.488900\n0.642200\n0.718300\n0.350000\n0.243800\n0.763500\n0.641100\n0.858200\n0.511300\n0.772500\n0.157700\n0.485700\n-1.000000\n-1.000000\n0.184800\n0.588900\n0.384100\n0.704400\n0.703100\n0.900000\n\n\n9\n11.009100\n10.670994\n0.455300\n0.632500\n0.513800\n0.066700\n0.079400\n0.482400\n0.503800\n0.647500\n0.727300\n0.400000\n0.326700\n0.771400\n0.664900\n0.863800\n0.480000\n0.761800\n0.148100\n0.557100\n-1.000000\n-1.000000\n0.213200\n0.598600\n0.401300\n0.715900\n0.824300\n0.866700\n\n\n10\n10.597600\n10.565559\n0.464000\n0.641600\n0.504400\n0.053600\n0.079700\n0.490200\n0.514300\n0.666100\n0.739800\n0.350000\n0.480100\n0.774500\n0.677700\n0.859600\n0.488800\n0.771600\n0.153600\n0.628600\n-1.000000\n-1.000000\n0.204200\n0.605600\n0.392100\n0.707100\n0.867300\n0.866700\n\n\n\n\n\n\nThere were missing keys in the checkpoint model loaded: ['class_embed.0.weight', 'class_embed.0.bias', 'class_embed.1.weight', 'class_embed.1.bias', 'class_embed.2.weight', 'class_embed.2.bias', 'class_embed.3.weight', 'class_embed.3.bias', 'class_embed.4.weight', 'class_embed.4.bias', 'class_embed.5.weight', 'class_embed.5.bias', 'bbox_embed.0.layers.0.weight', 'bbox_embed.0.layers.0.bias', 'bbox_embed.0.layers.1.weight', 'bbox_embed.0.layers.1.bias', 'bbox_embed.0.layers.2.weight', 'bbox_embed.0.layers.2.bias', 'bbox_embed.1.layers.0.weight', 'bbox_embed.1.layers.0.bias', 'bbox_embed.1.layers.1.weight', 'bbox_embed.1.layers.1.bias', 'bbox_embed.1.layers.2.weight', 'bbox_embed.1.layers.2.bias', 'bbox_embed.2.layers.0.weight', 'bbox_embed.2.layers.0.bias', 'bbox_embed.2.layers.1.weight', 'bbox_embed.2.layers.1.bias', 'bbox_embed.2.layers.2.weight', 'bbox_embed.2.layers.2.bias', 'bbox_embed.3.layers.0.weight', 'bbox_embed.3.layers.0.bias', 'bbox_embed.3.layers.1.weight', 'bbox_embed.3.layers.1.bias', 'bbox_embed.3.layers.2.weight', 'bbox_embed.3.layers.2.bias', 'bbox_embed.4.layers.0.weight', 'bbox_embed.4.layers.0.bias', 'bbox_embed.4.layers.1.weight', 'bbox_embed.4.layers.1.bias', 'bbox_embed.4.layers.2.weight', 'bbox_embed.4.layers.2.bias', 'bbox_embed.5.layers.0.weight', 'bbox_embed.5.layers.0.bias', 'bbox_embed.5.layers.1.weight', 'bbox_embed.5.layers.1.bias', 'bbox_embed.5.layers.2.weight', 'bbox_embed.5.layers.2.bias'].\n\n\n\n\n14.5 Plotting our model‚Äôs loss curves\nLooking at the metrics output by our model‚Äôs training process, we can see the loss values going down on the training and evaluation datasets.\nAs well as the mAP going up almost universally across the board.\nLet‚Äôs make things visual by inspecting the loss curves and evaluation metric curves of our model.\nWe can extract our model‚Äôs training history values via the model_v1_trainer.state.log_history attribute, this will return us a list of dictionaries containing training metrics related to each epoch.\nOnce we‚Äôve got these, we can create lists of relevant values based on their keys and then plot them with matplotlib.\n\nimport matplotlib.pyplot as plt\n\nlog_history = model_v1_trainer.state.log_history\n\n# Exctract loss values\ntrain_loss = [item[\"loss\"] for item in log_history if \"loss\" in item]\neval_loss = [item[\"eval_loss\"] for item in log_history if \"eval_loss\" in item]\n\n# Extract mAP values\neval_map = [item[\"eval_map\"] for item in log_history if \"eval_map\" in item]\n\n# Plot loss curves and mAP\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 7))\nax[0].plot(train_loss, label=\"Train loss\")\nax[0].plot(eval_loss, label=\"Eval loss\")\nax[0].set_title(\"Loss Curves (lower is better)\")\nax[0].set_ylabel(\"Loss Value\")\nax[0].set_xlabel(\"Epochs\")\nax[0].legend()\n\nax[1].plot(eval_map, label=\"Eval mAP\")\nax[1].set_title(\"Eval mAP (higher is better)\")\nax[1].set_ylabel(\"mAP (Mean Average Precision)\")\nax[1].set_xlabel(\"Epochs\")\nax[1].legend();\n\n\n\n\n\n\n\n\nBeautiful!\nThose are the exact kind of performance curves we‚Äôre looking for.\nIn an ideal world, the loss curves trend downwards and the mAP (Mean Average Percision) curves trend upwards.\nWe‚Äôve only trained for 10 epochs here (10 laps of the data), perhaps our metrics would be even better if we were to train for longer?\nI‚Äôll leave this as an extension for you to try.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#making-predictions-on-the-test-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#making-predictions-on-the-test-dataset",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "15 Making predictions on the test dataset",
    "text": "15 Making predictions on the test dataset\nWe‚Äôve trained a model on our training data (processed_dataset[\"train\"]) and considering the metrics on the validation data (processed_dataset[\"validation\"]) it looks like it‚Äôs performing well.\nHowever, there‚Äôs nothing quite like performing predictions on unseen test data and seeing how they go.\nWe can make predictions using our trained model by passing it samples formatted in the same way it was trained on.\nGood news is, we‚Äôve already got preprocessed test samples (our model has never seen these) in processed_dataset[\"test\"].\nLet‚Äôs start by inspecting a single processed test sample and then we‚Äôll make predictions on the whole test dataset.\n\n# Our dataset is broken into \"train\", \"validation\", \"test\"\nprocessed_dataset\n\n{'train': Dataset({\n     features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n     num_rows: 789\n }),\n 'validation': Dataset({\n     features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n     num_rows: 115\n }),\n 'test': Dataset({\n     features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n     num_rows: 224\n })}\n\n\n\n# Inspect a single sample of the processed test dataset\nprocessed_dataset[\"test\"][0]\n\n{'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'pixel_values': tensor([[[0.2627, 0.3176, 0.2627,  ..., 0.0510, 0.0667, 0.1843],\n          [0.1882, 0.2706, 0.3961,  ..., 0.0510, 0.0902, 0.3569],\n          [0.1451, 0.2235, 0.4392,  ..., 0.0549, 0.1922, 0.3608],\n          ...,\n          [0.7882, 0.7882, 0.7922,  ..., 0.3373, 0.4196, 0.2588],\n          [0.7843, 0.7961, 0.8078,  ..., 0.2863, 0.4941, 0.3725],\n          [0.7765, 0.7922, 0.8078,  ..., 0.2627, 0.5255, 0.4471]],\n \n         [[0.3333, 0.3765, 0.3098,  ..., 0.0745, 0.0941, 0.2118],\n          [0.2588, 0.3333, 0.4471,  ..., 0.0784, 0.1137, 0.3843],\n          [0.2157, 0.2902, 0.4902,  ..., 0.0863, 0.2196, 0.3882],\n          ...,\n          [0.0745, 0.0745, 0.0784,  ..., 0.3686, 0.4627, 0.2941],\n          [0.0706, 0.0824, 0.0941,  ..., 0.3176, 0.5412, 0.4157],\n          [0.0627, 0.0784, 0.0941,  ..., 0.2980, 0.5725, 0.4902]],\n \n         [[0.1686, 0.2471, 0.2196,  ..., 0.0275, 0.0471, 0.1765],\n          [0.0941, 0.1922, 0.3412,  ..., 0.0235, 0.0784, 0.3490],\n          [0.0353, 0.1373, 0.3686,  ..., 0.0314, 0.1725, 0.3412],\n          ...,\n          [0.1216, 0.1216, 0.1255,  ..., 0.1922, 0.2196, 0.1294],\n          [0.1176, 0.1294, 0.1412,  ..., 0.1451, 0.2863, 0.1804],\n          [0.1098, 0.1255, 0.1412,  ..., 0.1020, 0.2941, 0.2039]]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([61]), 'class_labels': tensor([4, 5, 1, 0]), 'boxes': tensor([[0.2104, 0.8563, 0.2855, 0.2720],\n         [0.4194, 0.4927, 0.2398, 0.1785],\n         [0.3610, 0.6227, 0.2706, 0.2330],\n         [0.4974, 0.4785, 0.3829, 0.3820]]), 'area': tensor([23860.4043, 13150.1748, 19368.0898, 44929.9102]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\nWonderful, looks like these are ready to go!\nWe can make predictions on the test dataset using the transformers.Trainer.predict method, this will output a named tuple of predictions and label_ids.\n\n# Make predictions with trainer containing trained model\ntest_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"])\n# test_dataset_preds\n\n\n\n\nOur predictions come in batches, just like our training was done.\nWe can extract the prediction values (logits and predicted bounding boxes) via the .predictions attribute. And the label outputs (the ground truths) via the label_ids attribute.\n\n# Predictions come in the same batch size as our training setup\ntest_dataset_prediction_outputs = test_dataset_preds.predictions\ntest_dataset_label_outputs = test_dataset_preds.label_ids\n\nprint(f\"[INFO] Found {len(test_dataset_prediction_outputs)} batches of prediction samples and {len(test_dataset_label_outputs)} batches of labels.\")\n\n[INFO] Found 14 batches of prediction samples and 14 batches of labels.\n\n\nWe can inspect a batch of predictions by taking the 0th index of test_dataset_prediction_outputs, inside this batch are:\n\nIndex 0 - Metrics in the form of a dictionary.\nIndex 1 - Logits in the form of a NumPy array.\nIndex 2 - Bounding box coordinates in the form of a NumPy array.\n\n\n# Get the first batch of test prediction samples \ntest_batch_metrics = test_dataset_prediction_outputs[0][0] # metrics come at index 0 in the form of a dictionary\ntest_batch_logits = test_dataset_prediction_outputs[0][1] # logits come at index 1 in a numpy array\ntest_batch_boxes = test_dataset_prediction_outputs[0][2] # predicted boxes come at index 2 in a numpy array\n\nprint(f\"[INFO] Metrics keys: {test_batch_metrics.keys()}\")\nprint(f\"[INFO] Test predictions single batch logits shape: {test_batch_logits.shape} -&gt; (batch_size, num_predictions, logit_per_class)\")\nprint(f\"[INFO] Test predictions single batch boxes shape: {test_batch_boxes.shape} -&gt; (batch_size, num_predictions, box_coordinates)\")\nprint(f\"[INFO] Test logits type: {type(test_batch_logits)} | Test boxes type: {type(test_batch_boxes)}\")\n\n[INFO] Metrics keys: dict_keys(['loss_vfl', 'loss_bbox', 'loss_giou', 'loss_vfl_aux_0', 'loss_bbox_aux_0', 'loss_giou_aux_0', 'loss_vfl_aux_1', 'loss_bbox_aux_1', 'loss_giou_aux_1', 'loss_vfl_aux_2', 'loss_bbox_aux_2', 'loss_giou_aux_2', 'loss_vfl_aux_3', 'loss_bbox_aux_3', 'loss_giou_aux_3', 'loss_vfl_aux_4', 'loss_bbox_aux_4', 'loss_giou_aux_4', 'loss_vfl_aux_5', 'loss_bbox_aux_5', 'loss_giou_aux_5'])\n[INFO] Test predictions single batch logits shape: (16, 300, 7) -&gt; (batch_size, num_predictions, logit_per_class)\n[INFO] Test predictions single batch boxes shape: (16, 300, 4) -&gt; (batch_size, num_predictions, box_coordinates)\n[INFO] Test logits type: &lt;class 'numpy.ndarray'&gt; | Test boxes type: &lt;class 'numpy.ndarray'&gt;\n\n\nLet‚Äôs concatenate all of the batches of test predictions into one single numpy.ndarray. We‚Äôll then turn them into torch.tensor‚Äôs so we can use them with our post-processing methods.\n\n# We can stack these together to get the full outputs\ntest_dataset_pred_logits = []\ntest_dataset_pred_boxes = []\n\nfor test_pred_batch in test_dataset_prediction_outputs:\n    test_dataset_pred_logits.append(test_pred_batch[1]) # logits come at index 1\n    test_dataset_pred_boxes.append(test_pred_batch[2]) # boxes come at index 2\n\ntest_dataset_pred_logits = torch.tensor(np.concatenate(test_dataset_pred_logits))\ntest_dataset_pred_boxes = torch.tensor(np.concatenate(test_dataset_pred_boxes))\n\nprint(f\"[INFO] Test predictions logits shape: {test_dataset_pred_logits.shape} -&gt; (num_samples, num_predictions, logit_per_class)\")\nprint(f\"[INFO] Test predictions boxes shape: {test_dataset_pred_boxes.shape} -&gt; (num_samples, num_predictions, box_coordinates - CXCYWH normalize format)\")\n\n[INFO] Test predictions logits shape: torch.Size([224, 300, 7]) -&gt; (num_samples, num_predictions, logit_per_class)\n[INFO] Test predictions boxes shape: torch.Size([224, 300, 4]) -&gt; (num_samples, num_predictions, box_coordinates - CXCYWH normalize format)\n\n\n\n15.1 Evaluating our test predictions\nNow we‚Äôve got our predicted logits and boxes, we can format them in a way so we can evaluate them with torchmetrics.detection.meap_ap.MeanAveragePrecision.\nThe MeanAveragePrecision metric wants the following:\n\npreds (List) - a list of dictionaries (one per image) with the keys boxes (in the default format XYXY and absolute), scores and labels. Where all values in the dictionaries are torch.Tensor.\ntarget (List) - a list of dictionaries (one per image) with the keys boxes (in the default format XYXY and absolute), labels. Where all values in the dictionaries are torch.Tensor.\n\nIn essence, our preds have scores (prediction probabilities) where as our targets do not.\nLet‚Äôs start by collecting a list of dictionaries for our preds.\nWe‚Äôll do so by iterating over our test_dataset_pred_logits and test_dataset_pred_boxes and passing the required inputs to transformers.RTDetrImageProcessor.post_process_object_detection.\n\n# Create an empty list for preds\ntest_dataset_prediction_dicts = []\n\n# Set a threshold for prediction probabilities (we'll use 0.0 to allow all possible predictions, change this if you feel like)\nTHRESHOLD = 0.0\n\n# Iterate through prediction logits and prediction boxes\nfor i in range(len(test_dataset_pred_boxes)):\n    pred_logits = test_dataset_pred_logits[i].unsqueeze(0) # add a batch dimension of 1\n    pred_boxes = test_dataset_pred_boxes[i].unsqueeze(0) \n\n    # Get original size of input image (required for post processing)\n    original_size = processed_dataset[\"test\"][i][\"labels\"][\"orig_size\"].unsqueeze(0) # comes in height, width, we add a batch dimension of 1\n\n    # Collect prediction outputs\n    pred_outputs = ModelOutput(logits=pred_logits,\n                               pred_boxes=pred_boxes)\n    \n    # Post process (boxes will automatically be output in XYXY absolute format)\n    pred_outputs_post_processed = image_processor.post_process_object_detection(\n        outputs=pred_outputs,\n        threshold=THRESHOLD,\n        target_sizes=original_size\n    )\n\n    # Create a dictionary of post processed outputs\n    prediction_dict = {\"boxes\": pred_outputs_post_processed[0][\"boxes\"],\n                       \"scores\": pred_outputs_post_processed[0][\"scores\"],\n                       \"labels\": pred_outputs_post_processed[0][\"labels\"]}\n    \n    # Append dictionary to list\n    test_dataset_prediction_dicts.append(prediction_dict)\n\nprint(f\"[INFO] Number of prediction dicts: {len(test_dataset_prediction_dicts)}\")\nprint(f\"[INFO] Example prediction dict:\")\ntest_dataset_prediction_dicts[0]\n\n[INFO] Number of prediction dicts: 224\n[INFO] Example prediction dict:\n\n\n{'boxes': tensor([[ 221.0374,  646.1925,  466.7746,  948.0635],\n         [ 284.1779,  500.8758,  513.3552,  748.1806],\n         [ 297.0548,  382.5186,  656.9966,  854.1584],\n         ...,\n         [ 360.6175,  257.2795,  654.1285,  513.4293],\n         [   6.4380,  659.8294,  456.9098, 1273.5051],\n         [ 509.2941,  337.9673,  714.2663,  552.0175]]),\n 'scores': tensor([0.6817, 0.5330, 0.5030, 0.3065, 0.1816, 0.1395, 0.1393, 0.1264, 0.1200,\n         0.1047, 0.1012, 0.1011, 0.0998, 0.0969, 0.0922, 0.0863, 0.0857, 0.0818,\n         0.0805, 0.0775, 0.0774, 0.0763, 0.0707, 0.0700, 0.0689, 0.0678, 0.0671,\n         0.0656, 0.0637, 0.0603, 0.0591, 0.0583, 0.0572, 0.0565, 0.0565, 0.0564,\n         0.0550, 0.0548, 0.0537, 0.0533, 0.0530, 0.0527, 0.0522, 0.0520, 0.0514,\n         0.0514, 0.0505, 0.0502, 0.0500, 0.0500, 0.0489, 0.0485, 0.0480, 0.0480,\n         0.0477, 0.0473, 0.0472, 0.0466, 0.0466, 0.0461, 0.0460, 0.0459, 0.0458,\n         0.0457, 0.0450, 0.0449, 0.0448, 0.0448, 0.0445, 0.0444, 0.0442, 0.0442,\n         0.0438, 0.0436, 0.0422, 0.0422, 0.0419, 0.0416, 0.0415, 0.0410, 0.0408,\n         0.0404, 0.0399, 0.0399, 0.0397, 0.0394, 0.0393, 0.0393, 0.0392, 0.0392,\n         0.0390, 0.0389, 0.0389, 0.0387, 0.0385, 0.0385, 0.0384, 0.0383, 0.0382,\n         0.0380, 0.0380, 0.0380, 0.0380, 0.0380, 0.0380, 0.0374, 0.0373, 0.0372,\n         0.0371, 0.0370, 0.0370, 0.0368, 0.0368, 0.0368, 0.0365, 0.0365, 0.0365,\n         0.0364, 0.0362, 0.0362, 0.0361, 0.0358, 0.0358, 0.0356, 0.0354, 0.0353,\n         0.0352, 0.0349, 0.0349, 0.0348, 0.0348, 0.0348, 0.0347, 0.0345, 0.0344,\n         0.0344, 0.0343, 0.0342, 0.0342, 0.0338, 0.0332, 0.0332, 0.0331, 0.0331,\n         0.0330, 0.0330, 0.0330, 0.0328, 0.0327, 0.0326, 0.0326, 0.0323, 0.0323,\n         0.0322, 0.0322, 0.0320, 0.0319, 0.0319, 0.0318, 0.0317, 0.0316, 0.0315,\n         0.0315, 0.0314, 0.0312, 0.0311, 0.0309, 0.0308, 0.0306, 0.0304, 0.0302,\n         0.0300, 0.0300, 0.0299, 0.0299, 0.0296, 0.0294, 0.0293, 0.0291, 0.0289,\n         0.0287, 0.0287, 0.0286, 0.0284, 0.0281, 0.0281, 0.0280, 0.0280, 0.0279,\n         0.0279, 0.0277, 0.0276, 0.0276, 0.0275, 0.0275, 0.0273, 0.0271, 0.0270,\n         0.0268, 0.0267, 0.0267, 0.0267, 0.0265, 0.0264, 0.0263, 0.0263, 0.0263,\n         0.0262, 0.0261, 0.0260, 0.0260, 0.0259, 0.0259, 0.0257, 0.0257, 0.0256,\n         0.0256, 0.0256, 0.0256, 0.0256, 0.0254, 0.0254, 0.0253, 0.0253, 0.0252,\n         0.0252, 0.0250, 0.0249, 0.0248, 0.0248, 0.0247, 0.0247, 0.0246, 0.0246,\n         0.0245, 0.0245, 0.0244, 0.0242, 0.0241, 0.0241, 0.0241, 0.0241, 0.0240,\n         0.0239, 0.0239, 0.0239, 0.0239, 0.0239, 0.0238, 0.0238, 0.0238, 0.0238,\n         0.0237, 0.0237, 0.0237, 0.0236, 0.0236, 0.0235, 0.0234, 0.0232, 0.0232,\n         0.0232, 0.0231, 0.0231, 0.0230, 0.0229, 0.0228, 0.0228, 0.0228, 0.0228,\n         0.0228, 0.0228, 0.0227, 0.0227, 0.0227, 0.0226, 0.0225, 0.0224, 0.0222,\n         0.0222, 0.0222, 0.0221, 0.0221, 0.0220, 0.0220, 0.0219, 0.0219, 0.0219,\n         0.0219, 0.0218, 0.0218, 0.0218, 0.0218, 0.0218, 0.0218, 0.0217, 0.0217,\n         0.0217, 0.0216, 0.0216]),\n 'labels': tensor([1, 5, 0, 0, 4, 5, 5, 5, 4, 1, 4, 0, 4, 1, 1, 4, 1, 3, 1, 4, 4, 2, 0, 1,\n         4, 1, 5, 0, 4, 0, 1, 6, 1, 4, 5, 4, 0, 0, 0, 3, 1, 0, 4, 3, 6, 0, 1, 4,\n         5, 0, 4, 1, 4, 0, 4, 1, 4, 1, 0, 5, 3, 4, 1, 1, 0, 1, 1, 3, 3, 6, 5, 4,\n         2, 4, 0, 5, 4, 2, 1, 4, 4, 1, 0, 0, 5, 4, 1, 1, 0, 4, 1, 1, 3, 3, 4, 5,\n         0, 4, 1, 3, 5, 1, 0, 4, 4, 5, 4, 4, 6, 4, 5, 4, 4, 4, 4, 1, 5, 3, 2, 4,\n         3, 4, 4, 0, 4, 0, 3, 0, 0, 2, 2, 5, 5, 3, 4, 0, 4, 3, 0, 5, 0, 1, 4, 1,\n         5, 4, 1, 1, 2, 5, 4, 1, 4, 4, 2, 5, 0, 2, 1, 1, 2, 0, 6, 4, 4, 1, 5, 1,\n         4, 1, 4, 1, 3, 3, 1, 5, 0, 3, 3, 1, 0, 5, 5, 0, 0, 4, 5, 4, 0, 5, 1, 1,\n         1, 1, 4, 5, 5, 4, 2, 1, 4, 4, 1, 0, 4, 0, 0, 0, 0, 5, 1, 0, 4, 1, 6, 3,\n         1, 5, 4, 5, 3, 1, 1, 0, 1, 6, 2, 5, 2, 0, 3, 4, 4, 0, 1, 5, 0, 6, 5, 5,\n         0, 0, 5, 1, 0, 6, 1, 1, 0, 5, 0, 3, 5, 4, 4, 5, 2, 6, 4, 5, 1, 3, 3, 1,\n         0, 0, 0, 2, 0, 2, 3, 5, 5, 5, 3, 4, 4, 5, 3, 0, 3, 4, 4, 0, 1, 2, 0, 0,\n         5, 1, 4, 6, 4, 4, 5, 1, 5, 1, 3, 1])}\n\n\nBeautiful! We‚Äôve now got a list of prediction dictionaries.\nLet‚Äôs do the same for our targets.\nWe‚Äôll iterate through each sample in proecess_dataset[\"test\"] and create a target dictionary for each sample.\nThe main difference is that we‚Äôll have to convert the boxes from CXCYWH normalized to XYXY absolute.\nLuckily, we‚Äôve got our handy convert_bbox_cxcywh_to_xyxy_absolute helper function to do just that!\n\n# Create a list for targets\ntest_dataset_target_dicts = []\n\n# Iterate through test samples\nfor test_sample in processed_dataset[\"test\"]:\n    \n    # Extract truth labels\n    sample_labels = test_sample[\"labels\"]\n\n    # Extract class labels and boxes\n    truth_class_labels = sample_labels[\"class_labels\"]\n    truth_boxes = sample_labels[\"boxes\"]\n\n    # Get original size of image\n    original_size = sample_labels[\"orig_size\"] # size of original image in (height, width)\n\n    # Convert boxes from CXCYWH normalized to XYXY absolute\n    truth_boxes_xyxy = convert_bbox_cxcywh_to_xyxy_absolute(boxes=truth_boxes, \n                                                            image_size_target=original_size)\n\n    # Create target truth dictionary\n    target_dict = {\"boxes\": truth_boxes_xyxy,\n                   \"labels\": truth_class_labels}\n    \n    # Append target dictionary to list\n    test_dataset_target_dicts.append(target_dict)\n\nprint(f\"[INFO] Number of target dictionaries: {len(test_dataset_target_dicts)}\")\nprint(f\"[INFO] Example target dictionary:\")\ntest_dataset_target_dicts[0]\n\n[INFO] Number of target dictionaries: 224\n[INFO] Example target dictionary:\n\n\n{'boxes': tensor([[  64.9000,  922.0001,  339.0000, 1270.2000],\n         [ 287.5000,  516.4000,  517.7000,  744.9000],\n         [ 216.7000,  647.9999,  476.5000,  946.2000],\n         [ 293.7000,  368.0000,  661.3000,  856.9000]]),\n 'labels': tensor([4, 5, 1, 0])}\n\n\nAlright, now we‚Äôve got a list of preds in test_dataset_prediction_dicts and a list of targets in test_dataset_target_dicts, let‚Äôs create an instance of MeanAveragePrecision and use to calculate metrics comparing our predictions to the ground truth.\nWe‚Äôll set the class_metrics=True parameter so we can get a breakdown of the mAP (Mean Average Precision) and mAR (Mean Average Recall) for each class.\n\n# Compare predictions to targets\nfrom torchmetrics.detection.mean_ap import MeanAveragePrecision\n\n# Instantiate MAP metric instance\nmap_metric = MeanAveragePrecision(iou_type=\"bbox\", \n                                  class_metrics=True) # we want metrics for each individual class \nmap_metric.warn_on_many_detections = False # hide extra detection warnings\n\n# Update our metric with list of pred dicts and list of target dicts\nmap_metric.update(preds=test_dataset_prediction_dicts, \n                  target=test_dataset_target_dicts)\n\n# Calculate the metric\ntest_metric_outputs = map_metric.compute()\n\n# Extract per class metrics (we'll use these later on)\ntest_map_per_class = test_metric_outputs.pop(\"map_per_class\")\ntest_mar_per_class = test_metric_outputs.pop(\"mar_100_per_class\")\n\n# Inspect the metrics\ntest_metric_outputs\n\n{'map': tensor(0.3779),\n 'map_50': tensor(0.5424),\n 'map_75': tensor(0.4236),\n 'map_small': tensor(0.),\n 'map_medium': tensor(0.0672),\n 'map_large': tensor(0.3950),\n 'mar_1': tensor(0.4512),\n 'mar_10': tensor(0.6943),\n 'mar_100': tensor(0.7473),\n 'mar_small': tensor(0.),\n 'mar_medium': tensor(0.5421),\n 'mar_large': tensor(0.7628),\n 'classes': tensor([0, 1, 2, 3, 4, 5, 6], dtype=torch.int32)}\n\n\n\n\n15.2 Visualizing our test dataset evaluation mertics\nWe‚Äôve now got some test dataset evaluation metrics, how about we follow the data explorer‚Äôs motto and visualize, visualize, visualize!\nLet‚Äôs visualize a these in a bar chart.\n\nimport matplotlib.pyplot as plt\n\n# Extract mAP and mAR metrics\ntest_map_metrics = {key: value for key, value in test_metric_outputs.items() if \"map\" in key}\ntest_mar_metrics = {key: value for key, value in test_metric_outputs.items() if \"mar\" in key}\n\n# Get labels and values\ntest_map_labels, test_map_values = zip(*sorted(test_map_metrics.items()))\ntest_mar_labels, test_mar_values = zip(*sorted(test_mar_metrics.items()))\n\n# Create a subplot\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 5), sharey=True)\n\n# Add mAP values\nax[0].bar(test_map_labels, test_map_values)\nax[0].set_title(\"Mean Average Precision (mAP)\")\nax[0].set_xlabel(\"Metric\")\nax[0].set_ylabel(\"Value\")\nax[0].tick_params(axis=\"x\", rotation=45)\n\n# Add mAR values\nax[1].bar(test_mar_labels, test_mar_values, color=\"tab:orange\")\nax[1].set_title(\"Mean Average Recall (mAR)\")\nax[1].set_xlabel(\"Metric\")\nax[1].tick_params(axis=\"x\", rotation=45)\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\nNice! It looks like our model generally has a higher recall than precision, this is most likely because we set our prediction probability threshold to 0.0 (THRESHOLD=0.0).\nThis means all possible predictions are allowed through, in turn leading to the highest possible recall metric.\nLet‚Äôs now visualize per class values.\n\n# Map class names to metric values \ntest_map_per_class_dict = dict(zip(list(label2id.keys()), test_map_per_class))\ntest_mar_per_class_dict = dict(zip(list(label2id.keys()), test_mar_per_class))\n\n# Get labels and values\ntest_map_per_class_labels, test_map_per_class_values = zip(*sorted(test_map_per_class_dict.items()))\ntest_mar_per_class_labels, test_mar_per_class_values = zip(*sorted(test_mar_per_class_dict.items()))\n\n# Create a list of RGB colour floats for matplotlib\nlabel_to_colour_dict = {key: normalize_rgb(value) for key, value in colour_palette.items()}\n\ncolours_for_map = [label_to_colour_dict.get(label_name, (0.6, 0.6, 0.6)) for label_name in test_map_per_class_labels] # (0.6, 0.6, 0.6) = fallback to grey colour\ncolours_for_mar = [label_to_colour_dict.get(label_name, (0.6, 0.6, 0.6)) for label_name in test_mar_per_class_labels] # (0.6, 0.6, 0.6) = fallback to grey colour\n\n# Create a subplot\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12, 5), sharey=True)\n\n# Add mAP values\nax[0].bar(test_map_per_class_labels, \n          test_map_per_class_values,\n          color=colours_for_map)\nax[0].set_title(\"Mean Average Precision (mAP)\")\nax[0].set_xlabel(\"Metric\")\nax[0].set_ylabel(\"Value\")\nax[0].tick_params(axis=\"x\", rotation=45)\n\n# Add mAR values\nax[1].bar(test_mar_per_class_labels, \n          test_mar_per_class_values, \n          color=colours_for_mar)\nax[1].set_title(\"Mean Average Recall (mAR)\")\nax[1].set_xlabel(\"Metric\")\nax[1].tick_params(axis=\"x\", rotation=45)\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\nBeautiful!\nIt looks like our main target classes (bin, hand, trash) are performing quite similarly on precision and recall.\nWe could balance the prediction probability threshold depending on what we‚Äôre trying to optimize for.\n\n\n\n\n\n\nNote\n\n\n\nWhich metric should you optimize for?\nPrecision or recall?\nTo avoid false positives, optimize for precision (higher predicition probability threshold), this will mean less predictions will be made overall but they will have a higher likelihood of being correct.\nTo avoid false negatives, optimize for recall (lower prediction probability threshold), more overall predictions will be made, making it more likely that items will not be missed.\nWhich you choose will depend on your problem space.\nIf you are in a safety critical space, you might want to optimize for recall (less chance of something being missed but more false positives).\nIf user experience matters most, for example, in a consumer app like Trashify, optimize for recall, users often find deleting wrong results preferable to adding missed items.\nIf a false positive predicition is costly, optimize for precision.\n\n\n\n\n15.3 Evaluating and visualizing predictions one by one\nWe‚Äôve seen how our model performs on the test dataset in metric form but nothing quite compares to visualizing actual predictions.\nTo do so, we‚Äôll extract a random sample from processed_dataset[\"test\"], pass it to our model, post process the outputs and then plot the predicted boxes on an actual image.\n\n\n\n\n\n\nNote\n\n\n\nIf your predictions aren‚Äôt the exact same as below, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar. For example, do your loss curves go down and evaluation metrics trend up?\nIdeally, your predictions will be not too dissimiliar.\n\n\n\nimport time\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\n# Get a random sample from the processed dataset\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# Do a single forward pass with the model (we'll time how long it takes for fun)\nstart_pred_time = time.time()\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\nend_pred_time = time.time()\nprint(f\"[INFO] Total time to perform prediction: {round(end_pred_time - start_pred_time, 3)} seconds.\")\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.35, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=random_test_sample[\"labels\"][\"orig_size\"].unsqueeze(0) # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = half_boxes(random_test_sample_outputs_post_processed[0][\"boxes\"])\n\n# Create a list of labels and colours to plot on the boxes \nrandom_test_sample_pred_to_score_tuples = [(id2label[label_pred.item()], round(score_pred.item(), 4)) \n                                           for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\nrandom_test_sample_labels_to_plot = [f\"Pred: {item[0]} ({item[1]})\" for item in random_test_sample_pred_to_score_tuples]\nrandom_test_sample_colours_to_plot = [colour_palette[item[0]] for item in random_test_sample_pred_to_score_tuples]\n\nprint(f\"[INFO] Labels with scores:\")\nfor label in random_test_sample_labels_to_plot:\n    print(label)\n\n# Plot the predicted boxes on the random test image \ntest_pred_box_image = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_image(dataset[\"test\"][random_test_pred_index][\"image\"])),\n        boxes=random_test_sample_pred_boxes,\n        colors=random_test_sample_colours_to_plot,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\ntest_pred_box_image\n\n[INFO] Making predictions on test item with index: 163\n[INFO] Total time to perform prediction: 0.07 seconds.\n[INFO] Labels with scores:\nPred: hand (0.7147)\nPred: bin (0.555)\nPred: trash (0.5036)\n\n\n\n\n\n\n\n\n\nNice!\nThese prediction boxes look far better than our randomly predicted boxes with an untrained model.\n\n\n\n\n\n\nNote\n\n\n\nIf you have two predictions appearing for the same class on the image (e.g.¬†two boxes around the hand), this can be remedied by post processing the predicted boxes with a technique called NMS (Non-maximum Suppression).\nNMS can help to only keep the highest scoring box per class (the one with the maximum prediction probability).\nThis would mean that if there are two (or more) boxes predicted for the hand class, only the one with the highest prediction probability will remain.\nThis same filtering technique can be applied to each predicted class.\n\n\n\n\n15.4 Comparing our model‚Äôs predicted boxes to the ground truth boxes\nHow about we compare our model‚Äôs predicted boxes to the ground truth boxes?\nTo do so, we‚Äôll extract the same test sample from the test dataset, plot the ground truth boxes on it and then create a side by side comparison of truth versus predictions.\n\n# Get ground truth image\nground_truth_image = half_image(dataset[\"test\"][random_test_pred_index][\"image\"])\n\n# Get ground truth boxes (we'll convert these from CXCYWH -&gt; XYXY to be in the same format as our prediction boxes)\nground_truth_boxes = [convert_bbox_cxcywh_to_xyxy_absolute(boxes=input_box,\n                                                           image_size_target=random_test_sample[\"labels\"][\"orig_size\"]) for input_box in random_test_sample[\"labels\"][\"boxes\"]]\nground_truth_boxes = torch.stack(half_boxes(ground_truth_boxes))\n\n# Get ground truth labels and colours\nground_truth_labels = [id2label[label.item()] for label in random_test_sample[\"labels\"][\"class_labels\"]]\nground_truth_colours = [colour_palette[label] for label in ground_truth_labels]\n\n# Create ground truth box plot image\ntest_ground_truth_box_image = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=ground_truth_image),\n        boxes=ground_truth_boxes,\n        colors=ground_truth_colours,\n        labels=ground_truth_labels,\n        width=3\n    )\n)\n\n# Plot ground truth image and boxes to predicted image and boxes\nfig, ax = plt.subplots(ncols=2, figsize=(16, 10))\nax[0].imshow(test_ground_truth_box_image)\nax[0].set_title(\"Ground Truth Image and Boxes\")\nax[0].axis(False)\nax[1].imshow(test_pred_box_image)\nax[1].set_title(\"Predicted Boxes\")\nax[1].axis(False)\n\nplt.show()\n\n\n\n\n\n\n\n\nWoah! It looks like our model does fairly well to reproduce boxes that are similar to the ground truth.\nThere are some slight mistakes such as where our model predicts more than one of the same box in similar areas (this could be filtered later on with NMS or non-maximum suppression which removes all but the highest prediction probability boxes for each class).\n\n\n15.5 Predict on image from the wild\nWe‚Äôve seen how our model performs on test data which is similar to our training data.\nBut how does it do on an image from the wild?\nFor the image below, I searched for ‚Äúperson putting trash in bin‚Äù and selected one of the first images to appear.\nYou can see it at the URL: https://images.pexels.com/photos/7565384/pexels-photo-7565384.jpeg.\nIf this image doesn‚Äôt work, we could even try our model on an AI generated image of a person throwing trash in a bin and see how it performs.\nLet‚Äôs write some code to download our target image from the URL above and save it to file.\n\nimport requests\nfrom PIL import Image\n\n# Example image of person putting trash in bin\nurl = \"https://images.pexels.com/photos/7565384/pexels-photo-7565384.jpeg\"\nfilename = \"pexels-photo-7565384.jpeg\"\n\n# Donwload image\nwith requests.get(url, stream=True, timeout=10) as response:\n    response.raise_for_status() # ensure the download succeeded\n    with open(filename, \"wb\") as file:\n        for chunk in response.iter_content(chunk_size=8192):\n            file.write(chunk)\n\nprint(f\"[INFO] Saved to {filename}\")\nimage_from_wild = Image.open(filename)\nfor _ in range(3): # the default image is quite large so we'll half it three times\n    image_from_wild = half_image(image_from_wild)\nimage_from_wild\n\n[INFO] Saved to pexels-photo-7565384.jpeg\n\n\n\n\n\n\n\n\n\nNice!\nThis one looks slightly different to some of the images our model saw during training, so it‚Äôll be interesting to see how it goes.\nTo make predictions on the downloaded image we‚Äôll go through the following steps:\n\nOpen the image.\nPreprocess the image with image_processor.\nMake predictions on the processed image with our model.\nGet the original size of the image for doing box post processing conversions.\nSet a prediction probability threshold of how confident we‚Äôd like our model to be in its predictions.\nPost process our model‚Äôs predictions.\nExtract the post processed labels, scores and box coordinates.\nCreate a list of labels, scores and colours to plot.\nDraw our model‚Äôs predicted bounding boxes on the target image with draw_bounding_boxes and to_pil_image.\n\nLet‚Äôs do it!\n\n# Pred on image from pathname\nfrom pathlib import Path\nfrom PIL import Image\n\ndef get_image_dimensions_from_pil(image: Image.Image) -&gt; torch.tensor:\n    \"\"\"\n    Convert the dimensions of a PIL image to a PyTorch tensor in the order (height, width).\n\n    Args:\n        image (Image.Image): The input PIL image.\n\n    Returns:\n        torch.Tensor: A tensor containing the height and width of the image.\n    \"\"\"\n    # Get (width, height) of image (PIL.Image.size returns width, height)\n    width, height = image.size\n\n    # Convert to a tensor in the order (height, width)\n    image_dimensions_tensor = torch.tensor([height, width])\n\n    return image_dimensions_tensor\n\n# Get a test image \ntest_image_pil = Image.open(\"pexels-photo-7565384.jpeg\").resize(size=(640, 640))\n\n# Preprocess the image\ntest_image_preprocessed = image_processor.preprocess(images=test_image_pil,\n                                                     return_tensors=\"pt\")\n\n# Make predictions on the preprocessed image\nrandom_test_sample_outputs = model(pixel_values=test_image_preprocessed[\"pixel_values\"].to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\n# Get image original size\ntest_image_size = get_image_dimensions_from_pil(image=test_image_pil)\nprint(f\"[INFO] Test image size: {test_image_size}\")\n\n# Create the threshold, we can adjust this based on how confident we'd like our model to be about its predictions\nTHRESHOLD = 0.4\n\n# Post process the predictions\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=THRESHOLD,\n    target_sizes=test_image_size.unsqueeze(0) # needs to be same length as batch dimension of the logits (e.g. [[height, width]])\n)\n\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\"\n                                     for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\nrandom_test_sample_colours_to_plot = [colour_palette[id2label[label_pred.item()]] for label_pred in random_test_sample_pred_labels]\n\nprint(\"[INFO] Labels with scores:\")\nfor item in random_test_sample_labels_to_plot:\n    print(item)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=test_image_pil),\n        colors=random_test_sample_colours_to_plot,                     \n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Test image size: tensor([640, 640])\n[INFO] Labels with scores:\nPred: trash (0.7413)\nPred: trash (0.5808)\nPred: bin (0.4705)\nPred: trash (0.4051)\nPred: trash (0.4042)\n\n\n\n\n\n\n\n\n\nHow did the model do?\nIt‚Äôs good to test on random images which may be in our domain (e.g.¬†random photos or AI generated photos of someone putting trash in a bin), this way we can test to see if there are any conditions where our model fails.\nIn the example above, I noticed the model often fails to detect the hand.\nThis is likely because many of our training images are from first person point of views rather than third person point of views.\nTo fix this, we could incorportate more diverse training data into our pipeline.",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial.html#uploading-our-trained-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial.html#uploading-our-trained-model-to-hugging-face-hub",
    "title": "Object Detection with Hugging Face Transformers Tutorial",
    "section": "16 Uploading our trained model to Hugging Face Hub",
    "text": "16 Uploading our trained model to Hugging Face Hub\nSince our model looks like it‚Äôs working quite well, how about we upload to the Hugging Face Hub to make it accessible to others?\nWe‚Äôll first start by creating a path to save the model to locally.\nThen we‚Äôll save the model to file using the transformers.Trainer.save_model method.\n\n# Save the model\nfrom datetime import datetime # optional: add a date of when we trained our model\n\n# Get details to add to model's save path\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\n# Create model save path with some training details\nmodel_save_path = f\"models/learn_hf_rt_detrv2_finetuned_trashify_box_dataset_only_manual_data_no_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\n\n# Save model to file\nprint(f\"[INFO] Saving model to: {model_save_path}\")\nmodel_v1_trainer.save_model(model_save_path)\n\n[INFO] Saving model to: models/learn_hf_rt_detrv2_finetuned_trashify_box_dataset_only_manual_data_no_aug_10_epochs_lr_1e-04\n\n\nNow let‚Äôs make sure we add our model‚Äôs image_processor to the our Trainer instance, so when someone loads our model, it automatically knows how to preprocess an input sample.\nThis is usually done automatically but I‚Äôve run into some issues in the past where the model doesn‚Äôt load the preprocessor.\nTo do this we can see the processing_class attribute of model_v1_trainer to be our image_processor.\n\n# Make sure trainer has the processor class (this can sometimes be automatically assigned, however, we'll hard code it just to be safe)\nmodel_v1_trainer.processing_class = image_processor\n\nNice!\nNow let‚Äôs push our model_v1_trainer to the Hugging Face Hub using transformers.Trainer.push_to_hub (this will push our trained model and processing class to the Hugging Face Hub).\n\n\n\n\n\n\nNote\n\n\n\nWhenever you try to push something to the Hugging Face Hub, make sure you‚Äôve got your Hugging Face account and token credentials setup correctly.\nSee the Hugging Face setup guide for a walkthrough of how to do this.\n\n\n\n# Push the model to the hub\n# Note: this will require you to have your Hugging Face account setup \nmodel_on_hub_url = model_v1_trainer.push_to_hub(commit_message=\"upload fine-tuned RT-DETRv2 trashify object detection model\",\n                                                # token=None # Optional to add a token manually\n                                                )\n\n\n\n\n\n\n\n\n\n\nPerfect! Our model has been uploaded to the Hugging Face Hub.\nIf no changes have been made to a previously uploaded model file, you might see a message like the following:\n\nNo files have been modified since last commit. Skipping to prevent empty commit.\n\nOtherwise, we can check the commit URL of our model using the commit_url attribute.\n\nprint(f\"[INFO] Our model has been uploaded with the following commit URL: {model_on_hub_url.commit_url}\")\n\n[INFO] Our model has been uploaded with the following commit URL: https://huggingface.co/mrdbourke/rt_detrv2_finetuned_trashify_box_detector_v1/commit/46003b6b8f8e9855a0d8979ba5cdb1b8ca437646",
    "crumbs": [
      "Home",
      "Computer Vision",
      "Build a custom object detection model and demo"
    ]
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "",
    "text": "Details:\nIn progress:\nLater:\nSource code on GitHub | Online book version | Setup guide | Video Course (coming soon)\nTo postprocess the outputs of our model we can use the transformers.ConditionalDetrImageProcessor.post_process_object_detection() method.\nLet‚Äôs frist recompute the model‚Äôs outputs for our preprocessed single sample.\nmodel.to(\"cpu\")\n\n# Recompute the random sample outputs with our preprocessed sample\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    # pixel_mask=random_sample_preprocessed[\"pixel_mask\"],\n)\n\n# Inspect the output type\ntype(random_sample_outputs)\n\ntransformers.models.d_fine.modeling_d_fine.DFineObjectDetectionOutput\nWonderful!\nWe get the exact output our post_process_object_detection() method is looking for.\nNow we can fill in the following parameters:\nYou can see what happens behind the scenes of post_process_object_detection in the source code.\n# Set the score threshold for postprocessing\nTHRESHOLD = 0.63\n\n# Post process a single output from our model\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=THRESHOLD, # all boxes with scores under this value will be discarded (best to experiment with it)\n    target_sizes=random_sample_preprocessed[\"labels\"][0][\"orig_size\"].unsqueeze(0) # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6773, 0.6717, 0.6713, 0.6703, 0.6693, 0.6688, 0.6687, 0.6657, 0.6638,\n          0.6638, 0.6629, 0.6620, 0.6604, 0.6601, 0.6597, 0.6592, 0.6590, 0.6563,\n          0.6560, 0.6543, 0.6541, 0.6528, 0.6513, 0.6505, 0.6500, 0.6489, 0.6484,\n          0.6483, 0.6478, 0.6477, 0.6476, 0.6472, 0.6470, 0.6469, 0.6464, 0.6460,\n          0.6453, 0.6437, 0.6436, 0.6414, 0.6406, 0.6403, 0.6403, 0.6401, 0.6399,\n          0.6399, 0.6394, 0.6391, 0.6387, 0.6378, 0.6372, 0.6369, 0.6367, 0.6367,\n          0.6366, 0.6364, 0.6358, 0.6357, 0.6353, 0.6341, 0.6339, 0.6338, 0.6337,\n          0.6337, 0.6336, 0.6330, 0.6328, 0.6322, 0.6315, 0.6313, 0.6310, 0.6310,\n          0.6309, 0.6305, 0.6300], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n          6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n          6, 6, 6]),\n  'boxes': tensor([[ 461.5569, 1028.4918, 1111.9502, 1287.5718],\n          [ 343.5070, 1071.6896, 1023.3339, 1307.5841],\n          [ 556.9481, 1166.7968, 1040.3264, 1269.6218],\n          [ 366.5481, 1157.3687, 1042.3070, 1260.9950],\n          [ 410.1182, 1157.5582, 1081.2236, 1210.2800],\n          [ 464.2731, 1036.1602, 1147.5289, 1133.0693],\n          [ 427.2278,  988.4728, 1112.3204, 1301.0443],\n          [ 755.7856, 1136.1094,  952.7983, 1255.5166],\n          [ 462.5093,  915.3126, 1156.9567, 1295.1143],\n          [ 458.8244,  948.6067, 1152.7765, 1269.2286],\n          [ 454.4674,  893.7633, 1140.9899, 1293.3416],\n          [ 499.1130,  947.0450, 1124.3445, 1263.4498],\n          [ 624.9409, 1144.1875, 1022.9194, 1286.3049],\n          [ 470.5767, 1000.5124, 1155.5229, 1128.7048],\n          [ 348.6637, 1007.0045, 1028.3669, 1328.6647],\n          [ 311.9746, 1071.6873,  991.5189, 1307.9250],\n          [ 477.7863, 1115.5266,  503.0877, 1155.7402],\n          [ 416.5534,  980.3992, 1106.8862, 1313.7502],\n          [ 443.0198, 1158.8696,  605.1979, 1283.0447],\n          [ 453.8001, 1166.6227,  546.5385, 1256.0813],\n          [ 910.3138,  696.0774,  934.3611,  712.9976],\n          [ 480.9982, 1172.5645,  942.4853, 1272.8693],\n          [ 845.7113,  972.5127,  951.1424, 1085.2083],\n          [ 659.2839, 1120.4821,  881.4774, 1293.1055],\n          [ 248.7331, 1106.9009,  974.0640, 1291.1428],\n          [ 234.9281, 1137.0491,  963.1415, 1288.5717],\n          [ 841.7444, 1043.6561,  892.8604, 1107.8521],\n          [ 874.4958,  266.6493,  952.9993,  396.9141],\n          [ 783.7662,  587.1614, 1147.2819,  914.8285],\n          [ 431.8202,  779.0344, 1126.5011, 1262.3302],\n          [ 646.3683,  388.4812, 1168.0591, 1263.3081],\n          [ 469.4753,  982.3627, 1151.3199, 1124.7969],\n          [ 254.9715, 1119.5461,  979.3273, 1305.3578],\n          [ 434.1933, 1135.9979,  496.8926, 1248.8904],\n          [ 384.2162, -250.9259,  748.6843,  132.0640],\n          [ 445.3415, 1129.3380,  484.9316, 1221.6478],\n          [ 458.4590, 1122.0289,  499.8357, 1200.6324],\n          [ 448.3996, 1181.7744,  495.6203, 1261.5551],\n          [ 400.6617,  899.0413, 1083.2028, 1263.1230],\n          [ 892.5833,  582.2070,  938.4957,  655.2589],\n          [ 363.3553,  940.9905, 1044.3455, 1283.1439],\n          [ 786.5690,  572.4601, 1150.1473,  883.5199],\n          [ 583.5884,  211.7953, 1162.4932, 1031.4421],\n          [ 480.9845,  893.3757, 1163.0215, 1073.9672],\n          [ 507.8745, 1079.4955,  560.0154, 1142.8655],\n          [ 330.4609, -236.3275,  757.4784,  162.7852],\n          [ 788.6633,  657.0111, 1165.0211, 1024.9022],\n          [ 785.7659,  580.1409, 1148.9901,  889.0194],\n          [ 434.9830,  969.0608, 1082.6940, 1176.7150],\n          [ 389.1115, 1032.7927, 1072.0930, 1123.2089],\n          [ 852.3364,  725.0690,  910.6172,  791.5131],\n          [ 620.6955, 1118.7616,  943.6020, 1220.2964],\n          [ 772.9348,  503.1233, 1153.2080,  811.1403],\n          [ 776.7635,  468.9152, 1145.0391,  783.6506],\n          [ 779.2745,  485.7932, 1142.7728,  815.3354],\n          [ 781.2212,  507.5489, 1161.4269,  820.5194],\n          [ 367.9860, 1012.8201, 1049.1617, 1128.7786],\n          [ 774.6905,  520.5503, 1146.4365,  820.6628],\n          [ 445.8974,  851.4008, 1142.9490, 1188.8733],\n          [ 890.0926, 1026.2524,  955.6308, 1159.7007],\n          [ 135.0331, -270.5507,  799.7726,  942.1915],\n          [ 790.9735,  593.2879, 1165.5626,  920.5805],\n          [ 760.1867,  575.9777, 1126.9902,  881.0749],\n          [ 442.3699,  612.6012, 1126.5757, 1317.4861],\n          [ 119.9632, -276.2614,  819.3212,  778.4369],\n          [ 658.7941,  634.0650, 1125.4657,  988.0487],\n          [ 765.3433,  446.3686, 1131.2528,  789.1061],\n          [ 772.6938,  486.1971, 1145.6522,  734.5475],\n          [ 892.5002, 1136.8959,  956.5233, 1247.3687],\n          [ 412.8248, -258.9145,  775.7543,  537.2967],\n          [ 617.9266,  396.1856, 1170.2976, 1131.5671],\n          [ 299.8953,   -2.6831,  390.4100,  164.5320],\n          [ 812.7014,  381.9931,  948.3386,  456.4753],\n          [ 773.5546,  479.1904, 1136.5525,  815.9143],\n          [ 770.6393,  759.7148,  991.5883,  844.8650]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\nrandom_sample_preprocessed[\"labels\"][0][\"orig_size\"].unsqueeze(0)\n\ntensor([[1280,  960]])\nPerfect!\nThis looks like something we can use.\nLet‚Äôs break down each of the keys in random_sample_outputs_post_processed.\nWe get three equal length tensors:"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---overview",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---overview",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "1 TK - Overview",
    "text": "1 TK - Overview\nTK - Make an intro about being on the Trashify üöÆ team with a mission to make the world a cleaner place, trashify = using ML to incentivize people to pick up trash in their local area\nWelcome to the Learn Hugging Face Object Detection project!\nInside this project, we‚Äôll learn bits and pieces about the Hugging Face ecosystem as well as how to build our own custom object detection model.\nWe‚Äôll start with a collection of images with bounding box files as our dataset, fine-tune an existing computer vision model to detect items in an image and then share our model as a demo others can use.\nTK image - update cover image for object detection  \n\nWe‚Äôre going to put on our internship hats and build a food not food text classification model using tools from the Hugging Face ecosystem.\n\n\n‚Äì&gt;\n\n\n\n\n\n\nNote\n\n\n\nFeel to keep reading through the notebook but if you‚Äôd like to run the code yourself, be sure to go through the setup guide first.\n\n\n\n1.1 TK - What we‚Äôre going to build\nWe‚Äôre going to be bulding Trashify üöÆ, an object detection model which incentivises people to pick up trash in their local area by detecting bin, trash, hand.\nIf all three items are detected, a person gets +1 point!\nFor example, say you were going for a walk around your neighbourhood and took a photo of yourself picking up a piece (with your hand or trash arm) of trash and putting it in the bin, you would get a point.\nWith this object detection model, you could deploy it to an application which would automatically detect the target classes and then save the result to an online leaderboard.\nThe incentive would be to score the most points, in turn, picking up the most piecces of trash, in a given area.\nMore specifically, we‚Äôre going to follow the following steps:\n\nData: Problem defintion and dataset preparation - Getting a dataset/setting up the problem space.\nModel: Finding, training and evaluating a model - Finding an object detection model suitable for our problem on Hugging Face and customizing it to our own dataset.\nDemo: Creating a demo and put our model into the real world - Sharing our trained model in a way others can access and use.\n\nBy the end of this project, you‚Äôll have a trained model and demo on Hugging Face you can share with others:\n\nfrom IPython.display import HTML \n\nHTML(\"\"\"\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"850\"\n&gt;&lt;/iframe&gt;\n\"\"\")\n\n\n\n\n\n\n\n1.2 TK - What is object detection?\nObject detection is the process of identifying and locating an item in an image.\nWhere item can mean almost anything.\nFor example:\n\nDetecting car licence plates in a video feed (videos are a series of images) for a parking lot entrance.\nDetecting delivery people walking towards your front door on a security camera.\nDetecting defects on a manufacturing line.\nDetecting pot holes in the road so repair works can automatically be scheduled.\nDetecting small pests (Varroa Mite) on the bodies of bees.\nDetecting weeds in a field so you know what to remove and what to keep.\n\n‚Äì\nTK - add examples of actual trash identification projects, see:\n\nGoogle using machine learning for trash identification ‚Äî https://sustainability.google/operating-sustainably/stories/circular-economy-marketplace/\nTrashify website for identifying trash ‚Äî https://www.trashify.tech/\nWaste management with deep learning ‚Äî https://www.sciencedirect.com/science/article/abs/pii/S0956053X23001915\nLabel Studio being used for labelling a trash dataset ‚Äî https://labelstud.io/blog/ameru-labeling-for-a-greener-world/\n\n‚Äì\n\n\n\n\n\n\nNote\n\n\n\nNote: Object detection is also sometimes referred to as image localization or object localization. For consistency, I will use the term object detection, however, either of these terms could substitute.\n\n\n\n\n\n* TK image - examples of where object detection is used\n\n\n\nImage classification deals with classifying an image as a whole into a single class, object detection endeavours to find the specific target item and where it is in an image.\nOne of the most common ways of showing where an item is in an image is by displaying a bounding box (a rectangle-like box around the target item).\nAn object detection model will often take an input image tensor in the shape [3, 640, 640] ([colour_channels, height, width]) and output a tensor in the form [class_name, x_min, y_min, x_max, y_max] or [class_name, x1, y1, x2, y2] (this is two ways to write the same example format, there are more formats, we‚Äôll see these below in Table¬†1).\nWhere:\n\nclass_name = The classification of the target item (e.g.¬†\"car\", \"person\", \"banana\", \"piece_of_trash\", this could be almost anything).\nx_min = The x value of the top left corner of the box.\ny_min = The y value of the top left corner of the box.\nx_max = The x value of the bottom right corner of the box.\ny_max = The y value of the bottom right corner of the box.\n\n‚Äì TK image ‚Äì example of a bounding box on an image\n\n\n\n\n\n\nObject detection bounding box formats\n\n\n\nWhen you get into the world of object detection, you will find that there are several different bounding box formats.\nThere are three major formats you should be familiar with: XYXY, XYWH, CXCYWH (there are more but these are the most common).\nKnowing which bounding box format you‚Äôre working with can be the difference between a good model and a very poor model (wrong bounding boxes = wrong outcome).\nWe‚Äôll get hands-on with a couple of these in this project.\nBut for an in-depth example of all three, I created a guide on different bounding box formats and how to draw them, reading this should give a good intuition behind each style of bounding box.\n\n\n\n\n1.3 TK - Why train your own object detection models?\nYou can customize pre-trained models for object detection as well as API-powered models and LLMs such as Gemini, LandingAI and DINO-X.\nDepending on your requirements, there are several pros and cons for using your own model versus using an API.\nTraining/fine-tuning your own model:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nControl: Full control over model lifecycle.\nCan be complex to get setup.\n\n\nNo usage limits (aside from compute constraints).\nRequires dedicated compute resources for training/inference.\n\n\nCan train once and deploy everywhere/whenever you want (for example, Tesla deploying a model to all self-driving cars).\nRequires maintenance over time to ensure performance remains up to par.\n\n\nPrivacy: Data can be kept in-house/app and doesn‚Äôt need to go to a third party.\nCan require longer development cycles compared to using existing APIs.\n\n\nSpeed: Customizing a small model for a specific use case often means it runs much faster on local hardware, for example, modern object detection models can achieve 70-100+ FPS (frames per second) on modern GPU hardware.\n\n\n\n\nUsing a pre-built model API:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nEase of use: often can be setup within a few lines of code.\nIf the model API goes down, your service goes down.\n\n\nNo maintenance of compute resources.\nData is required to be sent to a third-party for processing.\n\n\nAccess to the most advanced models.\nThe API may have usage limits per day/time period.\n\n\nCan scale if usage increases.\nCan be much slower than using dedicated models due to requiring an API call.\n\n\n\nFor this project, we‚Äôre going to focus on fine-tuning our own model.\n\n\n1.4 TK - Workflow we‚Äôre going to follow\nThe good news for us is that the Hugging Face ecosystem makes working on custom machine learning projects an absolute blast.\nAnd workflow is reproducible across several kinds of projects.\nStart with data (or skip this step and go straight to a model) -&gt; get/customize a model -&gt; build and share a demo.\nWith this in mind, our motto is data, model, demo!\nMore specifically, we‚Äôre going to follow the rough workflow of:\n\nCreate, preprocess and load data using Hugging Face Datasets.\nDefine the model we‚Äôd like use with transformers.AutoModelForObjectDetection (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nI say rough because machine learning projects are often non-linear in nature.\nAs in, because machine learning projects involve many experiments, they can kind of be all over the place.\nBut this worfklow will give us some good guidelines to follow.\n\n\n\n\nA general Hugging Face workflow from idea to shared model and demo using tools from the Hugging Face ecosystem. You‚Äôll notice some of the steps don‚Äôt match with our workflow outline above. This is because the text-based workflow outline above breaks some of the steps down for educational purposes. These kind of workflows are not set in stone and are more of guide than specific directions. See information on each of the tools in the Hugging Face documentation."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---importing-necessary-libraries",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---importing-necessary-libraries",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "2 TK - Importing necessary libraries",
    "text": "2 TK - Importing necessary libraries\nLet‚Äôs get started!\nFirst, we‚Äôll import the required libraries.\nIf you‚Äôre running on your local computer, be sure to check out the getting setup guide to make sure you have everything you need.\nIf you‚Äôre using Google Colab, many of them the following libraries will be installed by default.\nHowever, we‚Äôll have to install a few extras to get everything working.\n\n\n\n\n\n\nNote\n\n\n\nIf you‚Äôre running on Google Colab, this notebook will work best with access to a GPU. To enable a GPU, go to Runtime ‚û°Ô∏è Change runtime type ‚û°Ô∏è Hardware accelerator ‚û°Ô∏è GPU.\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio.\n\nAnd the following library is not part of the Hugging Face ecosystem but it is helpful for evaluating our models:\n\ntorchmetrics - a library containing many evaluation metrics compatible with PyTorch/Transformers, you can install it via pip install torchmetrics.\n\nWe can also check the versions of our software with package_name.__version__.\n\n# Install/import dependencies (this is mostly for Google Colab, as the other dependences are available by default in Colab)\ntry:\n  import datasets, evaluate, accelerate\n  import gradio as gr\nexcept ModuleNotFoundError:\n  !pip install -U datasets evaluate accelerate gradio # -U stands for \"upgrade\" so we'll get the latest version by default\n  import datasets, evaluate, accelerate\n  import gradio as gr\n\nimport random\n\nimport numpy as np\n\nimport torch\nimport transformers\n\n# Required for evaluation\n# Can install with !pip install torchmetrics[detection]\nimport torchmetrics\nimport pycocotools\n\n# Check versions (as long as you've got the following versions or higher, you should be good)\nprint(f\"Using transformers version: {transformers.__version__}\")\nprint(f\"Using datasets version: {datasets.__version__}\")\nprint(f\"Using torch version: {torch.__version__}\")\nprint(f\"Using torchmetrics version: {torchmetrics.__version__}\")\n\nUsing transformers version: 4.52.0.dev0\nUsing datasets version: 3.6.0\nUsing torch version: 2.7.0+cu126\nUsing torchmetrics version: 1.4.1\n\n\nWonderful, as long as your versions are the same or higher to the versions above, you should be able to run the code below."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#getting-a-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#getting-a-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "3 Getting a dataset",
    "text": "3 Getting a dataset\nOkay, now we‚Äôre got the required libraries, let‚Äôs get a dataset.\nGetting a dataset is one of the most important things a machine learning project.\nThe dataset you often determines the type of model you use as well as the quality of the outputs of that model.\nMeaning, if you have a high quality dataset, chances are, your future model could also have high quality outputs.\nIt also means if your dataset is of poor quality, your model will likely also have poor quality outputs.\nFor an object detection problem, your dataset will likely come in the form of a group of images as well as a file with annotations belonging to those images.\nFor example, you might have the following setup:\nfolder_of_images/\n    image_1.jpeg\n    image_2.jpeg\n    image_3.jpeg\nannotations.json\nWhere the annotations.json contains details about the contains of each image:\n\n\nannotations.json\n\n[\n    {\n        'image_path': 'image_1.jpeg', \n        'image_id': 42,\n        'annotations': \n            {\n                'file_name': ['image_1.jpeg'],\n                'image_id': [42],\n                'category_id': [1],\n                'bbox': [\n                            [360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n                        ],\n                'area': [46390.9609375]\n            },\n        'label_source': 'manual_prodigy_label',\n        'image_source': 'manual_taken_photo'\n    },\n\n    ...(more labels down here)\n]\n\nDon‚Äôt worry too much about the exact meaning of everything in the above annotations.json file for now (this is only one example, there are many different ways object detection information could be displayed).\nThe main point is that each target image is paired with an assosciated label.\nNow like all good machine learning cooking shows, I‚Äôve prepared a dataset from earlier.\nTK image - dataset on Hugging Face\nIt‚Äôs stored on Hugging Face Datasets (also called the Hugging Face Hub) under the name mrdbourke/trashify_manual_labelled_images.\nThis is a dataset I‚Äôve collected manually by hand (yes, by picking up 1000+ pieces of trash and photographing it) as well as labelled by hand (by drawing boxes on each image with a labelling tool called Prodigy).\n\n3.1 Loading the dataset\nTo load a dataset stored on the Hugging Face Hub we can use the datasets.load_dataset(path=NAME_OR_PATH_OF_DATASET) function and pass it the name/path of the dataset we want to load.\nIn our case, our dataset name is mrdbourke/trashify_manual_labelled_images (you can also change this for your own dataset).\nAnd since our dataset is hosted on Hugging Face, when we run the following code for the first time, it will download it.\nIf your target dataset is quite large, this download may take a while.\nHowever, once the dataset is downloaded, subsequent reloads will be mush faster.\n\n\n\n\n\n\nGetting information about a function/method\n\n\n\nOne way to find out what a function or method does is to lookup the documentation.\nAnother way is to write the function/method name with a question mark afterwards.\nFor example:\nfrom datasets import load_dataset\n\nload_dataset?\nGive it a try.\nYou should see some helpful information about what inputs the method takes and how they are used.\n\n\nLet‚Äôs load our dataset and check it out.\n\nfrom datasets import load_dataset\n\n# Load our Trashify dataset\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nBeautiful!\nWe can see that there is a train split of the dataset already which currently contains all of the samples (1128 in total).\nThere are also some features that come with our dataset which are related to our object detection goal.\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\nprint(f\"[INFO] Dataset features:\") \n\nfrom pprint import pprint\n\npprint(dataset['train'].features)\n\n[INFO] Length of original dataset: 1128\n[INFO] Dataset features:\n{'annotations': Sequence(feature={'area': Value(dtype='float32', id=None),\n                                  'bbox': Sequence(feature=Value(dtype='float32',\n                                                                 id=None),\n                                                   length=4,\n                                                   id=None),\n                                  'category_id': ClassLabel(names=['bin',\n                                                                   'hand',\n                                                                   'not_bin',\n                                                                   'not_hand',\n                                                                   'not_trash',\n                                                                   'trash',\n                                                                   'trash_arm'],\n                                                            id=None),\n                                  'file_name': Value(dtype='string', id=None),\n                                  'image_id': Value(dtype='int64', id=None),\n                                  'iscrowd': Value(dtype='int64', id=None)},\n                         length=-1,\n                         id=None),\n 'image': Image(mode=None, decode=True, id=None),\n 'image_id': Value(dtype='int64', id=None),\n 'image_source': Value(dtype='string', id=None),\n 'label_source': Value(dtype='string', id=None)}\n\n\nNice!\nWe can see our dataset features contain the following fields:\n\nannotations - A sequence of values including a bbox field (short for bounding box) as well as category_id field which contains the target objects we‚Äôd like to identify in our images (['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nimage - This contains the target image assosciated with a given set of annotations (in our case, images and annotations have been uploaded to the Hugging Face Hub together).\nimage_id - A unique ID assigned to a given sample.\nimage_source - Where the image came from (all of our images have been manually collected).\nlabel_source - Where the image label came from (all of our images have been manually labelled).\n\n\n\n3.2 Viewing a single sample from our data\nNow we‚Äôve seen the features, let‚Äôs check out a single sample from our dataset.\nWe can index on a single sample of the \"train\" set just like indexing on a Python list.\n\n# View a single sample of the dataset\ndataset[\"train\"][42]\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 745,\n 'annotations': {'file_name': ['094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg'],\n  'image_id': [745, 745, 745],\n  'category_id': [5, 1, 0],\n  'bbox': [[333.1000061035156,\n    611.2000122070312,\n    244.89999389648438,\n    321.29998779296875],\n   [504.0, 612.9000244140625, 451.29998779296875, 650.7999877929688],\n   [202.8000030517578,\n    366.20001220703125,\n    532.9000244140625,\n    555.4000244140625]],\n  'iscrowd': [0, 0, 0],\n  'area': [78686.3671875, 293706.03125, 295972.65625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nWe see a few more details here compared to just looking at the features.\nWe notice the image is a PIL.Image with size 960x1280 (width x height).\nAnd the file_name is a UUID (Universially Unique Identifier, made with uuid.uuid4()).\nThe bbox field in the annotations key contains a list of bounding boxes assosciated with the image.\nIn this case, there are 3 different bounding boxes.\nWith the category_id values of 5, 1, 0 (we‚Äôll map these to class names shortly).\nLet‚Äôs inspect a single bounding box.\n\ndataset[\"train\"][42][\"annotations\"][\"bbox\"][0]\n\n[333.1000061035156, 611.2000122070312, 244.89999389648438, 321.29998779296875]\n\n\nThis array gives us the coordinates of a single bounding box in the format XYWH.\nWhere:\n\nX is the x-coordinate of the top left corner of the box (333.1).\nY is the y-coordinate of the top left corner of the box (611.2).\nW is the width of the box (244.9).\nH is the height of the box (321.3).\n\nAll of these values are in absolute pixel values (meaning an x-coordinate of 333.1 is 333.1 pixels across on the x-axis).\nHow do I know this?\nI know this because I created the box labels and this is the default value Prodigy (the labelling tool I used) outputs boxes.\nHowever, if you were to come across another bouding box dataset, one of the first steps would be to figure out what format your bounding boxes are in.\nWe‚Äôll see more on bounding box formats shortly.\n\n\n3.3 Extracting the category names from our data\nBefore we start to visualize our sample image and bounding boxes, let‚Äôs extract the category names from our dataset.\nWe can do so by accessing the features attribute our of dataset and then following it through to find the category_id feature, this contains a list of our text-based class names.\n\n\n\n\n\n\nNote\n\n\n\nWhen working with different categories, it‚Äôs good practice to get a list or mapping (e.g.¬†a Python dictionary) from category name to ID and vice versa.\nFor example:\n# Category to ID\n{\"class_name\": 0}\n\n# ID to Category\n{0: \"class_name\"}\nNot all datasets will have this implemented in an easy to access way, so it might take a bit of research to get it created.\n\n\nLet‚Äôs access the class names in our dataset and save them to a variable categories.\n\n# Get the categories from the dataset\n# Note: This requires the dataset to have been uploaded with this information setup, not all datasets will have this available.\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\nBeautiful!\nWe get the following class names:\n\nbin - A rubbish bin or trash can.\nhand - A person‚Äôs hand.\nnot_bin - Negative version of bin for items that look like a bin but shouldn‚Äôt be identified as one.\nnot_hand - Negative version of hand for items that look like a hand but shouldn‚Äôt be identified as one.\nnot_trash - Negative version of trash for items that look like trash but shouldn‚Äôt be identified as it.\ntrash - An item of trash you might find on a walk such as an old plastic bottle, food wrapper, cigarette butt or used coffee cup.\ntrash_arm - A mechanical arm used for picking up trash.\n\nThe goal of our computer vision model will be: given an image, detect items belonging to these target classes if they are present.\n\n\n3.4 Creating a mapping from numbers to labels\nNow we‚Äôve got our text-based class names, let‚Äôs create a mapping from label to ID and ID to label.\nFor each of these, Hugging Face use the terminology label2id and id2label respectively.\n\n# Map ID's to class names and vice versa\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nprint(f\"Label to ID mapping:\\n{label2id}\\n\")\nprint(f\"ID to label mapping:\\n{id2label}\")\n# id2label, label2id\n\nLabel to ID mapping:\n{'bin': 0, 'hand': 1, 'not_bin': 2, 'not_hand': 3, 'not_trash': 4, 'trash': 5, 'trash_arm': 6}\n\nID to label mapping:\n{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash', 6: 'trash_arm'}\n\n\n\n\n3.5 Creating a colour palette\nOk we know which class name matches to which ID, now let‚Äôs create a dictionary of different colours we can use to display our bounding boxes.\nIt‚Äôs one thing to plot bounding boxes, it‚Äôs another thing to make them look nice.\nAnd we always want our plots looking nice!\nWe‚Äôll colour the positive classes bin, hand, trash, trash_arm in nice bright colours.\nAnd the negative classes not_bin, not_hand, not_trash in a light red colour to indicate they‚Äôre the negative versions.\nOur colour dictionary will map class_name -&gt; (red, green, blue) (or RGB) colour values.\n\n# Make colour dictionary\ncolour_palette = {\n    'bin': (0, 0, 224),         # Bright Blue (High contrast with greenery) in format (red, green, blue)\n    'not_bin': (255, 80, 80),   # Light Red to indicate negative class\n\n    'hand': (148, 0, 211),      # Dark Purple (Contrasts well with skin tones)\n    'not_hand': (255, 80, 80),  # Light Red to indicate negative class\n\n    'trash': (0, 255, 0),       # Bright Green (For trash-related items)\n    'not_trash': (255, 80, 80), # Light Red to indicate negative class\n\n    'trash_arm': (255, 140, 0), # Deep Orange (Highly visible)\n}\n\nLet‚Äôs check out what these colours look like!\nIt‚Äôs the ABV motto: Always Be Visualizing!\nWe can plot our colours with matplotlib.\nWe‚Äôll just have to write a small function to normalize our colour values from [0, 255] to [0, 1] (matplotlib expects our colour values to be between 0 and 1).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Normalize RGB values to 0-1 range\ndef normalize_rgb(rgb_tuple):\n    return tuple(x/255 for x in rgb_tuple)\n\n# Turn colors into normalized RGB values for matplotlib\ncolors_and_labels_rgb = [(key, normalize_rgb(value)) for key, value in colour_palette.items()]\n\n# Create figure and axis\nfig, ax = plt.subplots(1, 7, figsize=(8, 1))\n\n# Flatten the axis array for easier iteration\nax = ax.flatten()\n\n# Plot each color square\nfor idx, (label, color) in enumerate(colors_and_labels_rgb):\n    ax[idx].add_patch(plt.Rectangle(xy=(0, 0), \n                                    width=1, \n                                    height=1, \n                                    facecolor=color))\n    ax[idx].set_title(label)\n    ax[idx].set_xlim(0, 1)\n    ax[idx].set_ylim(0, 1)\n    ax[idx].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nSensational!\nNow we know what colours to look out for when we visualize our bounding boxes."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "4 TK - Plotting a single image and visualizing the boxes",
    "text": "4 TK - Plotting a single image and visualizing the boxes\nOkay, okay, finally time to plot an image!\nLet‚Äôs take a random sample from our dataset and plot the image as well as the box on it.\nTo save some space in our notebook (plotting many images can increase the size of our notebook dramatically), we‚Äôll create two small helper functions:\n\nhalf_image - Halves the size of a given image.\nhalf_boxes - Divides the input coordinates of a given input box by 2.\n\nThese functions aren‚Äôt 100% necessary in our workflow.\nThey‚Äôre just to make the images slightly smaller so they fit better in the notebook.\n\nimport PIL\n\ndef half_image(image: PIL.Image) -&gt; PIL.Image:\n    \"\"\"\n    Resizes a given input image by half and returns the smaller version.\n    \"\"\"\n    return image.resize(size=(image.size[0] // 2, image.size[1] // 2))\n\ndef half_boxes(boxes):\n    \"\"\"\n    Halves an array/tensor of input boxes and returns them. Necessary for plotting them on a half-sized image.\n\n    For example:\n\n    boxes = [100, 100, 100, 100]\n    half_boxes = half_boxes(boxes)\n    print(half_boxes)\n\n    &gt;&gt;&gt; [50, 50, 50, 50]\n    \"\"\"\n    if isinstance(boxes, list):\n        # If boxes are list of lists, then we have multiple boxes\n        for box in boxes:\n            if isinstance(box, list):\n                return [[coordinate // 2 for coordinate in box] for box in boxes]\n            else:\n                return [coordinate // 2 for coordinate in boxes]         \n    \n    if isinstance(boxes, np.ndarray):\n        return (boxes // 2)\n    \n    if isinstance(boxes, torch.Tensor):\n        return (boxes // 2)\n\n# Test the functions \nimage_test = dataset[\"train\"][42][\"image\"]\nimage_test_half = half_image(image_test)\nprint(f\"[INFO] Original image size: {image_test.size} | Half image size: {image_test_half.size}\")\n\nboxes_test_list = [100, 100, 100, 100]\nprint(f\"[INFO] Original boxes: {boxes_test_list} | Half boxes: {half_boxes(boxes_test_list)}\")\n\nboxes_test_torch = torch.tensor([100.0, 100.0, 100.0, 100.0])\nprint(f\"[INFO] Original boxes: {boxes_test_torch} | Half boxes: {half_boxes(boxes_test_torch)}\")\n\n[INFO] Original image size: (960, 1280) | Half image size: (480, 640)\n[INFO] Original boxes: [100, 100, 100, 100] | Half boxes: [50, 50, 50, 50]\n[INFO] Original boxes: tensor([100., 100., 100., 100.]) | Half boxes: tensor([50., 50., 50., 50.])\n\n\nTo plot an image and its assosciated boxes, we‚Äôll do the following steps:\n\nSelect a random sample from the dataset.\nExtract the \"image\" (our image is in PIL format) and \"bbox\" keys from the random sample.\n\nWe can also optionally halve the size of our image/boxes to save space. In our case, we will halve our image and boxes.\n\nTurn the box coordinates into a torch.tensor (we‚Äôll be using torchvision utilities to plot the image and boxes).\nConvert the box format from XYXY to XYWH using torchvision.ops.box_convert (we do this because torchvision.utils.draw_bounding_boxes requires XYXY format as input).\nGet a list of label names (e.g.¬†\"bin\", \"trash\", etc) assosciated with each of the boxes as well as a list of colours to match (these will be from our colour_palette).\nDraw the boxes on the target image by:\n\nTurning the image into a tensor with torchvision.transforms.functional.pil_to_tensor.\nDraw the bounding boxes on our image tensor with torchvision.utils.draw_bounding_boxes.\nTurn the image and bounding box tensors back into a PIL image with torchvision.transforms.functional.pil_to_tensor.\n\n\nPhew!\nA fair few steps‚Ä¶\nBut we‚Äôve got this!\n\n\n\n\n\n\nNote\n\n\n\nIf the terms XYXY or XYWH or all of the drawing methods sound a bit confusing or intimidating, don‚Äôt worry, there‚Äôs a fair bit going on here.\nWe‚Äôll cover bounding box formats, such as XYXY shortly.\nIn the meantime, if you want to learn more about different bounding box formats and how to draw them, I wrote A Guide to Bounding Box Formats and How to Draw Them which you might find helpful.\n\n\n\n# Plotting a bounding box on a single image\nimport random\n\nimport torch\n\nfrom torchvision.ops import box_convert\nfrom torchvision.utils import draw_bounding_boxes\n\nfrom torchvision.transforms.functional import pil_to_tensor, to_pil_image \n\n# 1. Select a random sample from our dataset\nrandom_index = random.randint(0, len(dataset[\"train\"]))\nprint(f\"[INFO] Showing training sample from index: {random_index}\")\nrandom_sample = dataset[\"train\"][random_index]\n\n# 2. Get image and boxes from random sample\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_boxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Optional: Half the image and boxes for space saving (all of the following code will work with/without half size images)\nhalf_random_sample_image = half_image(random_sample_image)\nhalf_random_sample_boxes = half_boxes(random_sample_boxes)\n\n# 3. Turn box coordinates in a tensor\nboxes_xywh = torch.tensor(half_random_sample_boxes)\nprint(f\"Boxes in XYWH format: {boxes_xywh}\")\n\n# 4. Convert boxes from XYWH -&gt; XYXY \n# torchvision.utils.draw_bounding_boxes requires input boxes in XYXY format (X_min, y_min, X_max, y_max)\nboxes_xyxy = box_convert(boxes=boxes_xywh,\n                         in_fmt=\"xywh\",\n                         out_fmt=\"xyxy\")\nprint(f\"Boxes XYXY: {boxes_xyxy}\")\n\n# 5. Get label names of target boxes and colours to match\nrandom_sample_label_names = [categories.int2str(x) for x in random_sample[\"annotations\"][\"category_id\"]]\nrandom_sample_colours = [colour_palette[label_name] for label_name in random_sample_label_names]\nprint(f\"Label names: {random_sample_label_names}\")\nprint(f\"Colour names: {random_sample_colours}\")\n\n# 6. Draw the boxes on the image as a tensor and then turn it into a PIL image\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_random_sample_image),\n        boxes=boxes_xyxy,\n        colors=random_sample_colours,\n        labels=random_sample_label_names,\n        width=2,\n        label_colors=random_sample_colours\n    )\n)\n\n[INFO] Showing training sample from index: 743\nBoxes in XYWH format: tensor([[258.,  30.,  89., 124.],\n        [356.,   1.,  68., 171.],\n        [ 46.,  12.,  58., 177.],\n        [120.,  34.,  46.,  84.],\n        [171.,  34.,  50.,  85.],\n        [139., 385.,  81.,  80.],\n        [242., 507.,  95., 101.],\n        [ 18., 181., 457., 451.],\n        [  9., 422., 176., 210.]])\nBoxes XYXY: tensor([[258.,  30., 347., 154.],\n        [356.,   1., 424., 172.],\n        [ 46.,  12., 104., 189.],\n        [120.,  34., 166., 118.],\n        [171.,  34., 221., 119.],\n        [139., 385., 220., 465.],\n        [242., 507., 337., 608.],\n        [ 18., 181., 475., 632.],\n        [  9., 422., 185., 632.]])\nLabel names: ['not_trash', 'not_trash', 'not_trash', 'not_trash', 'not_trash', 'trash', 'not_trash', 'bin', 'hand']\nColour names: [(255, 80, 80), (255, 80, 80), (255, 80, 80), (255, 80, 80), (255, 80, 80), (0, 255, 0), (255, 80, 80), (0, 0, 224), (148, 0, 211)]\n\n\n\n\n\n\n\n\n\nOutstanding!\nOur first official bounding boxes plotted on an image!\nNow the idea of Trashify üöÆ is coming to life.\nDepending on the random sample you‚Äôre looking at, you should see some combination of ['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm'].\nOur goal will be to build an object detection model to replicate these boxes on a given image.\n\n\n\n\n\n\nGetting familiar with a dataset: viewing 100 random samples\n\n\n\nWhenever working with a new dataset, I find it good practice to view 100+ random samples of the data.\nIn our case, this would mean viewing 100 random images with their bounding boxes drawn on them.\nDoing so starts to build your own intuition of the data.\nUsing this intuition, along with evaluation metrics, you can start to get a better idea of how your model might be performing later on.\nKeep this in mind for any new dataset or problem space you‚Äôre working on.\nStart by looking at 100+ random samples.\nAnd yes, generally more is better.\nSo you can practice by running the code cell above a number of times to see the different kinds of images and boxes in the dataset.\nCan you think of any scenarios which the dataset might be missing?"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#different-bounding-box-formats",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#different-bounding-box-formats",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "5 Different bounding box formats",
    "text": "5 Different bounding box formats\nWhen drawing our bounding box, we discussed the terms XYXY and XYWH.\nWell, we didn‚Äôt really discuss these at all‚Ä¶\nBut that‚Äôs why we‚Äôre here.\nOne of the most confusing things in the world of object detection is the different formats bounding boxes come in.\nAre your boxes in XYXY, XYWH or CXCYWH?\nAre they in absolute format?\nOr normalized format?\nPerhaps a table will help us.\nThe following table contains a non-exhaustive list of some of the most common bounding box formats you‚Äôll come across in the wild.\n\n\n\nTable¬†1: Different bounding box formats\n\n\n\n\n\nBox format\nDescription\nAbsolute Example\nNormalized Example\nSource\n\n\n\n\nXYXY\nDescribes the top left corner coordinates (x1, y1) as well as the bottom right corner coordinates of a box.  Also referred to as:  [x1, y1, x2, y2]  or  [x_min, y_min, x_max, y_max]\n[8.9, 275.3, 867.5, 964.0]\n[0.009, 0.215, 0.904, 0.753]\nPASCAL VOC Dataset uses the absolute version of this format, torchvision.utils.draw_bounding_boxes defaults to the absolute version of this format.\n\n\nXYWH\nDescribes the top left corner coordinates (x1, y1) as well as the width (box_width) and height (box_height) of the target box. The bottom right corners (x2, y2) are found by adding the width and height to the top left corner coordinates (x1 + box_width, y1 + box_height).  Also referred to as:  [x1, y1, box_width, box_height]  or  [x_min, y_min, box_width, box_height]\n[8.9, 275.3, 858.6, 688.7]\n[0.009, 0.215, 0.894, 0.538]\nThe COCO (Common Objects in Context) dataset uses the absolute version of this format, see the section under ‚Äúbbox‚Äù.\n\n\nCXCYWH\nDescribes the center coordinates of the bounding box (center_x, center_y) as well as the width (box_width) and height (box_height) of the target box.  Also referred to as:  [center_x, center_y, box_width, box_height]\n[438.2, 619.65, 858.6, 688.7]\n[0.456, 0.484, 0.894, 0.538]\nNormalized version introduced in the YOLOv3 (You Only Look Once) paper and is used by many later forms of YOLO.\n\n\n\n\n\n\n\n5.1 Absolute or normalized format?\nIn absolute coordinate form, bounding box values are in the same format as the width and height dimensions (e.g.¬†our image is 960x1280 pixels).\nFor example in XYXY format: [\"bin\", 8.9, 275.3, 867.5, 964.0]\nAn (x1, y1) (or (x_min, y_min)) coordinate of (8.9, 275.3) means the top left corner is 8.9 pixels in on the x-axis, and 275.3 pixels down on the y-axis.\nIn normalized coordinate form, values are between [0, 1] and are proportions of the image width and height.\nFor example in XYXY format: [\"bin\", 0.009, 0.215, 0.904, 0.753]\nA normalized (x1, y1) (or (x_min, y_min)) coordinate of (0.009, 0.215) means the top left corner is 0.009 * image_width pixels in on the x-axis and 0.215 * image_height down on the y-axis.\nTo convert absolute coordinates to normalized, you can divide x-axis values by the image width and y-axis values by the image height.\n\\[\nx_{\\text{normalized}} = \\frac{x_{\\text{absolute}}}{\\text{image\\_width}} \\quad y_{\\text{normalized}} = \\frac{y_{\\text{absolute}}}{\\text{image\\_height}}\n\\]\n\n\n5.2 Which bounding box format should you use?\nThe bounding box format you use will depend on the framework, model and existing data you‚Äôre trying to use.\nFor example, the take the following frameworks:\n\nPyTorch - If you‚Äôre using PyTorch pre-trained models, for example, torchvision.models.detection.fasterrcnn_resnet50_fpn, you‚Äôll want absolute XYXY ([x1, y1, x2, y2]) format.\nHugging Face Transformers - If you‚Äôre using a Hugging Face Transformers model such as Conditional DETR, you‚Äôll want to take note that outputs from the model can be of one type (e.g.¬†CXCYWH) but they can be post-processed into another type (e.g.¬†absolute XYXY).\nUltralytics YOLO - If you‚Äôre using a YOLO-like model such as Ultralytics YOLO, you‚Äôll want normalized CXCYWH ([center_x, center_y, width, height]) format.\nGoogle Gemini - If you‚Äôre using Google Gemini to predict bounding boxes on your images, then you‚Äôll want to pay attention to the special [y_min, x_min, y_max, x_max] (YXYX) normalized coordinates.\n\nOr if you note that someone has said their model is pre-trained on the COCO dataset, chances are the data has been formatted in XYWH format (see Table¬†1).\n\n\n\n\n\n\nNote\n\n\n\nFor more on different bounding box formats and how to draw them, see A Guide to Bounding Box Formats and How to Draw Them.\n\n\n\n# TK - should I functionize the plotting of boxes and image so we can do input/output with tensors + data augmentations on that (E.g. original: image, augmented: image),\n# - is this needed?"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#getting-an-object-detection-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#getting-an-object-detection-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "6 Getting an object detection model",
    "text": "6 Getting an object detection model\nThere are two main ways of getting an object detection model:\n\nBuilding it yourself. For example, constructing it layer by layer, testing it and training it on your target problem.\nUsing an existing one. For example, find an existing model on a problem space similar to your own and then adapt it via transfer learning (TK - add link to glossary) to your own task.\n\nIn our case, we‚Äôre going to focus on the latter.\nWe‚Äôll be taking a pre-trained object detection model and fine-tuning it on our Trashify üöÆ dataset so it outputs the boxes and labels we‚Äôre after.\n\n6.1 Places to get object detection models\nInstead of building your own machine learning model from scratch, it‚Äôs common practice to take an existing model that works on similar problem space to yours and then fine-tune (TK - add link to glossary) it to your own use case.\nThere are several places to get object detection models:\n\n\n\nTable¬†2: Places to get pre-trained object detection models\n\n\n\n\n\nLocation\nDescription\n\n\n\n\nHugging Face Hub\nOne the best places on the internet to find open-source machine learning models of nearly any kind. You can find pre-trained object detection models here such as facebook/detr-resnet-50, a model from Facebook (Meta) and microsoft/conditional-detr-resnet-50, a model from Microsoft and the model we‚Äôre going to use as our base model. Many of the models are permissively licensed, meaning you can use them for your own projects.\n\n\ntorchvision\nPyTorch‚Äôs built-in domain library for computer vision has several pre-trained object detection models which you can use in your own workflows.\n\n\npaperswithcode.com/task/object-detection\nWhilst not a direct place to download object detection models from, paperswithcode contains benchmarks for many machine learning tasks (including object detection) which shows the current state of the art (best performing) models and usually includes links to where to get the code.\n\n\nDetectron2\nDetectron2 is an open-source library to help with many of the tasks in detecting items in images. Inside you‚Äôll find several pre-trained and adaptable models as well as utilities such as data loaders for object detection and segmentation tasks.\n\n\nYOLO Series\nA running series of ‚ÄúYou Only Look Once‚Äù models. Usually, the higher the number, the better performing. For example, YOLOv11 by Ultralytics should outperform YOLOv10, however, this often requires testing on your own dataset. Beware of the license, it is under the AGPL-3.0 license which may cause issues in some organizations.\n\n\nmmdetection library\nAn open-source library from the OpenMMLab which contains many different open-source models as well as detection-specific utilties.\n\n\n\n\n\n\nWhen you find a pre-trained object detection model, you‚Äôll often see statements such as:\n\nConditional DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images).\nSource: https://huggingface.co/microsoft/conditional-detr-resnet-50\n\nThis means the model has already been trained on the COCO object detection dataset which contains 118,000 images and 80 classes such as [\"cake\", \"person\", \"skateboard\"...].\nThis is a good thing.\nIt means that the model should have a fairly good starting point when we try to adapt it to our own project.\n\n\n6.2 Downloading our model from Hugging Face\nFor our Trashify üöÆ project we‚Äôre going to be using the pre-trained object detection model microsoft/conditional-detr-resnet-50 which was originally introduced in the paper Conditional DETR for Fast Training Convergence.\n\n\n\n\n\n\nNote\n\n\n\nThe term ‚ÄúDETR‚Äù stands for ‚ÄúDEtection TRansformer‚Äù.\nWhere ‚ÄúTransformer‚Äù refers to the Transformer neural network architecture, specifically the Vision Transformer (or ViT) rather than the Hugging Face transformers library (quite confusing, yes).\nSo DETR means ‚Äúperforming detection with the Transformer architecture‚Äù.\nAnd the ‚ÄúResNet‚Äù part stands for ‚ÄúResidual Neural Network‚Äù which is a common computer vision backbone. The ‚Äú50‚Äù refers to the number of layers in the network. Saying ‚ÄúResNet-50‚Äù means the 50 layer version of ResNet. ResNet-101 and ResNet-18 are two other larger and smaller variants.\n\n\nTo use this model, there are some helpful documentation resources we should be aware of:\n\n\n\nTable¬†3: Model documentation resources\n\n\n\n\n\nResource\nDescription\n\n\n\n\nConditional DETR documentation\nContains detailed information on each of the transformers.ConditionalDetr classes.\n\n\ntransformers.ConditionalDetrConfig\nContains the configuration settings for our model such as number of layers and other hyperparameters.\n\n\ntransformers.ConditionalDetrImageProcessor\nContains several preprocessing on post processing functions and settings for data going into and out of our model. Here we can set values such as size in the preprocess method which will resize our images to a certain size. We can also use the post_process_object_detection method to process the raw outputs of our model into a more usable format.\n\n\ntransformers.ConditionalDetrModelForObjectdetection\nThis will enable us to load the Conditional DETR model weights and enable to pass data through them via the forward method.\n\n\ntransformers.AutoImageProcessor\nThis will enable us to create an instance of transformers.ConditionalDetrImageProcessor by passing the model name microsoft/conditional-detr-resnet-50 to the from_pretrained method. Hugging Face Transformers uses several Auto Classes for various problem spaces and models.\n\n\ntransformers.AutoModelForObjectDetection\nEnables us to load the model architecture and weights for the Conditional DETR architecture by passing the model name microsoft/conditional-detr-resnet-50 to the from_pretrained method.\n\n\n\n\n\n\nWe‚Äôll get hands-on which each of these throughout the project.\nFor now, if you‚Äôd like to read up more on each, I‚Äôd highly recommend it.\nKnowing how to navigate and read through a framework‚Äôs documentation is a very helpful skill to have.\n\n\n\n\n\n\nNote\n\n\n\nThere are other object detection models we could try on the Hugging Face Hub such as facebook/detr-resnet-50 or IDEA-Research/dab-detr-resnet-50-dc5-pat3.\nFor now, we‚Äôll stick with microsoft/conditional-detr-resnet-50.\nIt‚Äôs easy to get stuck figuring out which model to use instead of just trying one and seeing how it goes.\nBest to get something small working with one model and try another one later as part of a series of experiments to try and improve your results.\n\n\nWe can load our model with transformers.AutoModelForObjectDetection.from_pretrained and passing in the following parameters:\n\npretrained_model_name_or_path - Our target model, which can be a local path or Hugging Face model name (e.g.¬†microsoft/conditional-detr-resnet-50).\nlabel2id - A dictionary mapping our class names/labels to their numerical ID, this is so our model will know how many classes to output.\nid2label - A dictionary mapping numerical IDs to our class names/labels, so our model will know how many classes we‚Äôre working with and what their IDs are.\nignore_mismatched_sizes=True (default) - We‚Äôll set this to True so that our model can be instatiated with a varying number of classes compared to what it may have been trained on (e.g.¬†if our model was trained on the 91 classes from COCO, we only need 7).\nbackbone=\"resnet50\" (default) - We‚Äôll tell our model what kind of computer vision backbone to use for extracting features from our images.\n\nSee the full documentation for a full list of parameters we can use.\nLet‚Äôs create a model!\n\ntransformers.__version__\n\n'4.52.0.dev0'\n\n\n\nfrom transformers import AutoModelForObjectDetection\n\nMODEL_NAME = \"ustc-community/dfine-large-coco\"\n\nimage_size = 480\n\nmodel = AutoModelForObjectDetection.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    label2id=label2id,\n    id2label=id2label,\n    # Original model was trained with a different number of output classes to ours\n    # So we'll ignore any mismatched sizes (e.g. 91 vs. 7)\n    # Try turning this to False and see what happens\n    ignore_mismatched_sizes=True, \n    # backbone=\"resnet50\"\n)\n\n# Uncomment to see full model archietecture\n# model\n\n\n\n\nSome weights of DFineForObjectDetection were not initialized from the model checkpoint at ustc-community/dfine-large-coco and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nBeautiful!\nWe‚Äôve got a model ready.\nYou might‚Äôve noticed a warning about the model needing to be trained on a down-stream task:\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match: - class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated - class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\nThis is because our model has a different number of target classes (7 in total) comapred to the original model (91 in total, from the COCO dataset).\nSo in order to get this pretrained model to work on our dataset, we‚Äôll need to fine-tune it.\nYou might also notice that if you set ignore_mismatched_sizes=False, you‚Äôll get an error:\n\nRuntimeError: Error(s) in loading state_dict for ConditionalDetrForObjectDetection: size mismatch for class_labels_classifier.weight: copying a param with shape torch.Size([91, 256]) from checkpoint, the shape in current model is torch.Size([7, 256]). size mismatch for class_labels_classifier.bias: copying a param with shape torch.Size([91]) from checkpoint, the shape in current model is torch.Size([7]). You may consider adding ignore_mismatched_sizes=True in the model from_pretrained method.\n\nThis is a similar warning to the one above.\nKeep this is mind for when you‚Äôre working with pretrained models.\nIf you are using data slightly different to what the model was trained on, you may need to alter the setup hyperparameters as well as fine-tune it on your own data.\n\n\n6.3 Inspecting our model‚Äôs layers\nWe can inspect the full model architecture by running print(model) (I‚Äôve commented this out for brevity).\nAnd if you do so, you‚Äôll see a large list of layers which combine to contribute to make the overall model.\nThe following subset of layers has been truncated for brevity.\n# Shortened version of the model architecture, print the full model to see all layers\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n              ...\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d())))\n            ...\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n              ...\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True))))\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(...)\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)))\n      (ref_point_head): MLP(\n        ...\n      ))))\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)))))\nIf we check out a few of our model‚Äôs layers, we can see that it is a combination of convolutional, attention, MLP (multi-layer perceptron) and linear layers.\nI‚Äôll leave exploring each of these layer types for extra-curriculum.\nFor now, think of them as progressively pattern extractors.\nWe‚Äôll feed our input image into our model and layer by layer it will manipulate the pixel values to try and extract patterns in a way so that its internal parameters matches the image to its input annotations.\nMore specifically, if we dive into the final two layer sections:\n\nclass_labels_classifier = classification head with out_features=7 (one for each of our labels, 'bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nbbox_predictor = regression head with out_features=4 (one for each of our bbox coordinates, e.g.¬†[center_x, center_y, width, height]).\n\n\nprint(f\"[INFO] Final classification layer: {model.class_labels_classifier}\\n\")\nprint(f\"[INFO] Final box regression layer: {model.bbox_predictor}\")\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[15], line 1\n----&gt; 1 print(f\"[INFO] Final classification layer: {model.class_labels_classifier}\\n\")\n      2 print(f\"[INFO] Final box regression layer: {model.bbox_predictor}\")\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1940, in Module.__getattr__(self, name)\n   1938     if name in modules:\n   1939         return modules[name]\n-&gt; 1940 raise AttributeError(\n   1941     f\"'{type(self).__name__}' object has no attribute '{name}'\"\n   1942 )\n\nAttributeError: 'DFineForObjectDetection' object has no attribute 'class_labels_classifier'\n\n\n\n\nmodel\n\nDFineForObjectDetection(\n  (model): DFineModel(\n    (backbone): DFineConvEncoder(\n      (model): HGNetV2Backbone(\n        (embedder): HGNetV2Embeddings(\n          (stem1): HGNetV2ConvLayer(\n            (convolution): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n            (normalization): DFineFrozenBatchNorm2d()\n            (activation): ReLU()\n            (lab): Identity()\n          )\n          (stem2a): HGNetV2ConvLayer(\n            (convolution): Conv2d(32, 16, kernel_size=(2, 2), stride=(1, 1), bias=False)\n            (normalization): DFineFrozenBatchNorm2d()\n            (activation): ReLU()\n            (lab): Identity()\n          )\n          (stem2b): HGNetV2ConvLayer(\n            (convolution): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1), bias=False)\n            (normalization): DFineFrozenBatchNorm2d()\n            (activation): ReLU()\n            (lab): Identity()\n          )\n          (stem3): HGNetV2ConvLayer(\n            (convolution): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n            (normalization): DFineFrozenBatchNorm2d()\n            (activation): ReLU()\n            (lab): Identity()\n          )\n          (stem4): HGNetV2ConvLayer(\n            (convolution): Conv2d(32, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (normalization): DFineFrozenBatchNorm2d()\n            (activation): ReLU()\n            (lab): Identity()\n          )\n          (pool): MaxPool2d(kernel_size=2, stride=1, padding=0, dilation=1, ceil_mode=True)\n        )\n        (encoder): HGNetV2Encoder(\n          (stages): ModuleList(\n            (0): HGNetV2Stage(\n              (downsample): Identity()\n              (blocks): ModuleList(\n                (0): HGNetV2BasicLayer(\n                  (layers): ModuleList(\n                    (0-5): 6 x HGNetV2ConvLayer(\n                      (convolution): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (aggregation): Sequential(\n                    (0): HGNetV2ConvLayer(\n                      (convolution): Conv2d(336, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                    (1): HGNetV2ConvLayer(\n                      (convolution): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (drop_path): Identity()\n                )\n              )\n            )\n            (1): HGNetV2Stage(\n              (downsample): HGNetV2ConvLayer(\n                (convolution): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)\n                (normalization): DFineFrozenBatchNorm2d()\n                (activation): Identity()\n                (lab): Identity()\n              )\n              (blocks): ModuleList(\n                (0): HGNetV2BasicLayer(\n                  (layers): ModuleList(\n                    (0): HGNetV2ConvLayer(\n                      (convolution): Conv2d(128, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                    (1-5): 5 x HGNetV2ConvLayer(\n                      (convolution): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (aggregation): Sequential(\n                    (0): HGNetV2ConvLayer(\n                      (convolution): Conv2d(704, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                    (1): HGNetV2ConvLayer(\n                      (convolution): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (drop_path): Identity()\n                )\n              )\n            )\n            (2): HGNetV2Stage(\n              (downsample): HGNetV2ConvLayer(\n                (convolution): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=512, bias=False)\n                (normalization): DFineFrozenBatchNorm2d()\n                (activation): Identity()\n                (lab): Identity()\n              )\n              (blocks): ModuleList(\n                (0): HGNetV2BasicLayer(\n                  (layers): ModuleList(\n                    (0): HGNetV2ConvLayerLight(\n                      (conv1): HGNetV2ConvLayer(\n                        (convolution): Conv2d(512, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): Identity()\n                        (lab): Identity()\n                      )\n                      (conv2): HGNetV2ConvLayer(\n                        (convolution): Conv2d(192, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=192, bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): ReLU()\n                        (lab): Identity()\n                      )\n                    )\n                    (1-5): 5 x HGNetV2ConvLayerLight(\n                      (conv1): HGNetV2ConvLayer(\n                        (convolution): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): Identity()\n                        (lab): Identity()\n                      )\n                      (conv2): HGNetV2ConvLayer(\n                        (convolution): Conv2d(192, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=192, bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): ReLU()\n                        (lab): Identity()\n                      )\n                    )\n                  )\n                  (aggregation): Sequential(\n                    (0): HGNetV2ConvLayer(\n                      (convolution): Conv2d(1664, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                    (1): HGNetV2ConvLayer(\n                      (convolution): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (drop_path): Identity()\n                )\n                (1-2): 2 x HGNetV2BasicLayer(\n                  (layers): ModuleList(\n                    (0): HGNetV2ConvLayerLight(\n                      (conv1): HGNetV2ConvLayer(\n                        (convolution): Conv2d(1024, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): Identity()\n                        (lab): Identity()\n                      )\n                      (conv2): HGNetV2ConvLayer(\n                        (convolution): Conv2d(192, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=192, bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): ReLU()\n                        (lab): Identity()\n                      )\n                    )\n                    (1-5): 5 x HGNetV2ConvLayerLight(\n                      (conv1): HGNetV2ConvLayer(\n                        (convolution): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): Identity()\n                        (lab): Identity()\n                      )\n                      (conv2): HGNetV2ConvLayer(\n                        (convolution): Conv2d(192, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=192, bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): ReLU()\n                        (lab): Identity()\n                      )\n                    )\n                  )\n                  (aggregation): Sequential(\n                    (0): HGNetV2ConvLayer(\n                      (convolution): Conv2d(2176, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                    (1): HGNetV2ConvLayer(\n                      (convolution): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (drop_path): Identity()\n                )\n              )\n            )\n            (3): HGNetV2Stage(\n              (downsample): HGNetV2ConvLayer(\n                (convolution): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=1024, bias=False)\n                (normalization): DFineFrozenBatchNorm2d()\n                (activation): Identity()\n                (lab): Identity()\n              )\n              (blocks): ModuleList(\n                (0): HGNetV2BasicLayer(\n                  (layers): ModuleList(\n                    (0): HGNetV2ConvLayerLight(\n                      (conv1): HGNetV2ConvLayer(\n                        (convolution): Conv2d(1024, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): Identity()\n                        (lab): Identity()\n                      )\n                      (conv2): HGNetV2ConvLayer(\n                        (convolution): Conv2d(384, 384, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=384, bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): ReLU()\n                        (lab): Identity()\n                      )\n                    )\n                    (1-5): 5 x HGNetV2ConvLayerLight(\n                      (conv1): HGNetV2ConvLayer(\n                        (convolution): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): Identity()\n                        (lab): Identity()\n                      )\n                      (conv2): HGNetV2ConvLayer(\n                        (convolution): Conv2d(384, 384, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=384, bias=False)\n                        (normalization): DFineFrozenBatchNorm2d()\n                        (activation): ReLU()\n                        (lab): Identity()\n                      )\n                    )\n                  )\n                  (aggregation): Sequential(\n                    (0): HGNetV2ConvLayer(\n                      (convolution): Conv2d(3328, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                    (1): HGNetV2ConvLayer(\n                      (convolution): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                      (normalization): DFineFrozenBatchNorm2d()\n                      (activation): ReLU()\n                      (lab): Identity()\n                    )\n                  )\n                  (drop_path): Identity()\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n    (encoder_input_proj): ModuleList(\n      (0): Sequential(\n        (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (1): Sequential(\n        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (2): Sequential(\n        (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n    )\n    (encoder): DFineHybridEncoder(\n      (encoder): ModuleList(\n        (0): DFineEncoder(\n          (layers): ModuleList(\n            (0): DFineEncoderLayer(\n              (self_attn): DFineMultiheadAttention(\n                (k_proj): Linear(in_features=256, out_features=256, bias=True)\n                (v_proj): Linear(in_features=256, out_features=256, bias=True)\n                (q_proj): Linear(in_features=256, out_features=256, bias=True)\n                (out_proj): Linear(in_features=256, out_features=256, bias=True)\n              )\n              (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n              (activation_fn): GELUActivation()\n              (fc1): Linear(in_features=256, out_features=1024, bias=True)\n              (fc2): Linear(in_features=1024, out_features=256, bias=True)\n              (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n            )\n          )\n        )\n      )\n      (lateral_convs): ModuleList(\n        (0-1): 2 x DFineConvNormLayer(\n          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (activation): Identity()\n        )\n      )\n      (fpn_blocks): ModuleList(\n        (0-1): 2 x DFineRepNCSPELAN4(\n          (conv1): DFineConvNormLayer(\n            (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n          (csp_rep1): DFineCSPRepLayer(\n            (conv1): DFineConvNormLayer(\n              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (conv2): DFineConvNormLayer(\n              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (bottlenecks): ModuleList(\n              (0-2): 3 x DFineRepVggBlock(\n                (conv1): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (conv2): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (activation): SiLU()\n              )\n            )\n            (conv3): Identity()\n          )\n          (conv2): DFineConvNormLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n          (csp_rep2): DFineCSPRepLayer(\n            (conv1): DFineConvNormLayer(\n              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (conv2): DFineConvNormLayer(\n              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (bottlenecks): ModuleList(\n              (0-2): 3 x DFineRepVggBlock(\n                (conv1): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (conv2): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (activation): SiLU()\n              )\n            )\n            (conv3): Identity()\n          )\n          (conv3): DFineConvNormLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n          (conv4): DFineConvNormLayer(\n            (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n        )\n      )\n      (downsample_convs): ModuleList(\n        (0-1): 2 x DFineSCDown(\n          (conv1): DFineConvNormLayer(\n            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): Identity()\n          )\n          (conv2): DFineConvNormLayer(\n            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)\n            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): Identity()\n          )\n        )\n      )\n      (pan_blocks): ModuleList(\n        (0-1): 2 x DFineRepNCSPELAN4(\n          (conv1): DFineConvNormLayer(\n            (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n          (csp_rep1): DFineCSPRepLayer(\n            (conv1): DFineConvNormLayer(\n              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (conv2): DFineConvNormLayer(\n              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (bottlenecks): ModuleList(\n              (0-2): 3 x DFineRepVggBlock(\n                (conv1): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (conv2): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (activation): SiLU()\n              )\n            )\n            (conv3): Identity()\n          )\n          (conv2): DFineConvNormLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n          (csp_rep2): DFineCSPRepLayer(\n            (conv1): DFineConvNormLayer(\n              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (conv2): DFineConvNormLayer(\n              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (activation): SiLU()\n            )\n            (bottlenecks): ModuleList(\n              (0-2): 3 x DFineRepVggBlock(\n                (conv1): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (conv2): DFineConvNormLayer(\n                  (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                  (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                  (activation): Identity()\n                )\n                (activation): SiLU()\n              )\n            )\n            (conv3): Identity()\n          )\n          (conv3): DFineConvNormLayer(\n            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n          (conv4): DFineConvNormLayer(\n            (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): SiLU()\n          )\n        )\n      )\n    )\n    (denoising_class_embed): Embedding(8, 256, padding_idx=7)\n    (enc_output): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    )\n    (enc_score_head): Linear(in_features=256, out_features=7, bias=True)\n    (enc_bbox_head): DFineMLPPredictionHead(\n      (layers): ModuleList(\n        (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        (2): Linear(in_features=256, out_features=4, bias=True)\n      )\n    )\n    (decoder): DFineDecoder(\n      (layers): ModuleList(\n        (0-5): 6 x DFineDecoderLayer(\n          (self_attn): DFineMultiheadAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (encoder_attn): DFineMultiscaleDeformableAttention(\n            (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)\n            (attention_weights): Linear(in_features=256, out_features=96, bias=True)\n          )\n          (fc1): Linear(in_features=256, out_features=1024, bias=True)\n          (fc2): Linear(in_features=1024, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (gateway): DFineGate(\n            (gate): Linear(in_features=512, out_features=512, bias=True)\n            (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          )\n        )\n      )\n      (query_pos_head): DFineMLPPredictionHead(\n        (layers): ModuleList(\n          (0): Linear(in_features=4, out_features=512, bias=True)\n          (1): Linear(in_features=512, out_features=256, bias=True)\n        )\n      )\n      (pre_bbox_head): DFineMLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n          (2): Linear(in_features=256, out_features=4, bias=True)\n        )\n        (act): ReLU()\n      )\n      (integral): DFineIntegral()\n      (lqe_layers): ModuleList(\n        (0-5): 6 x DFineLQE(\n          (reg_conf): DFineMLP(\n            (layers): ModuleList(\n              (0): Linear(in_features=20, out_features=64, bias=True)\n              (1): Linear(in_features=64, out_features=1, bias=True)\n            )\n            (act): ReLU()\n          )\n        )\n      )\n      (class_embed): ModuleList(\n        (0-5): 6 x Linear(in_features=256, out_features=7, bias=True)\n      )\n      (bbox_embed): ModuleList(\n        (0-5): 6 x DFineMLP(\n          (layers): ModuleList(\n            (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n            (2): Linear(in_features=256, out_features=132, bias=True)\n          )\n          (act): ReLU()\n        )\n      )\n    )\n    (decoder_input_proj): ModuleList(\n      (0-2): 3 x Identity()\n    )\n  )\n  (class_embed): ModuleList(\n    (0-5): 6 x Linear(in_features=256, out_features=7, bias=True)\n  )\n  (bbox_embed): ModuleList(\n    (0-5): 6 x DFineMLP(\n      (layers): ModuleList(\n        (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        (2): Linear(in_features=256, out_features=132, bias=True)\n      )\n      (act): ReLU()\n    )\n  )\n)\n\n\nThese two layers are what are going to output the final predictions of our model in structure similar to our annotations.\nThe class_labels_classifier will output the predicted class label of a given bounding box output from bbox_predictor.\nIn essence, we are trying to get all of the pretrained patterns (also called parameters/weights & biases) of the previous layers to conform to the ideal outputs we‚Äôd like at the end.\n\n\n6.4 Counting the number of parameters in our model\nParameters are individual values which contribute to a model‚Äôs final output.\nParameters are also referred to as weights and biases.\nYou can think of these individual weights as small pushes and pulls on the input data to get it to match the input annotations.\nIf our weights were perfect, we could input an image and always get back the correct bounding boxes and class labels.\nIt‚Äôs very unlikely to ever have perfect weights (unless your dataset is very small) but we can make them quite good (and useful).\nWhen you have a good set of weights, this is known as a good representation.\nRight now, our weights have been trained on COCO, a collection of 91 different common objects.\nSo they have a fairly good representation of detecting general common objects, however, we‚Äôd like to fine-tune these weights to detect our target objects.\nImportantly, our model will not be starting from scratch when it begins to train.\nIt will instead take off from its existing knowledge of detecting common objects in images and try to adhere to our task.\nWhen it comes to parameters and weights, generally, more is better.\nMeaning the more parameters your model has, the better representation it can learn.\nFor example, ResNet50 (our computer vision backbone) has ~25 million parameters, about 100 MB in float32 precision or 50MB in float16 precision.\nWhereas a model such as Llama-3.1-405B has ~405 billion parameters, about 1.45 TB in float32 precision or 740 GB in float16 precision, about 16,000x more than ResNet50.\nHowever, as we can see having more parameters comes with the tradeoff of size and latency.\nFor each new parameter requires to be stored and it also adds an extra computation unit to your model.\nIn the case of Trashify, since we‚Äôd like our model to run on-device (e.g.¬†make predictions live on an iPhone), we‚Äôd opt for the smallest number of parameters we could get acceptable results from.\nIf performance is your number 1 criteria and size and latency don‚Äôt matter, then you‚Äôd likely opt for the model with the largest number of parameters (though always evaluate these models on your own data, larger models are generally better, not always better).\nSince our model is built using PyTorch, let‚Äôs write a small function to count the number of:\n\nTrainable parameters (parameters which will be tweaked during training)\nNon-trainable parameters (parameters which will not be tweaked during training)\nTotal parameters (trainable parameters + non-trainable parameters)\n\n\n# Count the number of parameters in the model\ndef count_parameters(model):\n    \"\"\"Takes in a PyTorch model and returns the number of parameters.\"\"\"\n    trainable_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    non_trainable_parameters = sum(p.numel() for p in model.parameters() if not p.requires_grad)\n    total_parameters = sum(p.numel() for p in model.parameters())\n    print(f\"Total parameters: {total_parameters:,}\")\n    print(f\"Trainable parameters (will be updated): {trainable_parameters:,}\")\n    print(f\"Non-trainable parameters (will not be updated): {non_trainable_parameters:,}\")\n\ncount_parameters(model)\n\nTotal parameters: 31,094,137\nTrainable parameters (will be updated): 31,094,135\nNon-trainable parameters (will not be updated): 2\n\n\nCool!\nIt looks like our model has a total of 43,396,813 parameters, of which, most of them are trainable.\nThis means that when we fine-tune our model later on, we‚Äôll be tweaking the majority of the parameters to try and represent our data.\nIn practice, this is known as full fine-tuning, trying to fine-tune a large portion of the model to our data.\nThere are other methods for fine-tuning, such as feature extraction (where you only fine-tune the final layers of the model) and partial fine-tuning (where you fine-tune a portion of the model).\nAnd even methods such as LoRA (Low-Rank Adaptation) which fine-tunes an adaptor matrix as a compliment to the model‚Äôs parameters.\n\n\n6.5 Creating a function to build our model\nSince machine learning is very experimental, we may want to create multiple instances of our model to test various things.\nSo let‚Äôs functionize the creation of a new model with parameters for our target model name, id2label and label2id dictionaries.\n\nfrom transformers import AutoModelForObjectDetection\n\n# Setup the model\ndef create_model(pretrained_model_name_or_path: str = MODEL_NAME, \n                 label2id: dict = label2id, \n                 id2label: dict = id2label):\n    \"\"\"Creates and returns an instance of AutoModelForObjectDetection.\n    \n    Args: \n        pretrained_model_name_or_path (str): The name or path of the pretrained model to load. \n            Defaults to MODEL_NAME.\n        label2id (dict): A dictionary mapping class labels to IDs. Defaults to label2id.\n        id2label (dict): A dictionary mapping class IDs to labels. Defaults to id2label.\n    \n    Returns:\n        AutoModelForObjectDetection: A pretrained model for object detection with number of output\n            classes equivalent to len(label2id).\n    \"\"\"\n    model = AutoModelForObjectDetection.from_pretrained(\n        pretrained_model_name_or_path=MODEL_NAME,\n        label2id=label2id,\n        id2label=id2label,\n        ignore_mismatched_sizes=True, # default\n        # backbone=\"resnet50\", # default \n    )\n    return model\n\nPerfect!\nAnd to make sure our function works‚Ä¶\n\nMODEL_NAME\n\n'ustc-community/dfine-large-coco'\n\n\n\n# Create a new model instance\nmodel = create_model()\n# model\n\nSome weights of DFineForObjectDetection were not initialized from the model checkpoint at ustc-community/dfine-large-coco and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\n\n\n6.6 Trying to pass a single sample through our model (part 1)\nOkay, now we‚Äôve got a model, let‚Äôs put some data through it!\nWhen we call our model, because it‚Äôs a PyTorch Module (torch.nn.Module) it will by default run the forward method.\nIn PyTorch, forward overrides the special __call__ method on functions.\nSo we can pass data into our model by running:\nmodel(input_data)\nWhich is equivalent to running:\nmodel.forward(input_data)\nTo see what happens when we call our model, let‚Äôs inspect the forward method‚Äôs docstring with model.forward?.\n\n# What happens when we call our model?\n# Note: for PyTorch modules, `forward` overrides the __call__ method, \n# so calling the model is equivalent to calling the forward method.\nmodel.forward?\n\n\n\nOutput of model.forward?\n\nSignature:\nmodel.forward(\n    pixel_values: torch.FloatTensor,\n    pixel_mask: Optional[torch.LongTensor] = None,\n    decoder_attention_mask: Optional[torch.LongTensor] = None,\n    encoder_outputs: Optional[torch.FloatTensor] = None,\n    inputs_embeds: Optional[torch.FloatTensor] = None,\n    decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n    labels: Optional[List[dict]] = None,\n    output_attentions: Optional[bool] = None,\n    output_hidden_states: Optional[bool] = None,\n    return_dict: Optional[bool] = None,\n) -&gt; Union[Tuple[torch.FloatTensor], transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput]\nDocstring:\nThe [`ConditionalDetrForObjectDetection`] forward method, overrides the `__call__` special method.\n\n&lt;Tip&gt;\n\nAlthough the recipe for forward pass needs to be defined within this function, one should call the [`Module`]\ninstance afterwards instead of this since the former takes care of running the pre and post processing steps while\nthe latter silently ignores them.\n\n&lt;/Tip&gt;\n\nArgs:\n    pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)`):\n        Pixel values. Padding will be ignored by default should you provide it.\n\n        Pixel values can be obtained using [`AutoImageProcessor`]. See [`ConditionalDetrImageProcessor.__call__`]\n        for details.\n\n    pixel_mask (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*):\n        Mask to avoid performing attention on padding pixel values. Mask values selected in `[0, 1]`:\n\n        - 1 for pixels that are real (i.e. **not masked**),\n        - 0 for pixels that are padding (i.e. **masked**).\n\n        [What are attention masks?](../glossary#attention-mask)\n\n    decoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, num_queries)`, *optional*):\n        Not used by default. Can be used to mask object queries.\n    encoder_outputs (`tuple(tuple(torch.FloatTensor)`, *optional*):\n        Tuple consists of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)\n        `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) is a sequence of\n        hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.\n    inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you\n        can choose to directly pass a flattened representation of an image.\n    decoder_inputs_embeds (`torch.FloatTensor` of shape `(batch_size, num_queries, hidden_size)`, *optional*):\n        Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an\n        embedded representation.\n    output_attentions (`bool`, *optional*):\n        Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n        tensors for more detail.\n    output_hidden_states (`bool`, *optional*):\n        Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n        more detail.\n    return_dict (`bool`, *optional*):\n        Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\n    labels (`List[Dict]` of len `(batch_size,)`, *optional*):\n        Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the\n        following 2 keys: 'class_labels' and 'boxes' (the class labels and bounding boxes of an image in the batch\n        respectively). The class labels themselves should be a `torch.LongTensor` of len `(number of bounding boxes\n        in the image,)` and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image, 4)`.\n\n\n    Returns:\n        [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or `tuple(torch.FloatTensor)`: A [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or a tuple of\n        `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`) comprising various\n        elements depending on the configuration ([`ConditionalDetrConfig`]) and inputs.\n\n        - **loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` are provided)) -- Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a\n          bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized\n          scale-invariant IoU loss.\n        - **loss_dict** (`Dict`, *optional*) -- A dictionary containing the individual losses. Useful for logging.\n        - **logits** (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes + 1)`) -- Classification logits (including no-object) for all queries.\n        - **pred_boxes** (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`) -- Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These\n          values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding\n          possible padding). You can use [`~ConditionalDetrImageProcessor.post_process_object_detection`] to retrieve the\n          unnormalized bounding boxes.\n        - **auxiliary_outputs** (`list[Dict]`, *optional*) -- Optional, only returned when auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)\n          and labels are provided. It is a list of dictionaries containing the two above keys (`logits` and\n          `pred_boxes`) for each decoder layer.\n        - **last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the decoder of the model.\n        - **decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the decoder at the output of each\n          layer plus the initial embedding outputs.\n        - **decoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n        - **cross_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder's cross-attention layer, after the attention softmax,\n          used to compute the weighted average in the cross-attention heads.\n        - **encoder_last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the encoder of the model.\n        - **encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the encoder at the output of each\n          layer plus the initial embedding outputs.\n        - **encoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the encoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n  \n\n    Examples:\n\n    ```python\n    &gt;&gt;&gt; from transformers import AutoImageProcessor, AutoModelForObjectDetection\n    &gt;&gt;&gt; from PIL import Image\n    &gt;&gt;&gt; import requests\n\n    &gt;&gt;&gt; url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n    &gt;&gt;&gt; image = Image.open(requests.get(url, stream=True).raw)\n\n    &gt;&gt;&gt; image_processor = AutoImageProcessor.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n    &gt;&gt;&gt; model = AutoModelForObjectDetection.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n\n    &gt;&gt;&gt; inputs = image_processor(images=image, return_tensors=\"pt\")\n\n    &gt;&gt;&gt; outputs = model(**inputs)\n\n    &gt;&gt;&gt; # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n    &gt;&gt;&gt; target_sizes = torch.tensor([image.size[::-1]])\n    &gt;&gt;&gt; results = image_processor.post_process_object_detection(outputs, threshold=0.5, target_sizes=target_sizes)[\n    ...     0\n    ... ]\n    &gt;&gt;&gt; for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n    ...     box = [round(i, 2) for i in box.tolist()]\n    ...     print(\n    ...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n    ...         f\"{round(score.item(), 3)} at location {box}\"\n    ...     )\n    Detected remote with confidence 0.833 at location [38.31, 72.1, 177.63, 118.45]\n    Detected cat with confidence 0.831 at location [9.2, 51.38, 321.13, 469.0]\n    Detected cat with confidence 0.804 at location [340.3, 16.85, 642.93, 370.95]\n    Detected remote with confidence 0.683 at location [334.48, 73.49, 366.37, 190.01]\n    Detected couch with confidence 0.535 at location [0.52, 1.19, 640.35, 475.1]\n    ```\nFile:      ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py\nType:      method\n\nRunning model.forward? we can see that our model wants to take in pixel_values as well as a pixel_mask as arguments.\nWhat happens if we try to pass in a single image from our random_sample?\nLet‚Äôs try!\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs good practice to try and pass a single sample through your model as soon as possible to see what happens.\nIf we‚Äôre lucky, it‚Äôll work.\nIf we‚Äôre really lucky, we‚Äôll get an error message saying why it didn‚Äôt work (this is usually the case because rarely does raw data flow through a model without being preprocessed first).\n\n\nWe‚Äôll do so by setting pixel_values to our random_sample[\"image\"] and pixel_mask=None.\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample[\"image\"],\n                              pixel_mask=None)\nrandom_sample_outputs\n\n\n\nOutput of random_sample_outputs\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[34], line 2\n      1 # Do a single forward pass with the model\n----&gt; 2 random_sample_outputs = model(pixel_values=random_sample[\"image\"],\n      3                               pixel_mask=None)\n      4 random_sample_outputs\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1739, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1737     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1738 else:\n-&gt; 1739     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1750, in Module._call_impl(self, *args, **kwargs)\n   1745 # If we don't have any hooks, we want to skip the rest of the logic in\n   1746 # this function, and just call forward.\n   1747 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1748         or _global_backward_pre_hooks or _global_backward_hooks\n   1749         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1750     return forward_call(*args, **kwargs)\n   1752 result = None\n   1753 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py:1717, in ConditionalDetrForObjectDetection.forward(self, pixel_values, pixel_mask, decoder_attention_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, labels, output_attentions, output_hidden_states, return_dict)\n   1714 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n   1716 # First, sent images through CONDITIONAL_DETR base model to obtain encoder + decoder outputs\n-&gt; 1717 outputs = self.model(\n   1718     pixel_values,\n   1719     pixel_mask=pixel_mask,\n   1720     decoder_attention_mask=decoder_attention_mask,\n   1721     encoder_outputs=encoder_outputs,\n   1722     inputs_embeds=inputs_embeds,\n   1723     decoder_inputs_embeds=decoder_inputs_embeds,\n   1724     output_attentions=output_attentions,\n   1725     output_hidden_states=output_hidden_states,\n   1726     return_dict=return_dict,\n   1727 )\n   1729 sequence_output = outputs[0]\n   1731 # class logits + predicted bounding boxes\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1739, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1737     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1738 else:\n-&gt; 1739     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1750, in Module._call_impl(self, *args, **kwargs)\n   1745 # If we don't have any hooks, we want to skip the rest of the logic in\n   1746 # this function, and just call forward.\n   1747 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1748         or _global_backward_pre_hooks or _global_backward_hooks\n   1749         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1750     return forward_call(*args, **kwargs)\n   1752 result = None\n   1753 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py:1521, in ConditionalDetrModel.forward(self, pixel_values, pixel_mask, decoder_attention_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, output_attentions, output_hidden_states, return_dict)\n   1516 output_hidden_states = (\n   1517     output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n   1518 )\n   1519 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n-&gt; 1521 batch_size, num_channels, height, width = pixel_values.shape\n   1522 device = pixel_values.device\n   1524 if pixel_mask is None:\n\nAttributeError: 'Image' object has no attribute 'shape'\n\nOh no!‚Ä¶ I mean‚Ä¶ Oh, yes!\nWe get an error:\n\nAttributeError: ‚ÄòImage‚Äô object has no attribute ‚Äòshape‚Äô\n\nHmmm‚Ä¶ it seems we‚Äôve tried to pass a PIL.Image to our model rather than a torch.FloatTensor of shape (batch_size, num_channels, height, width).\nIt looks like our input data might require some preprocessing before we can pass it to our model."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#aside-processor-to-model-pattern",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#aside-processor-to-model-pattern",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "7 Aside: Processor to Model Pattern",
    "text": "7 Aside: Processor to Model Pattern\nMany Hugging Face data loading and modelling workflows as well as machine learning workflows in general follow the pattern of:\n\nData -&gt; Preprocessor -&gt; Model\n\nTK image - can we make data -&gt; preprocessor -&gt; model look better? potentially a flow chart?\nMeaning, the raw input data gets preprocessed or transformed in some way before being passed to a model.\nPreprocessors and models are often loaded with an Auto Class.\nAn Auto Class pairs a preprocessor and model based on their model name or key.\nFor example:\nfrom transformers import AutoProcessor, AutoModel\n\n# Load raw data\nraw_data = load_data()\n\n# Define target model name\nMODEL_NAME = \"...\"\n\n# Load preprocessor and model (these two are often paired)\npreprocessor = AutoProcessor.from_pretrained(MODEL_NAME)\nmodel = AutoModel.from_pretrained(MODEL_NAME)\n\n# Preprocess data\npreprocessed_data = preprocessor.preprocess(raw_data)\n\n# Pass preprocessed data to model\noutput = model(preprocessed_data)\nThis is the same for our Trashify üöÆ project.\nWe‚Äôve got our raw data (images and bounding boxes), however, they need to be preprocessed in order for our model to be able to handle them.\nPreviously we tried to pass a sample of raw data to our model and this errored.\nWe can fix this by first preprocessing our raw data with our model‚Äôs pair preprocessor and then passing to our model again."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#loading-our-models-processor",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#loading-our-models-processor",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "8 Loading our model‚Äôs processor",
    "text": "8 Loading our model‚Äôs processor\nTime to get our raw data ready for our model!\nTo begin, let‚Äôs load our model‚Äôs processor.\nWe‚Äôll use this to prepare our input images for the model.\nTo do so, we‚Äôll use transformers.AutoImageProcessor and pass our target model name to the from_pretrained method.\n\nfrom transformers import AutoImageProcessor\n\nMODEL_NAME = \"ustc-community/dfine-large-coco\"\n# MODEL_NAME = \"facebook/detr-resnet-50\" # Could also use this model as an another experiment\n\n# Load the image processor\nimage_processor = AutoImageProcessor.from_pretrained(pretrained_model_name_or_path=MODEL_NAME, \n                                                     use_fast=True)\n\n# Check out the image processor\nimage_processor\n\n\n\n\nRTDetrImageProcessorFast {\n  \"crop_size\": null,\n  \"data_format\": \"channels_first\",\n  \"default_to_square\": false,\n  \"device\": null,\n  \"do_center_crop\": null,\n  \"do_convert_annotations\": true,\n  \"do_convert_rgb\": null,\n  \"do_normalize\": false,\n  \"do_pad\": false,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"RTDetrImageProcessorFast\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"input_data_format\": null,\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"return_segmentation_masks\": null,\n  \"return_tensors\": null,\n  \"size\": {\n    \"height\": 640,\n    \"width\": 640\n  }\n}\n\n\nOk, a few things going on here.\nThese parameters will transform our input images before we pass them to our model.\nOne of the first things to see is the image_processor is expecting our bounding boxes to be in COCO (or coco_detection) format (this is the default).\nWe‚Äôll see what this looks like later on but our processor wants this format because that‚Äôs the format our model has been trained on (it‚Äôs generally best practice to input data to a model in the same way its been trained on, otherwise you might get poor results).\nAnother thing to notice is that our input images will be resized to the values of the size parameter.\nIn our case, it‚Äôs currently:\n\"size\": {\n    \"longest_edge\": 1333,\n    \"shortest_edge\": 800\n}\nWhich means that the longest edge will have size less or equal to 1333 and the shortest edge less or equal to 800.\nFor simplicity, we‚Äôll change this shortly to make both sides the same size.\nYou can read more about what each of these does in the transformers.ConditionalDetrImageProcessor documentation.\nLet‚Äôs update our instance of transformers.ConditionalDetrImageProcessor with a few custom parameters:\n\ndo_convert_annotations=True - This is the default and it will convert our boxes to the format CXCYWH or (center_x, center_y, width, height) (see Table¬†1) in the range [0, 1].\nsize - We‚Äôll update the size dictionary so all of our images have \"longest_edge\": 640 and \"shortest_edge: 640\". We‚Äôll use a value of 640 which is a common size in world of object detection. But there are also other sizes such as 300x300, 480x480, 512x512, 800x800 and more.\n\n\n\n\n\n\n\nNote\n\n\n\nDepending on what task you‚Äôre working on, you might want to tweak the image resolution you‚Äôre working with.\nFor example, I like this quote from Lucas Beyer, a former research scientist at DeepMind and engineer at OpenAI:\n\nMy conservative claim is that you can always stretch to a square, and for:\nnatural images, meaning most photos, 224px¬≤ is enough; text in photos, phone screens, diagrams and charts, 448px¬≤ is enough; desktop screens and single-page documents, 896px¬≤ is enough.\n\nTypically, in the case of object detection, you‚Äôll want to use a higher value.\nBut this is another thing that is open to experimentation.\n\n\n\n# # Set image size\n# IMAGE_SIZE = 640 # we could try other sizes here: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# # Create a new instance of the image processor with the desired image size\n# image_processor = AutoImageProcessor.from_pretrained(\n#     pretrained_model_name_or_path=MODEL_NAME,\n#     format=\"coco_detection\", # this is the default\n#     do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height) in range [0, 1]\n#     size={\"shortest_edge\": IMAGE_SIZE, \n#           \"longest_edge\": IMAGE_SIZE}\n# )\n\n# # Optional: View the docstring of our image_processor.preprocess function\n# # image_processor.preprocess?\n\n# # Check out our new image processor size\n# image_processor.size\n\nBeautiful!\nNow our images will be resized to a square of size 640x640 when we pass them to our model.\nHow about we try to preprocess our random_sample?\nTo do so, we can pass its \"image\" key and \"annotations\" key to our image_processor‚Äôs preprocess method.\nLet‚Äôs try!\n\n# Try to process a single image and annotation pair (spoiler: this will error)\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample[\"annotations\"])\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[26], line 2\n      1 # Try to process a single image and annotation pair (spoiler: this will error)\n----&gt; 2 random_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n      3                                                         annotations=random_sample[\"annotations\"])\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:405, in RTDetrImageProcessorFast.preprocess(self, images, annotations, masks_path, **kwargs)\n    380 @auto_docstring\n    381 def preprocess(\n    382     self,\n   (...)\n    386     **kwargs: Unpack[RTDetrFastImageProcessorKwargs],\n    387 ) -&gt; BatchFeature:\n    388     r\"\"\"\n    389     annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n    390         List of annotations associated with the image or batch of images. If annotation is for object\n   (...)\n    403         Path to the directory containing the segmentation masks.\n    404     \"\"\"\n--&gt; 405     return super().preprocess(images, annotations=annotations, masks_path=masks_path, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_processing_utils_fast.py:606, in BaseImageProcessorFast.preprocess(self, images, **kwargs)\n    603 kwargs.pop(\"default_to_square\")\n    604 kwargs.pop(\"data_format\")\n--&gt; 606 return self._preprocess(images=images, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:443, in RTDetrImageProcessorFast._preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, interpolation, do_center_crop, crop_size, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, pad_size, format, return_tensors)\n    441 format = AnnotationFormat(format)\n    442 if annotations is not None:\n--&gt; 443     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n    445 data = {}\n    446 processed_images = []\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:919, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    917 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    918     if not valid_coco_detection_annotations(annotations):\n--&gt; 919         raise ValueError(\n    920             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    921             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    922             \"being a list of annotations in the COCO format.\"\n    923         )\n    925 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    926     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nOh no!\nWe get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\n\n8.1 Preprocessing a single image\nOkay so it turns out that our annotations aren‚Äôt in the format that the preprocess method was expecting.\nSince our pre-trained model was trained on the COCO dataset, the preprocess method expects input data to be in line with the COCO format.\nWe can fix this later on by adjusting our annotations.\nHow about we try to preprocess just a single image instead?\n\n# Preprocess our target sample\nrandom_sample_preprocessed_image_only = image_processor.preprocess(images=random_sample[\"image\"],\n                                                                   annotations=None, # no annotations this time \n                                                                   return_tensors=\"pt\") # return as PyTorch tensors\n\n# Uncomment to see the full output\n# print(random_sample_preprocessed_image_only)\n\n# Print out the keys of the preprocessed image\nprint(random_sample_preprocessed_image_only.keys())\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\ndict_keys(['pixel_values'])\n\n\nNice! It looks like the preprocess method works on a single image.\nAnd it seems like we get a dictionary output with the following keys:\n\npixel_values - the processed pixel values of the input image.\npixel_mask - a mask multiplier for the pixel values as to whether they should be paid attention to or not (a value of 0 means the pixel value should be ignored by the model and a value of 1 means the pixel value should be paid attention to by the model).\n\nIn our case, all values of the pixel_mask are 1 since we‚Äôre not using any masks.\nLet‚Äôs check.\nPS Do you remember where we needed these keys? pixel_values and pixel_mask? Hint: it‚Äôs the reverse of drawrof.ledom.\n\n# Check all values of the pixel_mask are 1\ntorch.all(random_sample_preprocessed_image_only[\"pixel_mask\"][0]) == 1\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[28], line 2\n      1 # Check all values of the pixel_mask are 1\n----&gt; 2 torch.all(random_sample_preprocessed_image_only[\"pixel_mask\"][0]) == 1\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/feature_extraction_utils.py:86, in BatchFeature.__getitem__(self, item)\n     81 \"\"\"\n     82 If the key is a string, returns the value of the dict associated to `key` ('input_values', 'attention_mask',\n     83 etc.).\n     84 \"\"\"\n     85 if isinstance(item, str):\n---&gt; 86     return self.data[item]\n     87 else:\n     88     raise KeyError(\"Indexing with integers is not available when using Python based feature extractors\")\n\nKeyError: 'pixel_mask'\n\n\n\nBeautiful!\nNow how about we inspect our processed image‚Äôs shape?\n\n# Uncomment to inspect all preprocessed pixel values\n# print(random_sample_preprocessed_image_only[\"pixel_values\"][0])\n\nprint(f\"[INFO] Original image shape: {random_sample['image'].size} -&gt; [width, height]\")\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed_image_only['pixel_values'].shape} -&gt; [batch_size, colour_channles, height, width]\")\n\n[INFO] Original image shape: (960, 1280) -&gt; [width, height]\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 640]) -&gt; [batch_size, colour_channles, height, width]\n\n\nOk wonderful, it looks like our image has been downsized to [3, 640, 480] (1 item in the batch, 3 colour channels, 640 pixels high, 480 pixels wide).\nThis is down from its original size of [960, 1280] (1280 pixels high, 960 pixels wide).\n\n\n\n\n\n\nNote\n\n\n\nThe order of image dimensions can differ between libraries and frameworks.\nFor example, image tensors in PyTorch typically follow the format [colour_channels, height, width] whereas in TensorFlow they follow [height, width, colour_channels].\nAnd in PIL, the format is [width, height].\nAs you can imagine, this can get confusing.\nHowever, with some practice, you‚Äôll be able to decipher which is which.\nAnd if your images and bounding boxes start looking strange, perhaps checking the image dimension and format can help.\n\n\n\n\n8.2 Trying to pass a single sample through our model (part 2)\nThis is exciting!\nWe‚Äôve processed an image into the format our model is expecting.\nHow about we try another forward by calling model.forward(pixel_values, pixel_mask)?\nWhich is the same as calling model(pixel_values, pixel_mask).\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed_image_only[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    # pixel_mask=random_sample_preprocessed_image_only[\"pixel_mask\"],\n)\n\n# Inspect the outputs\nrandom_sample_outputs\n\nDFineObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[-2.4676, -2.8317, -1.5819,  ..., -2.1818, -1.5801, -0.0970],\n         [-2.4745, -2.9243, -1.5599,  ..., -2.2438, -1.5719,  0.0098],\n         [-1.8981, -2.2602, -1.8714,  ..., -1.7901, -1.5829, -1.3580],\n         ...,\n         [-2.5823, -3.3150, -1.4043,  ..., -2.5875, -1.7124, -0.3842],\n         [-2.5855, -1.9997, -1.1941,  ..., -1.4283, -1.5087, -0.9462],\n         [-2.1450, -2.3526, -1.4355,  ..., -1.6967, -1.1804, -1.5560]]],\n       grad_fn=&lt;SelectBackward0&gt;), pred_boxes=tensor([[[0.4660, 0.8514, 0.4157, 0.2886],\n         [0.4606, 0.8518, 0.4093, 0.2916],\n         [0.7049, 0.2852, 0.0909, 0.0359],\n         ...,\n         [0.1713, 0.2730, 0.0485, 0.0436],\n         [0.2151, 0.7217, 0.3129, 0.1188],\n         [0.6430, 0.1967, 0.1123, 0.0812]]], grad_fn=&lt;SelectBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 0.1711,  0.1602,  0.2036,  ..., -0.1012, -0.0984, -0.0277],\n         [ 0.1729,  0.1571,  0.2362,  ..., -0.1157, -0.1154, -0.0450],\n         [ 0.6834,  0.2047, -0.0060,  ...,  0.0376, -0.0456, -0.0833],\n         ...,\n         [ 0.3048,  0.1723,  0.1457,  ..., -0.0505, -0.1095, -0.1598],\n         [ 0.3078,  0.1537, -0.0172,  ...,  0.0119, -0.0069,  0.0585],\n         [ 0.3258,  0.0732,  0.1520,  ...,  0.0011, -0.0154,  0.2229]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), intermediate_hidden_states=tensor([[[[-6.0914e-01,  5.6887e-01, -1.4244e-01,  ..., -3.3705e-01,\n           -2.3355e-01,  1.2992e-01],\n          [-3.2150e-01,  4.0866e-01, -2.0320e-01,  ..., -3.3052e-01,\n           -8.2578e-02, -3.5742e-02],\n          [ 7.5016e-02, -1.0486e-01, -1.8291e-01,  ...,  2.1652e-01,\n           -8.0902e-02, -2.6974e-01],\n          ...,\n          [-1.4915e-01,  3.1471e-01, -2.9620e-01,  ...,  1.3137e-01,\n            1.5526e-01,  4.1551e-01],\n          [ 1.2387e-01,  5.3656e-01, -1.2567e-02,  ...,  7.4507e-02,\n           -6.7949e-02,  2.8050e-01],\n          [-9.1278e-02,  3.8158e-02, -1.5010e-01,  ...,  7.4279e-01,\n            2.0633e-01, -1.2546e-01]]],\n\n\n        [[[-4.8911e-01,  1.6071e-01,  4.5236e-01,  ..., -5.2682e-01,\n           -2.4115e-01,  1.6994e-01],\n          [-5.4141e-01,  1.1102e-01,  4.4523e-01,  ..., -6.2041e-01,\n           -1.7304e-01,  1.4580e-01],\n          [-7.6277e-01, -5.6639e-01, -1.4245e-01,  ...,  1.1783e+00,\n           -1.3684e-01, -8.7961e-02],\n          ...,\n          [-1.2074e+00,  5.8821e-01, -7.7188e-01,  ...,  8.1310e-01,\n           -4.9005e-03,  5.7947e-01],\n          [-3.3109e-01,  6.3133e-01, -8.4337e-01,  ..., -5.3133e-01,\n            5.0985e-03, -2.8694e-01],\n          [ 5.2722e-01, -5.3732e-01,  3.9740e-01,  ...,  1.0006e+00,\n           -1.7793e-01,  4.2001e-03]]],\n\n\n        [[[-2.4861e-01,  1.5702e+00,  2.5052e-01,  ..., -8.0749e-01,\n            1.5284e-01,  4.6049e-01],\n          [-1.8649e-01,  1.5827e+00,  3.8365e-01,  ..., -8.3810e-01,\n            2.0085e-01,  4.0930e-01],\n          [ 7.4597e-02, -8.4202e-02, -2.1705e-01,  ...,  8.3819e-01,\n            6.7372e-02, -1.7214e-01],\n          ...,\n          [-6.9958e-01,  7.2583e-01, -5.2775e-02,  ...,  1.4868e-01,\n            2.6114e-01,  1.1503e-01],\n          [-1.2194e-01,  2.6312e-01, -4.0314e-01,  ..., -1.2696e-01,\n           -4.0963e-01,  3.0773e-01],\n          [ 3.6405e-01,  2.8284e-01,  4.1860e-01,  ..., -1.6385e-01,\n            6.4095e-02,  7.7097e-01]]],\n\n\n        [[[ 3.7275e-02,  2.6513e-01,  3.8781e-01,  ..., -1.4193e-02,\n            1.9015e-01, -7.8407e-02],\n          [ 8.4420e-02,  2.8686e-01,  3.6139e-01,  ...,  2.4917e-02,\n            1.3287e-01, -4.8967e-02],\n          [ 2.6456e-01, -1.7866e-01, -1.6333e-01,  ..., -7.3312e-02,\n           -1.8719e-01,  2.4219e-02],\n          ...,\n          [ 5.9724e-01,  5.0014e-01, -3.0778e-01,  ...,  5.0707e-01,\n           -1.8686e-01, -1.7317e-01],\n          [-4.5722e-02, -1.5558e-01, -3.9210e-01,  ..., -1.2367e-01,\n            1.2102e-01,  3.0256e-01],\n          [-1.0914e-01, -3.8327e-01,  2.1244e-01,  ...,  3.2749e-01,\n            1.4509e-01,  3.8099e-01]]],\n\n\n        [[[ 8.6041e-03,  1.4399e-01, -2.4761e-01,  ...,  7.8809e-02,\n            6.0932e-02,  1.0360e-01],\n          [ 1.3240e-02,  1.5545e-01, -2.5963e-01,  ...,  1.1838e-01,\n            5.8428e-02,  1.2285e-01],\n          [-1.5151e-01, -1.1381e-02, -4.4382e-02,  ..., -4.7713e-01,\n            1.9764e-02,  1.2104e-02],\n          ...,\n          [-3.3895e-03,  7.5514e-02, -1.6581e-01,  ...,  2.9308e-01,\n            7.5849e-02,  2.4500e-01],\n          [-9.6801e-02,  1.1080e-01,  1.0668e-01,  ..., -1.3703e-01,\n            6.2282e-04, -4.8826e-02],\n          [ 3.4748e-01, -1.0854e-01,  3.9145e-02,  ...,  6.1211e-02,\n           -1.1806e-01,  4.6678e-01]]],\n\n\n        [[[ 1.7108e-01,  1.6022e-01,  2.0365e-01,  ..., -1.0119e-01,\n           -9.8412e-02, -2.7678e-02],\n          [ 1.7293e-01,  1.5708e-01,  2.3618e-01,  ..., -1.1566e-01,\n           -1.1535e-01, -4.4985e-02],\n          [ 6.8343e-01,  2.0468e-01, -6.0107e-03,  ...,  3.7615e-02,\n           -4.5608e-02, -8.3254e-02],\n          ...,\n          [ 3.0482e-01,  1.7229e-01,  1.4573e-01,  ..., -5.0505e-02,\n           -1.0951e-01, -1.5979e-01],\n          [ 3.0782e-01,  1.5374e-01, -1.7233e-02,  ...,  1.1923e-02,\n           -6.9337e-03,  5.8490e-02],\n          [ 3.2581e-01,  7.3249e-02,  1.5195e-01,  ...,  1.0990e-03,\n           -1.5416e-02,  2.2291e-01]]]], grad_fn=&lt;StackBackward0&gt;), intermediate_logits=tensor([[[[-2.4676, -2.8317, -1.5819,  ..., -2.1818, -1.5801, -0.0970],\n          [-2.4745, -2.9243, -1.5599,  ..., -2.2438, -1.5719,  0.0098],\n          [-1.8981, -2.2602, -1.8714,  ..., -1.7901, -1.5829, -1.3580],\n          ...,\n          [-2.5823, -3.3150, -1.4043,  ..., -2.5875, -1.7124, -0.3842],\n          [-2.5855, -1.9997, -1.1941,  ..., -1.4283, -1.5087, -0.9462],\n          [-2.1450, -2.3526, -1.4355,  ..., -1.6967, -1.1804, -1.5560]]]],\n       grad_fn=&lt;StackBackward0&gt;), intermediate_reference_points=tensor([[[[0.4660, 0.8514, 0.4157, 0.2886],\n          [0.4606, 0.8518, 0.4093, 0.2916],\n          [0.7049, 0.2852, 0.0909, 0.0359],\n          ...,\n          [0.1713, 0.2730, 0.0485, 0.0436],\n          [0.2151, 0.7217, 0.3129, 0.1188],\n          [0.6430, 0.1967, 0.1123, 0.0812]]]], grad_fn=&lt;StackBackward0&gt;), intermediate_predicted_corners=tensor([[[[-37.2085, -24.5703, -22.6337,  ..., -58.8728, -50.9379, -14.7695],\n          [-37.8564, -27.8768, -26.2770,  ..., -52.8426, -45.0243,  -5.7737],\n          [ -8.5745,  -9.7952, -11.5590,  ...,  -4.7026,  -3.7945,  -3.7459],\n          ...,\n          [-24.9595,  -6.2256,  -4.9021,  ..., -11.3451, -11.2171, -15.3464],\n          [ -9.9791,  -3.2812,  -3.1677,  ...,  -1.0930,  -0.8920,  -1.3160],\n          [ -2.9931,  -0.7170,  -1.3748,  ...,  -3.6113,  -2.2464,  -1.3414]]]],\n       grad_fn=&lt;StackBackward0&gt;), initial_reference_points=tensor([[[[0.4816, 0.8445, 0.4224, 0.3177],\n          [0.4707, 0.8420, 0.4187, 0.3078],\n          [0.7038, 0.2851, 0.0914, 0.0350],\n          ...,\n          [0.1694, 0.2732, 0.0507, 0.0697],\n          [0.2209, 0.7117, 0.3188, 0.1055],\n          [0.6443, 0.1962, 0.1103, 0.0802]]]]), decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=[tensor([[[[ 1.1715e-01,  1.2432e-01,  6.0162e-02,  ...,  1.4411e-01,\n            2.6501e-01,  2.3905e-01],\n          [-8.5565e-02, -1.8806e-02, -2.9723e-02,  ...,  3.2492e-02,\n            1.1696e-01,  2.6902e-01],\n          [-3.4737e-02,  1.2571e-01,  1.0048e-01,  ...,  1.1194e-01,\n            5.2163e-02,  1.3087e-01],\n          ...,\n          [ 3.7973e-04,  2.2919e-01,  1.5718e-01,  ...,  1.2394e-01,\n            2.2062e-01,  3.1422e-01],\n          [ 2.2300e-02,  2.0837e-01,  1.0694e-01,  ...,  9.9045e-02,\n            1.6329e-01,  2.9406e-01],\n          [ 1.7786e-01,  2.1822e-01,  1.0880e-01,  ...,  4.3158e-02,\n            1.9186e-01,  3.5505e-01]],\n\n         [[ 1.0658e-01,  2.7235e-01,  3.6046e-01,  ...,  4.0258e-01,\n            3.0216e-01,  1.4809e-01],\n          [ 2.4508e-01,  3.3697e-01,  2.6534e-01,  ...,  4.8857e-01,\n            2.4204e-01,  6.5104e-02],\n          [ 1.8205e-01,  3.6740e-01,  3.7899e-01,  ...,  2.5376e-01,\n            6.1712e-01, -5.8051e-02],\n          ...,\n          [ 6.6302e-02,  3.0196e-01,  3.7673e-01,  ...,  2.3353e-01,\n            9.1733e-02, -2.4600e-02],\n          [ 1.8573e-01,  3.9952e-01,  5.3538e-01,  ...,  1.0644e-01,\n            7.2184e-02, -5.1044e-03],\n          [ 2.1076e-01,  4.8415e-01,  5.8511e-01,  ...,  2.0302e-01,\n            2.5582e-01,  2.9425e-02]],\n\n         [[ 1.1203e-01,  7.8480e-02,  9.9533e-02,  ...,  3.2582e-01,\n            1.2600e-01,  7.3186e-01],\n          [ 1.3339e-01,  1.1385e-01,  1.0299e-01,  ...,  2.1398e-01,\n           -1.9400e-01,  4.9593e-01],\n          [ 1.6452e-01,  4.3425e-02,  1.3017e-01,  ...,  7.4167e-01,\n           -1.6907e-01,  7.6988e-01],\n          ...,\n          [ 1.4637e-01,  1.2135e-01,  7.0616e-02,  ...,  1.1901e-01,\n            2.6453e-01,  3.3698e-01],\n          [ 1.5470e-01,  1.3230e-01,  8.1267e-02,  ...,  1.5041e-01,\n            1.9390e-01,  3.4527e-01],\n          [ 1.7086e-01,  9.2753e-02,  1.6583e-02,  ...,  1.3843e-01,\n            1.6281e-01,  3.0631e-01]],\n\n         ...,\n\n         [[-3.8131e-02, -3.7282e-02,  1.6958e-02,  ...,  7.8948e-01,\n            5.2315e-01,  5.5942e-01],\n          [ 1.1727e-02,  2.2056e-02,  1.0820e-01,  ...,  3.8235e-01,\n            9.5694e-02,  8.0645e-01],\n          [ 4.5592e-02,  7.7650e-02,  6.6225e-02,  ...,  5.7015e-01,\n            4.8531e-02,  5.0271e-02],\n          ...,\n          [ 1.3245e-02,  6.0253e-02, -2.3214e-02,  ...,  8.2333e-02,\n            2.2340e-01,  3.1542e-01],\n          [-9.3002e-02, -2.6585e-02, -1.3215e-01,  ...,  1.0687e-01,\n            1.6391e-01,  2.4789e-01],\n          [-1.7598e-01, -1.1804e-01, -1.1676e-01,  ...,  6.8512e-02,\n            4.1285e-03,  6.1271e-02]],\n\n         [[ 5.2946e-01,  1.2379e-01,  5.2151e-01,  ...,  3.6722e-01,\n            1.0734e-01,  2.1953e+00],\n          [ 3.7432e-01, -2.1875e-01,  2.0578e-01,  ..., -4.8059e-02,\n           -1.6750e-01,  1.7238e+00],\n          [ 5.1049e-01, -1.7398e-01,  2.0619e-01,  ..., -1.7727e-01,\n           -1.8247e-01,  1.6929e+00],\n          ...,\n          [ 5.5989e-01, -4.1727e-02,  2.3876e-02,  ...,  2.6483e-01,\n           -9.8384e-02,  1.1277e+00],\n          [ 7.8692e-01,  2.2117e-01,  3.8823e-01,  ...,  8.7535e-02,\n           -1.2972e-01,  7.0240e-01],\n          [ 7.3008e-01,  2.5045e-01,  2.7778e-01,  ...,  1.6799e-01,\n            2.2580e-01,  9.2644e-01]],\n\n         [[ 4.8080e-01, -2.5894e-02, -9.6480e-03,  ..., -3.9844e-02,\n           -1.7792e-01,  5.4191e-01],\n          [ 1.2671e-01, -5.5736e-02, -6.5174e-02,  ...,  2.0730e-01,\n           -2.2375e-01,  4.0204e-01],\n          [-3.3605e-02, -1.9904e-01, -1.0814e-01,  ...,  2.3851e-02,\n           -2.4816e-01,  3.3341e-02],\n          ...,\n          [ 7.2154e-01,  7.3593e-01,  8.2948e-01,  ...,  7.0942e-02,\n            8.4983e-02,  6.7691e-01],\n          [ 8.4385e-01,  7.1721e-01,  6.5747e-01,  ...,  7.4937e-02,\n            2.3773e-01,  7.8557e-01],\n          [ 1.1814e+00,  8.9217e-01,  7.3119e-01,  ...,  1.1555e-01,\n            1.3798e-01,  1.0296e+00]]]], grad_fn=&lt;SiluBackward0&gt;), tensor([[[[-0.1240,  0.1295,  0.0442,  ...,  0.1238,  0.6106,  0.2000],\n          [-0.2003,  0.1174,  0.0179,  ..., -0.1764,  0.2323,  0.0863],\n          [-0.1233,  0.2376,  0.1948,  ..., -0.0337,  0.6823,  0.2766],\n          ...,\n          [-0.1421,  0.3361,  0.3404,  ...,  0.6570,  0.6640,  0.2067],\n          [ 0.0111,  0.6731,  0.5961,  ...,  0.5853,  0.7071,  0.2954],\n          [ 0.1856,  0.8597,  0.7723,  ...,  0.5769,  0.9761,  0.4506]],\n\n         [[ 0.1311,  0.1830,  0.1702,  ...,  0.1807,  0.0558,  0.0160],\n          [ 0.1886,  0.2988,  0.3677,  ...,  0.3380,  0.0702, -0.0358],\n          [ 0.1307,  0.2132,  0.3268,  ...,  0.4096,  0.1051,  0.0424],\n          ...,\n          [ 0.4076,  0.6508,  0.8371,  ...,  0.0256, -0.1051, -0.1024],\n          [ 0.6079,  0.8826,  1.0053,  ...,  0.0370, -0.1174, -0.0594],\n          [ 0.5668,  0.6548,  0.6734,  ..., -0.0397, -0.1298, -0.0453]],\n\n         [[-0.0404, -0.0105, -0.0095,  ..., -0.1431,  0.1064, -0.1265],\n          [ 0.0377,  0.0193,  0.1013,  ..., -0.1856,  0.1397, -0.1938],\n          [ 0.0268, -0.1096, -0.0157,  ..., -0.2612,  0.1295, -0.2246],\n          ...,\n          [ 0.1556,  0.1851,  0.1561,  ...,  0.3607,  0.3613,  0.0113],\n          [-0.0170,  0.1136,  0.1221,  ...,  0.3675,  0.5468,  0.0398],\n          [-0.0755,  0.1402,  0.2491,  ...,  0.3307,  0.4835, -0.0966]],\n\n         ...,\n\n         [[ 0.0203,  0.0067,  0.0574,  ..., -0.1423,  0.2588,  0.1558],\n          [-0.0484,  0.0342,  0.0640,  ..., -0.1999, -0.0480,  0.0354],\n          [-0.0116, -0.0096, -0.0230,  ..., -0.1630,  1.0640,  0.2997],\n          ...,\n          [-0.0308,  0.0774,  0.0838,  ...,  0.2759,  0.2875,  0.0067],\n          [ 0.0578,  0.2141,  0.2293,  ...,  0.2602,  0.2950,  0.0571],\n          [-0.0585, -0.0029, -0.0291,  ...,  0.0833,  0.0953, -0.1195]],\n\n         [[ 0.0719,  0.1017,  0.5005,  ...,  0.0290, -0.1908, -0.1355],\n          [ 0.0297, -0.0530,  0.3694,  ...,  0.3340, -0.0777,  0.2618],\n          [ 0.0742, -0.0367,  0.0572,  ...,  0.4406,  0.3401,  0.2447],\n          ...,\n          [ 0.0659, -0.2045, -0.2092,  ..., -0.0747, -0.1111, -0.0542],\n          [ 0.0775, -0.0911, -0.0326,  ..., -0.1362, -0.1366, -0.1318],\n          [-0.0678, -0.2625, -0.2611,  ..., -0.2137, -0.1736, -0.1277]],\n\n         [[ 0.0183,  0.0037,  0.0076,  ..., -0.0978, -0.1595, -0.2784],\n          [-0.1666, -0.2336, -0.2175,  ..., -0.0201,  0.3333, -0.2723],\n          [-0.1522, -0.2731, -0.2727,  ..., -0.1619, -0.2569, -0.2772],\n          ...,\n          [-0.0156, -0.0233,  0.1420,  ..., -0.0534,  0.0381, -0.1374],\n          [ 0.1343,  0.0371,  0.1475,  ..., -0.0207,  0.0632, -0.1184],\n          [-0.2347, -0.0652, -0.0526,  ...,  0.0208,  0.1279, -0.2138]]]],\n       grad_fn=&lt;SiluBackward0&gt;), tensor([[[[-0.1066, -0.1068, -0.1415,  ...,  0.0486,  0.0469, -0.2476],\n          [-0.2343, -0.2308, -0.2605,  ..., -0.0808, -0.2227, -0.2781],\n          [-0.2387, -0.2280, -0.2186,  ..., -0.2369, -0.1941, -0.2733],\n          ...,\n          [-0.2748, -0.2239, -0.1085,  ...,  0.4378,  0.3917, -0.1583],\n          [-0.2443, -0.0767,  0.2040,  ...,  0.5433,  0.4371, -0.1677],\n          [-0.2016,  0.0381,  0.2732,  ...,  0.4759,  0.4084, -0.1202]],\n\n         [[ 0.1303,  0.2711,  0.2902,  ...,  0.1280,  0.0665,  0.0976],\n          [ 0.1530,  0.1876,  0.1126,  ...,  0.0826,  0.0585,  0.0951],\n          [ 0.1474,  0.0636, -0.0560,  ..., -0.0050,  0.1613,  0.1371],\n          ...,\n          [ 0.4641,  0.6399,  0.9312,  ...,  0.0586, -0.0106,  0.0965],\n          [ 0.5018,  0.5945,  0.7173,  ...,  0.0594, -0.0205,  0.0766],\n          [ 0.4273,  0.5503,  0.5259,  ...,  0.0411, -0.0105,  0.0942]],\n\n         [[-0.0353,  0.2051,  0.2511,  ..., -0.1535, -0.1860, -0.0653],\n          [-0.0891,  0.2142,  0.6005,  ..., -0.2543, -0.2663, -0.1878],\n          [-0.1754,  0.2802,  0.6585,  ..., -0.2447, -0.2694, -0.2283],\n          ...,\n          [ 0.0842,  0.3281,  0.6128,  ..., -0.0400, -0.1366, -0.1939],\n          [ 0.0728,  0.3991,  0.7001,  ..., -0.0150, -0.1324, -0.1665],\n          [ 0.0607,  0.2796,  0.5849,  ...,  0.0686, -0.0804, -0.1448]],\n\n         ...,\n\n         [[-0.1451, -0.0947, -0.0169,  ..., -0.1023, -0.1039, -0.1371],\n          [-0.1208, -0.0644, -0.0268,  ..., -0.1606, -0.1272,  0.0058],\n          [-0.1637, -0.0750, -0.0060,  ..., -0.1746, -0.1960, -0.0299],\n          ...,\n          [ 0.0195,  0.0574,  0.1985,  ...,  0.0865,  0.0313, -0.1171],\n          [ 0.0558,  0.1516,  0.2738,  ...,  0.1255, -0.0164, -0.1334],\n          [-0.0173,  0.0942,  0.2339,  ...,  0.0621, -0.0356, -0.1165]],\n\n         [[ 0.0458,  0.3052,  0.0623,  ..., -0.0592,  0.0362, -0.2221],\n          [-0.0768,  0.2007, -0.1920,  ..., -0.0797, -0.2194, -0.2335],\n          [-0.2094,  0.0851, -0.2675,  ..., -0.1730, -0.2624, -0.2784],\n          ...,\n          [-0.0910, -0.1051, -0.1504,  ..., -0.0080,  0.0257,  0.1579],\n          [ 0.0078, -0.0441, -0.1127,  ...,  0.0191,  0.1623,  0.2114],\n          [-0.0782,  0.0367, -0.0246,  ...,  0.0105,  0.0826,  0.0915]],\n\n         [[ 0.1498,  0.0459,  0.2963,  ..., -0.1085, -0.1334, -0.2157],\n          [ 0.1282,  0.1794,  2.5685,  ...,  0.0615,  0.6308, -0.0726],\n          [ 0.1576,  0.5293, -0.1548,  ...,  0.2471, -0.1744,  0.0069],\n          ...,\n          [ 0.8364,  1.2878,  0.8723,  ...,  0.0747,  0.0772,  0.2562],\n          [ 1.0737,  1.1870,  1.2159,  ...,  0.3995,  0.1368,  0.0211],\n          [ 0.8603,  0.6674,  0.7375,  ...,  0.0806, -0.0141,  0.0288]]]],\n       grad_fn=&lt;SiluBackward0&gt;)], encoder_hidden_states=None, encoder_attentions=None, init_reference_points=tensor([[[-0.3647,  1.6799, -0.4527, -0.6314],\n         [-0.4444,  1.5631, -0.4715, -0.7867],\n         [ 0.8644, -0.9156, -2.1125, -3.2769],\n         ...,\n         [-1.5493, -0.8471, -2.6769, -2.0707],\n         [-1.3137,  0.9121, -1.0069, -2.4444],\n         [ 0.6359, -1.3602, -2.3115, -2.5105]]]), enc_topk_logits=tensor([[[ 0.6314, -1.4331, -1.4595,  ..., -0.9148, -1.4600, -3.0249],\n         [ 0.5486, -1.4811, -1.4782,  ..., -0.9894, -1.3470, -3.3915],\n         [ 0.5439, -1.0581, -1.5648,  ..., -0.9385, -1.8922, -3.0869],\n         ...,\n         [-1.9464, -0.5722, -1.4642,  ..., -1.1455, -0.0363, -3.3333],\n         [-1.3281, -0.0365, -1.2782,  ..., -0.7014, -0.9397, -2.9344],\n         [-0.7812, -0.5658, -2.0964,  ..., -1.0740, -0.0366, -2.6133]]],\n       grad_fn=&lt;GatherBackward0&gt;), enc_topk_bboxes=tensor([[[0.4098, 0.8429, 0.3887, 0.3472],\n         [0.3907, 0.8268, 0.3843, 0.3129],\n         [0.7036, 0.2859, 0.1079, 0.0364],\n         ...,\n         [0.1752, 0.3000, 0.0643, 0.1120],\n         [0.2119, 0.7134, 0.2676, 0.0798],\n         [0.6538, 0.2042, 0.0902, 0.0751]]], grad_fn=&lt;SigmoidBackward0&gt;), enc_outputs_class=tensor([[[-0.4862, -1.1217, -2.4270,  ..., -2.4736, -0.8643, -2.5484],\n         [-0.4862, -1.1217, -2.4270,  ..., -2.4736, -0.8643, -2.5484],\n         [-0.4862, -1.1217, -2.4270,  ..., -2.4736, -0.8643, -2.5484],\n         ...,\n         [-0.4904, -1.6324, -0.9695,  ..., -1.5149, -0.7674, -3.1718],\n         [-0.5833, -1.3855, -1.0174,  ..., -1.7548, -0.8082, -3.1386],\n         [-1.0043, -1.0668, -1.1289,  ..., -2.0903, -0.9778, -3.2363]]],\n       grad_fn=&lt;ViewBackward0&gt;), enc_outputs_coord_logits=tensor([[[ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         [ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         [ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         ...,\n         [-1.4891e-01,  1.3284e+00,  1.5941e+01, -7.2383e-01],\n         [-1.7971e-01,  1.5013e+00,  8.7183e+00, -7.3417e-01],\n         [ 1.1339e+00,  1.6504e+00, -1.2340e-01, -9.5737e-01]]],\n       grad_fn=&lt;AddBackward0&gt;), denoising_meta_values=None)\n\n\nNice!\nIt looks like it worked!\nOur model processed our random_sample_preprocessed_image_only[\"pixel_values\"] and returned a ConditionalDetrObjectDetectionOutput object as output.\nLet‚Äôs inspect the keys() method of this output and see what they are.\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'intermediate_hidden_states', 'intermediate_logits', 'intermediate_reference_points', 'intermediate_predicted_corners', 'initial_reference_points', 'encoder_last_hidden_state', 'init_reference_points', 'enc_topk_logits', 'enc_topk_bboxes', 'enc_outputs_class', 'enc_outputs_coord_logits'])\n\n\nBreaking these down:\n\nlogits - The raw outputs from the model, these are the classification logits we can later apply a softmax function/sigmoid function to to get prediction probabilties.\npred_boxes - Normalized box coordinates in CXCYWH ((center_x, center_y, width, height)) format.\nlast_hidden_state - Last hidden state of the last decoder layer of the model.\nencoder_last_hidden_state - Last hidden state of the last encoder layer of the model.\n\nHow about we inspect the shape attribute of the logits?\n\n# Inspect logits output shape\noutput_logits = random_sample_outputs.logits\nprint(f\"[INFO] Output logits shape: {output_logits.shape} -&gt; [1 image, 300 boxes, 7 classes]\")\n\n[INFO] Output logits shape: torch.Size([1, 300, 7]) -&gt; [1 image, 300 boxes, 7 classes]\n\n\nNice!\nWe get an output from our model that coincides with the shape of our data.\nThe final value of 7 in the output_logits tensor is equivalent to the number of classes we have.\nAnd the 300 is the number of boxes our model predicts for each image (this is defined by the num_queries parameter of the transformers.ConditionalDetrConfig, where num_queries=300 is the default).\n\n# Inspect predicted boxes output shape\noutput_pred_boxes = random_sample_outputs.pred_boxes\nprint(f\"[INFO] Output predicted boxes shape: {output_pred_boxes.shape} -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\")\n\n[INFO] Output predicted boxes shape: torch.Size([1, 300, 4]) -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\n\n\nReading the documentation for the forward method, we can determine the output format of our models predicted boxes:\n\nReturns:\npred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\nThis is good to know!\nIt means that the raw output boxes from our model come in normalized CXCYWH format (see Table¬†1 for more).\nHow about we inspect a single box?\n\n# Single example predicted bounding box coordinates\nprint(f\"[INFO] Example output box: {output_pred_boxes[:, 0, :][0].detach()} -&gt; (center_x, center_y, width, height)\")\n\n[INFO] Example output box: tensor([0.4660, 0.8514, 0.4157, 0.2886]) -&gt; (center_x, center_y, width, height)\n\n\nExcellent!\nWe can process these boxes and logits later on into different formats using the transformers.ConditionalDetrImageProcessor.post_process_object_detection method.\nFor now, let‚Äôs figure out how to preprocess our annotations."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#preprocessing-our-annotations",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#preprocessing-our-annotations",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 Preprocessing our annotations",
    "text": "9 Preprocessing our annotations\nOne of the most tricky parts of any machine learning problem is getting your data in the right format.\nWe‚Äôve done it for our images.\nNow let‚Äôs do it for our annotations.\n\n9.1 Trying to preprocess a single annotation\nRecall in a previous section we tried to preprocess a single image and its annotation.\nAnd we got an error.\nLet‚Äôs make sure we‚Äôre not crazy and this is still the case.\n\n# Preprocess a single image and annotation pair\nimage_processor.preprocess(\n    images=random_sample[\"image\"], \n    annotations=random_sample[\"annotations\"]\n)\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[35], line 2\n      1 # Preprocess a single image and annotation pair\n----&gt; 2 image_processor.preprocess(\n      3     images=random_sample[\"image\"], \n      4     annotations=random_sample[\"annotations\"]\n      5 )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:405, in RTDetrImageProcessorFast.preprocess(self, images, annotations, masks_path, **kwargs)\n    380 @auto_docstring\n    381 def preprocess(\n    382     self,\n   (...)\n    386     **kwargs: Unpack[RTDetrFastImageProcessorKwargs],\n    387 ) -&gt; BatchFeature:\n    388     r\"\"\"\n    389     annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n    390         List of annotations associated with the image or batch of images. If annotation is for object\n   (...)\n    403         Path to the directory containing the segmentation masks.\n    404     \"\"\"\n--&gt; 405     return super().preprocess(images, annotations=annotations, masks_path=masks_path, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_processing_utils_fast.py:606, in BaseImageProcessorFast.preprocess(self, images, **kwargs)\n    603 kwargs.pop(\"default_to_square\")\n    604 kwargs.pop(\"data_format\")\n--&gt; 606 return self._preprocess(images=images, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:443, in RTDetrImageProcessorFast._preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, interpolation, do_center_crop, crop_size, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, pad_size, format, return_tensors)\n    441 format = AnnotationFormat(format)\n    442 if annotations is not None:\n--&gt; 443     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n    445 data = {}\n    446 processed_images = []\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:919, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    917 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    918     if not valid_coco_detection_annotations(annotations):\n--&gt; 919         raise ValueError(\n    920             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    921             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    922             \"being a list of annotations in the COCO format.\"\n    923         )\n    925 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    926     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nWonderful!\nWe‚Äôre not crazy‚Ä¶\nBut we still get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nIn this section, we‚Äôre going to fix it.\n\n\n9.2 Discussing the format our annotations need to be in\nAccording the error we got in the previous segment, the transformers.ConditionalDetrImageProcessor.preprocess method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n\n9.3 Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by transformers.ConditionalDetrImageProcessor.preprocess.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[38], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[36], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100]) # correct number of values\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.4 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face in the beginning).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on a new not so random_sample (we‚Äôll make a random_sample with a known index for reproducibility).\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Create a not so random sample and inspect it \nrandom_sample = dataset[\"train\"][77]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 558,\n 'annotations': {'file_name': ['13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg'],\n  'image_id': [558, 558, 558],\n  'category_id': [5, 0, 1],\n  'bbox': [[261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125]],\n  'iscrowd': [0, 0, 0],\n  'area': [39323.33984375, 500634.0, 187150.734375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 558,\n 'annotations': [{'image_id': 558,\n   'category_id': 5,\n   'bbox': [261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   'area': 39323.33984375,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 0,\n   'bbox': [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   'area': 500634.0,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 1,\n   'bbox': [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125],\n   'area': 187150.734375,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we may have just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.5 Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with transformers.ConditionalDetrImageProcessor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYWH format (the format we downloaded them in) and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() method of our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 640]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([ 13107.7803, 166878.0000,  62383.5781]),\n  'boxes': tensor([[0.3675, 0.6583, 0.1894, 0.1690],\n        [0.4842, 0.4360, 0.7604, 0.5358],\n        [0.1916, 0.7997, 0.3832, 0.3974]]),\n  'class_labels': tensor([5, 0, 1]),\n  'image_id': tensor([558]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 640])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\nWoohoo!\nWe‚Äôve done it!\nWe‚Äôve officially preprocessed a single sample of our own data, both the image and its annotation pair.\nWe‚Äôll write some code later on to scale this up to our whole dataset.\nFor now, let‚Äôs see what it looks like postprocessing a single output."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#postprocessing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#postprocessing-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "10 Postprocessing a single output",
    "text": "10 Postprocessing a single output\nWe‚Äôve got our inputs processed and successfully passed them through our model.\nHow about we postprocess the outputs of our model?\nDoing so will make our model‚Äôs outputs far more usable."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#going-end-to-end-on-a-single-sample",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#going-end-to-end-on-a-single-sample",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "11 Going end-to-end on a single sample",
    "text": "11 Going end-to-end on a single sample\nWhen working on a new problem or with a custom dataset and an existing model, it‚Äôs good practice to go end-to-end on a single sample.\nFor example, preprocess one of your samples, pass it through the model and then postprocess it (just like we‚Äôre in the middle of doing here).\nBeing able to go end-to-end on a single sample will help you see the overall process and discover any bugs that may hinder you later on."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "12 Aside: Bounding box formats in and out of our model",
    "text": "12 Aside: Bounding box formats in and out of our model\nWe‚Äôve done a fair bit of data transformation to get our data ready to go into our model and we‚Äôve also taken a fair few steps to postprocess it into a usable format.\nThis is often a standard practice in many machine learning workflows.\nMuch of the work before ever training a model is preparing the data for the model.\nAnd much of the work after training a model is preparing the data for your use case.\nThe following table highlights the different states our bounding boxes go in and out of.\nTK image - turn this into a nice image of the workflow\n\n\n\nStep\nBox format\nScale\nGoes into\n\n\n\n\nStarting data (default downloaded from Hugging Face)\nXYWH or [x1, y1, width, height]\nAbsolute\npreprocess() method\n\n\nOut of preprocess()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\nmodel.forward()\n\n\nOut of model.forward()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\npost_process_object_detection()\n\n\nOut of post_process_object_detection()\nXYXY or [x_top_left, y_top_left, x_bottom_right, y_bottom_right]\nAbsolute (in relation to the target_sizes parameter).\nPlotting or display function.\n\n\n\nKeeping track of these input and output formats is helpful for knowing the state of your data.\nBut remember, just because our current workflow is like this, doesn‚Äôt mean all future workflows you work on will have the same transformation steps."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---preparing-data-at-scale",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---preparing-data-at-scale",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "13 TK - Preparing data at scale",
    "text": "13 TK - Preparing data at scale\nWe‚Äôve performed preprocessing and postprocessing steps on a single data sample.\nHowever, in practice, we‚Äôll likely want to work with many more samples.\nOur model is hungry for more data.\nSo let‚Äôs step it up a notch and write some code that‚Äôs capable of preprocessing many samples to pass to our model.\nWe‚Äôll break it down into three subsections:\n\nSplitting the data into training, validation and test sets. We‚Äôll train our model on the training set and check its performance on the validation and test sets (our model won‚Äôt see any of these samples during training). We perform these splits before preprocessing the samples in them in case we‚Äôd like to perform different preprocessing steps depending on the split. For example, we may want to use data augmentation on the training set and not use it on the testing set.\nPreprocessing multiple samples at a time by iterating over groups of samples. Rather than preprocess a single sample at a time, we‚Äôll write code capable of processing lists of examples simultaneously.\nCollate samples into batches so our model can view multiple samples simultaneously. Rather than performing a forward pass on a single sample at a time, we‚Äôll pass batches of data to the model. For example, we may pass 32 samples (image and label pairs) at a time to our model for it to try and learn the patterns between them. We use batches of data rather than the whole dataset as it‚Äôs often much more memory efficient. If you have a really large dataset, all of your samples may not fit into memory at once, so in practice, you break it up into smaller batches of samples.\n\nLet‚Äôs start by splitting the data into different sets.\n\n13.1 Splitting the data into training and test sets\nRight now our data is all in one big group.\nHowever, it‚Äôs best practice to split our data into two (or three) different sets:\n\nTraining set (~70-80% of data) - This is the data the model will learn from, all samples in this set are seen by the model during training.\nValidation set (~5-20% of data) - This is the data we can fine-tune our model‚Äôs hyperparameters on, all samples in this set are not seen by the model during training.\nTest set (~5-20% of data) - This is the data we will evaluate what our model has learned after going through the training set, all samples in this set are not seen by the model during training.\n\nUsing the analogy of a student at univeristy, the training set would be the course materials throughout the semester, the validation set would be the practice exam and the test set would be the final exam.\nIf a student doesn‚Äôt perform well on the final exam, then we would usually say perhaps the course materials weren‚Äôt of the highest quality.\nThis is similar to our machine learning workflow.\nIn an ideal world, the samples in the training set are sufficiently representative of those in the test set and in turn, sufficiently representative of samples in the wild.\nBefore we split our dataset into different sets, let‚Äôs remind ourselves of what it looks like.\n\n# Original dataset (only a \"train\" split)\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nWonderful! Right now, we‚Äôve only got one split, \"train\".\nTo make our required splits, we can call the train_test_split() method on our dataset and pass in the size of the split we‚Äôd like via the test_size parameter.\nFor example, test_size=0.3 means 30% of the data will go to the test set and 70% will go to the training set.\nWe‚Äôll make the following splits:\n\n70% of data to training set.\n~10% of data to validation set.\n~20% of data to testing set.\n\nTo do so, we‚Äôll call train_test_split() twice with different amounts:\n\nFirst on dataset[\"train\"] with test_size=0.3 to make the 70/30 training/test split, we‚Äôll save this split to the variable dataset_split.\nNext on dataset_split[\"test\"] with test_size=0.66 to make the 66/33 test/validation split, we‚Äôll set this variable to dataset_test_val_split.\n\nOnce we‚Äôve done this, we‚Äôll reassign all of the splits back to our original dataset.\nWe‚Äôll also set seed=42 for reproducibility.\nLet‚Äôs do it!\nTK image - make an image of these workflows to make it easier to understand\n\n# 1. Split the data into \"train\" and \"test\" splits\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\n\n# 2. Split the test split into \"test\" and \"validation\" splits\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.66, seed=42) # split the test set into 40/60 validation/test\n\n# Create \"train\" split from 1.\ndataset[\"train\"] = dataset_split[\"train\"]\n\n# Create a \"validation\" and \"test\" split from 2.\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\n# View the dataset (now with splits)\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 115\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 224\n    })\n})\n\n\nPerfect!\nNow we‚Äôve got three splits of our dataset to work with.\nWe‚Äôll make sure our model never sees the validation and test splits during training, so when evaluate it we know that it‚Äôs only seeing new samples.\n\n\n13.2 TK - Writing a function for preprocessing multiple samples at a time\nUPTOHERE - preprocessing multiple samples at a time\nWe‚Äôve preprocessed and passed one sample through our model, new let‚Äôs do the same for multiple samples.\nWe‚Äôre going to work towards having a function that can go from a group or batch of samples (images and their annotations) and return them in preprocessed form (via transformers.ConditionalDetrImageProcessor.preprocess) ready to be used with our model.\nLet‚Äôs first remind ourselves of what a single unprocessed sample looks like.\n\n# Get one sample from the training dataset \none_sample = dataset[\"train\"][42]\none_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 663,\n 'annotations': {'file_name': ['1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg',\n   '1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg'],\n  'image_id': [663, 663],\n  'category_id': [1, 5],\n  'bbox': [[413.29998779296875,\n    529.7000122070312,\n    343.6000061035156,\n    687.0999755859375],\n   [435.8999938964844, 463.0, 77.19999694824219, 99.9000015258789]],\n  'iscrowd': [0, 0],\n  'area': [236087.5625, 7712.27978515625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nAwesome, we get an image in PIL.Image.Image form as well as a single dictionary of annotations.\nHow about if we were to inspect a group of three samples?\n\n# Get three samples from the training set\ngroup_of_samples = dataset[\"train\"][0:3]\n\n# Uncomment for full output (commented for brevity)\n# group_of_samples \n\n\n\nOutput of random_samples\n\nSignature:\n{'image': [&lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;],\n 'image_id': [69, 1027, 1092],\n 'annotations': [{'file_name': ['c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg'],\n   'image_id': [69, 69, 69, 69, 69, 69, 69, 69],\n   'category_id': [5, 0, 1, 4, 4, 4, 4, 4],\n   'bbox': [[360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n    [298.29998779296875,\n     495.1000061035156,\n     381.1000061035156,\n     505.70001220703125],\n    [81.5999984741211,\n     592.0999755859375,\n     358.79998779296875,\n     316.29998779296875],\n    [1.2999999523162842,\n     776.7000122070312,\n     193.8000030517578,\n     211.89999389648438],\n    [301.1000061035156, 60.79999923706055, 146.89999389648438, 115.0],\n    [501.0, 75.9000015258789, 24.200000762939453, 71.19999694824219],\n    [546.4000244140625,\n     54.70000076293945,\n     130.3000030517578,\n     115.0999984741211],\n    [862.9000244140625,\n     41.099998474121094,\n     75.69999694824219,\n     80.19999694824219]],\n   'iscrowd': [0, 0, 0, 0, 0, 0, 0, 0],\n   'area': [46390.9609375,\n    192722.265625,\n    113488.4375,\n    41066.21875,\n    16893.5,\n    1723.0400390625,\n    14997.5302734375,\n    6071.14013671875]},\n  {'file_name': ['b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg'],\n   'image_id': [1027, 1027, 1027, 1027, 1027],\n   'category_id': [5, 4, 1, 0, 0],\n   'bbox': [[378.29998779296875, 657.5, 139.8000030517578, 165.10000610351562],\n    [463.29998779296875, 754.5, 39.400001525878906, 30.299999237060547],\n    [451.20001220703125,\n     734.7999877929688,\n     109.19999694824219,\n     163.8000030517578],\n    [140.39999389648438, 400.29998779296875, 460.8999938964844, 491.5],\n    [2.299999952316284,\n     322.29998779296875,\n     201.6999969482422,\n     429.20001220703125]],\n   'iscrowd': [0, 0, 0, 0, 0],\n   'area': [23080.98046875,\n    1193.8199462890625,\n    17886.9609375,\n    226532.34375,\n    86569.640625]},\n  {'file_name': ['d822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg'],\n   'image_id': [1092, 1092, 1092, 1092],\n   'category_id': [2, 5, 1, 0],\n   'bbox': [[97.80000305175781, 93.30000305175781, 177.5, 101.5999984741211],\n    [342.20001220703125, 572.5999755859375, 350.0, 344.20001220703125],\n    [185.1999969482422, 803.0, 304.3999938964844, 371.6000061035156],\n    [219.39999389648438, 259.1000061035156, 598.7000122070312, 584.5]],\n   'iscrowd': [0, 0, 0, 0],\n   'area': [18034.0, 120470.0, 113115.0390625, 349940.15625]}],\n 'label_source': ['manual_prodigy_label',\n  'manual_prodigy_label',\n  'manual_prodigy_label'],\n 'image_source': ['manual_taken_photo',\n  'manual_taken_photo',\n  'manual_taken_photo']}\n\nOkay, now we get a list of image objects as well as a list of annotation dictionaries and more in the format:\n{\n    \"image\": [&lt;PIL.Image.Image&gt;, &lt;PIL.Image.Image&gt;, ...],\n    \"image_id\": [int, int, ...],\n    \"annotations\": [\n        {\n            \"file_name\": [str, str, ...],\n            \"image_id\": [int, int, ...],\n            \"category_id\": [int, int, ...],\n            \"bbox\": [[float, float, float, float], ...],\n            \"iscrowd\": [int, int, ...],\n            \"area\": [float, float, ...]\n        },\n        {...},\n        {...}\n    ],\n    \"label_source\": [str, str, ...],\n    \"image_source\": [str, str, ...]\n}\nKnowing this structure, we‚Äôll want to write a function capable of taking it as input and then preparing it for the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nOur data is in this structure (a dictionary of lists, rather than a list of dictionaries) because it is built on Hugging Face Datasets and Hugging Face Datasets is built on Apache Arrow.\nAnd Apache Arrow is column-orientated in nature.\nSo instead of our dataset being represented as many rows (list of dictionaries), it is represented as many columns (dictionary of lists).\n\n\nThe preprocess method expects a list of images as well as COCO formatted annotations as input.\nSo to create our preprocess_batch function we‚Äôll:\n\nTake in a list of examples (these will be in the format above), an image_processor and optional transforms (we don‚Äôt need to pass these in for now but it‚Äôs good to have the option).\nCreate empty lists of images and coco_annotations we‚Äôll fill throughout the rest of the function.\nExtract the image, image_id and annotations_dict from our list of input examples.\nCreate lists of annotations attributes such as bbox, category_id and area (these are required for our format_image_annotations_as_coco function.\nOptionally perform transforms/augmentations on the image and related boxes (because in object detection if you transform an image, should transform the related boxes as well).\nConvert the annotations into COCO format using the format_image_annotations_as_coco helper function we created earlier.\nAppend the images and COCO formatted annotations to the empty lists created in 2.\nPass the list of images and COCO formatted annotations to the image_processor.preprocess method to get the preprocessed batch.\nReturn the preprocessed batch.\n\nLet‚Äôs do it!\n\n# 1. Take in a list of examples, image processor and optional transforms\ndef preprocess_batch(examples, \n                     image_processor,\n                     transforms=None, # Note: Could optionally add transforms (e.g. data augmentation) here \n                     ):\n    \"\"\"\n    Preprocesses a batch of image data with annotations for object detection models.\n\n    This function takes a batch of examples in a custom dataset format, extracts images and\n    their corresponding annotations, and converts them into a format suitable for model training\n    or inference using the provided image processor.\n\n    Args:\n        examples (dict): A dictionary containing the batch data with the following structure:\n            - \"image\" (List[PIL.Image.Image]): List of PIL Image objects\n            - \"image_id\" (List[int]): List of unique image identifiers\n            - \"annotations\" (List[dict]): List of annotation dictionaries, where each contains:\n                - \"file_name\" (List[str]): List of image filenames\n                - \"image_id\" (List[int]): List of image identifiers\n                - \"category_id\" (List[int]): List of object category IDs\n                - \"bbox\" (List[List[float]]): List of bounding boxes as [x, y, width, height]\n                - \"iscrowd\" (List[int]): List of crowd indicators (0 or 1)\n                - \"area\" (List[float]): List of object areas\n            - \"label_source\" (List[str]): List of label sources\n            - \"image_source\" (List[str]): List of image sources\n\n        image_processor: An image processor object to preprocess images for model input.\n            For example, can be `transformers.ConditionalDetrImageProcessor`.\n\n        transforms (optional): Image and annotations transforms for data augmentation.\n            Defaults to None.\n\n    Returns:\n        dict: Preprocessed batch with images and annotations converted to tensors\n            in the format required for a `transformers.ConditionalDetrForObjectDetection` model.\n\n    Note:\n        The `format_image_annotations_as_coco` function converts the input annotation format to COCO\n        format before applying the image_processor. This is required as the image_processor is designed\n        to handle COCO format annotations. \n    \"\"\"\n    # 2. Create empty lists to store images and annotations\n    images = []\n    coco_annotations = [] \n\n    # 3. Extract the image, image_id and annotations from the examples\n    for image, image_id, annotations_dict in zip(examples[\"image\"], \n                                                 examples[\"image_id\"], \n                                                 examples[\"annotations\"]):\n\n        # 4. Create lists of annotation attributes\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n\n        ###\n        # 5. Note: Could optionally apply a transform/augmentation here.\n        if transforms:\n            # Perform transform on image/boxes\n            pass\n        ###\n\n        # 6. Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # 7. Add images/annotations to their respective lists\n        images.append(image) # Note: may need to open image if it is an image path rather than PIL.Image\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # 8. Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\")\n\n    # 9. Return the preprocessed batch\n    return preprocessed_batch\n\nNice!\nNow how about we test it out on our group_of_samples?\n\npreprocessed_samples = preprocess_batch(examples=group_of_samples,\n                                        image_processor=image_processor)\n\npreprocessed_samples.keys()\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\ndict_keys(['pixel_values', 'labels'])\n\n\nPerfect, we get the same keys() as with our single sample.\nExcept this time, we‚Äôve got multiple samples, let‚Äôs check the shape.\n\n# Check the shape of our preprocessed samples\nprint(f\"[INFO] Shape of preprocessed samples: {preprocessed_samples['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Shape of preprocessed samples: torch.Size([3, 3, 640, 640]) -&gt; [batch_size, colour_channels, height, width]\n\n\nWonderful, our batch of three samples have been preprocessed and are ready for input to our model.\n\n\n13.3 Applying our preprocessing function to each data split\nWe‚Äôve seen our preprocess_batch function in action on a small group of samples.\nNow let‚Äôs apply it to our different data splits.\nTo do so, we can call the with_transform() method on our target dataset split and pass it our desired transform.\nUsing with_transform() means our transformations will be applied on-the-fly when we call on our split datasets.\nBecause the with_transform() method expects a callable with a single argument (the input examples), we‚Äôll turn our preprocess_batch into a Python partial function.\nDoing this will mean we can prefill the image_processor and optionally the transforms parameter of our preprocess_batch function meaning it will only take examples as input, this is inline with the with_transform() method.\n\n# Create a partial function for preprocessing\nfrom functools import partial\n\n# Note: Could create separate preprocess functions with different inputs depending on the split \n# (e.g. use data augmentation on training but not on validation/test)\npreprocess_batch_partial = partial(preprocess_batch,\n                                   image_processor=image_processor,\n                                   transforms=None) # could use transforms here if wanted\n\n# Inspect the preprocess_batch_partial function\n# preprocess_batch_partial\n\nBeautiful, now let‚Äôs pass the preprocess_batch_partial function to the with_transform() method on each of our data splits.\n\n# Create a copy of the original dataset \n# (we don't need to do this, this is just so we can inspect the original dataset later on)\nprocessed_dataset = dataset.copy()\n\n# Apply the preprocessing function to the datasets (the preprocessing will happen on the fly, e.g. when the dataset is called rather than in-place)\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(transform=preprocess_batch_partial)\n\nNow when we get (via __getitem__) one of our samples from a processed_dataset split, it will be preprocessed on the fly.\n\n# Get an item from the dataset (in will be preprocessed as we get it)\nprocessed_dataset[\"train\"][42]\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n{'pixel_values': tensor([[[0.0824, 0.1373, 0.3137,  ..., 0.2431, 0.3765, 0.3725],\n          [0.2863, 0.1725, 0.1725,  ..., 0.4941, 0.4235, 0.4863],\n          [0.2667, 0.2745, 0.2471,  ..., 0.6941, 0.4627, 0.4392],\n          ...,\n          [0.5216, 0.3765, 0.2784,  ..., 0.2667, 0.1922, 0.1608],\n          [0.4314, 0.6078, 0.4588,  ..., 0.1176, 0.1725, 0.2275],\n          [0.2392, 0.5333, 0.4824,  ..., 0.1137, 0.1020, 0.1647]],\n \n         [[0.0941, 0.1451, 0.3255,  ..., 0.2275, 0.3647, 0.3686],\n          [0.3020, 0.1804, 0.1804,  ..., 0.4824, 0.4118, 0.4784],\n          [0.2745, 0.2824, 0.2510,  ..., 0.6863, 0.4510, 0.4314],\n          ...,\n          [0.4941, 0.3451, 0.2431,  ..., 0.2902, 0.2196, 0.1961],\n          [0.4000, 0.5725, 0.4196,  ..., 0.1490, 0.2118, 0.2745],\n          [0.2039, 0.5020, 0.4431,  ..., 0.1529, 0.1529, 0.2196]],\n \n         [[0.0275, 0.0941, 0.2431,  ..., 0.0784, 0.1961, 0.1647],\n          [0.2118, 0.1176, 0.1020,  ..., 0.3255, 0.2392, 0.2824],\n          [0.1843, 0.2000, 0.1608,  ..., 0.5137, 0.2706, 0.2431],\n          ...,\n          [0.3333, 0.2275, 0.1765,  ..., 0.1608, 0.1020, 0.0667],\n          [0.2314, 0.4314, 0.3216,  ..., 0.0353, 0.0784, 0.1255],\n          [0.0667, 0.3412, 0.3255,  ..., 0.0118, 0.0157, 0.0627]]]),\n 'labels': {'size': tensor([640, 640]), 'image_id': tensor([663]), 'class_labels': tensor([1, 5]), 'boxes': tensor([[0.6095, 0.6822, 0.3579, 0.5368],\n         [0.4943, 0.4007, 0.0804, 0.0780]]), 'area': tensor([78695.8594,  2570.7600]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\nAnd the same happens when we get multiple (a batch) samples!\n\n# Now when we call one or more of our samples, the preprocessing will take place\nbatch_size_to_get = 32\nprint(f\"[INFO] Shape of preprocessed images: {processed_dataset['train'][:batch_size_to_get]['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n[INFO] Shape of preprocessed images: torch.Size([32, 3, 640, 640]) -&gt; [batch_size, colour_channels, height, width]\n\n\n\n# We can pass these straight to our model! (note: may take a while if it's on CPU)\n# model(processed_dataset[\"train\"][:batch_size_to_get][\"pixel_values\"]) # uncomment to view output\n\n\n\n13.4 Creating a collation function\nWe now preprocess multiple samples at once.\nTime to create a collation function which will tell our model trainer how to stack these samples together into batches.\nWe do this because processing more samples at once (e.g.¬†32 samples in a batch) in a batch is generally more efficient than one sample at a time or trying to process all samples at once.\nOur collation function will be used for the data_collator parameter in our transformers.Trainer instance later on.\nThe input to our data collation function will be the output of image_processor.preprocess() (a preprocessed sample).\nAnd the output will be passed as a batch (we‚Äôll define the batch size later on) to our model‚Äôs forward() method.\n\n\n\n\n\n\nNote\n\n\n\nWhat batch size should I use?\nYou should generally use the batch size which uses the maximum amount of GPU memory you have.\nFor example, if you have 16GB of GPU memory and a batch size of 32 only uses 8GB of that memory, you should try doubling the batch size to 64.\nThe ideal batch size for a given dataset/model/hardware is often discovered in an iterative process.\n\n\n\nfrom typing import List, Dict, Any\n\ndef data_collate_function(preprocessed_batch: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    \"\"\"Stacks together groups of preprocessed samples into batches for our model.\n\n    Args:\n        preprocessed_batch: A list of dictionaries where each dictionary represnets a preprocessed sample.\n\n    Returns:\n        collated_data: A dictionary containing the batched data ready in the format our model\n            is expecting. The dictionary has the following keys: \n                - \"pixel_values\": A stacked tensor of preprocessed pixel values.\n                - \"labels\": A list of label dictionaries.\n                - \"pixel_mask\": (Optional) A stacked tensor of pixel masks (this will be present \n                    only if the input contains a \"pixel_mask\" key.\n    \"\"\"\n    # Create an empty dictionary (our model wants a dictionary input) \n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in preprocessed_batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in preprocessed_batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in preprocessed_batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in preprocessed_batch])\n\n    return collated_data\n\nExcellent! Now let‚Äôs try out our data collation function.\n\n%%time\n\n# Try data_collate_function \nexample_collated_data_batch = data_collate_function(processed_dataset[\"train\"].select(range(32)))\nexample_collated_data_batch.keys()\n\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\nCPU times: user 8.13 s, sys: 417 ms, total: 8.55 s\nWall time: 877 ms\n\n\ndict_keys(['pixel_values', 'labels'])\n\n\nPerfect! Looks like it worked. We‚Äôve now got a batch of preprocessed images and label pairs.\nLet‚Äôs check the shapes.\n\n# Check shapes of batched preprocessed samples\nprint(f\"[INFO] Batch of pixel value shapes: {example_collated_data_batch['pixel_values'].shape}\")\nprint(f\"[INFO] Batch of labels: {example_collated_data_batch['labels']}\")\nif \"pixel_mask\" in example_collated_data_batch:\n    print(f\"[INFO] Batch of pixel masks: {example_collated_data_batch['pixel_mask'].shape}\")\n\n[INFO] Batch of pixel value shapes: torch.Size([32, 3, 640, 640])\n[INFO] Batch of labels: [{'size': tensor([640, 640]), 'image_id': tensor([69]), 'class_labels': tensor([5, 0, 1, 4, 4, 4, 4, 4]), 'boxes': tensor([[0.4675, 0.5152, 0.1846, 0.2045],\n        [0.5092, 0.5843, 0.3970, 0.3951],\n        [0.2719, 0.5861, 0.3738, 0.2471],\n        [0.1023, 0.6896, 0.2019, 0.1655],\n        [0.3902, 0.0924, 0.1530, 0.0898],\n        [0.5345, 0.0871, 0.0252, 0.0556],\n        [0.6370, 0.0877, 0.1357, 0.0899],\n        [0.9383, 0.0634, 0.0789, 0.0627]]), 'area': tensor([15463.6543, 64240.7578, 37829.4805, 13688.7402,  5631.1670,   574.3467,\n         4999.1768,  2023.7134]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1027]), 'class_labels': tensor([5, 4, 1, 0, 0]), 'boxes': tensor([[0.4669, 0.5782, 0.1456, 0.1290],\n        [0.5031, 0.6013, 0.0410, 0.0237],\n        [0.5269, 0.6380, 0.1138, 0.1280],\n        [0.3863, 0.5047, 0.4801, 0.3840],\n        [0.1074, 0.4195, 0.2101, 0.3353]]), 'area': tensor([ 7693.6602,   397.9400,  5962.3203, 75510.7812, 28856.5469]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1092]), 'class_labels': tensor([2, 5, 1, 0]), 'boxes': tensor([[0.1943, 0.1126, 0.1849, 0.0794],\n        [0.5388, 0.5818, 0.3646, 0.2689],\n        [0.3515, 0.7725, 0.3171, 0.2903],\n        [0.5404, 0.4307, 0.6236, 0.4566]]), 'area': tensor([  6011.3335,  40156.6680,  37705.0156, 116646.7188]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([228]), 'class_labels': tensor([0]), 'boxes': tensor([[0.5187, 0.5418, 0.4982, 0.5698]]), 'area': tensor([116290.6797]), 'iscrowd': tensor([0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([511]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5284, 0.5886, 0.2903, 0.3347],\n        [0.7784, 0.7873, 0.4400, 0.4222]]), 'area': tensor([39798.3594, 76088.3203]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([338]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4990, 0.5424, 0.2227, 0.1716],\n        [0.5455, 0.5335, 0.3754, 0.3595],\n        [0.7111, 0.6979, 0.3313, 0.2838]]), 'area': tensor([15657.2871, 55273.3516, 38509.8008]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([405]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.4952, 0.6559, 0.6088, 0.4872],\n        [0.2074, 0.7760, 0.4117, 0.4459],\n        [0.4132, 0.5714, 0.0663, 0.0580]]), 'area': tensor([121477.2812,  75180.2188,   1573.0400]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([3]), 'class_labels': tensor([0, 5, 1, 4, 4, 4]), 'boxes': tensor([[0.5020, 0.4466, 0.6579, 0.5829],\n        [0.5148, 0.5684, 0.2288, 0.1367],\n        [0.7040, 0.7836, 0.4468, 0.4219],\n        [0.3160, 0.8416, 0.3991, 0.2993],\n        [0.4095, 0.0661, 0.0888, 0.0666],\n        [0.7489, 0.1356, 0.3843, 0.2637]]), 'area': tensor([157078.9219,  12810.0000,  77202.0000,  48921.8711,   2419.6802,\n         41501.2500]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([182]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.5786, 0.5016, 0.5992, 0.4539],\n        [0.6307, 0.7197, 0.4165, 0.3323],\n        [0.4415, 0.6429, 0.1546, 0.2070]]), 'area': tensor([111397.0625,  56678.3125,  13103.7207]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([640]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.5314, 0.6391, 0.2920, 0.4553],\n        [0.7088, 0.7733, 0.5596, 0.4422],\n        [0.5282, 0.5060, 0.5678, 0.4612]]), 'area': tensor([ 54452.9492, 101351.7344, 107257.5156]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1126]), 'class_labels': tensor([5, 1, 0, 0, 4]), 'boxes': tensor([[0.4897, 0.6114, 0.2720, 0.2612],\n        [0.6082, 0.7287, 0.2006, 0.2145],\n        [0.4549, 0.5349, 0.4550, 0.3859],\n        [0.1698, 0.4514, 0.3276, 0.2998],\n        [0.6611, 0.1925, 0.4202, 0.1516]]), 'area': tensor([29095.2422, 17622.9004, 71926.4062, 40224.5508, 26099.9805]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([902]), 'class_labels': tensor([5, 1, 0, 4]), 'boxes': tensor([[0.5237, 0.4816, 0.0443, 0.0498],\n        [0.6509, 0.3957, 0.2670, 0.1695],\n        [0.3200, 0.4485, 0.6094, 0.6062],\n        [0.6201, 0.1730, 0.1955, 0.0725]]), 'area': tensor([   902.4167,  18539.0352, 151320.0000,   5806.1870]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([166]), 'class_labels': tensor([5, 1, 0, 4, 0]), 'boxes': tensor([[0.4320, 0.5441, 0.2114, 0.1963],\n        [0.2735, 0.6612, 0.3580, 0.2412],\n        [0.5321, 0.5080, 0.3639, 0.3277],\n        [0.1142, 0.7866, 0.2067, 0.1561],\n        [0.7246, 0.4182, 0.2477, 0.2401]]), 'area': tensor([16989.4941, 35378.1875, 48832.1406, 13213.4404, 24358.6465]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([409]), 'class_labels': tensor([0, 4, 4, 5, 1]), 'boxes': tensor([[0.3715, 0.6465, 0.7429, 0.5014],\n        [0.5047, 0.6748, 0.2114, 0.1916],\n        [0.1167, 0.7180, 0.2303, 0.1904],\n        [0.4180, 0.6086, 0.0883, 0.0780],\n        [0.3020, 0.6926, 0.3045, 0.2649]]), 'area': tensor([152577.2500,  16583.6934,  17960.6914,   2823.8398,  33039.6445]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([504]), 'class_labels': tensor([1, 0]), 'boxes': tensor([[0.2105, 0.6075, 0.3550, 0.2591],\n        [0.4267, 0.5508, 0.5474, 0.3703]]), 'area': tensor([37681.1211, 83029.0000]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1012]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.4518, 0.4870, 0.5355, 0.5652],\n        [0.9084, 0.5812, 0.1724, 0.4217]]), 'area': tensor([123983.7812,  29778.9668]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([769]), 'class_labels': tensor([6, 5, 0, 2]), 'boxes': tensor([[0.7015, 0.4236, 0.5892, 0.0759],\n        [0.4368, 0.4307, 0.1043, 0.1327],\n        [0.2781, 0.5959, 0.3932, 0.4465],\n        [0.6999, 0.3721, 0.5797, 0.7238]]), 'area': tensor([ 18325.4414,   5665.6602,  71913.7500, 171865.7500]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([510]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.3557, 0.4248, 0.2382, 0.1798],\n        [0.6917, 0.7145, 0.6135, 0.5677]]), 'area': tensor([ 17541.2910, 142655.8125]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([429]), 'class_labels': tensor([4, 0, 1, 5]), 'boxes': tensor([[0.4661, 0.8003, 0.4432, 0.1715],\n        [0.4992, 0.6146, 0.9984, 0.6917],\n        [0.2310, 0.6193, 0.3613, 0.2520],\n        [0.4227, 0.5342, 0.0790, 0.0650]]), 'area': tensor([ 31132.4180, 282885.3125,  37292.5625,   2102.1868]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([714]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.3350, 0.6024, 0.2067, 0.2968],\n        [0.2292, 0.7662, 0.4445, 0.4472],\n        [0.5794, 0.6870, 0.6228, 0.5439]]), 'area': tensor([ 25124.0527,  81414.3594, 138752.6562]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([301]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4706, 0.5429, 0.0994, 0.0970],\n        [0.2963, 0.6009, 0.3128, 0.2155],\n        [0.4525, 0.4761, 0.8738, 0.6209]]), 'area': tensor([  3946.3799,  27617.5918, 222226.0938]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([816]), 'class_labels': tensor([6, 5, 0]), 'boxes': tensor([[0.7607, 0.7381, 0.4707, 0.3945],\n        [0.5418, 0.5427, 0.1593, 0.1055],\n        [0.4945, 0.5723, 0.5663, 0.4344]]), 'area': tensor([ 76069.8359,   6880.5000, 100747.2031]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([392]), 'class_labels': tensor([5, 1, 4, 4, 4]), 'boxes': tensor([[0.4599, 0.6063, 0.0836, 0.0493],\n        [0.2533, 0.7866, 0.5063, 0.4221],\n        [0.5349, 0.6495, 0.7540, 0.5713],\n        [0.8369, 0.9173, 0.3234, 0.1632],\n        [0.5333, 0.9232, 0.1924, 0.1514]]), 'area': tensor([  1688.9768,  87528.6094, 176414.1875,  21621.1504,  11931.6201]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([439]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4637, 0.6099, 0.2429, 0.3724],\n        [0.4283, 0.5034, 0.4528, 0.3891],\n        [0.7492, 0.6229, 0.4982, 0.4316]]), 'area': tensor([37055.4805, 72160.2031, 88070.9688]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([319]), 'class_labels': tensor([5, 1, 0, 4, 4]), 'boxes': tensor([[0.4927, 0.4708, 0.1688, 0.0946],\n        [0.7135, 0.5453, 0.3644, 0.2980],\n        [0.4998, 0.5359, 0.6276, 0.4492],\n        [0.5456, 0.8173, 0.1482, 0.1584],\n        [0.4667, 0.9237, 0.1009, 0.1277]]), 'area': tensor([  6539.3999,  44471.2422, 115479.1719,   9619.4805,   5281.0503]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1106]), 'class_labels': tensor([5, 1, 4, 0]), 'boxes': tensor([[0.4597, 0.4787, 0.1184, 0.0961],\n        [0.5932, 0.6244, 0.2401, 0.2405],\n        [0.6588, 0.7589, 0.2219, 0.1490],\n        [0.3902, 0.5373, 0.7309, 0.5996]]), 'area': tensor([  4661.7002,  23656.9844,  13539.7012, 179518.2500]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([763]), 'class_labels': tensor([0, 0, 0, 5, 1]), 'boxes': tensor([[0.4510, 0.5231, 0.5637, 0.4548],\n        [0.7868, 0.4366, 0.4092, 0.3365],\n        [0.2204, 0.4396, 0.3318, 0.3187],\n        [0.5497, 0.5397, 0.2101, 0.0714],\n        [0.6421, 0.6682, 0.3070, 0.2901]]), 'area': tensor([105010.8438,  56392.9844,  43305.3828,   6145.1270,  36474.0391]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([379]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5053, 0.5406, 0.5852, 0.7876],\n        [0.7293, 0.6370, 0.5284, 0.4556]]), 'area': tensor([188783.5312,  98619.1250]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([394]), 'class_labels': tensor([1, 5, 0]), 'boxes': tensor([[0.2053, 0.7470, 0.4101, 0.4966],\n        [0.4299, 0.5713, 0.1728, 0.0933],\n        [0.4994, 0.6560, 0.9984, 0.6693]]), 'area': tensor([ 83425.0312,   6602.8203, 273715.6562]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([665]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.5282, 0.6071, 0.4164, 0.3630],\n        [0.6520, 0.8419, 0.5095, 0.2905]]), 'area': tensor([61900.2109, 60615.7930]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([362]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4643, 0.5164, 0.3293, 0.3087],\n        [0.6197, 0.7712, 0.7412, 0.4446],\n        [0.4982, 0.5305, 0.9742, 0.8731]]), 'area': tensor([ 41630.3711, 134990.5312, 348393.1875]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1019]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4699, 0.5841, 0.2358, 0.3263],\n        [0.5916, 0.6374, 0.2653, 0.2050],\n        [0.4858, 0.5195, 0.6066, 0.5119]]), 'area': tensor([ 31522.4277,  22277.7617, 127174.3281]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}]\n\n\nNow let‚Äôs try to pass the \"pixel_values\" through our model.\n\n%%time \n\n# Try pass a batch through our model (note: this will be relatively slow if our model is on the CPU)\nmodel = create_model()\n\n# example_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\nexample_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\n# example_batch_outputs # uncomment for full output\nexample_batch_outputs.keys()\n\nSome weights of DFineForObjectDetection were not initialized from the model checkpoint at ustc-community/dfine-large-coco and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nCPU times: user 3min 18s, sys: 3min 33s, total: 6min 52s\nWall time: 29.1 s\n\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'intermediate_hidden_states', 'intermediate_logits', 'intermediate_reference_points', 'intermediate_predicted_corners', 'initial_reference_points', 'encoder_last_hidden_state', 'init_reference_points', 'enc_topk_logits', 'enc_topk_bboxes', 'enc_outputs_class', 'enc_outputs_coord_logits'])\n\n\n\n# We get 300 predictions per image in our batch, each with a logit value for each of the classes in our dataset \nexample_batch_outputs.logits.shape\n\ntorch.Size([32, 300, 7])\n\n\n\ntorch.cuda.is_available()\n\nTrue\n\n\nThis is what will happen during training, our model will continually go over batches (the size of these batches will be defined by us) over data and try to match its own predictions with the ground truth labels.\nIn summary, we‚Äôve created two major steps:\n\npreprocess_batch - Preprocesses single or groups of samples into the specific format required by our model.\ndata_collate_function - Stacks together groups/batches of samples to be passed to our model‚Äôs forward() method."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "14 TK - Setting up TrainingArguments and a Trainer instance to train our model",
    "text": "14 TK - Setting up TrainingArguments and a Trainer instance to train our model\nData ready and prepared, time to train a model!\nWe‚Äôll use transformers.TrainingArguments to set various hyperparameters for our model (many of these will be set by default, however, we can tweak them to our liking).\nWe‚Äôll also create an instance of transformers.Trainer which we can pass our preprocessed datasets for it to train/evaluate on.\nTo train a model, we‚Äôll go through the following steps:\n\nCreate a fresh instance of our model using the create_model() function.\nMake a directory for saving our trained models to.\nDefine our model‚Äôs hyperparameters using transformers.TrainingArguments, we‚Äôll take many of these settings from the assosciated research papers that introduced the models.\nCreate an instance of transformers.Trainer and pass it our training arguments from 2 as well as our preprocessed data.\nCall transformers.Trainer.train() to train the model from 1 on our own data.\n\nLet‚Äôs do it!\n\n# 1. Create a model instance \nmodel = create_model()\n\nSome weights of DFineForObjectDetection were not initialized from the model checkpoint at ustc-community/dfine-large-coco and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nModel ready, let‚Äôs now create a folder where we can save our trained models to.\n\nfrom pathlib import Path\n\n# 2. Make a models directory for saving models\nmodels_dir = Path(\"models\")\nmodels_dir.mkdir(parents=True, exist_ok=True)\n\nPerfect! Time to setup our model‚Äôs hyperparameters with transformers.TrainingArguments.\n\n14.1 Setting up our TrainingArguments\nThe transformers.TrainingArguments class holds many of the hyperparameters/settings for training our model.\nMany of them are set by default in the transformers.ConditionalDetrConfig class.\nHowever, we can tweak any of them to our own liking.\nWhere do we get the settings from?\nThe original Conditional DETR for fast training convergence paper states that all hyperparameters are the same as the original DETR (End-to-End Object Detection with Transformers).\nWe can even dig into related papers such as DETRs Beat YOLOs on Real-time Object Detection and find the hyperaparameter settings as well.\nThe main hyperparameters we are going to set are:\n\n\n\nHyperparameter\nValue\nWhat does it do?\n\n\n\n\nper_device_train_batch_size, per_device_eval_batch_size\n16, 32 or larger (hardware dependent)\nDefines the number of samples passed to our model at one time. For example, if batch size is 16, our model will see 16 samples at a time. It‚Äôs usually best practice to set this value to the highest your hardware can handle.\n\n\nlearning_rate\n0.0001 (as per the listed papers)\nDefines the multiplier on the size of gradient updates during training. Too high and gradients will explode, too low and gradients won‚Äôt update, both lead to poor training results. The papers mention two different learning rates for the backbone and the detection head, I tried these and got poor results (likely because of our smaller dataset), a single learning rate for the whole network turned out to be better.\n\n\nweight_decay\n0.0001 (as per the listed papers)\nPrevents model weights from getting too large by applying a small decay penalty over time. This prevents a single weight providing too much information. In essence, the model is forced to learn smaller, simpler weights to represent the data. A form of regularization (overfitting prevention). See more at paperswithcode.com/method/weight-decay.\n\n\nmax_grad_norm\n0.1 (as per the listed papers)\nPrevents gradients from getting too large during training. This will help to ensure stable training. See more at paperswithcode.com/method/gradient-clipping.\n\n\nnum_train_epochs\n25 (depends on training data and available time)\nDefines how many laps of the data your model will do. For example, setting epochs to 25 means the model will do 25 laps of the training data to learn different patterns. In practice, I‚Äôve found this value to be a good starting point for our dataset and also because we are fine-tuning rather than training from scratch. However, if you had more data you might want to do more epochs (when training from scratch, the papers did 300 epochs).\n\n\nwarmup_ratio\n0.05\nPercentage of total training steps to take learning rate from 0 to to the set value (e.g.¬†0.0001). Can help with training stability in the early training steps of the model by not doing too large updates when first starting out. The papers state 2000 warmup steps, however, in practice I found this to be too many for our smaller dataset.\n\n\ndataloader_num_workers\n4 (hardware dependent)\nNumber of workers to load data from the CPU to the GPU. Higher is generally better if it is available, however, it can often cap out. Experimentally I‚Äôve found that 0.5 * os.cpu_count() generally works well.\n\n\n\nTK image - showcase different papers referencing the hyperparameters for the models\nIt‚Äôs important to note that all of these values can be experimented with.\nAnd just because a research paper mentions a specific value, doesn‚Äôt mean you have to use.\nFor example, all the mentioned research papers tend to focus on training a model from scratch on the COCO dataset (330k images, 80 classes).\nWhich is a much larger dataset with more classes than our dataset (1k images, 7 classes) which we are trying to fine-tune an existing model on rather than train from scratch.\nThere are many more possible arguments/settings we‚Äôve left out in the above table but if you‚Äôd like to explore these, I‚Äôd encourage you to check out the documentation for transformers.TrainingArguments.\n\nfrom transformers import TrainingArguments\n\n# Hardware dependent hyperparameters\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 \n# without running out of memory\nBATCH_SIZE = 16\nDATALOADER_NUM_WORKERS = 4 # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0 \n\n# Set number of epochs to how many laps you'd like to do over the data\nNUM_EPOCHS = 25\n\n# Setup hyperameters for training from the DETR paper(s)\nLEARNING_RATE = 1e-4\nWEIGHT_DECAY = 1e-4\nMAX_GRAD_NORM = 0.1 \nWARMUP_RATIO = 0.05 # learning rate warmup from 0 to learning_rate as a ratio of total steps (e.g. 0.05 = 5% of total steps)\n\n# Create directory to save models to \nOUTPUT_DIR = Path(models_dir, \"dfine_finetuned_trashify_box_detector_v1\")\nprint(f\"[INFO] Saving model to: {OUTPUT_DIR}\")\n\n# Create TrainingArguments to pass to Trainer\ntraining_args = TrainingArguments(\n    output_dir=OUTPUT_DIR,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=LEARNING_RATE,\n    weight_decay=WEIGHT_DECAY,\n    max_grad_norm=MAX_GRAD_NORM,\n    num_train_epochs=NUM_EPOCHS,\n    lr_scheduler_type=\"linear\",\n    warmup_ratio=WARMUP_RATIO, \n    # warmup_steps=2000, # number of warmup steps from 0 to learning_rate (overrides warmup_ratio, found this to be too long for our dataset)\n    logging_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    fp16=True, # use mixed precision training\n    dataloader_num_workers=DATALOADER_NUM_WORKERS, # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0\n    eval_strategy=\"epoch\",\n    load_best_model_at_end=True, \n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False, # want to minimize eval_loss (e.g. lower is better)\n    report_to=\"none\", # don't save experiments to a third party service\n    push_to_hub=False,\n    eval_do_concat_batches=False,\n)\n\n[INFO] Saving model to: models/dfine_finetuned_trashify_box_detector_v1\n\n\n\n\n14.2 TK - Optional: Setting up an optimizer for multiple learning rates\nIn the papers that mentioned the DETR model we‚Äôre using, they state that they used a different learning rate value for the backbone (learning_rate=1e-5) as well as the object detection head (learning_rate=1e-4).\nTo set this up ourselves, we can extract which parameters of our model belong to the backbone as well as which don‚Äôt.\nTo find the backbone parameters, we can loop through our model‚Äôs named_parameters() method and filter for any which contain the string \"backbone\" in their name.\nWe‚Äôll append these to a list called backbone_parameters and assume any that don‚Äôt have \"backbone\" in their name are not part of the model‚Äôs backbone.\nWe can use these two lists of parameters to pass to torch.optim.AdamW with different learning rate values for each.\n\n\n\n\n\n\nNote\n\n\n\nIn my experiments with our smaller dataset size (~1100 images), I found that setting two different learning rates for the backbone and the object detection head led to poorer performance than just setting a single learning rate for the whole model.\nThe code below is an example of how to create a custom optimizer with different learning rates for different parts of the model.\nHowever, in our actual training code, we‚Äôll use a single learning rate for the whole model.\n\n\nWe can then subclass transformers.Trainer and update the method create_optimizer() to use our custom optimizer.\n\nfrom transformers import Trainer\n\n# Create lists for different kinds of parameters\nbackbone_parameters = []\nother_parameters = []\n\n# Can loop through model parameters and extract different model sections\nfor name, param in model.model.named_parameters(): \n    if \"backbone\" in name:\n        # print(f\"Backbone parameter: {name}\")\n        backbone_parameters.append(param)\n    else:\n        # print(f\"Other parameter: {name}\")\n        other_parameters.append(param)\n\nprint(f\"[INFO] Number of backbone parameter modules: {len(backbone_parameters)}\")\nprint(f\"[INFO] Number of other parameter modules: {len(other_parameters)}\")\n\n# Setup a custom subclass of Trainer to use different learning rates for different parts of the model\nclass CustomTrainer(Trainer):\n    def create_optimizer(self):\n        self.optimizer = torch.optim.AdamW([\n            {\"params\": backbone_parameters, \"lr\": 1e-4},\n            {\"params\": other_parameters, \"lr\": 1e-4}\n        ], weight_decay=0.0001)\n        return self.optimizer\n\n[INFO] Number of backbone parameter modules: 80\n[INFO] Number of other parameter modules: 524\n\n\nAwesome!\nNow if we wanted to use our custom optimizer, we could use CustomTrainer instead of Trainer.\n\n\n14.3 TK - Training our model with Trainer\nUPTOHERE:\n\ntraining a model‚Ä¶ (e.g.¬†calling trainer.train())\nevaluating our model with an evaluation metric\nwe should make a simple mAP metric to evaluate our model (can also evaluate during training)\nI should read up on the mAP metric and take the long road to evaluate our model so I can learn how to do it‚Ä¶\nNext: read up on mAP metric and implement a small example in Google Colab with a demo box?\n\nEvaluation function is comprised of the following:\n\nSee the code on GitHub: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160\nMean Average Precision metric from TorchMetrics: https://lightning.ai/docs/torchmetrics/stable/detection/mean_average_precision.html\n\nSee a blog post for mAP: https://jonathan-hui.medium.com/map-mean-average-precision-for-object-detection-45c121a31173\n\ntransformersEvalPrediction (these come out of the Trainer.evaluate method) - https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction\n\nSee Trainer.evaluate - https://huggingface.co/docs/transformers/en/main_classes/trainer#transformers.Trainer.evaluate\n\n\n\nimport numpy as np\n\nfrom typing import Optional, Mapping\n\nfrom transformers import EvalPrediction\n\nfrom torchvision.ops import box_convert\n\nfrom torchmetrics.detection.mean_ap import MeanAveragePrecision\n\ndef convert_bbox_cxcywh_to_xyxy_absolute(boxes, image_size_target):\n    # Convert normalized CXCYWH (output of model) -&gt; absolute XYXY format (required for evaluation)\n    boxes = box_convert(boxes=boxes, in_fmt=\"cxcywh\", out_fmt=\"xyxy\")\n\n    # Convert normalized box coordinates to absolute pixel values based on the target size \n    image_size_target_height = image_size_target[0]\n    image_size_target_width = image_size_target[1]\n    boxes = boxes * torch.tensor([image_size_target_width, image_size_target_height, image_size_target_width, image_size_target_height])\n\n    return boxes\n\n@dataclass\nclass ModelOutput:\n    logits: torch.Tensor\n    pred_boxes: torch.Tensor\n\n# Source is slightly modified version of: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160  \n@torch.no_grad()\ndef compute_metrics(\n    evaluation_results: EvalPrediction, # these come out of the Trainer.evaluate method, see: https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction \n    image_processor: AutoImageProcessor,\n    threshold: float = 0.0,\n    id2label: Optional[Mapping[int, str]] = None,\n) -&gt; Mapping[str, float]:\n    \"\"\"\n    Compute mean average mAP, mAR and their variants for the object detection task.\n\n    Args:\n        evaluation_results (EvalPrediction): Predictions and targets from evaluation.\n        threshold (float, optional): Threshold to filter predicted boxes by confidence. Defaults to 0.0.\n        id2label (Optional[dict], optional): Mapping from class id to class name. Defaults to None.\n\n    Returns:\n        Mapping[str, float]: Metrics in a form of dictionary {&lt;metric_name&gt;: &lt;metric_value&gt;}\n    \"\"\"\n\n    predictions, targets = evaluation_results.predictions, evaluation_results.label_ids\n\n    # For metric computation we need to provide:\n    #  - targets in a form of list of dictionaries with keys \"boxes\", \"labels\"\n    #  - predictions in a form of list of dictionaries with keys \"boxes\", \"scores\", \"labels\"\n\n    image_sizes = []\n    post_processed_targets = []\n    post_processed_predictions = []\n\n    # Collect targets in the required format for metric computation\n    for batch in targets:\n        # collect image sizes, we will need them for predictions post processing\n        batch_image_sizes = torch.tensor(np.array([x[\"orig_size\"] for x in batch])) # turn into a list of numpy arrays first, then tensors\n        image_sizes.append(batch_image_sizes)\n        # collect targets in the required format for metric computation\n        # boxes were converted to YOLO format needed for model training\n        # here we will convert them to Pascal VOC format (x_min, y_min, x_max, y_max)\n        for image_target in batch:\n            boxes = torch.tensor(image_target[\"boxes\"])\n            boxes = convert_bbox_cxcywh_to_xyxy_absolute(boxes, image_target[\"orig_size\"])\n            labels = torch.tensor(image_target[\"class_labels\"])\n            post_processed_targets.append({\"boxes\": boxes, \"labels\": labels})\n\n    # Collect predictions in the required format for metric computation,\n    # model produce boxes in YOLO format, then image_processor convert them to Pascal VOC format\n    for batch, target_sizes in zip(predictions, image_sizes):\n        batch_logits, batch_boxes = batch[1], batch[2]\n        output = ModelOutput(logits=torch.tensor(batch_logits), pred_boxes=torch.tensor(batch_boxes))\n        post_processed_output = image_processor.post_process_object_detection(\n            output, threshold=threshold, target_sizes=target_sizes\n        )\n        post_processed_predictions.extend(post_processed_output)\n\n    # Compute metrics\n    metric = MeanAveragePrecision(box_format=\"xyxy\", class_metrics=True)\n    metric.update(post_processed_predictions, post_processed_targets)\n    metrics = metric.compute()\n\n    # Replace list of per class metrics with separate metric for each class\n    classes = metrics.pop(\"classes\")\n    map_per_class = metrics.pop(\"map_per_class\")\n    # Optional: mAR@100 per class\n    mar_100_per_class = metrics.pop(\"mar_100_per_class\")\n    # for class_id, class_map, class_mar in zip(classes, map_per_class, mar_100_per_class):\n    for class_id, class_map in zip(classes, map_per_class):\n        class_name = id2label[class_id.item()] if id2label is not None else class_id.item()\n        metrics[f\"map_{class_name}\"] = class_map\n        # Optional: mAR@100 per class\n        # metrics[f\"mar_100_{class_name}\"] = class_mar\n\n    metrics = {k: round(v.item(), 4) for k, v in metrics.items()}\n\n    return metrics\n\n# Create a partial function for our compute_metrics function (we'll pass this to compute_metrics in Trainer)\neval_compute_metrics_fn = partial(\n        compute_metrics, image_processor=image_processor, id2label=id2label, threshold=0.0\n)\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\nfrom transformers import Trainer\n\nmodel_v1_trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    # data_collator=DefaultDataCollator(),\n    # tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: TK - can add a metrics function, just see if model trains first, see here for an example: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160 \n    compute_metrics=eval_compute_metrics_fn\n)\n\nmodel_v1_results = model_v1_trainer.train()\n\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n\n    \n      \n      \n      [1250/1250 10:32, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\nMap\nMap 50\nMap 75\nMap Small\nMap Medium\nMap Large\nMar 1\nMar 10\nMar 100\nMar Small\nMar Medium\nMar Large\nMap Bin\nMap Hand\nMap Not Bin\nMap Not Hand\nMap Not Trash\nMap Trash\nMap Trash Arm\n\n\n\n\n1\n91.107000\n2.508270\n0.103700\n0.152200\n0.116300\n0.000000\n0.017100\n0.112400\n0.175300\n0.424200\n0.522700\n0.000000\n0.250000\n0.563800\n0.354300\n0.031800\n0.009000\n-1.000000\n0.004300\n0.220600\n0.002100\n\n\n2\n41.941000\n1.805323\n0.244400\n0.332400\n0.266400\n0.000000\n0.073300\n0.253800\n0.312400\n0.553300\n0.661700\n0.000000\n0.389800\n0.691600\n0.663600\n0.250200\n0.003600\n-1.000000\n0.025700\n0.522100\n0.001000\n\n\n3\n34.306800\n1.536374\n0.370700\n0.505300\n0.434400\n0.000000\n0.094200\n0.384900\n0.459700\n0.690300\n0.756400\n0.000000\n0.433000\n0.792500\n0.701900\n0.539200\n0.009100\n-1.000000\n0.085600\n0.586000\n0.302700\n\n\n4\n30.737200\n1.455746\n0.373800\n0.503300\n0.427200\n0.003800\n0.215600\n0.384300\n0.489600\n0.686500\n0.742000\n0.050000\n0.498900\n0.772000\n0.773500\n0.594400\n0.027300\n-1.000000\n0.059200\n0.618400\n0.170100\n\n\n5\n29.118000\n1.442959\n0.446000\n0.593300\n0.514500\n0.070000\n0.299600\n0.462100\n0.514400\n0.694200\n0.758000\n0.350000\n0.477800\n0.791300\n0.730400\n0.539900\n0.063100\n-1.000000\n0.116500\n0.621700\n0.604300\n\n\n6\n27.793200\n1.370794\n0.445700\n0.582800\n0.515300\n0.045000\n0.268000\n0.465100\n0.490000\n0.726400\n0.761500\n0.200000\n0.528400\n0.790800\n0.774000\n0.524300\n0.114900\n-1.000000\n0.094300\n0.636100\n0.530800\n\n\n7\n27.115600\n1.440070\n0.422900\n0.571800\n0.497900\n0.000000\n0.161800\n0.441200\n0.484200\n0.711400\n0.761500\n0.000000\n0.517000\n0.796900\n0.740900\n0.587900\n0.134400\n-1.000000\n0.083200\n0.607300\n0.383500\n\n\n8\n26.240500\n1.406024\n0.444800\n0.592000\n0.508700\n0.175000\n0.308000\n0.463200\n0.483600\n0.729100\n0.763800\n0.350000\n0.483000\n0.800200\n0.771200\n0.548000\n0.156000\n-1.000000\n0.060500\n0.623500\n0.509700\n\n\n9\n25.293300\n1.340921\n0.525000\n0.671600\n0.597100\n0.000000\n0.333900\n0.543600\n0.532400\n0.747200\n0.761200\n0.000000\n0.536400\n0.792100\n0.795600\n0.615800\n0.163500\n-1.000000\n0.074100\n0.633700\n0.867100\n\n\n10\n24.884900\n1.352285\n0.503800\n0.659700\n0.583300\n0.075000\n0.321200\n0.520800\n0.516200\n0.728100\n0.774500\n0.300000\n0.537500\n0.808600\n0.784200\n0.610600\n0.135700\n-1.000000\n0.065600\n0.626700\n0.800100\n\n\n11\n24.270800\n1.379699\n0.525900\n0.669000\n0.590800\n0.100000\n0.304100\n0.545200\n0.531900\n0.756500\n0.778200\n0.300000\n0.531800\n0.811600\n0.757800\n0.598700\n0.182300\n-1.000000\n0.067300\n0.638400\n0.910900\n\n\n12\n23.853900\n1.395023\n0.492200\n0.659300\n0.566600\n0.000000\n0.302800\n0.512700\n0.504700\n0.689900\n0.714800\n0.000000\n0.414800\n0.762900\n0.756600\n0.550500\n0.163000\n-1.000000\n0.068900\n0.614400\n0.800000\n\n\n13\n23.363000\n1.316223\n0.509700\n0.659000\n0.568900\n0.000000\n0.315300\n0.524400\n0.526700\n0.737300\n0.775400\n0.000000\n0.517000\n0.810800\n0.787900\n0.580600\n0.116800\n-1.000000\n0.065200\n0.624500\n0.883200\n\n\n14\n22.764800\n1.371426\n0.500600\n0.657400\n0.573700\n0.000000\n0.274800\n0.519700\n0.521600\n0.708400\n0.739100\n0.000000\n0.442600\n0.780900\n0.771900\n0.590000\n0.126600\n-1.000000\n0.087500\n0.615800\n0.811500\n\n\n15\n22.156500\n1.347376\n0.506400\n0.665200\n0.582600\n0.000000\n0.323600\n0.521600\n0.548500\n0.724500\n0.761100\n0.000000\n0.517000\n0.797800\n0.765900\n0.595800\n0.104600\n-1.000000\n0.080600\n0.636000\n0.855500\n\n\n16\n21.956600\n1.380194\n0.492400\n0.649200\n0.570100\n0.000000\n0.298700\n0.509800\n0.524800\n0.713100\n0.736100\n0.000000\n0.462500\n0.770900\n0.763800\n0.506800\n0.126300\n-1.000000\n0.098200\n0.625500\n0.833700\n\n\n17\n21.674800\n1.351492\n0.485500\n0.638800\n0.548000\n0.066700\n0.324500\n0.502000\n0.540700\n0.722700\n0.739200\n0.200000\n0.488600\n0.777000\n0.770700\n0.575300\n0.130600\n-1.000000\n0.100100\n0.619100\n0.717300\n\n\n18\n21.228200\n1.360245\n0.508300\n0.665300\n0.588700\n0.000000\n0.302100\n0.525300\n0.559000\n0.724900\n0.741600\n0.000000\n0.457400\n0.780400\n0.757900\n0.568100\n0.129800\n-1.000000\n0.096900\n0.641400\n0.855400\n\n\n19\n20.928200\n1.324188\n0.516700\n0.674800\n0.595100\n0.000000\n0.295100\n0.537300\n0.554100\n0.733500\n0.759000\n0.000000\n0.492600\n0.795900\n0.766600\n0.575700\n0.155300\n-1.000000\n0.115400\n0.631800\n0.855500\n\n\n20\n20.769900\n1.324795\n0.497800\n0.646500\n0.559500\n0.000000\n0.301900\n0.516000\n0.564000\n0.720600\n0.747900\n0.000000\n0.467000\n0.785300\n0.780900\n0.585100\n0.133300\n-1.000000\n0.108100\n0.628800\n0.750800\n\n\n21\n20.510100\n1.348304\n0.519800\n0.672100\n0.589500\n0.000000\n0.288800\n0.539100\n0.559700\n0.710400\n0.729300\n0.000000\n0.444300\n0.765900\n0.767800\n0.571400\n0.133200\n-1.000000\n0.108800\n0.648600\n0.889100\n\n\n22\n20.335800\n1.354123\n0.507300\n0.668300\n0.579400\n0.000000\n0.300700\n0.524300\n0.557100\n0.704400\n0.732000\n0.000000\n0.482400\n0.765500\n0.769800\n0.559100\n0.108300\n-1.000000\n0.108500\n0.642800\n0.855400\n\n\n23\n20.156100\n1.350379\n0.531300\n0.687900\n0.603100\n0.000000\n0.306600\n0.552600\n0.562600\n0.712900\n0.738900\n0.000000\n0.474400\n0.774500\n0.763900\n0.584200\n0.182000\n-1.000000\n0.116100\n0.641800\n0.900000\n\n\n24\n19.999300\n1.356307\n0.503600\n0.654700\n0.571500\n0.000000\n0.302700\n0.523400\n0.565400\n0.720400\n0.739500\n0.000000\n0.471000\n0.775000\n0.761000\n0.565100\n0.159900\n-1.000000\n0.116100\n0.640600\n0.778800\n\n\n25\n19.940100\n1.354687\n0.503900\n0.659300\n0.578200\n0.000000\n0.302900\n0.524600\n0.565100\n0.714500\n0.736000\n0.000000\n0.466500\n0.773000\n0.761700\n0.557500\n0.159200\n-1.000000\n0.121400\n0.644500\n0.778800\n\n\n\n\n\n\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nThere were missing keys in the checkpoint model loaded: ['class_embed.0.weight', 'class_embed.0.bias', 'class_embed.1.weight', 'class_embed.1.bias', 'class_embed.2.weight', 'class_embed.2.bias', 'class_embed.3.weight', 'class_embed.3.bias', 'class_embed.4.weight', 'class_embed.4.bias', 'class_embed.5.weight', 'class_embed.5.bias', 'bbox_embed.0.layers.0.weight', 'bbox_embed.0.layers.0.bias', 'bbox_embed.0.layers.1.weight', 'bbox_embed.0.layers.1.bias', 'bbox_embed.0.layers.2.weight', 'bbox_embed.0.layers.2.bias', 'bbox_embed.1.layers.0.weight', 'bbox_embed.1.layers.0.bias', 'bbox_embed.1.layers.1.weight', 'bbox_embed.1.layers.1.bias', 'bbox_embed.1.layers.2.weight', 'bbox_embed.1.layers.2.bias', 'bbox_embed.2.layers.0.weight', 'bbox_embed.2.layers.0.bias', 'bbox_embed.2.layers.1.weight', 'bbox_embed.2.layers.1.bias', 'bbox_embed.2.layers.2.weight', 'bbox_embed.2.layers.2.bias', 'bbox_embed.3.layers.0.weight', 'bbox_embed.3.layers.0.bias', 'bbox_embed.3.layers.1.weight', 'bbox_embed.3.layers.1.bias', 'bbox_embed.3.layers.2.weight', 'bbox_embed.3.layers.2.bias', 'bbox_embed.4.layers.0.weight', 'bbox_embed.4.layers.0.bias', 'bbox_embed.4.layers.1.weight', 'bbox_embed.4.layers.1.bias', 'bbox_embed.4.layers.2.weight', 'bbox_embed.4.layers.2.bias', 'bbox_embed.5.layers.0.weight', 'bbox_embed.5.layers.0.bias', 'bbox_embed.5.layers.1.weight', 'bbox_embed.5.layers.1.bias', 'bbox_embed.5.layers.2.weight', 'bbox_embed.5.layers.2.bias'].\n\n\nUPTOHERE:\n\ngoing through training steps and making sure we end with a model training\nPlot the loss curves + mAP curves (make sure the loss going down, mAP going up)\nTK - if your loss values aren‚Äôt the exact same, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar (e.g.¬†loss going down)\nnotes on training:\n\n25 epochs gets good baseline results\n50 epochs (longer training) gets better results but takes 2x the time (this is a good extension for someone to try)\n\n\n\n# D-FINE - 25 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 91.107000   2.508270    0.103700    0.152200    0.116300    0.000000    0.017100    0.112400    0.175300    0.424200    0.522700    0.000000    0.250000    0.563800    0.354300    0.031800    0.009000    -1.000000   0.004300    0.220600    0.002100\n# 2 41.941000   1.805323    0.244400    0.332400    0.266400    0.000000    0.073300    0.253800    0.312400    0.553300    0.661700    0.000000    0.389800    0.691600    0.663600    0.250200    0.003600    -1.000000   0.025700    0.522100    0.001000\n# 3 34.306800   1.536374    0.370700    0.505300    0.434400    0.000000    0.094200    0.384900    0.459700    0.690300    0.756400    0.000000    0.433000    0.792500    0.701900    0.539200    0.009100    -1.000000   0.085600    0.586000    0.302700\n# 4 30.737200   1.455746    0.373800    0.503300    0.427200    0.003800    0.215600    0.384300    0.489600    0.686500    0.742000    0.050000    0.498900    0.772000    0.773500    0.594400    0.027300    -1.000000   0.059200    0.618400    0.170100\n# 5 29.118000   1.442959    0.446000    0.593300    0.514500    0.070000    0.299600    0.462100    0.514400    0.694200    0.758000    0.350000    0.477800    0.791300    0.730400    0.539900    0.063100    -1.000000   0.116500    0.621700    0.604300\n# 6 27.793200   1.370794    0.445700    0.582800    0.515300    0.045000    0.268000    0.465100    0.490000    0.726400    0.761500    0.200000    0.528400    0.790800    0.774000    0.524300    0.114900    -1.000000   0.094300    0.636100    0.530800\n# 7 27.115600   1.440070    0.422900    0.571800    0.497900    0.000000    0.161800    0.441200    0.484200    0.711400    0.761500    0.000000    0.517000    0.796900    0.740900    0.587900    0.134400    -1.000000   0.083200    0.607300    0.383500\n# 8 26.240500   1.406024    0.444800    0.592000    0.508700    0.175000    0.308000    0.463200    0.483600    0.729100    0.763800    0.350000    0.483000    0.800200    0.771200    0.548000    0.156000    -1.000000   0.060500    0.623500    0.509700\n# 9 25.293300   1.340921    0.525000    0.671600    0.597100    0.000000    0.333900    0.543600    0.532400    0.747200    0.761200    0.000000    0.536400    0.792100    0.795600    0.615800    0.163500    -1.000000   0.074100    0.633700    0.867100\n# 10    24.884900   1.352285    0.503800    0.659700    0.583300    0.075000    0.321200    0.520800    0.516200    0.728100    0.774500    0.300000    0.537500    0.808600    0.784200    0.610600    0.135700    -1.000000   0.065600    0.626700    0.800100\n# 11    24.270800   1.379699    0.525900    0.669000    0.590800    0.100000    0.304100    0.545200    0.531900    0.756500    0.778200    0.300000    0.531800    0.811600    0.757800    0.598700    0.182300    -1.000000   0.067300    0.638400    0.910900\n# 12    23.853900   1.395023    0.492200    0.659300    0.566600    0.000000    0.302800    0.512700    0.504700    0.689900    0.714800    0.000000    0.414800    0.762900    0.756600    0.550500    0.163000    -1.000000   0.068900    0.614400    0.800000\n# 13    23.363000   1.316223    0.509700    0.659000    0.568900    0.000000    0.315300    0.524400    0.526700    0.737300    0.775400    0.000000    0.517000    0.810800    0.787900    0.580600    0.116800    -1.000000   0.065200    0.624500    0.883200\n# 14    22.764800   1.371426    0.500600    0.657400    0.573700    0.000000    0.274800    0.519700    0.521600    0.708400    0.739100    0.000000    0.442600    0.780900    0.771900    0.590000    0.126600    -1.000000   0.087500    0.615800    0.811500\n# 15    22.156500   1.347376    0.506400    0.665200    0.582600    0.000000    0.323600    0.521600    0.548500    0.724500    0.761100    0.000000    0.517000    0.797800    0.765900    0.595800    0.104600    -1.000000   0.080600    0.636000    0.855500\n# 16    21.956600   1.380194    0.492400    0.649200    0.570100    0.000000    0.298700    0.509800    0.524800    0.713100    0.736100    0.000000    0.462500    0.770900    0.763800    0.506800    0.126300    -1.000000   0.098200    0.625500    0.833700\n# 17    21.674800   1.351492    0.485500    0.638800    0.548000    0.066700    0.324500    0.502000    0.540700    0.722700    0.739200    0.200000    0.488600    0.777000    0.770700    0.575300    0.130600    -1.000000   0.100100    0.619100    0.717300\n# 18    21.228200   1.360245    0.508300    0.665300    0.588700    0.000000    0.302100    0.525300    0.559000    0.724900    0.741600    0.000000    0.457400    0.780400    0.757900    0.568100    0.129800    -1.000000   0.096900    0.641400    0.855400\n# 19    20.928200   1.324188    0.516700    0.674800    0.595100    0.000000    0.295100    0.537300    0.554100    0.733500    0.759000    0.000000    0.492600    0.795900    0.766600    0.575700    0.155300    -1.000000   0.115400    0.631800    0.855500\n# 20    20.769900   1.324795    0.497800    0.646500    0.559500    0.000000    0.301900    0.516000    0.564000    0.720600    0.747900    0.000000    0.467000    0.785300    0.780900    0.585100    0.133300    -1.000000   0.108100    0.628800    0.750800\n# 21    20.510100   1.348304    0.519800    0.672100    0.589500    0.000000    0.288800    0.539100    0.559700    0.710400    0.729300    0.000000    0.444300    0.765900    0.767800    0.571400    0.133200    -1.000000   0.108800    0.648600    0.889100\n# 22    20.335800   1.354123    0.507300    0.668300    0.579400    0.000000    0.300700    0.524300    0.557100    0.704400    0.732000    0.000000    0.482400    0.765500    0.769800    0.559100    0.108300    -1.000000   0.108500    0.642800    0.855400\n# 23    20.156100   1.350379    0.531300    0.687900    0.603100    0.000000    0.306600    0.552600    0.562600    0.712900    0.738900    0.000000    0.474400    0.774500    0.763900    0.584200    0.182000    -1.000000   0.116100    0.641800    0.900000\n# 24    19.999300   1.356307    0.503600    0.654700    0.571500    0.000000    0.302700    0.523400    0.565400    0.720400    0.739500    0.000000    0.471000    0.775000    0.761000    0.565100    0.159900    -1.000000   0.116100    0.640600    0.778800\n# 25    19.940100   1.354687    0.503900    0.659300    0.578200    0.000000    0.302900    0.524600    0.565100    0.714500    0.736000    0.000000    0.466500    0.773000    0.761700    0.557500    0.159200    -1.000000   0.121400    0.644500    0.778800\n\n# RT_DETRv2 - 25 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 106.522700  27.522213   0.181500    0.276200    0.198000    0.000000    0.007800    0.187000    0.222000    0.346300    0.401900    0.000000    0.136400    0.421200    0.451700    0.395400    0.000100    -1.000000   0.000900    0.241100    0.000000\n# 2 27.989500   14.414159   0.315500    0.431800    0.354400    0.000000    0.107900    0.325600    0.338700    0.638400    0.723500    0.000000    0.471000    0.758100    0.706500    0.510700    0.008700    -1.000000   0.040800    0.617800    0.008400\n# 3 19.334300   11.301381   0.430100    0.582200    0.489600    0.066700    0.309900    0.442000    0.509200    0.686800    0.756700    0.200000    0.530100    0.796700    0.767400    0.590200    0.019200    -1.000000   0.090300    0.602600    0.511000\n# 4 16.752200   10.458241   0.486800    0.656700    0.567200    0.114300    0.272500    0.503200    0.537900    0.709100    0.760400    0.350000    0.476700    0.794900    0.742800    0.606200    0.035600    -1.000000   0.189100    0.636800    0.710500\n# 5 15.439000   10.241963   0.464600    0.635600    0.531100    0.155000    0.247900    0.485100    0.519800    0.690500    0.743400    0.400000    0.424400    0.780200    0.763400    0.560100    0.075500    -1.000000   0.239700    0.647100    0.502100\n# 6 14.307100   9.926408    0.475500    0.646200    0.526800    0.050000    0.381200    0.504500    0.546200    0.708400    0.751700    0.200000    0.572700    0.784200    0.760500    0.548600    0.151000    -1.000000   0.205300    0.654200    0.533300\n# 7 13.387400   9.970204    0.499900    0.675600    0.570400    0.125000    0.354300    0.523200    0.568100    0.694700    0.736400    0.250000    0.538100    0.778700    0.777000    0.574800    0.107300    -1.000000   0.202000    0.631100    0.707500\n# 8 12.787900   9.690248    0.472400    0.632500    0.555200    0.041700    0.356600    0.495800    0.549800    0.710800    0.748000    0.250000    0.566500    0.781700    0.787500    0.504100    0.131800    -1.000000   0.192000    0.670200    0.548700\n# 9 12.136400   9.937552    0.471300    0.659700    0.513200    0.050000    0.175500    0.498900    0.511100    0.690700    0.714600    0.400000    0.535200    0.740200    0.768400    0.462300    0.156100    -1.000000   0.234400    0.643500    0.563100\n# 10    11.785400   9.650146    0.476500    0.689700    0.517800    0.018900    0.352800    0.505200    0.528100    0.699800    0.735100    0.350000    0.594900    0.760100    0.763700    0.574300    0.206100    -1.000000   0.224600    0.653100    0.437400\n# 11    11.577100   10.183405   0.497800    0.684600    0.591200    0.025000    0.329800    0.525700    0.520900    0.696100    0.725000    0.300000    0.551100    0.753200    0.738200    0.479800    0.160800    -1.000000   0.234600    0.656000    0.717200\n# 12    11.119900   9.595840    0.510200    0.699900    0.573000    0.025000    0.297700    0.545200    0.539100    0.713700    0.753900    0.250000    0.558500    0.781700    0.791500    0.553600    0.230600    -1.000000   0.232600    0.663700    0.589200\n# 13    10.731800   9.746691    0.474300    0.699000    0.493700    0.031600    0.349800    0.500400    0.536300    0.670100    0.704200    0.400000    0.568200    0.726600    0.766100    0.530300    0.159700    -1.000000   0.188500    0.651200    0.549900\n# 14    10.406400   9.911798    0.464100    0.666800    0.511900    0.020500    0.332400    0.486400    0.495500    0.694000    0.738900    0.450000    0.595500    0.764500    0.774000    0.485700    0.080200    -1.000000   0.179600    0.649000    0.616400\n# 15    10.135500   9.764801    0.474300    0.665800    0.537000    0.027300    0.331100    0.503100    0.538800    0.678800    0.719400    0.300000    0.529500    0.751700    0.776700    0.572500    0.146300    -1.000000   0.220600    0.644000    0.485700\n# 16    9.881300    9.829190    0.502800    0.688900    0.581700    0.011100    0.356900    0.530400    0.538700    0.703700    0.736100    0.300000    0.568200    0.762000    0.779700    0.513400    0.178400    -1.000000   0.224900    0.644900    0.675300\n# 17    9.575700    9.957942    0.475500    0.651500    0.554900    0.050000    0.328700    0.505600    0.546200    0.689900    0.727100    0.250000    0.573900    0.751000    0.763300    0.502900    0.174600    -1.000000   0.222100    0.656600    0.533800\n# 18    9.357600    9.972997    0.480500    0.661700    0.563000    0.017100    0.341000    0.510100    0.547000    0.680300    0.708500    0.400000    0.512500    0.742700    0.777500    0.502000    0.166900    -1.000000   0.253400    0.650000    0.533400\n# 19    9.122300    10.006319   0.469600    0.686000    0.495000    0.020800    0.346200    0.498000    0.523600    0.662500    0.711300    0.300000    0.561900    0.737600    0.787700    0.480100    0.174700    -1.000000   0.244500    0.662500    0.468000\n# 20    8.904600    9.944053    0.470700    0.680900    0.501200    0.013600    0.379200    0.501600    0.539200    0.677300    0.712500    0.300000    0.604000    0.733900    0.771300    0.519400    0.175900    -1.000000   0.245400    0.665800    0.446500\n# 21    8.691000    10.012321   0.475400    0.687800    0.498000    0.007400    0.351500    0.504600    0.544200    0.666900    0.715400    0.300000    0.584100    0.743000    0.777300    0.524200    0.179700    -1.000000   0.209200    0.661000    0.501000\n# 22    8.483400    9.927339    0.476200    0.689600    0.488500    0.013800    0.355400    0.506000    0.534400    0.671500    0.727900    0.400000    0.583500    0.753700    0.782400    0.523100    0.178300    -1.000000   0.224700    0.646700    0.501800\n# 23    8.238000    10.017809   0.478900    0.698600    0.488800    0.016700    0.373100    0.506900    0.533100    0.671300    0.715500    0.400000    0.590300    0.743400    0.779100    0.521600    0.177700    -1.000000   0.237600    0.657600    0.500000\n# 24    8.074300    9.924691    0.488100    0.701000    0.523400    0.014800    0.365700    0.517300    0.535800    0.677100    0.720600    0.400000    0.593800    0.748300    0.782300    0.531300    0.167600    -1.000000   0.238600    0.653700    0.554800\n# 25    7.963100    10.016549   0.486500    0.696200    0.514400    0.013300    0.350200    0.514300    0.537400    0.672200    0.708200    0.400000    0.566500    0.733400    0.782600    0.516800    0.168600    -1.000000   0.230000    0.653400    0.567500\n\n# ConditionalDETR - 25 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 12.257200   4.579205    0.000700    0.003100    0.000300    0.000000    0.001100    0.000700    0.005600    0.011000    0.044300    0.000000    0.014800    0.043800    0.003100    0.000000    0.000000    -1.000000   0.000000    0.001000    0.000100\n# 2 3.214800    2.093854    0.012600    0.027700    0.009400    0.000000    0.002300    0.012900    0.027500    0.091400    0.136600    0.000000    0.056800    0.142000    0.066100    0.001500    0.000000    -1.000000   0.001600    0.006700    0.000000\n# 3 2.031300    1.615478    0.022200    0.054700    0.017600    0.000000    0.005100    0.022500    0.051500    0.157800    0.202400    0.000000    0.052300    0.204500    0.107500    0.007300    0.000000    -1.000000   0.000300    0.018000    0.000000\n# 4 1.750000    1.561830    0.060300    0.118400    0.057600    0.000000    0.007500    0.063100    0.097500    0.253500    0.302300    0.000000    0.237500    0.306400    0.228100    0.055700    0.000000    -1.000000   0.001500    0.076500    0.000000\n# 5 1.617800    1.382881    0.064500    0.121800    0.061400    0.000000    0.006800    0.066900    0.130900    0.292900    0.348300    0.000000    0.105700    0.360300    0.209900    0.087600    0.000000    No Log  0.002600    0.086600    0.000000\n# 6 1.510300    1.307172    0.072900    0.132500    0.068500    0.000000    0.009700    0.075700    0.151900    0.299400    0.352800    0.000000    0.112500    0.361600    0.199800    0.117100    0.000000    -1.000000   0.002400    0.118200    0.000000\n# 7 1.405600    1.251348    0.079900    0.130500    0.078700    0.000000    0.017500    0.083700    0.175700    0.310100    0.365800    0.000000    0.056800    0.383100    0.223800    0.048100    0.000000    No Log  0.002600    0.204600    0.000000\n# 8 1.331100    1.159470    0.113300    0.180400    0.120800    0.000000    0.028400    0.116000    0.210500    0.345200    0.392100    0.000000    0.130700    0.403300    0.313500    0.154200    0.000000    No Log  0.006600    0.205600    0.000000\n# 9 1.221300    1.101122    0.144700    0.227600    0.156400    0.025200    0.019500    0.148800    0.232200    0.385000    0.416300    0.025000    0.134100    0.433900    0.377000    0.264400    0.000000    No Log  0.012300    0.214600    0.000000\n# 10    1.179900    1.075704    0.163600    0.247600    0.181500    0.000000    0.038200    0.168100    0.231600    0.387100    0.434300    0.000000    0.164800    0.455400    0.457000    0.255800    0.000000    -1.000000   0.017300    0.251400    0.000000\n# 11    1.145600    1.023341    0.204600    0.295000    0.230600    0.050500    0.039500    0.211200    0.257700    0.425600    0.457900    0.050000    0.142000    0.487100    0.557100    0.334300    0.000600    -1.000000   0.026500    0.309000    0.000000\n# 12    1.136500    1.016237    0.217600    0.319900    0.244700    0.000000    0.035900    0.225000    0.253500    0.431300    0.457300    0.000000    0.202300    0.487200    0.585900    0.347900    0.000700    -1.000000   0.027600    0.343800    0.000000\n# 13    1.117300    0.968450    0.238400    0.348400    0.265800    0.000000    0.046200    0.247500    0.274400    0.443500    0.471100    0.000000    0.294300    0.504300    0.583500    0.394100    0.000400    -1.000000   0.036700    0.415800    0.000000\n# 14    1.022700    0.964383    0.259700    0.384800    0.289100    0.000000    0.067500    0.269300    0.274300    0.475400    0.498700    0.000000    0.267000    0.544700    0.637500    0.454800    0.002400    -1.000000   0.039700    0.424200    0.000000\n# 15    1.039000    0.985401    0.260200    0.394400    0.283300    0.000000    0.049100    0.269700    0.286400    0.515200    0.536000    0.000000    0.185200    0.590000    0.621600    0.450200    0.005300    -1.000000   0.042100    0.441800    0.000500\n# 16    1.012600    0.940276    0.269900    0.411300    0.311300    0.000000    0.073900    0.279600    0.289500    0.504500    0.526500    0.000000    0.272700    0.576900    0.634600    0.460400    0.004900    -1.000000   0.053900    0.465300    0.000000\n# 17    0.928400    0.934266    0.276900    0.413600    0.309300    0.000000    0.070100    0.290400    0.297700    0.590600    0.609800    0.000000    0.308500    0.659700    0.661100    0.472700    0.006000    -1.000000   0.066200    0.452900    0.002500\n# 18    0.939700    0.919036    0.277800    0.417400    0.313000    0.000000    0.082100    0.288300    0.290600    0.634400    0.652700    0.000000    0.318700    0.697400    0.638400    0.485200    0.005000    -1.000000   0.061900    0.470600    0.006000\n# 19    0.860800    0.921640    0.279500    0.424300    0.308700    0.000000    0.068900    0.291900    0.306400    0.627100    0.648800    0.000000    0.263100    0.700300    0.646300    0.490200    0.007300    -1.000000   0.069300    0.459000    0.004700\n# 20    0.888200    0.908211    0.290500    0.435600    0.329600    0.025200    0.066200    0.303200    0.309100    0.641300    0.660500    0.025000    0.282400    0.711400    0.660700    0.519400    0.006700    -1.000000   0.079200    0.471500    0.005800\n# 21    0.865500    0.907514    0.289400    0.429000    0.333000    0.000000    0.080400    0.302600    0.303400    0.650900    0.669600    0.000000    0.304000    0.720300    0.667100    0.504400    0.006100    -1.000000   0.071600    0.480000    0.007100\n# 22    0.841000    0.897333    0.296700    0.437500    0.335400    0.000000    0.087800    0.311200    0.307200    0.651100    0.664800    0.000000    0.281800    0.718600    0.671300    0.534000    0.005100    -1.000000   0.073900    0.488800    0.006800\n# 23    0.821500    0.895820    0.299100    0.441800    0.339100    0.000000    0.087100    0.313200    0.314600    0.651800    0.670400    0.000000    0.336900    0.718500    0.670900    0.548300    0.005400    -1.000000   0.074900    0.488800    0.006400\n# 24    0.798200    0.892997    0.296100    0.441700    0.335200    0.000000    0.075000    0.310400    0.310500    0.638100    0.656000    0.000000    0.306800    0.705000    0.670700    0.534100    0.005300    -1.000000   0.076800    0.483200    0.006700\n# 25    0.786300    0.894873    0.296400    0.442700    0.335400    0.000000    0.075000    0.311800    0.309700    0.635700    0.655900    0.000000    0.293700    0.707600    0.671900    0.535700    0.005100    -1.000000   0.076700    0.482500    0.006400\n\n# # 50 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 61.998300   29.889622   0.000300    0.001000    0.000100    0.000000    0.000000    0.000500    0.002800    0.011600    0.029300    0.000000    0.000000    0.030400    0.000500    0.000400    0.000000    -1.000000   0.000000    0.000600    0.000000\n# 2 11.920100   3.913074    0.000000    0.000100    0.000000    0.000000    0.000000    0.000000    0.000000    0.000700    0.000700    0.000000    0.000000    0.000800    0.000000    0.000000    0.000000    No Log  0.000000    0.000100    0.000000\n# 3 2.872600    1.999650    0.017200    0.042100    0.012400    0.000000    0.004700    0.017500    0.029800    0.148200    0.201100    0.000000    0.036400    0.206600    0.081900    0.005500    0.000000    -1.000000   0.000300    0.015400    0.000000\n# 4 2.044500    1.702604    0.019800    0.050300    0.013200    0.000000    0.004700    0.020800    0.051700    0.157200    0.222200    0.000000    0.033000    0.228900    0.038300    0.044200    0.000000    -1.000000   0.000100    0.036300    0.000000\n# 5 1.773500    1.489281    0.033800    0.075200    0.028200    0.000000    0.010100    0.035100    0.081800    0.210300    0.265600    0.000000    0.064800    0.272200    0.106600    0.047500    0.000000    No Log  0.000700    0.047800    0.000000\n# 6 1.651000    1.427438    0.055900    0.104200    0.057300    0.000000    0.012600    0.056700    0.117200    0.257700    0.323200    0.000000    0.072700    0.330300    0.178000    0.098700    0.000000    No Log  0.000000    0.058800    0.000000\n# 7 1.555300    1.418692    0.062700    0.115600    0.059800    0.000000    0.018700    0.063600    0.124000    0.273100    0.320400    0.000000    0.044300    0.328100    0.158000    0.141500    0.000000    -1.000000   0.000100    0.076300    0.000000\n# 8 1.488100    1.246883    0.067600    0.117500    0.065600    0.000000    0.021800    0.068800    0.155800    0.306300    0.359700    0.000000    0.088600    0.375000    0.198000    0.094800    0.000000    No Log  0.001500    0.111000    0.000000\n# 9 1.410900    1.337418    0.068200    0.128300    0.065800    0.000000    0.019200    0.068700    0.161000    0.282400    0.334600    0.000000    0.108000    0.340400    0.197300    0.139100    0.000000    No Log  0.000700    0.072200    0.000000\n# 10    1.405900    1.198891    0.097000    0.160900    0.100100    0.000000    0.020400    0.099000    0.201600    0.327300    0.374400    0.000000    0.127300    0.384000    0.243500    0.221500    0.000000    No Log  0.001900    0.115300    0.000000\n# 11    1.339600    1.184751    0.093200    0.147700    0.100400    0.000000    0.023500    0.095200    0.199100    0.342100    0.393800    0.000000    0.089800    0.412500    0.233400    0.193300    0.000000    No Log  0.005000    0.127800    0.000000\n# 12    1.322600    1.155094    0.129100    0.203800    0.138700    0.000000    0.013500    0.131800    0.229300    0.355500    0.403500    0.000000    0.109100    0.422200    0.378100    0.266500    0.000000    -1.000000   0.006700    0.123400    0.000000\n# 13    1.328200    1.137684    0.124100    0.190000    0.129300    0.000000    0.013200    0.127800    0.224100    0.372900    0.419500    0.000000    0.106800    0.442500    0.330900    0.229900    0.000000    No Log  0.010100    0.173800    0.000000\n# 14    1.207300    1.071396    0.163700    0.243600    0.174900    0.000000    0.036600    0.167900    0.241100    0.390200    0.431400    0.000000    0.125000    0.457400    0.425600    0.336300    0.000000    No Log  0.013100    0.207000    0.000000\n# 15    1.230200    1.066224    0.176400    0.271200    0.190900    0.000000    0.044600    0.180000    0.242400    0.379000    0.424400    0.000000    0.119300    0.446900    0.477700    0.363600    0.000000    No Log  0.010100    0.207200    0.000000\n# 16    1.216300    1.033326    0.212500    0.331700    0.217800    0.000000    0.050400    0.217400    0.256500    0.406400    0.438000    0.000000    0.331800    0.461300    0.539800    0.450800    0.000000    -1.000000   0.018300    0.265900    0.000000\n# 17    1.102900    0.971974    0.242100    0.366900    0.271200    0.000000    0.061100    0.249300    0.283700    0.445900    0.472900    0.000000    0.286400    0.505500    0.601400    0.480600    0.000800    -1.000000   0.046000    0.324100    0.000000\n# 18    1.118400    0.970455    0.259500    0.387200    0.285700    0.000000    0.092200    0.266500    0.292000    0.451300    0.478300    0.000000    0.301100    0.511800    0.607900    0.504600    0.000700    -1.000000   0.043900    0.399800    0.000000\n# 19    1.042000    0.967601    0.259800    0.395300    0.279900    0.000000    0.076400    0.267100    0.287500    0.507200    0.530000    0.000000    0.220500    0.569900    0.596500    0.509700    0.002400    -1.000000   0.048600    0.400700    0.001000\n# 20    1.064600    0.944465    0.273800    0.412100    0.298800    0.025200    0.087900    0.282700    0.291900    0.532800    0.558100    0.025000    0.266500    0.595900    0.630500    0.485800    0.002400    -1.000000   0.078400    0.443900    0.002100\n# 21    1.028700    0.944142    0.281000    0.419900    0.313000    0.000000    0.085900    0.291500    0.334500    0.611100    0.634500    0.000000    0.323900    0.672900    0.650000    0.486900    0.004900    -1.000000   0.064900    0.473900    0.005300\n# 22    0.997400    0.932104    0.284800    0.432100    0.309500    0.075700    0.082800    0.294500    0.307500    0.623800    0.642300    0.075000    0.280100    0.680400    0.662000    0.490000    0.005500    -1.000000   0.070900    0.474300    0.006200\n# 23    0.976200    0.916920    0.296600    0.447800    0.331300    0.050500    0.106500    0.307100    0.440900    0.608600    0.625300    0.050000    0.296000    0.661600    0.652400    0.522800    0.005000    -1.000000   0.086600    0.506100    0.006700\n# 24    0.910200    0.926796    0.302600    0.454600    0.333800    0.000000    0.100200    0.312900    0.394900    0.614900    0.632800    0.000000    0.296600    0.673000    0.676300    0.529700    0.004300    -1.000000   0.093100    0.507500    0.005100\n# 25    0.856500    0.927848    0.298400    0.452700    0.333100    0.025200    0.102300    0.309900    0.305100    0.596100    0.628000    0.025000    0.294900    0.665000    0.659500    0.518100    0.004400    -1.000000   0.094800    0.508600    0.005200\n# 26    0.775300    0.911072    0.299500    0.458800    0.331300    0.025200    0.104800    0.311200    0.309600    0.596300    0.625900    0.025000    0.329000    0.663900    0.669500    0.537500    0.004000    -1.000000   0.077300    0.503100    0.005500\n# 27    0.750800    0.904915    0.304500    0.449700    0.336000    0.041700    0.116300    0.314500    0.365000    0.611300    0.642400    0.050000    0.311900    0.677100    0.681200    0.524300    0.004000    -1.000000   0.077200    0.532100    0.007900\n# 28    0.719000    0.896321    0.302000    0.445200    0.328900    0.050500    0.105400    0.313600    0.402800    0.601200    0.632200    0.050000    0.341500    0.670200    0.690700    0.518200    0.005000    -1.000000   0.089500    0.500900    0.007500\n# 29    0.696800    0.876628    0.312700    0.465100    0.339100    0.025200    0.110800    0.325400    0.324300    0.636000    0.651200    0.025000    0.314200    0.687500    0.702100    0.528600    0.004600    -1.000000   0.107600    0.524600    0.008700\n# 30    0.673600    0.893076    0.306200    0.459600    0.340800    0.000000    0.105400    0.319800    0.397700    0.622300    0.637500    0.000000    0.248300    0.686800    0.684300    0.527800    0.005400    -1.000000   0.104100    0.507100    0.008400\n# 31    0.656000    0.880665    0.317400    0.466100    0.355800    0.101000    0.127100    0.331400    0.407000    0.640700    0.653900    0.100000    0.283000    0.699900    0.715900    0.525300    0.007600    -1.000000   0.107800    0.540300    0.007500\n# 32    0.641600    0.881308    0.319100    0.469200    0.351600    0.050500    0.116600    0.335300    0.419000    0.631700    0.646500    0.050000    0.302300    0.687800    0.694800    0.541000    0.008700    -1.000000   0.115100    0.538300    0.016900\n# 33    0.630900    0.872384    0.321800    0.483500    0.348600    0.025200    0.118400    0.337300    0.375800    0.631200    0.642800    0.025000    0.321000    0.686500    0.713900    0.543200    0.006600    -1.000000   0.125400    0.534800    0.006800\n# 34    0.601500    0.867039    0.322600    0.474200    0.365000    0.025200    0.122200    0.338900    0.374300    0.636800    0.654000    0.025000    0.390900    0.689400    0.714800    0.531500    0.006300    -1.000000   0.127600    0.548800    0.006700\n# 35    0.589100    0.865702    0.325600    0.477700    0.359800    0.012600    0.124500    0.340300    0.419100    0.631200    0.640800    0.025000    0.342000    0.679900    0.713000    0.555900    0.008400    -1.000000   0.127000    0.537900    0.011500\n# 36    0.570200    0.863400    0.329900    0.487600    0.367800    0.000000    0.120900    0.344800    0.413700    0.626100    0.635300    0.000000    0.330700    0.676700    0.732300    0.562100    0.008200    -1.000000   0.135800    0.531900    0.009000\n# 37    0.572800    0.867819    0.334600    0.490000    0.375500    0.000000    0.124800    0.350600    0.406900    0.620100    0.634700    0.000000    0.353400    0.679100    0.724500    0.571400    0.011300    -1.000000   0.144700    0.547700    0.007600\n# 38    0.551600    0.878277    0.328400    0.489500    0.356200    0.025200    0.115700    0.344700    0.419600    0.624900    0.637700    0.025000    0.373900    0.678300    0.715600    0.558400    0.006800    -1.000000   0.154000    0.527100    0.008400\n# 39    0.544900    0.875394    0.327500    0.482600    0.367100    0.075700    0.130200    0.344400    0.379400    0.629200    0.641100    0.075000    0.383000    0.676000    0.723600    0.541600    0.008400    -1.000000   0.146200    0.536900    0.008500\n# 40    0.526600    0.868821    0.330400    0.486800    0.360500    0.050000    0.143700    0.346700    0.380400    0.628400    0.638700    0.050000    0.355700    0.676300    0.723500    0.542100    0.011400    -1.000000   0.160700    0.534000    0.010600\n# 41    0.517000    0.870999    0.335300    0.491700    0.364400    0.025200    0.114200    0.352700    0.433600    0.626100    0.634300    0.025000    0.331800    0.669300    0.731000    0.554100    0.012400    -1.000000   0.160300    0.541300    0.012600\n# 42    0.495300    0.876202    0.334900    0.492200    0.367800    0.012600    0.123700    0.352400    0.455700    0.621900    0.637400    0.025000    0.359100    0.677800    0.728100    0.557000    0.018100    -1.000000   0.155300    0.536000    0.015200\n# 43    0.494200    0.860925    0.337400    0.497000    0.368300    0.050000    0.122900    0.354100    0.426900    0.619600    0.634000    0.050000    0.375600    0.667600    0.736100    0.546500    0.015700    -1.000000   0.163500    0.551300    0.011600\n# 44    0.490000    0.880336    0.336900    0.498100    0.373100    0.000000    0.118500    0.355300    0.449600    0.625400    0.633400    0.000000    0.312500    0.673300    0.728800    0.546800    0.027900    -1.000000   0.160900    0.539500    0.017500\n# 45    0.476800    0.873949    0.338300    0.497100    0.370800    0.000000    0.122000    0.357300    0.448100    0.621400    0.632500    0.000000    0.343200    0.672700    0.724400    0.557100    0.022300    -1.000000   0.168200    0.541900    0.015900\n# 46    0.476600    0.881447    0.335800    0.494500    0.368600    0.000000    0.119000    0.353900    0.455400    0.621800    0.637500    0.000000    0.305700    0.681400    0.729700    0.550700    0.020600    -1.000000   0.163800    0.533800    0.016400\n# 47    0.468400    0.881990    0.334900    0.498200    0.366200    0.000000    0.119200    0.354700    0.449900    0.616500    0.630500    0.000000    0.325600    0.674500    0.723700    0.545300    0.022100    -1.000000   0.173100    0.530000    0.015300\n# 48    0.463700    0.880277    0.337800    0.497900    0.371900    0.000000    0.122900    0.356800    0.460000    0.625600    0.633100    0.000000    0.322200    0.674500    0.724000    0.555300    0.021900    -1.000000   0.175600    0.533600    0.016500\n# 49    0.458200    0.878279    0.338000    0.495400    0.369900    0.000000    0.123000    0.356500    0.461000    0.629700    0.637300    0.000000    0.336400    0.677500    0.727100    0.553400    0.018100    -1.000000   0.174100    0.538700    0.016400\n# 50    0.453200    0.873663    0.340100    0.499100    0.372300    0.000000    0.122000    0.359300    0.462100    0.630300    0.639900    0.000000    0.373300    0.678000    0.729100    0.553300    0.028000    -1.000000   0.173400    0.538800    0.017700\n\n\nTK - Plot loss curves\nTK - Note: May get an error at the beginning where a box is predicted a negative output. This will break training as boxes are expected to be positive floats."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---making-predictions-on-the-test-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---making-predictions-on-the-test-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "15 TK - Making predictions on the test dataset",
    "text": "15 TK - Making predictions on the test dataset\nNotes: - Predicting on the whole test dataset only returns a single batch - e.g.¬†test_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"]) - Can just predict on samples individually?\n\nprocessed_dataset[\"test\"][0]\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n{'pixel_values': tensor([[[0.2471, 0.3059, 0.3255,  ..., 0.0471, 0.0863, 0.2196],\n          [0.1882, 0.2078, 0.3294,  ..., 0.0471, 0.1608, 0.4157],\n          [0.1490, 0.1569, 0.2980,  ..., 0.0745, 0.3216, 0.3490],\n          ...,\n          [0.7843, 0.7922, 0.7804,  ..., 0.4784, 0.3137, 0.2745],\n          [0.7765, 0.8000, 0.7922,  ..., 0.4980, 0.4392, 0.3765],\n          [0.7725, 0.7804, 0.8039,  ..., 0.5098, 0.4902, 0.4549]],\n \n         [[0.3176, 0.3725, 0.3843,  ..., 0.0745, 0.1137, 0.2471],\n          [0.2627, 0.2745, 0.3882,  ..., 0.0784, 0.1843, 0.4431],\n          [0.2196, 0.2235, 0.3569,  ..., 0.1020, 0.3490, 0.3765],\n          ...,\n          [0.0706, 0.0784, 0.0667,  ..., 0.5216, 0.3569, 0.3059],\n          [0.0627, 0.0863, 0.0784,  ..., 0.5412, 0.4863, 0.4157],\n          [0.0588, 0.0667, 0.0902,  ..., 0.5529, 0.5412, 0.5020]],\n \n         [[0.1529, 0.2235, 0.2627,  ..., 0.0275, 0.0745, 0.2157],\n          [0.0902, 0.1216, 0.2588,  ..., 0.0314, 0.1529, 0.4039],\n          [0.0314, 0.0588, 0.2157,  ..., 0.0627, 0.3020, 0.3294],\n          ...,\n          [0.1176, 0.1255, 0.1137,  ..., 0.2784, 0.1412, 0.1451],\n          [0.1098, 0.1333, 0.1255,  ..., 0.3020, 0.2314, 0.1882],\n          [0.1059, 0.1137, 0.1373,  ..., 0.2941, 0.2471, 0.2157]]]),\n 'labels': {'size': tensor([640, 640]), 'image_id': tensor([61]), 'class_labels': tensor([4, 5, 1, 0]), 'boxes': tensor([[0.2104, 0.8563, 0.2855, 0.2720],\n         [0.4194, 0.4927, 0.2398, 0.1785],\n         [0.3610, 0.6227, 0.2706, 0.2330],\n         [0.4974, 0.4785, 0.3829, 0.3820]]), 'area': tensor([31813.8730, 17533.5664, 25824.1211, 59906.5469]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\n\n# Make predictions with trainer containing trained model\ntest_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"])\n# test_dataset_preds\n\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n\n\n\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\nUnused or unrecognized kwargs: annotations, masks_path.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\n\n\n\nprocessed_dataset[\"test\"]\n\nDataset({\n    features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n    num_rows: 224\n})\n\n\n\ntest_dataset_preds.predictions[0]\n\n({'loss_vfl': array(0.6182317, dtype=float32),\n  'loss_bbox': array(0.32066998, dtype=float32),\n  'loss_giou': array(0.2874492, dtype=float32)},\n array([[[-3.2519531 , -2.7070312 , -3.203125  , ..., -1.6289062 ,\n           1.3046875 , -1.6757812 ],\n         [-3.2851562 , -0.46289062, -2.921875  , ..., -3.5390625 ,\n          -1.71875   , -2.7421875 ],\n         [-3.234375  , -2.9765625 , -4.1015625 , ..., -4.6171875 ,\n          -3.375     , -3.4726562 ],\n         ...,\n         [-3.6835938 , -3.3339844 , -3.7558594 , ..., -3.6269531 ,\n          -3.4199219 , -3.1992188 ],\n         [-3.59375   , -3.1289062 , -3.3671875 , ..., -3.3007812 ,\n          -3.0507812 , -3.0859375 ],\n         [-2.9648438 , -2.6640625 , -2.6132812 , ..., -2.4570312 ,\n          -2.9804688 , -2.5976562 ]],\n \n        [[-3.2578125 , -2.7167969 , -1.7099609 , ..., -1.0361328 ,\n          -2.1484375 , -2.0507812 ],\n         [-3.0410156 , -2.6679688 , -1.7441406 , ..., -1.0517578 ,\n          -2.0859375 , -1.9785156 ],\n         [-3.0429688 , -2.5957031 , -2.6621094 , ..., -1.5742188 ,\n          -2.3925781 , -2.9824219 ],\n         ...,\n         [-3.6230469 , -3.4609375 , -3.7480469 , ..., -4.1835938 ,\n          -3.0429688 , -2.8808594 ],\n         [-1.8730469 , -2.3242188 , -3.0820312 , ..., -3.859375  ,\n          -2.4921875 , -2.9628906 ],\n         [-3.5976562 , -3.6601562 , -3.7851562 , ..., -3.9609375 ,\n          -3.2382812 , -2.5976562 ]],\n \n        [[-3.4394531 , -1.5839844 , -1.4941406 , ..., -0.546875  ,\n          -1.6601562 ,  0.38916016],\n         [-3.5273438 , -3.5078125 , -3.4355469 , ..., -4.0625    ,\n          -2.8496094 , -2.5996094 ],\n         [-3.8007812 , -3.5429688 , -3.5       , ..., -4.5351562 ,\n          -2.8671875 , -2.8984375 ],\n         ...,\n         [-3.9550781 , -3.2832031 , -3.5683594 , ..., -4.140625  ,\n          -2.8085938 , -2.7304688 ],\n         [-3.9550781 , -3.2832031 , -3.5683594 , ..., -4.140625  ,\n          -2.8085938 , -2.7304688 ],\n         [-3.9550781 , -3.2832031 , -3.5683594 , ..., -4.140625  ,\n          -2.8085938 , -2.7304688 ]],\n \n        ...,\n \n        [[-2.8300781 , -3.6914062 , -3.1328125 , ..., -4.2929688 ,\n          -3.4160156 , -2.6601562 ],\n         [-0.43139648, -0.49487305, -1.1630859 , ..., -0.21801758,\n          -3.1542969 , -1.9824219 ],\n         [-3.0683594 , -3.7851562 , -3.2226562 , ..., -4.3398438 ,\n          -3.4492188 , -2.6445312 ],\n         ...,\n         [-2.9023438 , -2.7890625 , -2.9609375 , ..., -2.8828125 ,\n          -3.1523438 , -2.5546875 ],\n         [-3.3867188 , -3.546875  , -3.0019531 , ..., -3.3652344 ,\n          -3.1933594 , -2.4785156 ],\n         [-3.2734375 , -3.2792969 , -2.8046875 , ..., -3.0605469 ,\n          -3.1816406 , -2.6113281 ]],\n \n        [[-3.4863281 , -3.0019531 , -2.9941406 , ..., -1.7636719 ,\n           1.2539062 , -2.2382812 ],\n         [-2.8242188 ,  0.2758789 , -2.8046875 , ..., -3.9492188 ,\n          -1.7236328 , -2.1484375 ],\n         [-3.203125  , -3.4882812 , -3.5878906 , ..., -4.4101562 ,\n          -3.4199219 , -3.1699219 ],\n         ...,\n         [-4.046875  , -3.421875  , -3.828125  , ..., -4.6445312 ,\n          -3.2890625 , -3.015625  ],\n         [-2.4589844 , -2.3359375 , -3.3300781 , ..., -4.2539062 ,\n          -3.2050781 , -3.078125  ],\n         [-3.9355469 , -3.2988281 , -3.6386719 , ..., -4.3007812 ,\n          -3.1855469 , -3.0039062 ]],\n \n        [[-2.7539062 , -0.6845703 , -2.78125   , ..., -3.5136719 ,\n          -1.5361328 , -2.7695312 ],\n         [-3.4199219 , -2.8085938 , -2.9492188 , ..., -1.5595703 ,\n           1.328125  , -1.546875  ],\n         [-3.6933594 , -3.7753906 , -4.0742188 , ..., -4.4023438 ,\n          -3.1757812 , -3.2128906 ],\n         ...,\n         [-2.9863281 , -3.28125   , -3.6738281 , ..., -4.3359375 ,\n          -3.1171875 , -2.8066406 ],\n         [-3.7382812 , -3.3671875 , -3.7617188 , ..., -4.0507812 ,\n          -3.1953125 , -3.1816406 ],\n         [-3.5605469 , -3.5722656 , -3.6503906 , ..., -4.2851562 ,\n          -3.0820312 , -3.3378906 ]]], shape=(16, 300, 7), dtype=float32),\n array([[[0.41664693, 0.49085146, 0.23801047, 0.18277034],\n         [0.35253283, 0.62337315, 0.2509547 , 0.2279911 ],\n         [0.49718913, 0.47960296, 0.37172967, 0.36257833],\n         ...,\n         [0.07192166, 0.34676185, 0.1517776 , 0.12165481],\n         [0.6729506 , 0.10930949, 0.30752522, 0.20110726],\n         [0.77966714, 0.16523355, 0.05241632, 0.02525438]],\n \n        [[0.85035276, 0.51535505, 0.17796528, 0.18824565],\n         [0.48402798, 0.59007794, 0.24185205, 0.2280345 ],\n         [0.56021583, 0.11710685, 0.06235546, 0.06133057],\n         ...,\n         [0.15581106, 0.68413705, 0.26109877, 0.22762525],\n         [0.66657436, 0.28775156, 0.37490386, 0.1381249 ],\n         [0.12445254, 0.56130326, 0.21322249, 0.17076251]],\n \n        [[0.725371  , 0.79217684, 0.5137874 , 0.39758295],\n         [0.4126907 , 0.65756005, 0.6183046 , 0.47715917],\n         [0.41387203, 0.6570862 , 0.6131653 , 0.47685397],\n         ...,\n         [0.36498594, 0.7820094 , 1.7299604 , 0.43596542],\n         [0.36498594, 0.7820094 , 1.7299604 , 0.43596542],\n         [0.36498594, 0.7820094 , 1.7299604 , 0.43596542]],\n \n        ...,\n \n        [[0.5114551 , 0.58442545, 0.35628116, 0.34475726],\n         [0.7291374 , 0.7100328 , 0.3373217 , 0.322834  ],\n         [0.51139134, 0.58297956, 0.3535199 , 0.33869565],\n         ...,\n         [0.24297228, 0.22476894, 0.19499694, 0.06407426],\n         [0.8418827 , 0.45092413, 0.23437083, 0.17301911],\n         [0.2146239 , 0.45545146, 0.3333916 , 0.17655426]],\n \n        [[0.5380111 , 0.484165  , 0.45107526, 0.32481048],\n         [0.76691204, 0.7155845 , 0.4536848 , 0.55417633],\n         [0.32209772, 0.16819167, 0.6263038 , 0.28487253],\n         ...,\n         [0.76555896, 0.71188843, 0.45694953, 0.5543519 ],\n         [0.62886554, 0.5600328 , 0.7001488 , 0.5436553 ],\n         [0.49478382, 0.55562115, 0.98022664, 0.64904714]],\n \n        [[0.37736952, 0.6573032 , 0.21994463, 0.22246152],\n         [0.49180257, 0.556361  , 0.16773668, 0.12895775],\n         [0.63584465, 0.5413147 , 0.61730754, 0.4795579 ],\n         ...,\n         [0.9182874 , 0.43726754, 0.14964253, 0.15215003],\n         [0.94384176, 0.667265  , 0.05153108, 0.03363872],\n         [0.97543657, 0.7847303 , 0.05338055, 0.08436614]]],\n       shape=(16, 300, 4), dtype=float32),\n array([[[ 0.24285345, -0.2641557 ,  0.53456694, ...,  0.01371495,\n           0.20117192,  0.00680937],\n         [ 0.2480309 ,  0.02151594,  0.43029234, ..., -0.10804108,\n           0.01865323,  0.2821907 ],\n         [ 0.338177  ,  0.11367877,  0.23462811, ..., -0.22400075,\n          -0.12471264,  0.1072519 ],\n         ...,\n         [ 0.08497868,  0.11832837,  0.13796747, ..., -0.20875415,\n          -0.17192465,  0.04870843],\n         [ 0.05827583,  0.10911549,  0.22537354, ..., -0.19258043,\n          -0.11425123,  0.05379751],\n         [-0.08602207,  0.10852978,  0.0798173 , ..., -0.14906336,\n          -0.01291162,  0.06298564]],\n \n        [[-0.14510442,  0.06600592,  0.44533458, ..., -0.0807004 ,\n           0.05484529, -0.22571605],\n         [-0.17814584,  0.07724223,  0.33166033, ..., -0.08472167,\n           0.02815802, -0.21188496],\n         [-0.29571027,  0.09831075,  0.6596735 , ..., -0.06315583,\n           0.17973462, -0.03385185],\n         ...,\n         [ 0.14033696,  0.19809967,  0.16589892, ..., -0.11436818,\n          -0.08485186,  0.09617981],\n         [ 0.14274403,  0.08176141,  0.03018227, ..., -0.06182322,\n          -0.09940271,  0.0690429 ],\n         [ 0.18077214,  0.20563965,  0.15512244, ..., -0.15715694,\n          -0.07458185,  0.09734212]],\n \n        [[-0.0485738 ,  0.1541235 ,  0.6067764 , ..., -0.04563098,\n           0.02754567, -0.13932592],\n         [ 0.23497276,  0.21601574,  0.1736818 , ..., -0.23416784,\n          -0.08689254, -0.02306984],\n         [ 0.14233929,  0.2168207 ,  0.11093393, ..., -0.23220702,\n          -0.09274653,  0.10210264],\n         ...,\n         [ 0.14828166,  0.15734798,  0.19189698, ..., -0.16572611,\n          -0.10298191,  0.17045276],\n         [ 0.14828166,  0.15734798,  0.19189698, ..., -0.16572611,\n          -0.10298191,  0.17045276],\n         [ 0.14828166,  0.15734798,  0.19189698, ..., -0.16572611,\n          -0.10298191,  0.17045276]],\n \n        ...,\n \n        [[ 0.15623587,  0.10679774, -0.00737302, ..., -0.11753798,\n          -0.15763211, -0.15443772],\n         [-0.03305566,  0.11588601,  0.12817131, ..., -0.1435668 ,\n          -0.0870205 ,  0.01003871],\n         [ 0.17716871,  0.11887954,  0.00890628, ..., -0.12046912,\n          -0.16876721, -0.14127682],\n         ...,\n         [-0.03599224,  0.10896975,  0.2279199 , ..., -0.14196654,\n          -0.04104622,  0.06801248],\n         [ 0.04884023,  0.15204494,  0.18540546, ..., -0.19535291,\n          -0.1136702 , -0.00133895],\n         [-0.09253126,  0.10492051,  0.12860091, ..., -0.13711974,\n          -0.05219387,  0.02957059]],\n \n        [[ 0.29461217,  0.11802009,  0.18706623, ..., -0.15413024,\n           0.45256478,  0.32497922],\n         [ 0.14402984,  0.0471595 ,  0.02903484, ..., -0.08581223,\n          -0.03061111,  0.05406183],\n         [ 0.18641166,  0.12888339, -0.00565732, ..., -0.16721645,\n          -0.15563546,  0.08396186],\n         ...,\n         [ 0.28305432,  0.07275362,  0.0799599 , ..., -0.0913933 ,\n          -0.19745368,  0.02558149],\n         [ 0.03362151,  0.0611568 ,  0.02899398, ...,  0.0197739 ,\n          -0.25161853,  0.18148845],\n         [ 0.14037174,  0.1274019 ,  0.04628849, ..., -0.14746843,\n          -0.10551445,  0.07939707]],\n \n        [[ 0.1685055 ,  0.01540156,  0.3224407 , ..., -0.05476125,\n          -0.03363403,  0.13020489],\n         [ 0.4329116 , -0.12695615,  0.4269503 , ...,  0.01515082,\n           0.17030516,  0.00347774],\n         [ 0.35302198,  0.19847713,  0.19256093, ..., -0.25775987,\n          -0.09648485,  0.07367361],\n         ...,\n         [ 0.19845927,  0.11350634,  0.06548796, ..., -0.01585859,\n          -0.23830631,  0.16066618],\n         [ 0.2635512 ,  0.13001563,  0.08320703, ..., -0.19659261,\n          -0.13038902,  0.06465074],\n         [ 0.19171862,  0.18799265,  0.09274627, ..., -0.26548624,\n          -0.12920144,  0.06552397]]], shape=(16, 300, 256), dtype=float32),\n array([[[[-4.76741344e-01, -4.06136326e-02, -1.25697815e+00, ...,\n           -3.66088212e-01,  4.18911785e-01,  1.61347553e-01],\n          [-6.34591520e-01, -1.71836823e-01, -4.23019052e-01, ...,\n           -3.68930399e-01,  2.90650815e-01, -2.07596943e-02],\n          [ 2.08830088e-01, -2.42218614e-01, -3.39606792e-01, ...,\n           -4.83911753e-01, -3.51163536e-01, -1.56948030e-01],\n          ...,\n          [ 7.98502028e-01,  1.40863717e-01, -7.34261394e-01, ...,\n           -1.84432030e-01, -8.20425600e-02,  1.26802838e+00],\n          [ 2.04023734e-01, -3.61791879e-01, -1.01312590e+00, ...,\n            9.69035625e-02,  3.64042193e-01,  1.11104393e+00],\n          [-3.20032015e-02, -1.76256642e-01, -9.41070318e-01, ...,\n           -3.08403432e-01,  8.80084485e-02,  8.97991121e-01]],\n \n         [[-4.68598992e-01, -3.82118732e-01, -5.08608580e-01, ...,\n           -7.45363891e-01,  4.39354986e-01,  9.63542402e-01],\n          [-4.07486439e-01, -1.39314041e-01, -3.69712025e-01, ...,\n           -6.59871101e-01,  5.57676554e-01,  9.37280893e-01],\n          [-4.91397411e-01, -6.65868819e-01, -3.92658144e-01, ...,\n           -2.87891448e-01,  2.08091944e-01,  5.96250713e-01],\n          ...,\n          [ 4.09336865e-01,  5.63835502e-01, -9.95790839e-01, ...,\n           -4.54876721e-01,  7.28283310e-03,  5.43894768e-01],\n          [ 6.33931875e-01,  3.27538878e-01, -1.31903088e+00, ...,\n           -2.26032704e-01,  1.73082918e-01,  1.27005017e+00],\n          [ 5.30842915e-02,  6.47486246e-04, -7.17901707e-01, ...,\n           -4.72822636e-01,  2.09451169e-01,  1.05283678e+00]],\n \n         [[-4.45329249e-01,  2.35778898e-01, -5.47868073e-01, ...,\n           -7.71782219e-01,  5.33783078e-01, -1.89612940e-01],\n          [ 4.07447726e-01, -1.80907607e-01, -5.51143050e-01, ...,\n           -2.62276798e-01, -3.58128190e-01,  5.74966073e-01],\n          [ 4.72312748e-01, -1.93068996e-01, -6.80280924e-01, ...,\n           -2.43735820e-01, -2.19686627e-01,  8.45353007e-01],\n          ...,\n          [ 4.66999143e-01,  4.88212071e-02, -8.59274685e-01, ...,\n           -5.80385029e-01, -6.03449084e-02,  1.34215295e+00],\n          [ 4.66999143e-01,  4.88212071e-02, -8.59274685e-01, ...,\n           -5.80385029e-01, -6.03449084e-02,  1.34215295e+00],\n          [ 4.66999143e-01,  4.88212071e-02, -8.59274685e-01, ...,\n           -5.80385029e-01, -6.03449084e-02,  1.34215295e+00]],\n \n         ...,\n \n         [[ 3.13835710e-01, -1.31600171e-01, -3.69296104e-01, ...,\n           -3.01843077e-01, -3.80229741e-01,  2.68626094e-01],\n          [ 2.12428391e-01, -1.40806392e-01, -6.16956353e-01, ...,\n           -3.06219399e-01, -8.96477103e-02,  2.90498197e-01],\n          [ 4.82165188e-01, -2.20470056e-01, -5.59211552e-01, ...,\n           -1.87266618e-01, -1.58878103e-01,  6.16724789e-01],\n          ...,\n          [ 5.90405405e-01,  1.74480334e-01, -6.80655956e-01, ...,\n           -2.07069576e-01,  3.68018180e-01,  9.87114012e-01],\n          [ 3.84931564e-01,  8.06871355e-02, -1.04439402e+00, ...,\n           -2.62123585e-01,  5.05521670e-02,  1.57946396e+00],\n          [ 3.79853874e-01,  3.48122716e-01, -8.99211764e-01, ...,\n           -8.13180283e-02,  4.10150558e-01,  3.99191618e-01]],\n \n         [[-6.20324254e-01,  6.85365051e-02, -1.45461464e+00, ...,\n           -7.61510372e-01,  6.15017295e-01,  5.18879771e-01],\n          [-4.27902222e-01, -4.34871078e-01, -5.22933245e-01, ...,\n           -2.58032709e-01,  4.17411655e-01, -1.35769188e-01],\n          [ 2.79852360e-01,  7.73962736e-02, -1.44673780e-01, ...,\n           -4.27251250e-01, -4.01029468e-01,  8.23112249e-01],\n          ...,\n          [ 2.68711150e-01, -3.94878685e-01, -6.96091950e-01, ...,\n           -3.24778408e-01, -6.71746731e-02,  8.83164763e-01],\n          [ 5.38824737e-01, -1.05055258e-01, -7.96146870e-01, ...,\n           -6.96749659e-03,  3.56347978e-01,  5.47143340e-01],\n          [ 2.69503057e-01, -6.28438175e-01, -6.10512912e-01, ...,\n           -8.12616423e-02, -2.19402760e-01,  1.34705031e+00]],\n \n         [[-6.06789112e-01,  8.57453346e-02, -3.38767797e-01, ...,\n           -4.90742534e-01,  1.08636051e-01,  1.64260715e-02],\n          [-3.85554105e-01, -5.20290673e-01, -1.12540209e+00, ...,\n           -1.91772595e-01,  7.90612936e-01,  7.45731592e-01],\n          [ 4.64203179e-01,  5.56886941e-02, -9.04556990e-01, ...,\n           -6.31787837e-01,  9.44883376e-03,  8.13956380e-01],\n          ...,\n          [ 6.82015598e-01, -4.28247869e-01, -1.00203872e+00, ...,\n           -4.03605938e-01, -3.45302783e-02,  1.25277901e+00],\n          [ 1.81551561e-01, -3.52297761e-02, -8.16026330e-01, ...,\n           -2.68142313e-01, -2.98315138e-02,  1.04104984e+00],\n          [ 6.73173517e-02, -1.29492298e-01, -7.84081340e-01, ...,\n           -6.55496716e-02, -1.60660163e-01,  8.25410068e-01]]],\n \n \n        [[[-9.26711738e-01, -4.35341656e-01,  1.92317560e-01, ...,\n            1.51612735e+00,  1.44305244e-01,  6.10052824e-01],\n          [-2.44951501e-01, -1.12836942e-01,  4.73727554e-01, ...,\n           -3.84450883e-01,  1.52828708e-01,  2.09612131e-01],\n          [-5.76847792e-01,  3.83410156e-01, -2.15456232e-01, ...,\n            6.52009487e-01, -2.23492920e-01, -3.59436780e-01],\n          ...,\n          [-3.94340903e-01,  5.06941020e-01, -7.29672685e-02, ...,\n           -5.59236825e-01,  7.20481813e-01,  7.18197167e-01],\n          [ 1.26422169e-02, -5.13929389e-02,  4.61692773e-02, ...,\n           -7.91362345e-01, -1.82229221e-01,  5.85971534e-01],\n          [-1.02558982e+00,  3.65451723e-01,  1.60422832e-01, ...,\n           -9.08909678e-01, -2.93271273e-01,  7.01579809e-01]],\n \n         [[-4.38303828e-01, -1.69214189e-01, -5.84973812e-01, ...,\n            1.51078689e+00, -3.12149167e-01,  1.61490917e+00],\n          [-4.99305844e-01, -2.90374964e-01, -7.86045268e-02, ...,\n            1.06239045e+00, -7.28206486e-02,  1.38337123e+00],\n          [-4.93812442e-01, -3.79412353e-01, -2.19983280e-01, ...,\n            6.05084784e-02, -2.74734557e-01,  4.68126327e-01],\n          ...,\n          [-2.77150154e-01,  1.10232782e+00,  2.97799945e-01, ...,\n           -1.22950006e+00, -2.03053001e-02,  8.13674927e-01],\n          [-1.04763556e+00,  1.01319861e+00,  1.31207955e+00, ...,\n           -1.42189920e+00,  3.37914601e-02,  8.79057527e-01],\n          [-1.39201295e+00,  8.67732286e-01, -4.90523189e-01, ...,\n           -6.22404628e-02,  4.70378697e-01,  5.14267623e-01]],\n \n         [[-5.30845940e-01,  1.45575076e-01, -3.56603473e-01, ...,\n            7.27594912e-01,  9.65879261e-01,  1.89536557e-01],\n          [-2.13459834e-01,  6.67980492e-01, -1.11055374e+00, ...,\n            3.49376410e-01,  1.00102052e-01,  1.90114260e-01],\n          [-5.07502675e-01,  3.67661297e-01, -8.77068758e-01, ...,\n            1.74884945e-01,  4.34238642e-01,  7.64899969e-01],\n          ...,\n          [-1.22404647e+00,  1.83602184e-01,  3.68126988e-01, ...,\n           -1.18689501e+00,  6.83324695e-01,  1.55896187e+00],\n          [-1.22404647e+00,  1.83602184e-01,  3.68126988e-01, ...,\n           -1.18689501e+00,  6.83324695e-01,  1.55896187e+00],\n          [-1.22404647e+00,  1.83602184e-01,  3.68126988e-01, ...,\n           -1.18689501e+00,  6.83324695e-01,  1.55896187e+00]],\n \n         ...,\n \n         [[-5.98763049e-01,  4.74326223e-01, -5.17092586e-01, ...,\n            7.02652574e-01,  7.34262243e-02,  1.08492307e-01],\n          [-6.41171575e-01, -1.60418704e-01, -1.15687060e+00, ...,\n            9.32788968e-01, -4.43597175e-02,  5.14461026e-02],\n          [-5.48308015e-01,  2.49208033e-01, -6.49310768e-01, ...,\n            8.27152848e-01,  2.98389018e-01,  1.49344549e-01],\n          ...,\n          [-6.66085124e-01,  1.98097199e-01,  3.97709608e-01, ...,\n           -6.53846562e-01,  2.12433562e-01,  9.62586403e-01],\n          [-8.06783974e-01,  8.96776617e-01, -4.75352854e-02, ...,\n           -1.05954158e+00,  1.19925983e-01,  7.85734713e-01],\n          [-1.29718721e+00,  9.38798606e-01,  8.93226326e-01, ...,\n           -1.00146723e+00,  1.14988871e-01,  7.70343721e-01]],\n \n         [[-3.07683408e-01,  2.12804615e-01, -1.90410629e-01, ...,\n            1.34339583e+00,  2.33635753e-01,  1.49866354e+00],\n          [ 2.97236145e-02, -9.97016132e-02, -4.02240574e-01, ...,\n           -1.51995912e-01,  2.18708292e-01,  5.26233912e-02],\n          [-1.55822945e+00,  5.89496195e-01, -4.17500198e-01, ...,\n           -2.81871676e-01,  3.92946869e-01,  1.06690931e+00],\n          ...,\n          [-8.31062794e-01,  4.50947374e-01, -2.79587746e-01, ...,\n            6.71366602e-03,  5.02942443e-01,  9.14513841e-02],\n          [-1.30790877e+00,  4.50475395e-01, -4.19423401e-01, ...,\n           -5.84508777e-01,  2.29081988e-01,  7.04221785e-01],\n          [-9.73574817e-01,  1.73422351e-01, -9.65172589e-01, ...,\n           -5.98200746e-02,  5.46600580e-01,  1.03947496e+00]],\n \n         [[-3.72571230e-01, -9.94251221e-02,  1.52135625e-01, ...,\n           -7.75470912e-01,  1.78835303e-01,  4.87162054e-01],\n          [-7.30867267e-01, -3.35753672e-02, -3.47691774e-01, ...,\n            1.41657710e+00, -2.38283783e-01,  2.43361294e-01],\n          [-1.71047831e+00,  3.36163133e-01, -1.08768880e-01, ...,\n           -3.61517757e-01,  7.06803441e-01,  9.22103226e-01],\n          ...,\n          [-3.26000959e-01,  2.15532914e-01, -4.88453582e-02, ...,\n           -1.15502462e-01,  1.84157461e-01,  5.41640043e-01],\n          [-7.24331260e-01,  2.25214148e-03,  3.32309335e-01, ...,\n           -1.08251905e+00,  6.18431866e-02,  1.99073002e-01],\n          [-8.58326614e-01, -1.86852425e-01,  1.29133388e-01, ...,\n           -1.45433688e+00,  3.04528624e-01,  3.43632460e-01]]],\n \n \n        [[[-2.18894675e-01, -4.26262133e-02, -2.43160263e-01, ...,\n            8.44115078e-01, -3.43465358e-01, -2.62268096e-01],\n          [-2.52296507e-01,  2.01157436e-01, -3.86446854e-03, ...,\n            9.50952649e-01, -8.57427895e-01, -1.77979976e-01],\n          [-7.19548821e-01, -7.55887479e-02,  4.94112134e-01, ...,\n            6.65445507e-01,  3.21241528e-01,  5.31711161e-01],\n          ...,\n          [-6.73784435e-01,  2.07471978e-02,  5.42267501e-01, ...,\n           -3.45518231e-01,  6.21569216e-01,  8.45168114e-01],\n          [-7.58253038e-01,  1.15624949e-01,  2.80197471e-01, ...,\n           -9.15596664e-01,  6.44419611e-01,  8.29395592e-01],\n          [-6.24666214e-01,  2.95492709e-01,  1.33091718e-01, ...,\n           -5.90442598e-01,  2.28381753e-01,  1.27043784e+00]],\n \n         [[-1.24336636e+00, -3.64149362e-02,  3.37641746e-01, ...,\n            4.91282374e-01, -4.35599774e-01,  5.93303978e-01],\n          [-9.07166481e-01, -2.55178601e-01,  2.35379741e-01, ...,\n            4.89295535e-02, -2.76400864e-01,  3.67712468e-01],\n          [-4.77161646e-01,  1.08921565e-01, -6.08248264e-02, ...,\n           -1.22700766e-01, -2.79704571e-01,  6.68144405e-01],\n          ...,\n          [-4.11540657e-01,  6.33265316e-01,  7.78478920e-01, ...,\n           -6.88155532e-01,  7.20727146e-01,  1.18135810e+00],\n          [-6.78614140e-01,  4.48519140e-01,  1.30067155e-01, ...,\n           -5.47706485e-01,  3.31834137e-01,  1.11372387e+00],\n          [-1.19302106e+00,  1.64120853e-01, -1.12740941e-01, ...,\n           -2.11440697e-01,  4.10473913e-01,  1.22284544e+00]],\n \n         [[-2.93601006e-01, -2.95625746e-01,  2.22466648e-01, ...,\n           -1.57083556e-01,  3.09112787e-01,  1.28629401e-01],\n          [-7.99238324e-01,  4.76671010e-02,  4.48609948e-01, ...,\n            7.63480127e-01,  7.01514959e-01,  6.98256254e-01],\n          [-7.18569100e-01,  1.34503007e-01,  4.38805163e-01, ...,\n            5.76645911e-01,  7.62102664e-01,  9.02704358e-01],\n          ...,\n          [-7.40071237e-01, -3.69541138e-01,  2.63063073e-01, ...,\n           -6.58716321e-01,  9.25351977e-01,  1.32367146e+00],\n          [-7.40071237e-01, -3.69541138e-01,  2.63063073e-01, ...,\n           -6.58716321e-01,  9.25351977e-01,  1.32367146e+00],\n          [-7.40071237e-01, -3.69541138e-01,  2.63063073e-01, ...,\n           -6.58716321e-01,  9.25351977e-01,  1.32367146e+00]],\n \n         ...,\n \n         [[-5.91618598e-01,  9.17692259e-02,  2.50998259e-01, ...,\n            6.03110015e-01,  5.35656691e-01,  4.32984352e-01],\n          [ 2.74072379e-01,  7.35660940e-02,  1.02719832e-02, ...,\n           -3.92340906e-02, -3.89054060e-01, -4.71334130e-01],\n          [-6.38677001e-01,  1.10406578e-01,  4.16380465e-01, ...,\n            6.84192240e-01,  6.08159781e-01,  5.66385090e-01],\n          ...,\n          [-5.92238486e-01,  1.06705148e-02,  6.45511866e-01, ...,\n           -7.42095888e-01,  2.14380383e-01,  1.03869140e+00],\n          [-5.83347857e-01,  3.24544400e-01,  4.11565244e-01, ...,\n           -7.17610002e-01,  3.04508477e-01,  1.08987939e+00],\n          [-5.36964953e-01,  5.74918151e-01,  1.97811872e-02, ...,\n           -4.73859698e-01,  4.65430729e-02,  7.00384021e-01]],\n \n         [[-1.96085405e-02, -1.17654085e-01, -8.28452885e-01, ...,\n            1.13019669e+00,  7.66552091e-01,  2.73120463e-01],\n          [-2.00087175e-01, -1.00435346e-01,  3.69155079e-01, ...,\n            7.20052660e-01, -6.77871048e-01, -2.97813825e-02],\n          [-1.02077043e+00,  7.62527213e-02,  1.71428338e-01, ...,\n           -3.55053931e-01,  6.77932739e-01,  1.02244580e+00],\n          ...,\n          [-7.86454797e-01,  9.30050984e-02,  9.37829316e-01, ...,\n            5.10230482e-01,  1.28501102e-01,  3.47984135e-01],\n          [-9.41480875e-01, -5.84696466e-03,  2.16944411e-01, ...,\n           -1.88568398e-01,  4.87069190e-01,  7.59329855e-01],\n          [-7.66130209e-01, -1.74350485e-01,  3.28454107e-01, ...,\n            3.61572206e-01,  1.76381841e-01,  1.04165006e+00]],\n \n         [[-7.51237929e-01,  1.80879653e-01,  3.19826752e-01, ...,\n            6.19294882e-01, -1.04161322e+00, -1.05794678e-02],\n          [-8.26069176e-01,  3.86495680e-01, -2.93352623e-02, ...,\n            6.86816692e-01, -4.85957295e-01,  2.91865319e-01],\n          [-8.12242031e-01, -1.48847103e-01, -1.27159864e-01, ...,\n            5.51212847e-01,  5.85010409e-01,  7.00903058e-01],\n          ...,\n          [-4.69747990e-01,  2.98429072e-01,  9.35527563e-01, ...,\n           -6.91706836e-01,  2.34657645e-01,  1.17981064e+00],\n          [-5.47001898e-01,  4.63956475e-01,  4.72834140e-01, ...,\n           -5.96745349e-02,  5.37386596e-01,  8.99985552e-01],\n          [-3.29141974e-01,  6.59720898e-02,  4.30431157e-01, ...,\n           -8.63276049e-02,  8.86917055e-01,  1.06378055e+00]]],\n \n \n        [[[ 4.86940920e-01, -5.16505957e-01, -4.32866812e-01, ...,\n            6.69043064e-01,  3.85470748e-01, -1.57538295e-01],\n          [-3.08436692e-01, -8.80519688e-01,  3.34828556e-01, ...,\n            7.73993731e-01, -3.65230255e-02,  5.37732244e-01],\n          [ 6.46349430e-01, -2.01884478e-01,  6.52592033e-02, ...,\n            6.40317023e-01, -1.40410557e-01,  1.10234328e-01],\n          ...,\n          [ 1.86420903e-01, -4.24872249e-01, -3.00320357e-01, ...,\n            3.04156810e-01,  2.30762661e-02, -3.19732487e-01],\n          [-2.70651698e-01, -3.91113937e-01, -3.14045042e-01, ...,\n            8.90186708e-03,  1.64120093e-01, -4.46135610e-01],\n          [-2.25685328e-01, -3.84333104e-01, -5.40752895e-02, ...,\n            2.13137090e-01,  1.85019121e-01, -3.43854390e-02]],\n \n         [[-6.05015099e-01, -5.20256877e-01,  6.30742684e-02, ...,\n            2.15690538e-01,  3.71899694e-01,  1.08751106e+00],\n          [-5.86854756e-01, -7.30248511e-01,  8.99533033e-02, ...,\n            2.59289145e-01,  4.71266925e-01,  1.11711967e+00],\n          [ 5.06562665e-02, -4.91987556e-01, -4.96789627e-02, ...,\n           -1.22120529e-01, -2.48687938e-02,  8.98443282e-01],\n          ...,\n          [ 2.85713851e-01, -9.24253315e-02,  3.06368899e-02, ...,\n           -1.85532734e-01,  2.79617965e-01, -1.54230982e-01],\n          [ 1.01588331e-01, -5.97420096e-01, -8.14337060e-02, ...,\n           -6.50852919e-01,  9.74875540e-02,  2.52101779e-01],\n          [ 2.38838643e-01, -3.20601285e-01, -4.97846156e-01, ...,\n            1.58489704e-01,  2.81170495e-02, -4.49991554e-01]],\n \n         [[ 1.85519420e-02,  2.72445053e-01,  5.35561144e-01, ...,\n            4.56378430e-01,  1.01708114e+00,  2.61254609e-01],\n          [ 8.36685002e-01, -1.33375689e-01, -1.15999378e-01, ...,\n            5.57085395e-01, -1.79594845e-01, -1.01855993e-01],\n          [ 3.21043313e-01, -1.32863939e-01, -1.51847348e-01, ...,\n            1.19673692e-01, -8.34551275e-01, -4.61478770e-01],\n          ...,\n          [-1.93480790e-01,  2.41303016e-02,  2.48652510e-02, ...,\n           -1.46722868e-02,  5.73541075e-02,  8.70433152e-02],\n          [-1.93480790e-01,  2.41303016e-02,  2.48652510e-02, ...,\n           -1.46722868e-02,  5.73541075e-02,  8.70433152e-02],\n          [-1.93480790e-01,  2.41303016e-02,  2.48652510e-02, ...,\n           -1.46722868e-02,  5.73541075e-02,  8.70433152e-02]],\n \n         ...,\n \n         [[ 7.90532887e-01, -1.65799230e-01, -1.73100695e-01, ...,\n            5.05071402e-01,  1.45208120e-01, -7.33769611e-02],\n          [-2.14420155e-01, -5.61829746e-01,  3.89433652e-01, ...,\n           -2.51145154e-01, -5.06330490e-01, -3.64619009e-02],\n          [ 7.42975712e-01, -9.90038738e-02, -1.43598706e-01, ...,\n            5.47871768e-01,  1.30146131e-01, -1.33740231e-01],\n          ...,\n          [-8.46346468e-02, -1.39083773e-01,  4.15968262e-02, ...,\n            1.74655944e-01, -7.66133815e-02, -1.10803187e-01],\n          [ 4.32379842e-02, -3.17445546e-02, -2.02838913e-01, ...,\n            1.19688757e-01,  6.58839270e-02, -5.29557884e-01],\n          [ 3.39966953e-01, -3.02209347e-01, -4.24848571e-02, ...,\n            6.02962524e-02,  1.61392000e-02, -2.32849509e-01]],\n \n         [[ 3.96225244e-01, -3.09501678e-01, -6.78672254e-01, ...,\n            1.00192893e+00,  7.19690025e-01, -4.49955106e-01],\n          [-3.64580244e-01, -8.68156970e-01, -2.79968590e-01, ...,\n            2.60789067e-01,  2.42516641e-02,  2.22505808e-01],\n          [ 1.87644541e-01, -6.41693532e-01, -3.61906886e-01, ...,\n           -8.13877732e-02, -2.86107510e-01,  7.99614787e-02],\n          ...,\n          [ 5.05599082e-01, -2.01639205e-01, -2.47446552e-01, ...,\n            3.79622430e-01, -1.60233557e-01, -1.44834623e-01],\n          [-1.03143610e-01, -4.27200049e-01, -3.27560127e-01, ...,\n           -3.09961051e-01, -8.06322396e-02, -8.55683833e-02],\n          [ 4.26927209e-01, -2.14477971e-01, -3.47229183e-01, ...,\n            4.53013688e-01, -1.26638919e-01, -1.22512281e-01]],\n \n         [[-2.88879097e-01, -6.76042438e-01,  3.18130791e-01, ...,\n            2.13025123e-01, -2.65274078e-01,  6.05593771e-02],\n          [ 7.54696429e-01, -4.51278478e-01, -3.79297435e-01, ...,\n            3.97994608e-01,  7.04216063e-02,  1.57497630e-01],\n          [ 5.19662499e-01, -2.49248371e-01, -3.24550807e-01, ...,\n            4.50797379e-01, -1.45673379e-01, -2.21878603e-01],\n          ...,\n          [-5.63715287e-02, -6.98496461e-01, -3.31729233e-01, ...,\n           -3.19226444e-01, -1.61417574e-02, -2.73882568e-01],\n          [ 5.44120818e-02,  2.48603523e-01, -2.51123607e-01, ...,\n            4.00830954e-02, -1.39148161e-01, -5.37589371e-01],\n          [ 2.12285429e-01,  1.28579140e-01, -3.67196769e-01, ...,\n            5.22776023e-02, -1.34251388e-02, -6.05625629e-01]]],\n \n \n        [[[-4.53104317e-01, -3.70890647e-01,  7.89427340e-01, ...,\n            2.40248963e-01,  3.86892408e-01, -2.42728025e-01],\n          [-6.69697970e-02,  4.21733439e-01,  2.89877713e-01, ...,\n            2.40307927e-01, -1.06256761e-01, -1.55990496e-02],\n          [ 1.11617940e-02, -1.34298980e-01, -4.06546779e-02, ...,\n            2.83286031e-02,  5.33655807e-02,  1.19867429e-01],\n          ...,\n          [ 4.12113555e-02, -4.84519638e-02, -4.69669998e-02, ...,\n            1.08188152e-01, -4.97152135e-02,  9.64265987e-02],\n          [-1.72965690e-01, -1.81945100e-01, -1.61095738e-01, ...,\n           -2.43544597e-02,  1.82521850e-01,  4.32917736e-02],\n          [-8.89936909e-02, -1.04555376e-01, -2.11857334e-01, ...,\n            1.44391358e-01,  1.85330302e-01,  2.51852900e-01]],\n \n         [[-3.72194827e-01, -1.11239247e-01,  4.24924254e-01, ...,\n            5.65130889e-01, -1.47642449e-01, -6.28162995e-02],\n          [-2.88194656e-01, -1.15492530e-01,  2.68881351e-01, ...,\n            5.14175951e-01, -2.13863745e-01, -5.56551367e-02],\n          [ 9.82035622e-02, -2.93325275e-01,  3.55106294e-01, ...,\n            7.80263618e-02,  2.73349792e-01,  2.24263415e-01],\n          ...,\n          [ 4.09386531e-02, -1.01725519e-01, -3.29049021e-01, ...,\n            4.58955728e-02,  1.49403259e-01,  5.19351602e-01],\n          [ 3.21949497e-02, -1.55560956e-05, -7.37060979e-02, ...,\n           -3.56684327e-01,  1.71289012e-01,  5.69938004e-01],\n          [ 7.95707554e-02, -1.49023696e-03, -2.45731175e-01, ...,\n            3.01959723e-01,  1.29084647e-01,  5.59072256e-01]],\n \n         [[-6.29803240e-01,  9.71944481e-02,  8.10866058e-01, ...,\n            1.93900540e-01,  1.71646506e-01, -1.25284836e-01],\n          [-1.08310141e-01,  6.52368888e-02, -2.19935268e-01, ...,\n           -1.93603501e-01,  6.33234829e-02,  2.53637642e-01],\n          [-3.72331329e-02, -9.92493257e-02, -1.78732067e-01, ...,\n           -3.00537556e-01, -5.10797538e-02,  3.55761588e-01],\n          ...,\n          [-7.65888169e-02, -8.50273371e-02, -3.08025926e-01, ...,\n           -8.51409808e-02,  5.47248945e-02,  3.96244764e-01],\n          [-7.65888169e-02, -8.50273371e-02, -3.08025926e-01, ...,\n           -8.51409808e-02,  5.47248945e-02,  3.96244764e-01],\n          [-7.65888169e-02, -8.50273371e-02, -3.08025926e-01, ...,\n           -8.51409808e-02,  5.47248945e-02,  3.96244764e-01]],\n \n         ...,\n \n         [[-2.06185266e-01, -1.33049831e-01, -1.06731772e-01, ...,\n           -1.72110394e-01,  2.14742795e-01,  1.57415584e-01],\n          [ 3.86116281e-02,  1.81677788e-02,  1.51041031e-01, ...,\n            3.45064223e-01,  2.12171465e-01,  3.34996022e-02],\n          [-1.70259699e-01, -1.03713542e-01, -1.01091839e-01, ...,\n           -7.57889822e-02,  1.71763524e-01,  1.98852316e-01],\n          ...,\n          [-3.42194140e-01, -1.41951665e-02, -1.57565951e-01, ...,\n            5.53439651e-03,  1.68358639e-01,  1.79664537e-01],\n          [-2.19410762e-01,  1.33718848e-02, -2.47694552e-01, ...,\n            4.25293520e-02,  2.26121575e-01,  3.32894117e-01],\n          [-8.49550962e-02, -4.91022132e-02, -5.63020147e-02, ...,\n            5.32324500e-02,  2.36446977e-01,  1.70600951e-01]],\n \n         [[-5.20886302e-01, -2.18982771e-01,  3.25637758e-01, ...,\n            2.34371722e-01,  2.93822557e-01, -3.33399065e-02],\n          [ 1.11997910e-01,  3.55805814e-01, -3.30670923e-01, ...,\n            9.84980538e-02, -2.34514877e-01,  8.87819901e-02],\n          [-8.24545920e-02,  1.10158492e-02, -2.40751296e-01, ...,\n           -1.00525483e-01,  1.39931351e-01,  5.19331992e-01],\n          ...,\n          [-6.32848069e-02,  9.69847813e-02, -2.19353065e-01, ...,\n            5.08888578e-03,  3.80931683e-02,  2.58730978e-01],\n          [-2.83238471e-01, -1.02213763e-01, -2.82007843e-01, ...,\n           -2.25375742e-01, -3.75073473e-03,  2.70050108e-01],\n          [-1.87416542e-02,  8.26828256e-02, -3.19077581e-01, ...,\n            1.81533560e-01,  7.08912686e-02,  2.53758460e-01]],\n \n         [[-1.05307281e-01,  3.55575353e-01,  3.05202931e-01, ...,\n            1.74480662e-01, -1.96423516e-01,  2.45015621e-01],\n          [-3.61955166e-01, -3.26703727e-01,  7.04563379e-01, ...,\n            5.52404597e-02,  3.13740909e-01, -1.95362680e-02],\n          [-7.45548159e-02,  8.42850208e-02, -1.73598409e-01, ...,\n            4.09645680e-03, -6.12226576e-02,  2.45556846e-01],\n          ...,\n          [-2.70747960e-01, -6.94981515e-02, -4.30822492e-01, ...,\n            7.08853379e-02,  8.27906560e-03,  5.18586278e-01],\n          [-1.00900136e-01, -7.12319165e-02, -4.93350387e-01, ...,\n            1.69234097e-01,  1.07667543e-01,  3.96169335e-01],\n          [ 2.86481101e-02, -8.92186165e-02, -7.00960040e-01, ...,\n            1.20989501e-01,  1.29267871e-01,  6.08885527e-01]]],\n \n \n        [[[ 2.42853448e-01, -2.64155686e-01,  5.34566939e-01, ...,\n            1.37149533e-02,  2.01171920e-01,  6.80936594e-03],\n          [ 2.48030901e-01,  2.15159412e-02,  4.30292338e-01, ...,\n           -1.08041078e-01,  1.86532270e-02,  2.82190710e-01],\n          [ 3.38176996e-01,  1.13678768e-01,  2.34628111e-01, ...,\n           -2.24000752e-01, -1.24712639e-01,  1.07251897e-01],\n          ...,\n          [ 8.49786773e-02,  1.18328370e-01,  1.37967467e-01, ...,\n           -2.08754152e-01, -1.71924651e-01,  4.87084277e-02],\n          [ 5.82758337e-02,  1.09115489e-01,  2.25373536e-01, ...,\n           -1.92580432e-01, -1.14251226e-01,  5.37975058e-02],\n          [-8.60220715e-02,  1.08529776e-01,  7.98173025e-02, ...,\n           -1.49063364e-01, -1.29116187e-02,  6.29856363e-02]],\n \n         [[-1.45104423e-01,  6.60059229e-02,  4.45334584e-01, ...,\n           -8.07003975e-02,  5.48452921e-02, -2.25716054e-01],\n          [-1.78145841e-01,  7.72422254e-02,  3.31660330e-01, ...,\n           -8.47216696e-02,  2.81580184e-02, -2.11884961e-01],\n          [-2.95710266e-01,  9.83107537e-02,  6.59673512e-01, ...,\n           -6.31558299e-02,  1.79734617e-01, -3.38518471e-02],\n          ...,\n          [ 1.40336961e-01,  1.98099673e-01,  1.65898919e-01, ...,\n           -1.14368178e-01, -8.48518610e-02,  9.61798131e-02],\n          [ 1.42744035e-01,  8.17614123e-02,  3.01822722e-02, ...,\n           -6.18232153e-02, -9.94027108e-02,  6.90428987e-02],\n          [ 1.80772141e-01,  2.05639645e-01,  1.55122444e-01, ...,\n           -1.57156944e-01, -7.45818466e-02,  9.73421186e-02]],\n \n         [[-4.85737957e-02,  1.54123500e-01,  6.06776416e-01, ...,\n           -4.56309840e-02,  2.75456719e-02, -1.39325917e-01],\n          [ 2.34972760e-01,  2.16015741e-01,  1.73681796e-01, ...,\n           -2.34167844e-01, -8.68925378e-02, -2.30698399e-02],\n          [ 1.42339289e-01,  2.16820702e-01,  1.10933930e-01, ...,\n           -2.32207015e-01, -9.27465260e-02,  1.02102645e-01],\n          ...,\n          [ 1.48281664e-01,  1.57347977e-01,  1.91896975e-01, ...,\n           -1.65726110e-01, -1.02981910e-01,  1.70452759e-01],\n          [ 1.48281664e-01,  1.57347977e-01,  1.91896975e-01, ...,\n           -1.65726110e-01, -1.02981910e-01,  1.70452759e-01],\n          [ 1.48281664e-01,  1.57347977e-01,  1.91896975e-01, ...,\n           -1.65726110e-01, -1.02981910e-01,  1.70452759e-01]],\n \n         ...,\n \n         [[ 1.56235874e-01,  1.06797740e-01, -7.37302052e-03, ...,\n           -1.17537975e-01, -1.57632113e-01, -1.54437721e-01],\n          [-3.30556594e-02,  1.15886010e-01,  1.28171310e-01, ...,\n           -1.43566802e-01, -8.70205015e-02,  1.00387121e-02],\n          [ 1.77168712e-01,  1.18879542e-01,  8.90627690e-03, ...,\n           -1.20469116e-01, -1.68767214e-01, -1.41276821e-01],\n          ...,\n          [-3.59922387e-02,  1.08969748e-01,  2.27919906e-01, ...,\n           -1.41966537e-01, -4.10462208e-02,  6.80124760e-02],\n          [ 4.88402322e-02,  1.52044937e-01,  1.85405463e-01, ...,\n           -1.95352912e-01, -1.13670200e-01, -1.33895339e-03],\n          [-9.25312564e-02,  1.04920514e-01,  1.28600910e-01, ...,\n           -1.37119740e-01, -5.21938726e-02,  2.95705907e-02]],\n \n         [[ 2.94612169e-01,  1.18020087e-01,  1.87066227e-01, ...,\n           -1.54130235e-01,  4.52564776e-01,  3.24979216e-01],\n          [ 1.44029841e-01,  4.71595004e-02,  2.90348437e-02, ...,\n           -8.58122334e-02, -3.06111146e-02,  5.40618338e-02],\n          [ 1.86411664e-01,  1.28883392e-01, -5.65732317e-03, ...,\n           -1.67216450e-01, -1.55635461e-01,  8.39618593e-02],\n          ...,\n          [ 2.83054322e-01,  7.27536231e-02,  7.99598992e-02, ...,\n           -9.13932994e-02, -1.97453678e-01,  2.55814902e-02],\n          [ 3.36215086e-02,  6.11567982e-02,  2.89939847e-02, ...,\n            1.97739005e-02, -2.51618534e-01,  1.81488454e-01],\n          [ 1.40371740e-01,  1.27401903e-01,  4.62884866e-02, ...,\n           -1.47468433e-01, -1.05514452e-01,  7.93970674e-02]],\n \n         [[ 1.68505505e-01,  1.54015552e-02,  3.22440714e-01, ...,\n           -5.47612458e-02, -3.36340293e-02,  1.30204886e-01],\n          [ 4.32911605e-01, -1.26956150e-01,  4.26950306e-01, ...,\n            1.51508246e-02,  1.70305163e-01,  3.47774453e-03],\n          [ 3.53021979e-01,  1.98477134e-01,  1.92560926e-01, ...,\n           -2.57759869e-01, -9.64848548e-02,  7.36736059e-02],\n          ...,\n          [ 1.98459268e-01,  1.13506339e-01,  6.54879585e-02, ...,\n           -1.58585850e-02, -2.38306314e-01,  1.60666183e-01],\n          [ 2.63551205e-01,  1.30015627e-01,  8.32070261e-02, ...,\n           -1.96592614e-01, -1.30389020e-01,  6.46507442e-02],\n          [ 1.91718623e-01,  1.87992647e-01,  9.27462727e-02, ...,\n           -2.65486240e-01, -1.29201442e-01,  6.55239746e-02]]]],\n       shape=(6, 16, 300, 256), dtype=float32),\n array([[[[-3.2519531 , -2.7070312 , -3.203125  , ..., -1.6289062 ,\n            1.3046875 , -1.6757812 ],\n          [-3.2851562 , -0.46289062, -2.921875  , ..., -3.5390625 ,\n           -1.71875   , -2.7421875 ],\n          [-3.234375  , -2.9765625 , -4.1015625 , ..., -4.6171875 ,\n           -3.375     , -3.4726562 ],\n          ...,\n          [-3.6835938 , -3.3339844 , -3.7558594 , ..., -3.6269531 ,\n           -3.4199219 , -3.1992188 ],\n          [-3.59375   , -3.1289062 , -3.3671875 , ..., -3.3007812 ,\n           -3.0507812 , -3.0859375 ],\n          [-2.9648438 , -2.6640625 , -2.6132812 , ..., -2.4570312 ,\n           -2.9804688 , -2.5976562 ]]],\n \n \n        [[[-3.2578125 , -2.7167969 , -1.7099609 , ..., -1.0361328 ,\n           -2.1484375 , -2.0507812 ],\n          [-3.0410156 , -2.6679688 , -1.7441406 , ..., -1.0517578 ,\n           -2.0859375 , -1.9785156 ],\n          [-3.0429688 , -2.5957031 , -2.6621094 , ..., -1.5742188 ,\n           -2.3925781 , -2.9824219 ],\n          ...,\n          [-3.6230469 , -3.4609375 , -3.7480469 , ..., -4.1835938 ,\n           -3.0429688 , -2.8808594 ],\n          [-1.8730469 , -2.3242188 , -3.0820312 , ..., -3.859375  ,\n           -2.4921875 , -2.9628906 ],\n          [-3.5976562 , -3.6601562 , -3.7851562 , ..., -3.9609375 ,\n           -3.2382812 , -2.5976562 ]]],\n \n \n        [[[-3.4394531 , -1.5839844 , -1.4941406 , ..., -0.546875  ,\n           -1.6601562 ,  0.38916016],\n          [-3.5273438 , -3.5078125 , -3.4355469 , ..., -4.0625    ,\n           -2.8496094 , -2.5996094 ],\n          [-3.8007812 , -3.5429688 , -3.5       , ..., -4.5351562 ,\n           -2.8671875 , -2.8984375 ],\n          ...,\n          [-3.9550781 , -3.2832031 , -3.5683594 , ..., -4.140625  ,\n           -2.8085938 , -2.7304688 ],\n          [-3.9550781 , -3.2832031 , -3.5683594 , ..., -4.140625  ,\n           -2.8085938 , -2.7304688 ],\n          [-3.9550781 , -3.2832031 , -3.5683594 , ..., -4.140625  ,\n           -2.8085938 , -2.7304688 ]]],\n \n \n        ...,\n \n \n        [[[-2.8300781 , -3.6914062 , -3.1328125 , ..., -4.2929688 ,\n           -3.4160156 , -2.6601562 ],\n          [-0.43139648, -0.49487305, -1.1630859 , ..., -0.21801758,\n           -3.1542969 , -1.9824219 ],\n          [-3.0683594 , -3.7851562 , -3.2226562 , ..., -4.3398438 ,\n           -3.4492188 , -2.6445312 ],\n          ...,\n          [-2.9023438 , -2.7890625 , -2.9609375 , ..., -2.8828125 ,\n           -3.1523438 , -2.5546875 ],\n          [-3.3867188 , -3.546875  , -3.0019531 , ..., -3.3652344 ,\n           -3.1933594 , -2.4785156 ],\n          [-3.2734375 , -3.2792969 , -2.8046875 , ..., -3.0605469 ,\n           -3.1816406 , -2.6113281 ]]],\n \n \n        [[[-3.4863281 , -3.0019531 , -2.9941406 , ..., -1.7636719 ,\n            1.2539062 , -2.2382812 ],\n          [-2.8242188 ,  0.2758789 , -2.8046875 , ..., -3.9492188 ,\n           -1.7236328 , -2.1484375 ],\n          [-3.203125  , -3.4882812 , -3.5878906 , ..., -4.4101562 ,\n           -3.4199219 , -3.1699219 ],\n          ...,\n          [-4.046875  , -3.421875  , -3.828125  , ..., -4.6445312 ,\n           -3.2890625 , -3.015625  ],\n          [-2.4589844 , -2.3359375 , -3.3300781 , ..., -4.2539062 ,\n           -3.2050781 , -3.078125  ],\n          [-3.9355469 , -3.2988281 , -3.6386719 , ..., -4.3007812 ,\n           -3.1855469 , -3.0039062 ]]],\n \n \n        [[[-2.7539062 , -0.6845703 , -2.78125   , ..., -3.5136719 ,\n           -1.5361328 , -2.7695312 ],\n          [-3.4199219 , -2.8085938 , -2.9492188 , ..., -1.5595703 ,\n            1.328125  , -1.546875  ],\n          [-3.6933594 , -3.7753906 , -4.0742188 , ..., -4.4023438 ,\n           -3.1757812 , -3.2128906 ],\n          ...,\n          [-2.9863281 , -3.28125   , -3.6738281 , ..., -4.3359375 ,\n           -3.1171875 , -2.8066406 ],\n          [-3.7382812 , -3.3671875 , -3.7617188 , ..., -4.0507812 ,\n           -3.1953125 , -3.1816406 ],\n          [-3.5605469 , -3.5722656 , -3.6503906 , ..., -4.2851562 ,\n           -3.0820312 , -3.3378906 ]]]],\n       shape=(16, 1, 300, 7), dtype=float32),\n array([[[[0.41664693, 0.49085146, 0.23801047, 0.18277034],\n          [0.35253283, 0.62337315, 0.2509547 , 0.2279911 ],\n          [0.49718913, 0.47960296, 0.37172967, 0.36257833],\n          ...,\n          [0.07192166, 0.34676185, 0.1517776 , 0.12165481],\n          [0.6729506 , 0.10930949, 0.30752522, 0.20110726],\n          [0.77966714, 0.16523355, 0.05241632, 0.02525438]]],\n \n \n        [[[0.85035276, 0.51535505, 0.17796528, 0.18824565],\n          [0.48402798, 0.59007794, 0.24185205, 0.2280345 ],\n          [0.56021583, 0.11710685, 0.06235546, 0.06133057],\n          ...,\n          [0.15581106, 0.68413705, 0.26109877, 0.22762525],\n          [0.66657436, 0.28775156, 0.37490386, 0.1381249 ],\n          [0.12445254, 0.56130326, 0.21322249, 0.17076251]]],\n \n \n        [[[0.725371  , 0.79217684, 0.5137874 , 0.39758295],\n          [0.4126907 , 0.65756005, 0.6183046 , 0.47715917],\n          [0.41387203, 0.6570862 , 0.6131653 , 0.47685397],\n          ...,\n          [0.36498594, 0.7820094 , 1.7299604 , 0.43596542],\n          [0.36498594, 0.7820094 , 1.7299604 , 0.43596542],\n          [0.36498594, 0.7820094 , 1.7299604 , 0.43596542]]],\n \n \n        ...,\n \n \n        [[[0.5114551 , 0.58442545, 0.35628116, 0.34475726],\n          [0.7291374 , 0.7100328 , 0.3373217 , 0.322834  ],\n          [0.51139134, 0.58297956, 0.3535199 , 0.33869565],\n          ...,\n          [0.24297228, 0.22476894, 0.19499694, 0.06407426],\n          [0.8418827 , 0.45092413, 0.23437083, 0.17301911],\n          [0.2146239 , 0.45545146, 0.3333916 , 0.17655426]]],\n \n \n        [[[0.5380111 , 0.484165  , 0.45107526, 0.32481048],\n          [0.76691204, 0.7155845 , 0.4536848 , 0.55417633],\n          [0.32209772, 0.16819167, 0.6263038 , 0.28487253],\n          ...,\n          [0.76555896, 0.71188843, 0.45694953, 0.5543519 ],\n          [0.62886554, 0.5600328 , 0.7001488 , 0.5436553 ],\n          [0.49478382, 0.55562115, 0.98022664, 0.64904714]]],\n \n \n        [[[0.37736952, 0.6573032 , 0.21994463, 0.22246152],\n          [0.49180257, 0.556361  , 0.16773668, 0.12895775],\n          [0.63584465, 0.5413147 , 0.61730754, 0.4795579 ],\n          ...,\n          [0.9182874 , 0.43726754, 0.14964253, 0.15215003],\n          [0.94384176, 0.667265  , 0.05153108, 0.03363872],\n          [0.97543657, 0.7847303 , 0.05338055, 0.08436614]]]],\n       shape=(16, 1, 300, 4), dtype=float32),\n array([[[[-3.37187500e+01, -5.76875000e+01, -7.58750000e+01, ...,\n           -4.22187500e+01, -4.77500000e+01, -6.41875000e+01],\n          [-2.49062500e+01, -5.48750000e+01, -7.21250000e+01, ...,\n           -1.58046875e+01, -2.05625000e+01, -3.59375000e+01],\n          [-1.31640625e+01, -4.10312500e+01, -5.79375000e+01, ...,\n           -3.50937500e+01, -3.55625000e+01, -3.27187500e+01],\n          ...,\n          [-1.42578125e+01, -6.71484375e+00, -7.48046875e+00, ...,\n           -7.28759766e-02, -2.21875000e+00, -9.21875000e+00],\n          [-1.50546875e+01, -9.72656250e+00, -1.39218750e+01, ...,\n           -1.75781250e+00, -3.89843750e+00, -1.06562500e+01],\n          [-2.78906250e+01, -1.49296875e+01, -1.77500000e+01, ...,\n            8.52539062e-01,  1.03320312e+00, -1.43554688e+00]]],\n \n \n        [[[-2.35625000e+01, -4.98750000e+01, -6.53125000e+01, ...,\n           -3.60937500e+01, -3.76250000e+01, -4.33125000e+01],\n          [-2.72187500e+01, -4.90625000e+01, -6.18125000e+01, ...,\n           -2.76250000e+01, -2.90781250e+01, -3.50625000e+01],\n          [-1.13671875e+01, -1.85937500e+01, -2.35000000e+01, ...,\n           -1.90468750e+01, -2.22187500e+01, -3.21562500e+01],\n          ...,\n          [-2.37812500e+01, -1.28593750e+01, -1.58750000e+01, ...,\n           -1.36562500e+01, -1.56171875e+01, -2.62500000e+01],\n          [-2.40468750e+01, -4.88671875e+00, -9.65625000e+00, ...,\n            3.23437500e+00,  8.21093750e+00,  8.18750000e+00],\n          [-3.56875000e+01, -2.35312500e+01, -2.76718750e+01, ...,\n           -2.90625000e+01, -2.87187500e+01, -3.39687500e+01]]],\n \n \n        [[[-2.29843750e+01, -4.37500000e+01, -5.87500000e+01, ...,\n           -6.15937500e+01, -5.77187500e+01, -2.69218750e+01],\n          [-2.59843750e+01, -5.24375000e+01, -6.91250000e+01, ...,\n           -5.36562500e+01, -5.10312500e+01, -4.52500000e+01],\n          [-3.16875000e+01, -4.86250000e+01, -6.20000000e+01, ...,\n           -4.51875000e+01, -4.65312500e+01, -5.37812500e+01],\n          ...,\n          [-6.42500000e+01, -1.29609375e+01, -1.84218750e+01, ...,\n           -5.23437500e+01, -4.30625000e+01, -4.50625000e+01],\n          [-6.42500000e+01, -1.29609375e+01, -1.84218750e+01, ...,\n           -5.23437500e+01, -4.30625000e+01, -4.50625000e+01],\n          [-6.42500000e+01, -1.29609375e+01, -1.84218750e+01, ...,\n           -5.23437500e+01, -4.30625000e+01, -4.50625000e+01]]],\n \n \n        ...,\n \n \n        [[[-1.52031250e+01, -5.43437500e+01, -7.68125000e+01, ...,\n           -3.96875000e+01, -4.10937500e+01, -4.65625000e+01],\n          [-2.33125000e+01, -5.82500000e+01, -7.78750000e+01, ...,\n           -1.95625000e+01, -2.39687500e+01, -4.10625000e+01],\n          [-1.76718750e+01, -5.05625000e+01, -7.02500000e+01, ...,\n           -3.66562500e+01, -3.70625000e+01, -4.22500000e+01],\n          ...,\n          [-2.96875000e+01, -1.31328125e+01, -2.25781250e+01, ...,\n            9.71875000e+00,  1.71406250e+01,  1.53671875e+01],\n          [-4.97500000e+01, -1.85000000e+01, -2.38593750e+01, ...,\n           -2.93945312e+00,  1.45312500e+00, -5.10156250e+00],\n          [-1.39531250e+01, -7.04687500e+00, -1.29843750e+01, ...,\n            3.93945312e+00,  4.96484375e+00,  4.00781250e+00]]],\n \n \n        [[[-1.82031250e+01, -5.94062500e+01, -8.37500000e+01, ...,\n           -2.83593750e+01, -3.30625000e+01, -4.79687500e+01],\n          [-7.07031250e+00, -4.48437500e+01, -6.23750000e+01, ...,\n           -5.76562500e+01, -5.34062500e+01, -4.85156250e+00],\n          [-3.19375000e+01, -5.13437500e+01, -6.70000000e+01, ...,\n           -1.79531250e+01, -2.15000000e+01, -3.26875000e+01],\n          ...,\n          [-2.75312500e+01, -4.16562500e+01, -5.34687500e+01, ...,\n           -5.46562500e+01, -5.10937500e+01, -4.37500000e+01],\n          [-2.58437500e+01, -1.78281250e+01, -2.08437500e+01, ...,\n           -3.72070312e+00, -6.39843750e+00, -1.54375000e+01],\n          [-2.76875000e+01, -2.44531250e+01, -2.94687500e+01, ...,\n           -3.46875000e+01, -3.84375000e+01, -5.38750000e+01]]],\n \n \n        [[[-1.63437500e+01, -4.86562500e+01, -6.63125000e+01, ...,\n           -7.14843750e+00, -1.01718750e+01, -2.45312500e+01],\n          [-3.40000000e+01, -4.90000000e+01, -6.35000000e+01, ...,\n           -4.25937500e+01, -4.57812500e+01, -5.35000000e+01],\n          [-2.20625000e+01, -3.89687500e+01, -4.98750000e+01, ...,\n           -3.61250000e+01, -3.64687500e+01, -4.34375000e+01],\n          ...,\n          [-3.30937500e+01, -1.31406250e+01, -2.08281250e+01, ...,\n           -1.94628906e+00,  5.02734375e+00,  2.82226562e+00],\n          [-7.88125000e+01, -2.12031250e+01, -3.33125000e+01, ...,\n            6.56738281e-01,  3.00781250e+01,  4.39687500e+01],\n          [-9.50625000e+01, -1.97500000e+01, -3.77187500e+01, ...,\n           -5.85546875e+00,  3.36875000e+01,  4.77500000e+01]]]],\n       shape=(16, 1, 300, 132), dtype=float32),\n array([[[[0.41753945, 0.48566434, 0.22715794, 0.2066533 ],\n          [0.352562  , 0.6197941 , 0.23904894, 0.22488903],\n          [0.49836475, 0.47724083, 0.3470522 , 0.36243597],\n          ...,\n          [0.0648565 , 0.33694118, 0.12531051, 0.09212814],\n          [0.67341167, 0.0979078 , 0.1642059 , 0.14749727],\n          [0.780465  , 0.16510262, 0.0276957 , 0.01601021]]],\n \n \n        [[[0.85028064, 0.5113519 , 0.173454  , 0.21123323],\n          [0.48226634, 0.58741575, 0.23765835, 0.24282181],\n          [0.5611102 , 0.11415026, 0.05740957, 0.06719644],\n          ...,\n          [0.25602028, 0.7094709 , 0.23671106, 0.22220048],\n          [0.62874466, 0.30384734, 0.17820661, 0.05695757],\n          [0.10856229, 0.5741041 , 0.16175567, 0.15837498]]],\n \n \n        [[[0.7289698 , 0.7926193 , 0.49626854, 0.3853668 ],\n          [0.42121026, 0.65555084, 0.58342516, 0.46364656],\n          [0.423768  , 0.65359336, 0.5736777 , 0.45849952],\n          ...,\n          [0.9999883 , 0.99999213, 0.99998844, 0.9999801 ],\n          [0.9999883 , 0.99999213, 0.99998844, 0.9999801 ],\n          [0.9999883 , 0.99999213, 0.99998844, 0.9999801 ]]],\n \n \n        ...,\n \n \n        [[[0.5156555 , 0.5806195 , 0.33245876, 0.34250218],\n          [0.7308259 , 0.71060884, 0.32836306, 0.3152411 ],\n          [0.5159476 , 0.5778526 , 0.32509127, 0.3336654 ],\n          ...,\n          [0.25386629, 0.2198076 , 0.11211503, 0.03467868],\n          [0.84864527, 0.44145894, 0.09892652, 0.12040203],\n          [0.21657303, 0.45955235, 0.18144725, 0.09305962]]],\n \n \n        [[[0.5382162 , 0.47663283, 0.42675388, 0.3517139 ],\n          [0.77130514, 0.7221906 , 0.4339208 , 0.53023577],\n          [0.32262343, 0.17799571, 0.5839443 , 0.26962543],\n          ...,\n          [0.7706602 , 0.7169693 , 0.42265287, 0.5243787 ],\n          [0.67858607, 0.55220175, 0.59149724, 0.42066914],\n          [0.5121862 , 0.5591081 , 0.9999865 , 0.65407974]]],\n \n \n        [[[0.37893456, 0.65229696, 0.20595375, 0.21176763],\n          [0.49272674, 0.5523977 , 0.15490223, 0.14514528],\n          [0.6550236 , 0.5362416 , 0.5873064 , 0.4794116 ],\n          ...,\n          [0.9379551 , 0.44546857, 0.09820526, 0.07931862],\n          [0.94384176, 0.6677959 , 0.01717703, 0.01156684],\n          [0.97543657, 0.7970239 , 0.01779352, 0.03631779]]]],\n       shape=(16, 1, 300, 4), dtype=float32),\n [array([[[[-8.17871094e-02,  7.77587891e-02, -2.58789062e-02, ...,\n             1.47583008e-01, -7.25708008e-02,  3.08349609e-01],\n           [-1.21765137e-01, -8.27636719e-02,  6.73217773e-02, ...,\n             1.21887207e-01,  1.29150391e-01,  6.90307617e-02],\n           [-5.57250977e-02,  9.06372070e-02,  2.99804688e-01, ...,\n             1.40136719e-01,  2.55371094e-01,  9.24682617e-02],\n           ...,\n           [ 9.59472656e-02,  9.01489258e-02,  7.90405273e-02, ...,\n             4.85351562e-01,  5.71289062e-01,  9.53125000e-01],\n           [ 3.78417969e-02,  9.51538086e-02,  4.55627441e-02, ...,\n             7.68554688e-01,  1.08007812e+00,  6.07421875e-01],\n           [ 2.24243164e-01,  2.72460938e-01,  1.73339844e-01, ...,\n             3.43750000e-01,  5.39062500e-01,  4.40429688e-01]],\n  \n          [[ 5.94482422e-02,  8.23364258e-02,  2.38769531e-01, ...,\n             4.02343750e-01,  1.81152344e-01,  3.40652466e-03],\n           [ 1.11572266e-01, -4.12597656e-02,  1.08093262e-01, ...,\n             4.65576172e-01,  2.49328613e-02,  1.69982910e-02],\n           [ 7.83081055e-02, -3.54614258e-02,  3.04199219e-01, ...,\n             5.49804688e-01,  1.05895996e-02,  7.80639648e-02],\n           ...,\n           [ 1.81102753e-03,  8.00323486e-03,  1.12670898e-01, ...,\n             8.65173340e-03,  5.81359863e-02, -1.73339844e-01],\n           [ 2.72521973e-02,  4.03137207e-02,  1.84204102e-01, ...,\n             2.75878906e-01,  2.40478516e-01, -1.70654297e-01],\n           [ 2.84881592e-02,  1.53930664e-01,  2.87841797e-01, ...,\n             6.26953125e-01,  1.64184570e-01,  1.60064697e-02]],\n  \n          [[ 4.25781250e-01,  1.34765625e-01, -8.64257812e-02, ...,\n            -1.00830078e-01,  6.33300781e-01, -7.76367188e-02],\n           [ 4.47998047e-01,  2.54150391e-01, -2.49389648e-01, ...,\n            -2.23266602e-01,  3.03710938e-01,  2.14385986e-02],\n           [ 3.61328125e-01,  4.29687500e-01, -2.28027344e-01, ...,\n            -2.09350586e-01,  1.66015625e-01,  9.70458984e-02],\n           ...,\n           [-1.17950439e-02, -2.40020752e-02, -6.07299805e-02, ...,\n             1.53222656e+00,  4.52636719e-01,  2.79052734e-01],\n           [ 4.22668457e-03, -4.91943359e-02, -7.41577148e-02, ...,\n             5.30273438e-01,  4.44946289e-02,  3.27636719e-01],\n           [ 2.69012451e-02, -6.44531250e-02, -9.36889648e-02, ...,\n             3.71093750e-01,  2.71972656e-01,  6.18652344e-01]],\n  \n          ...,\n  \n          [[-2.20336914e-02,  1.05773926e-01,  2.00439453e-01, ...,\n             1.25976562e-01,  6.83105469e-01, -1.94549561e-02],\n           [ 7.32421875e-02,  2.22534180e-01,  7.78198242e-02, ...,\n            -2.88963318e-03,  7.02636719e-01,  1.03759766e-01],\n           [ 7.66601562e-02,  5.27343750e-01,  1.30004883e-01, ...,\n             1.91406250e-01,  4.49218750e-01,  7.14721680e-02],\n           ...,\n           [-8.88671875e-02, -4.63256836e-02, -6.57958984e-02, ...,\n             1.18457031e+00,  1.38574219e+00,  4.11376953e-01],\n           [-1.31225586e-01, -5.16357422e-02, -1.09558105e-01, ...,\n             2.28637695e-01,  3.39355469e-01,  3.68408203e-01],\n           [-1.38916016e-01, -9.29565430e-02, -1.14990234e-01, ...,\n             5.74218750e-01,  2.64160156e-01,  7.00195312e-01]],\n  \n          [[ 1.03515625e+00,  3.40087891e-01,  3.38623047e-01, ...,\n             4.60510254e-02,  1.03417969e+00,  6.45507812e-01],\n           [ 1.17285156e+00,  5.37109375e-01, -1.44531250e-01, ...,\n            -9.05151367e-02,  2.04711914e-01,  5.44921875e-01],\n           [ 9.59960938e-01,  6.58203125e-01, -1.01867676e-01, ...,\n            -1.20544434e-01,  2.70263672e-01,  1.35546875e+00],\n           ...,\n           [ 5.16662598e-02, -1.85058594e-01,  2.40020752e-02, ...,\n             1.98144531e+00,  1.09863281e+00,  2.73632812e+00],\n           [ 1.68212891e-01, -5.11474609e-02,  1.39038086e-01, ...,\n             3.90136719e-01,  4.41162109e-01,  2.20507812e+00],\n           [ 4.37500000e-01,  7.68432617e-02,  9.20410156e-02, ...,\n             1.03808594e+00,  3.27636719e-01,  1.62500000e+00]],\n  \n          [[ 2.08007812e+00,  9.06250000e-01,  5.79101562e-01, ...,\n             4.46777344e-01,  1.46386719e+00,  1.21386719e+00],\n           [ 2.57031250e+00,  1.64746094e+00,  1.08984375e+00, ...,\n             5.36132812e-01,  1.35058594e+00,  1.54687500e+00],\n           [ 1.73632812e+00,  1.71484375e+00,  4.05517578e-01, ...,\n             5.38330078e-02,  3.01269531e-01,  4.48242188e-01],\n           ...,\n           [ 1.61376953e-01,  1.83227539e-01,  7.96508789e-02, ...,\n             1.03320312e+00,  1.06152344e+00,  1.49511719e+00],\n           [ 5.80078125e-01,  5.19042969e-01,  1.09008789e-01, ...,\n             1.48242188e+00,  1.09082031e+00,  1.52246094e+00],\n           [ 1.40332031e+00,  7.26562500e-01,  4.19921875e-01, ...,\n             9.08203125e-01,  2.12158203e-01,  1.95410156e+00]]],\n  \n  \n         [[[-1.09252930e-01,  1.80297852e-01, -2.26135254e-02, ...,\n             8.34960938e-02,  8.91113281e-02,  1.85302734e-01],\n           [-1.44042969e-01, -6.89697266e-02, -1.52954102e-01, ...,\n             3.41186523e-02,  1.80206299e-02,  2.73437500e-01],\n           [-6.05163574e-02, -7.93457031e-02,  1.89941406e-01, ...,\n             9.75799561e-03, -9.55810547e-02,  1.33666992e-01],\n           ...,\n           [ 5.20935059e-02,  1.65332031e+00,  4.33593750e-01, ...,\n             4.55566406e-01,  4.67529297e-01,  8.30566406e-01],\n           [ 2.27050781e-01,  9.47265625e-01,  7.33886719e-01, ...,\n             9.29199219e-01,  4.69970703e-01,  5.43945312e-01],\n           [ 7.10449219e-01,  6.78222656e-01,  5.03906250e-01, ...,\n             7.77832031e-01,  5.09277344e-01,  6.58203125e-01]],\n  \n          [[ 4.76684570e-02,  8.96606445e-02,  4.04052734e-01, ...,\n             9.10034180e-02,  4.69665527e-02, -1.06582642e-02],\n           [-1.67846680e-03, -6.12487793e-02,  2.31811523e-01, ...,\n             1.02966309e-01,  9.51385498e-03, -4.55017090e-02],\n           [-2.45361328e-02,  1.44409180e-01,  2.76855469e-01, ...,\n             2.61718750e-01,  8.38623047e-02, -1.70288086e-02],\n           ...,\n           [ 2.33276367e-01,  9.13696289e-02, -1.19323730e-01, ...,\n            -1.10717773e-01, -4.79736328e-02, -2.77099609e-01],\n           [ 1.09130859e-01,  6.96411133e-02, -1.56021118e-02, ...,\n            -7.67211914e-02,  1.19934082e-02, -2.56591797e-01],\n           [ 1.11816406e-01,  2.12646484e-01,  3.27148438e-01, ...,\n             1.31225586e-01,  3.22753906e-01, -1.96411133e-01]],\n  \n          [[ 3.65478516e-01, -1.64031982e-02,  2.71148682e-02, ...,\n             6.53076172e-02,  2.13989258e-01,  2.94921875e-01],\n           [ 4.42626953e-01, -1.25488281e-01, -9.83886719e-02, ...,\n             9.41162109e-02,  3.85986328e-01,  2.70263672e-01],\n           [ 5.32714844e-01, -1.19323730e-01, -5.95703125e-02, ...,\n             9.33837891e-02,  2.59765625e-01,  3.47412109e-01],\n           ...,\n           [ 1.00781250e+00,  1.73095703e-01,  7.36328125e-01, ...,\n             8.03710938e-01, -1.23901367e-01,  1.27050781e+00],\n           [ 7.80273438e-01,  4.95361328e-01,  4.71191406e-01, ...,\n             5.41503906e-01, -7.05566406e-02,  1.15136719e+00],\n           [ 6.03515625e-01,  8.13964844e-01,  2.17773438e-01, ...,\n             4.11376953e-01, -5.54199219e-02,  9.74609375e-01]],\n  \n          ...,\n  \n          [[ 1.04064941e-02,  1.08276367e-01,  1.12731934e-01, ...,\n            -7.71484375e-02, -2.21252441e-02,  4.37316895e-02],\n           [ 1.57958984e-01,  1.76025391e-01,  2.22778320e-01, ...,\n            -3.19519043e-02, -8.04443359e-02,  7.29370117e-02],\n           [ 3.10058594e-01, -2.19268799e-02,  3.40270996e-02, ...,\n             1.50394440e-03, -6.43253326e-04,  1.08337402e-01],\n           ...,\n           [ 3.85498047e-01,  6.01074219e-01,  1.07421875e+00, ...,\n             5.11718750e-01,  9.91210938e-01,  7.29980469e-01],\n           [ 2.36572266e-01,  2.77832031e-01,  5.33691406e-01, ...,\n             5.38574219e-01,  4.95361328e-01,  3.58398438e-01],\n           [ 2.88574219e-01,  2.38403320e-01,  3.88671875e-01, ...,\n             9.44213867e-02,  2.95654297e-01,  3.72314453e-01]],\n  \n          [[ 1.26367188e+00,  4.34814453e-01,  3.19824219e-01, ...,\n             4.06250000e-01,  2.05322266e-01,  1.00585938e+00],\n           [ 1.41015625e+00,  3.86230469e-01,  5.22949219e-01, ...,\n            -3.05938721e-02,  1.08886719e-01,  6.88476562e-01],\n           [ 1.45019531e+00,  4.21386719e-01,  3.38134766e-01, ...,\n            -1.94946289e-01,  1.38671875e-01,  9.03320312e-01],\n           ...,\n           [ 2.45117188e+00,  1.52734375e+00,  2.27539062e+00, ...,\n             1.22558594e+00,  1.04785156e+00,  3.23437500e+00],\n           [ 2.13085938e+00,  1.23535156e+00,  6.14746094e-01, ...,\n             4.39941406e-01,  7.17285156e-01,  2.90820312e+00],\n           [ 1.14453125e+00,  5.27343750e-01,  3.73779297e-01, ...,\n             2.63183594e-01,  6.56250000e-01,  1.51269531e+00]],\n  \n          [[ 2.06250000e+00,  2.15820312e-01,  1.02050781e+00, ...,\n            -7.32421875e-02,  8.62426758e-02,  5.67871094e-01],\n           [ 2.24609375e+00,  5.11230469e-01,  5.20996094e-01, ...,\n            -3.85856628e-03,  6.68334961e-02,  3.73291016e-01],\n           [ 1.32519531e+00,  7.79296875e-01,  5.53710938e-01, ...,\n             5.68847656e-02, -1.97509766e-01,  1.77001953e-01],\n           ...,\n           [ 3.41210938e+00,  3.27539062e+00,  2.08789062e+00, ...,\n             1.29003906e+00,  1.07519531e+00,  3.25585938e+00],\n           [ 3.46484375e+00,  3.17382812e+00,  2.55273438e+00, ...,\n             2.17578125e+00,  1.87011719e+00,  3.47265625e+00],\n           [ 3.70312500e+00,  2.09375000e+00,  1.42871094e+00, ...,\n             1.52148438e+00,  1.06347656e+00,  3.61914062e+00]]],\n  \n  \n         [[[-5.53588867e-02,  1.35498047e-01,  8.15429688e-02, ...,\n             6.50634766e-02, -1.53808594e-01,  3.00537109e-01],\n           [-9.71069336e-02,  8.69750977e-02, -5.59997559e-02, ...,\n             2.12646484e-01, -1.10107422e-01,  1.86401367e-01],\n           [-6.60400391e-02, -5.26733398e-02,  1.16943359e-01, ...,\n             9.38110352e-02, -7.43408203e-02,  3.89648438e-01],\n           ...,\n           [ 8.09326172e-02,  1.77612305e-01,  8.87451172e-02, ...,\n             5.12695312e-02,  1.20620728e-02,  6.81762695e-02],\n           [ 1.04370117e-01,  3.98925781e-01,  3.84765625e-01, ...,\n             4.65393066e-02,  6.40869141e-02,  3.48632812e-01],\n           [ 4.55078125e-01,  3.72314453e-01,  1.79931641e-01, ...,\n             8.38623047e-02,  9.99145508e-02,  2.11425781e-01]],\n  \n          [[ 3.34472656e-01,  4.28466797e-01,  1.60156250e-01, ...,\n             1.09802246e-01,  1.59545898e-01, -8.42285156e-02],\n           [ 3.59863281e-01,  4.17236328e-01,  3.17382812e-01, ...,\n             2.05078125e-01,  1.56860352e-01,  7.68280029e-03],\n           [ 1.47094727e-01,  4.78271484e-01,  2.76611328e-01, ...,\n             3.12805176e-02,  2.82745361e-02, -1.38427734e-01],\n           ...,\n           [ 9.75952148e-02, -1.41677856e-02, -5.19714355e-02, ...,\n             1.45996094e-01,  1.80664062e-01, -5.97839355e-02],\n           [-7.75146484e-03,  2.24914551e-02,  1.25244141e-01, ...,\n             2.37426758e-01,  1.71142578e-01,  3.11737061e-02],\n           [ 1.02233887e-01,  3.37402344e-01,  4.60693359e-01, ...,\n             1.47827148e-01,  2.28149414e-01,  1.64489746e-02]],\n  \n          [[ 5.89294434e-02, -4.35180664e-02,  7.94067383e-02, ...,\n             3.96972656e-01,  3.19824219e-01,  3.32031250e-01],\n           [ 3.27636719e-01,  1.84936523e-01,  6.06445312e-01, ...,\n             2.92968750e-01,  2.71240234e-01,  2.07397461e-01],\n           [ 3.88916016e-01,  5.62438965e-02,  8.39843750e-01, ...,\n             3.37402344e-01,  3.19091797e-01,  1.29272461e-01],\n           ...,\n           [ 3.27880859e-01,  2.27905273e-01,  1.44653320e-01, ...,\n             7.60253906e-01,  4.53857422e-01,  4.27734375e-01],\n           [ 3.18359375e-01,  1.59179688e-01,  5.38940430e-02, ...,\n             6.21093750e-01,  4.67773438e-01,  2.72705078e-01],\n           [ 4.64599609e-01,  3.64746094e-01,  8.55102539e-02, ...,\n             2.44628906e-01,  3.88671875e-01,  2.42065430e-01]],\n  \n          ...,\n  \n          [[ 2.37426758e-01,  4.28466797e-01,  5.28808594e-01, ...,\n             1.79321289e-01,  5.53710938e-01,  1.25976562e-01],\n           [-5.41076660e-02, -8.42285156e-02,  8.84399414e-02, ...,\n             2.09472656e-01,  9.51171875e-01,  3.62060547e-01],\n           [-6.34765625e-02, -1.73217773e-01,  4.93469238e-02, ...,\n             1.76513672e-01,  5.56640625e-01,  2.32299805e-01],\n           ...,\n           [ 1.74926758e-01,  3.32031250e-01,  5.09765625e-01, ...,\n             4.71191406e-01,  4.25292969e-01,  2.88574219e-01],\n           [ 1.04125977e-01,  1.55395508e-01,  2.97851562e-01, ...,\n             3.88916016e-01,  1.24938965e-01,  3.91601562e-01],\n           [ 2.04345703e-01,  1.84448242e-01,  2.47070312e-01, ...,\n             3.20556641e-01,  1.83715820e-01,  2.13745117e-01]],\n  \n          [[ 1.00195312e+00,  2.66876221e-02,  2.97851562e-02, ...,\n             3.21044922e-01,  9.58007812e-01,  1.50585938e+00],\n           [ 7.55859375e-01, -1.78100586e-01, -7.50732422e-02, ...,\n            -9.85107422e-02,  3.33740234e-01,  1.00390625e+00],\n           [ 6.67968750e-01, -2.50000000e-01, -2.67089844e-01, ...,\n             4.60693359e-01,  7.90405273e-02,  1.00585938e+00],\n           ...,\n           [ 1.16601562e+00,  6.68457031e-01,  4.36523438e-01, ...,\n            -5.64575195e-02,  5.77392578e-02,  8.18359375e-01],\n           [ 1.02441406e+00,  5.30273438e-01,  2.17041016e-01, ...,\n             1.94091797e-02, -1.50756836e-01,  4.95117188e-01],\n           [ 9.53125000e-01,  3.27880859e-01,  9.98687744e-03, ...,\n             1.11083984e-01, -7.96508789e-02,  1.81274414e-01]],\n  \n          [[ 2.08398438e+00,  1.91992188e+00,  1.74414062e+00, ...,\n             1.19726562e+00,  8.66210938e-01,  1.76367188e+00],\n           [ 2.07226562e+00,  1.44921875e+00,  8.16406250e-01, ...,\n             1.48046875e+00,  1.97070312e+00,  2.14062500e+00],\n           [ 1.04101562e+00,  7.23632812e-01,  9.04296875e-01, ...,\n             4.22363281e-01, -8.09326172e-02,  4.46777344e-01],\n           ...,\n           [ 2.48242188e+00,  2.21289062e+00,  1.02246094e+00, ...,\n             3.60839844e-01,  1.34521484e-01,  8.74023438e-01],\n           [ 2.99609375e+00,  2.78906250e+00,  1.26464844e+00, ...,\n             1.03125000e+00,  1.03417969e+00,  1.07324219e+00],\n           [ 2.60742188e+00,  2.15234375e+00,  8.93554688e-01, ...,\n             1.01757812e+00,  1.02636719e+00,  9.98046875e-01]]],\n  \n  \n         ...,\n  \n  \n         [[[-8.98742676e-03,  1.78344727e-01,  9.17968750e-02, ...,\n             5.12084961e-02,  4.83093262e-02,  2.48901367e-01],\n           [-2.66876221e-02, -7.88574219e-02, -1.07788086e-01, ...,\n             9.21630859e-03,  5.41381836e-02,  2.99072266e-01],\n           [-3.47900391e-02, -5.85327148e-02, -1.16821289e-01, ...,\n             1.54785156e-01, -1.52015686e-03,  2.78076172e-01],\n           ...,\n           [ 7.11669922e-02,  6.65039062e-01, -1.04431152e-01, ...,\n             4.22668457e-02, -4.08935547e-02,  3.77197266e-01],\n           [ 4.65774536e-03,  6.48437500e-01,  3.17138672e-01, ...,\n             5.09277344e-01,  4.72412109e-01,  5.13183594e-01],\n           [ 4.42382812e-01,  6.09863281e-01,  3.39355469e-01, ...,\n             3.38134766e-01,  1.83959961e-01,  4.67041016e-01]],\n  \n          [[-3.89404297e-02, -6.29425049e-03,  2.53601074e-02, ...,\n             1.34521484e-01,  2.59246826e-02, -1.39282227e-01],\n           [-1.54174805e-01, -1.15112305e-01, -1.20544434e-01, ...,\n             4.47692871e-02, -5.64575195e-02, -1.60766602e-01],\n           [-9.75952148e-02, -5.77392578e-02, -9.10644531e-02, ...,\n             1.79199219e-01, -1.98822021e-02, -8.83178711e-02],\n           ...,\n           [ 2.84179688e-01,  1.83105469e-02,  1.29882812e-01, ...,\n            -8.27026367e-02,  3.12011719e-01, -2.23632812e-01],\n           [ 9.98535156e-02, -1.10900879e-01,  5.95397949e-02, ...,\n             1.07604980e-01,  1.57592773e-01, -1.40258789e-01],\n           [ 8.70361328e-02,  1.05346680e-01,  5.72753906e-01, ...,\n             3.88183594e-01,  2.53662109e-01, -5.55114746e-02]],\n  \n          [[ 5.42968750e-01, -1.81884766e-02,  1.87500000e-01, ...,\n             2.43652344e-01, -8.19683075e-04,  3.02490234e-01],\n           [ 6.77734375e-01, -1.27197266e-01,  4.27246094e-02, ...,\n             3.74511719e-01, -2.93121338e-02,  4.03564453e-01],\n           [ 5.47851562e-01, -1.52587891e-01,  9.03320312e-02, ...,\n             1.33666992e-01, -6.57348633e-02,  4.40673828e-01],\n           ...,\n           [ 6.19140625e-01,  2.29980469e-01, -1.41525269e-02, ...,\n             3.95507812e-01,  1.68579102e-01,  3.83544922e-01],\n           [ 5.16601562e-01,  2.97851562e-01, -8.52050781e-02, ...,\n             2.63427734e-01,  2.05200195e-01,  3.22509766e-01],\n           [ 5.35644531e-01,  4.34570312e-01, -1.43676758e-01, ...,\n             2.01293945e-01,  3.35693359e-01,  1.58081055e-01]],\n  \n          ...,\n  \n          [[-2.14233398e-02, -1.46606445e-01, -9.32617188e-02, ...,\n             1.56860352e-01, -1.67694092e-02,  1.33544922e-01],\n           [ 3.68957520e-02, -7.96508789e-02, -5.46875000e-02, ...,\n             2.02880859e-01, -5.36499023e-02,  1.04675293e-01],\n           [ 7.33642578e-02,  5.00793457e-02, -1.39694214e-02, ...,\n             3.16650391e-01,  1.60400391e-01,  3.12988281e-01],\n           ...,\n           [ 1.39526367e-01,  1.57836914e-01,  5.80078125e-01, ...,\n             9.03320312e-01,  8.82324219e-01,  9.53979492e-02],\n           [ 1.32324219e-01,  8.47778320e-02,  5.43457031e-01, ...,\n             8.55712891e-02,  2.86132812e-01,  4.47387695e-02],\n           [ 2.61230469e-01,  2.59765625e-01,  2.56591797e-01, ...,\n             2.22534180e-01,  3.77929688e-01,  4.85229492e-03]],\n  \n          [[ 1.51562500e+00,  3.88671875e-01,  6.74804688e-01, ...,\n             7.49023438e-01, -6.35986328e-02,  1.00195312e+00],\n           [ 1.19433594e+00, -8.84399414e-02,  8.14453125e-01, ...,\n             1.19750977e-01, -2.50976562e-01,  5.56152344e-01],\n           [ 1.20410156e+00, -6.48193359e-02,  1.18652344e+00, ...,\n            -2.20947266e-01, -2.68310547e-01,  5.63476562e-01],\n           ...,\n           [ 1.96679688e+00,  2.62451172e-01,  5.70312500e-01, ...,\n             1.52734375e+00,  3.34472656e-01,  2.43554688e+00],\n           [ 1.73828125e+00,  2.92480469e-01,  3.51562500e-01, ...,\n             5.74707031e-01,  5.83984375e-01,  1.84277344e+00],\n           [ 9.82421875e-01,  2.19726562e-01,  2.12768555e-01, ...,\n             6.65527344e-01,  8.89160156e-01,  1.42480469e+00]],\n  \n          [[ 2.22460938e+00,  8.00781250e-01,  3.48876953e-01, ...,\n             3.80126953e-01,  6.25991821e-03,  6.15722656e-01],\n           [ 2.32031250e+00,  1.77636719e+00,  5.94238281e-01, ...,\n             3.16406250e-01,  3.43505859e-01,  4.42626953e-01],\n           [ 2.19531250e+00,  1.39941406e+00,  1.59790039e-01, ...,\n             5.32150269e-03,  1.41723633e-01,  3.91357422e-01],\n           ...,\n           [ 2.68164062e+00,  2.37304688e+00,  6.55761719e-01, ...,\n             4.54345703e-01,  3.31542969e-01,  1.64941406e+00],\n           [ 2.85937500e+00,  2.72070312e+00,  2.14257812e+00, ...,\n             1.42675781e+00,  1.66601562e+00,  2.48046875e+00],\n           [ 3.14257812e+00,  2.31835938e+00,  1.11328125e+00, ...,\n             8.01757812e-01,  1.00585938e+00,  2.67187500e+00]]],\n  \n  \n         [[[-3.05023193e-02,  7.91625977e-02,  1.06811523e-01, ...,\n             4.41589355e-02,  1.91650391e-02,  1.17492676e-01],\n           [-7.32421875e-02, -1.50451660e-02,  2.73590088e-02, ...,\n             1.64184570e-01,  7.59277344e-02,  1.56250000e-01],\n           [-3.54194641e-03,  5.34362793e-02,  9.75341797e-02, ...,\n             3.30566406e-01,  1.83837891e-01,  3.21044922e-01],\n           ...,\n           [-3.50952148e-02,  1.35253906e-01, -6.54296875e-02, ...,\n             1.08520508e-01,  1.42700195e-01,  2.37670898e-01],\n           [ 4.87060547e-02,  6.20422363e-02, -6.71386719e-02, ...,\n             1.86523438e-01,  1.54418945e-01,  2.83447266e-01],\n           [ 2.31445312e-01,  1.00646973e-01,  3.12500000e-02, ...,\n             1.61376953e-01,  2.97607422e-01,  3.06640625e-01]],\n  \n          [[ 2.18750000e-01,  3.33007812e-01,  5.00488281e-01, ...,\n             2.78564453e-01,  4.66796875e-01,  2.07641602e-01],\n           [ 2.50732422e-01,  4.74365234e-01,  6.40136719e-01, ...,\n             2.61230469e-01,  5.14160156e-01,  2.02148438e-01],\n           [ 5.88684082e-02,  2.60009766e-01,  5.01953125e-01, ...,\n             1.63452148e-01,  3.45947266e-01,  9.21020508e-02],\n           ...,\n           [ 6.75048828e-02,  2.30407715e-02,  2.50488281e-01, ...,\n             9.30786133e-02,  3.19519043e-02, -1.01684570e-01],\n           [-4.49218750e-02, -4.01306152e-02,  1.35498047e-01, ...,\n             5.85021973e-02,  5.20935059e-02, -4.39758301e-02],\n           [ 1.03332520e-01,  2.18383789e-01,  3.55224609e-01, ...,\n             1.61865234e-01,  2.47070312e-01,  6.28662109e-03]],\n  \n          [[ 1.60675049e-02, -3.94592285e-02, -3.46374512e-02, ...,\n             5.27343750e-01,  2.93212891e-01,  1.04370117e-01],\n           [ 6.93359375e-02,  2.82745361e-02,  7.26928711e-02, ...,\n             7.30957031e-01,  2.55371094e-01,  1.43920898e-01],\n           [ 1.02600098e-01,  1.50299072e-03, -1.28402710e-02, ...,\n             6.57714844e-01,  1.61254883e-01,  1.93359375e-01],\n           ...,\n           [ 2.71728516e-01,  2.53417969e-01,  1.66748047e-01, ...,\n             5.60058594e-01,  4.96337891e-01,  4.03320312e-01],\n           [ 1.81762695e-01,  2.68066406e-01,  2.02392578e-01, ...,\n             5.52246094e-01,  3.93310547e-01,  3.73291016e-01],\n           [ 2.99072266e-01,  1.59301758e-01,  1.03088379e-01, ...,\n             4.00146484e-01,  2.49633789e-01,  3.40087891e-01]],\n  \n          ...,\n  \n          [[-8.13598633e-02,  4.00695801e-02,  3.48815918e-02, ...,\n             3.10058594e-01,  3.90625000e-01,  4.15039062e-02],\n           [-4.52880859e-02,  6.42089844e-02,  2.58064270e-03, ...,\n             5.92285156e-01,  5.69335938e-01,  3.88183594e-01],\n           [-1.57836914e-01, -1.00097656e-01, -1.45874023e-01, ...,\n             7.39257812e-01,  6.00097656e-01,  3.82812500e-01],\n           ...,\n           [-1.44882202e-02,  1.62109375e-01,  2.14965820e-01, ...,\n             2.45849609e-01,  2.66845703e-01,  1.84326172e-01],\n           [ 2.08587646e-02,  1.95922852e-01,  2.70751953e-01, ...,\n             1.70166016e-01,  1.91284180e-01,  1.57592773e-01],\n           [ 1.36489868e-02,  1.35498047e-01,  2.55615234e-01, ...,\n             7.81860352e-02,  1.40747070e-01,  1.31347656e-01]],\n  \n          [[ 1.05273438e+00,  2.57812500e-01,  5.15136719e-01, ...,\n             1.63208008e-01,  1.16821289e-01,  1.12988281e+00],\n           [ 5.94238281e-01, -1.94072723e-03,  7.52563477e-02, ...,\n            -2.21313477e-01, -2.45727539e-01,  6.31835938e-01],\n           [ 4.63134766e-01, -1.74804688e-01, -1.59912109e-01, ...,\n            -1.75781250e-01, -1.99951172e-01,  6.36718750e-01],\n           ...,\n           [ 5.39062500e-01, -1.52969360e-02,  1.16088867e-01, ...,\n            -1.25366211e-01, -1.66137695e-01,  5.08300781e-01],\n           [ 3.70849609e-01,  1.98730469e-01,  3.81103516e-01, ...,\n             1.30493164e-01,  1.33361816e-02,  8.37890625e-01],\n           [ 1.32690430e-01,  1.65405273e-01,  4.65820312e-01, ...,\n             7.92236328e-02,  5.67932129e-02,  7.62207031e-01]],\n  \n          [[ 7.19726562e-01,  2.37182617e-01, -5.70983887e-02, ...,\n             1.64941406e+00,  8.73046875e-01,  1.44921875e+00],\n           [ 1.02734375e+00,  1.20019531e+00,  5.31250000e-01, ...,\n             1.02636719e+00,  9.37988281e-01,  8.03710938e-01],\n           [ 6.32812500e-01,  3.21289062e-01, -3.20129395e-02, ...,\n             1.09765625e+00,  5.06347656e-01,  5.05859375e-01],\n           ...,\n           [ 1.60449219e+00,  8.39843750e-01,  1.85302734e-01, ...,\n             8.91113281e-01,  1.37988281e+00,  2.34375000e+00],\n           [ 1.96289062e+00,  1.17773438e+00,  6.47949219e-01, ...,\n             9.81445312e-01,  1.29199219e+00,  2.00976562e+00],\n           [ 2.27343750e+00,  1.18359375e+00,  9.36035156e-01, ...,\n             7.50976562e-01,  7.74902344e-01,  2.11523438e+00]]],\n  \n  \n         [[[-7.65991211e-02,  9.47265625e-02,  6.16455078e-02, ...,\n            -1.81579590e-02,  4.93469238e-02,  5.05065918e-02],\n           [-1.28173828e-01,  4.94384766e-02,  4.59899902e-02, ...,\n             5.52673340e-02,  5.43518066e-02,  5.15136719e-02],\n           [-1.38473511e-02,  1.71386719e-01, -1.12304688e-01, ...,\n             2.59521484e-01,  2.64892578e-01,  3.75000000e-01],\n           ...,\n           [-1.16516113e-01,  4.65576172e-01, -3.66821289e-02, ...,\n             6.02050781e-01,  8.25683594e-01,  7.76855469e-01],\n           [-3.93371582e-02,  3.00048828e-01,  7.34252930e-02, ...,\n             7.35351562e-01,  5.19042969e-01,  4.89257812e-01],\n           [ 4.92919922e-01,  3.34228516e-01,  1.51611328e-01, ...,\n             2.44873047e-01,  2.23632812e-01,  8.68164062e-01]],\n  \n          [[-9.30786133e-02,  1.87866211e-01,  1.33666992e-01, ...,\n             3.95019531e-01,  5.47485352e-02, -7.29980469e-02],\n           [-1.81518555e-01, -3.25584412e-03,  5.66406250e-02, ...,\n             4.00878906e-01, -9.94262695e-02, -9.30786133e-02],\n           [-1.75903320e-01,  3.03222656e-01, -9.57641602e-02, ...,\n             3.72558594e-01, -7.03125000e-02, -1.30859375e-01],\n           ...,\n           [ 2.32177734e-01,  1.94091797e-02,  1.28173828e-01, ...,\n            -4.39758301e-02,  1.46484375e-01, -2.54882812e-01],\n           [ 3.25317383e-02, -2.19116211e-02,  8.36791992e-02, ...,\n             2.65380859e-01,  3.23486328e-01, -1.99829102e-01],\n           [ 1.24816895e-01,  2.40234375e-01,  4.13574219e-01, ...,\n             4.72656250e-01,  3.59863281e-01, -5.51452637e-02]],\n  \n          [[ 6.55273438e-01,  7.25585938e-01,  9.25292969e-01, ...,\n             5.50292969e-01,  5.69335938e-01,  6.57714844e-01],\n           [ 1.02246094e+00,  7.00195312e-01,  9.25292969e-01, ...,\n             4.52392578e-01,  6.83105469e-01,  6.24511719e-01],\n           [ 9.42382812e-01,  4.34082031e-01,  8.55957031e-01, ...,\n             7.53173828e-02,  3.31298828e-01,  4.89257812e-01],\n           ...,\n           [ 6.34765625e-01,  7.96508789e-02,  2.92968750e-01, ...,\n             1.20214844e+00, -1.68945312e-01,  1.13085938e+00],\n           [ 5.56640625e-01,  1.51000977e-01,  1.75415039e-01, ...,\n             6.35742188e-01, -2.22412109e-01,  1.14062500e+00],\n           [ 4.43603516e-01,  4.06738281e-01, -3.42102051e-02, ...,\n             4.72412109e-01,  1.94824219e-01,  7.63671875e-01]],\n  \n          ...,\n  \n          [[-4.67224121e-02, -3.46679688e-02,  1.60522461e-01, ...,\n             3.15673828e-01,  5.02441406e-01,  7.71972656e-01],\n           [ 3.10058594e-02, -9.05761719e-02,  2.96325684e-02, ...,\n             1.54174805e-01,  6.03515625e-01,  7.11425781e-01],\n           [ 1.11389160e-01,  6.37435913e-03,  3.06884766e-01, ...,\n             8.41674805e-02,  2.35839844e-01,  4.21875000e-01],\n           ...,\n           [ 1.63085938e-01,  1.47583008e-01,  3.32275391e-01, ...,\n             1.13378906e+00,  6.25000000e-01,  4.90478516e-01],\n           [ 2.09594727e-01,  1.04614258e-01,  2.43530273e-01, ...,\n             8.56933594e-01,  1.68457031e-01,  5.89355469e-01],\n           [ 1.26098633e-01,  7.43408203e-02,  2.46582031e-01, ...,\n             3.27636719e-01,  2.74902344e-01,  6.34277344e-01]],\n  \n          [[ 1.76757812e+00,  7.81250000e-01,  1.57617188e+00, ...,\n             3.02001953e-01,  3.17138672e-01,  1.49609375e+00],\n           [ 1.67089844e+00, -8.14208984e-02,  5.34179688e-01, ...,\n             1.92565918e-02,  7.86590576e-03,  1.20605469e+00],\n           [ 1.64550781e+00,  3.35205078e-01,  6.88964844e-01, ...,\n             2.79693604e-02,  3.32946777e-02,  1.22070312e+00],\n           ...,\n           [ 1.76074219e+00,  5.98144531e-01,  1.03125000e+00, ...,\n             1.61718750e+00,  6.97265625e-01,  3.35742188e+00],\n           [ 1.85937500e+00,  6.79199219e-01,  5.75683594e-01, ...,\n             3.82080078e-01,  2.65869141e-01,  2.83398438e+00],\n           [ 8.75488281e-01,  6.55273438e-01,  4.32861328e-01, ...,\n            -1.03027344e-01,  2.90771484e-01,  1.40820312e+00]],\n  \n          [[ 3.41796875e+00,  1.81933594e+00,  1.43261719e+00, ...,\n             1.84082031e+00,  2.11914062e+00,  3.20312500e+00],\n           [ 3.30078125e+00,  3.30078125e+00,  2.86718750e+00, ...,\n             1.41113281e+00,  2.08203125e+00,  3.11718750e+00],\n           [ 3.52343750e+00,  3.49414062e+00,  1.96875000e+00, ...,\n             4.63134766e-01,  5.00488281e-01,  1.44628906e+00],\n           ...,\n           [ 1.79101562e+00,  7.39257812e-01,  5.49804688e-01, ...,\n             2.18359375e+00,  1.76171875e+00,  2.56054688e+00],\n           [ 2.59179688e+00,  2.58398438e+00,  1.18847656e+00, ...,\n             7.00195312e-01,  1.08300781e+00,  2.58203125e+00],\n           [ 3.67187500e+00,  1.62890625e+00,  1.27148438e+00, ...,\n             6.63574219e-01,  3.59130859e-01,  3.25976562e+00]]]],\n        shape=(16, 256, 80, 80), dtype=float32),\n  array([[[[-5.68542480e-02,  6.29882812e-02,  8.30688477e-02, ...,\n             6.31713867e-02,  1.83959961e-01,  9.27124023e-02],\n           [-6.60400391e-02, -9.39331055e-02, -9.12475586e-02, ...,\n            -4.88891602e-02,  4.64172363e-02, -5.13000488e-02],\n           [-6.35375977e-02,  3.53393555e-02, -7.45239258e-02, ...,\n             1.44653320e-01,  2.65869141e-01, -2.63824463e-02],\n           ...,\n           [-1.92993164e-01,  1.30249023e-01,  3.68896484e-01, ...,\n            -2.13012695e-01, -1.81640625e-01,  2.30957031e-01],\n           [-7.58666992e-02,  3.49853516e-01,  5.81054688e-01, ...,\n            -1.09802246e-01,  5.24902344e-01,  8.29589844e-01],\n           [ 1.36230469e-01,  5.90820312e-01,  6.87011719e-01, ...,\n             7.76855469e-01,  1.35742188e+00,  9.32128906e-01]],\n  \n          [[-1.01562500e-01, -1.55761719e-01, -1.75323486e-02, ...,\n            -1.57226562e-01, -1.66625977e-01, -1.59912109e-01],\n           [-7.33032227e-02, -1.79321289e-01, -2.23083496e-02, ...,\n            -9.02709961e-02, -1.43310547e-01, -1.31347656e-01],\n           [ 1.35040283e-02,  6.19506836e-02,  8.99658203e-02, ...,\n            -3.51867676e-02, -1.13098145e-01, -1.08825684e-01],\n           ...,\n           [ 3.43017578e-02,  2.29248047e-01,  4.37255859e-01, ...,\n            -2.30468750e-01, -2.50000000e-01, -7.82470703e-02],\n           [ 1.01928711e-01,  3.02001953e-01,  5.08300781e-01, ...,\n            -1.95800781e-01, -1.02905273e-01, -8.38623047e-02],\n           [ 8.62426758e-02,  1.11450195e-01,  2.42919922e-01, ...,\n            -6.68945312e-02, -1.56738281e-01, -1.29882812e-01]],\n  \n          [[-2.29370117e-01, -2.61718750e-01, -1.38793945e-01, ...,\n             5.66406250e-02, -1.44531250e-01, -1.67358398e-01],\n           [-2.65625000e-01, -2.62451172e-01, -1.54296875e-01, ...,\n             7.25555420e-03, -5.22155762e-02, -5.08422852e-02],\n           [-2.30468750e-01, -9.41162109e-02,  2.00500488e-02, ...,\n             7.25555420e-03,  1.21459961e-01, -1.86614990e-02],\n           ...,\n           [-7.74536133e-02,  7.14111328e-02, -1.41967773e-01, ...,\n            -2.78076172e-01,  2.37060547e-01, -2.76367188e-01],\n           [-1.38427734e-01,  1.08459473e-01, -7.39135742e-02, ...,\n            -1.69982910e-02,  1.36718750e-01, -2.66601562e-01],\n           [-1.11083984e-01,  1.00708008e-03, -7.94067383e-02, ...,\n            -5.98144531e-02, -1.71630859e-01, -2.78320312e-01]],\n  \n          ...,\n  \n          [[-9.92431641e-02, -1.62353516e-01, -8.08715820e-02, ...,\n             6.27441406e-02, -4.20532227e-02, -9.23461914e-02],\n           [-1.21582031e-01, -2.21801758e-01, -9.23461914e-02, ...,\n            -5.33294678e-03, -3.84216309e-02, -6.02416992e-02],\n           [-6.15844727e-02, -9.38110352e-02, -1.37557983e-02, ...,\n             1.04751587e-02,  6.06384277e-02,  7.48901367e-02],\n           ...,\n           [-3.50036621e-02, -2.38647461e-02, -9.13696289e-02, ...,\n            -2.29125977e-01, -1.49047852e-01, -1.02416992e-01],\n           [-3.16772461e-02,  1.64031982e-02, -2.31933594e-02, ...,\n            -8.73413086e-02,  8.55102539e-02, -1.55761719e-01],\n           [-8.16650391e-02, -8.28247070e-02, -1.19384766e-01, ...,\n             4.77905273e-02,  1.33300781e-01, -1.35131836e-01]],\n  \n          [[-2.33276367e-01, -2.78320312e-01, -2.07366943e-02, ...,\n            -1.87622070e-01, -2.36450195e-01, -2.60742188e-01],\n           [-2.76611328e-01, -2.56347656e-01, -1.73706055e-01, ...,\n            -2.66357422e-01, -2.31445312e-01, -9.90600586e-02],\n           [-2.22167969e-01, -1.40380859e-01,  1.07421875e-02, ...,\n            -1.31713867e-01, -7.82470703e-02,  2.26135254e-02],\n           ...,\n           [-1.38061523e-01, -2.00805664e-01, -1.83959961e-01, ...,\n            -8.70971680e-02, -2.45849609e-01, -2.43774414e-01],\n           [-1.96777344e-01, -2.23632812e-01, -9.57641602e-02, ...,\n            -2.78320312e-01, -2.71728516e-01, -2.78320312e-01],\n           [-8.91113281e-02, -1.35498047e-01, -7.63549805e-02, ...,\n            -2.66601562e-01, -2.74414062e-01, -2.71728516e-01]],\n  \n          [[ 3.85498047e-01,  1.66992188e-01,  5.66406250e-01, ...,\n            -7.38525391e-02, -4.03747559e-02,  1.03912354e-02],\n           [-7.58743286e-03,  9.21020508e-02,  3.07128906e-01, ...,\n            -1.98242188e-01,  6.20117188e-02, -2.70996094e-01],\n           [ 3.17382812e-01,  4.18457031e-01,  3.85498047e-01, ...,\n             1.83837891e-01,  1.79809570e-01, -1.99829102e-01],\n           ...,\n           [ 5.46386719e-01,  2.08007812e-01, -1.05590820e-01, ...,\n             3.32421875e+00,  1.78906250e+00, -2.44506836e-01],\n           [ 4.37255859e-01,  2.38403320e-01, -1.09558105e-01, ...,\n             8.88183594e-01, -2.78564453e-01, -2.67822266e-01],\n           [ 2.87353516e-01,  3.60107422e-02, -5.78918457e-02, ...,\n            -1.84936523e-01, -2.78076172e-01, -2.24609375e-01]]],\n  \n  \n         [[[-9.77325439e-03,  1.32934570e-01,  4.11865234e-01, ...,\n             2.67822266e-01,  1.56738281e-01, -1.24145508e-01],\n           [-1.75903320e-01, -1.85302734e-01, -7.59887695e-02, ...,\n            -6.53076172e-02,  9.82055664e-02, -1.32812500e-01],\n           [-2.25463867e-01, -1.72607422e-01,  1.11999512e-01, ...,\n            -7.07397461e-02,  1.14257812e-01, -6.61621094e-02],\n           ...,\n           [ 7.69531250e-01,  7.49023438e-01,  6.01074219e-01, ...,\n             3.54576111e-03,  5.43518066e-02,  1.61010742e-01],\n           [ 8.96484375e-01,  9.20410156e-01,  7.55859375e-01, ...,\n            -5.56030273e-02,  6.22558594e-01,  3.75976562e-01],\n           [ 8.87207031e-01,  1.05664062e+00,  5.21972656e-01, ...,\n             7.35351562e-01,  1.74707031e+00,  6.89453125e-01]],\n  \n          [[-9.62066650e-03, -7.55004883e-02,  1.41143799e-02, ...,\n             5.92956543e-02, -8.27026367e-02, -6.34765625e-02],\n           [ 4.28161621e-02,  8.40454102e-02,  2.31933594e-02, ...,\n             1.59606934e-02, -7.04956055e-02, -1.30249023e-01],\n           [ 1.11206055e-01,  1.64916992e-01,  1.78588867e-01, ...,\n            -1.65710449e-02, -1.09985352e-01, -9.84497070e-02],\n           ...,\n           [ 3.60107422e-02, -8.20312500e-02,  2.13165283e-02, ...,\n            -1.42944336e-01,  4.41284180e-02, -2.68066406e-01],\n           [ 1.25732422e-01, -4.46777344e-02, -3.11279297e-02, ...,\n            -9.02709961e-02, -1.56738281e-01, -2.52929688e-01],\n           [-1.19567871e-01, -1.85546875e-01, -8.46557617e-02, ...,\n            -8.61206055e-02, -9.61303711e-02, -2.07641602e-01]],\n  \n          [[-1.78466797e-01, -1.06018066e-01, -5.34362793e-02, ...,\n             1.06567383e-01,  3.82812500e-01, -1.18774414e-01],\n           [-2.09350586e-01, -8.93554688e-02,  1.14685059e-01, ...,\n             4.97558594e-01,  5.20996094e-01, -8.80737305e-02],\n           [-1.50756836e-01, -1.10839844e-01,  3.76708984e-01, ...,\n             4.32128906e-01,  3.75976562e-01, -9.57641602e-02],\n           ...,\n           [-3.38935852e-03, -2.78320312e-01, -2.76367188e-01, ...,\n            -4.84924316e-02, -1.65893555e-01, -2.76123047e-01],\n           [-1.54174805e-01, -2.61962891e-01, -2.77587891e-01, ...,\n            -1.98852539e-01, -1.50146484e-01, -2.76855469e-01],\n           [-1.42089844e-01, -2.37060547e-01, -2.78320312e-01, ...,\n            -2.10327148e-01, -2.28271484e-01, -2.23876953e-01]],\n  \n          ...,\n  \n          [[-6.63452148e-02, -8.25500488e-03,  8.78295898e-02, ...,\n             8.74633789e-02,  7.76977539e-02, -5.56945801e-02],\n           [-9.44824219e-02, -8.17871094e-02,  1.31378174e-02, ...,\n            -9.96093750e-02, -1.01623535e-01, -1.45629883e-01],\n           [-4.88891602e-02, -5.88684082e-02,  1.68090820e-01, ...,\n            -1.95770264e-02,  2.53906250e-02, -1.38473511e-02],\n           ...,\n           [-1.03393555e-01, -2.44018555e-01, -1.43798828e-01, ...,\n            -1.07910156e-01, -2.02880859e-01, -2.71484375e-01],\n           [-1.51489258e-01, -2.29492188e-01, -1.90917969e-01, ...,\n            -6.20422363e-02, -9.42993164e-02, -2.31933594e-01],\n           [-1.61865234e-01, -2.06909180e-01, -1.99951172e-01, ...,\n            -1.99096680e-01, -1.91650391e-01, -2.26684570e-01]],\n  \n          [[-8.91113281e-03, -1.44287109e-01, -1.46972656e-01, ...,\n            -1.56982422e-01, -1.17492676e-01, -4.65393066e-02],\n           [-2.05200195e-01, -2.60742188e-01, -1.03698730e-01, ...,\n             1.98852539e-01,  2.01293945e-01,  1.19445801e-01],\n           [-4.20532227e-02, -2.46582031e-01, -2.00805664e-01, ...,\n             1.77612305e-01,  5.58166504e-02,  9.75036621e-03],\n           ...,\n           [-2.78320312e-01, -2.11181641e-01, -2.77832031e-01, ...,\n            -2.72705078e-01, -2.64648438e-01, -7.42187500e-02],\n           [-2.73925781e-01, -2.76611328e-01, -2.77832031e-01, ...,\n            -2.37304688e-01, -2.64404297e-01, -2.77832031e-01],\n           [-2.74414062e-01, -2.78320312e-01, -2.78320312e-01, ...,\n            -2.46704102e-01, -2.78564453e-01, -2.72949219e-01]],\n  \n          [[ 2.89306641e-01,  2.93701172e-01,  2.14477539e-01, ...,\n             1.46606445e-01,  5.75195312e-01,  8.06884766e-02],\n           [-1.37695312e-01,  2.15942383e-01,  3.88183594e-01, ...,\n             7.61108398e-02,  1.20910645e-01, -1.34887695e-01],\n           [ 1.44165039e-01,  9.74609375e-01, -2.12768555e-01, ...,\n            -1.26953125e-01, -1.48559570e-01, -1.68701172e-01],\n           ...,\n           [ 7.63183594e-01, -1.69189453e-01, -1.96655273e-01, ...,\n            -1.53442383e-01,  3.43017578e-01, -2.78320312e-01],\n           [ 1.29589844e+00, -1.86401367e-01, -1.88964844e-01, ...,\n            -2.51708984e-01, -1.48803711e-01, -7.44018555e-02],\n           [-2.75146484e-01, -2.14111328e-01, -2.60253906e-01, ...,\n            -2.45605469e-01, -2.46948242e-01, -2.43652344e-01]]],\n  \n  \n         [[[-2.85034180e-02,  2.74902344e-01, -1.20468140e-02, ...,\n             2.62451172e-01,  1.95922852e-01,  4.56619263e-03],\n           [-2.78320312e-01, -5.85327148e-02, -5.30395508e-02, ...,\n            -1.07360840e-01,  1.23474121e-01, -1.78588867e-01],\n           [-2.00683594e-01,  4.74365234e-01,  9.97924805e-02, ...,\n             4.30908203e-01,  4.02099609e-01,  1.08642578e-01],\n           ...,\n           [ 2.91503906e-01,  2.90039062e-01,  1.64794922e-01, ...,\n             6.44042969e-01,  5.45898438e-01,  5.96679688e-01],\n           [ 1.99829102e-01,  3.77929688e-01,  2.60742188e-01, ...,\n             8.15429688e-01,  8.32519531e-01,  6.15722656e-01],\n           [ 2.33276367e-01,  2.01660156e-01,  4.94628906e-01, ...,\n             1.24609375e+00,  1.38574219e+00,  1.10742188e+00]],\n  \n          [[ 2.03125000e-01,  1.68701172e-01,  2.39868164e-01, ...,\n            -1.41601562e-01, -1.56982422e-01, -1.55761719e-01],\n           [ 2.13623047e-01,  3.28369141e-01,  4.36523438e-01, ...,\n            -2.03247070e-01, -2.07397461e-01, -1.80908203e-01],\n           [ 3.58398438e-01,  3.73046875e-01,  6.04003906e-01, ...,\n            -3.51867676e-02, -1.65893555e-01, -1.07299805e-01],\n           ...,\n           [-1.35498047e-01,  2.58941650e-02,  7.86743164e-02, ...,\n             2.73681641e-01,  9.53369141e-02, -2.09808350e-02],\n           [-5.90515137e-03,  1.52343750e-01,  3.11279297e-02, ...,\n             2.82958984e-01,  1.57348633e-01, -1.05895996e-02],\n           [-6.09970093e-03,  4.88586426e-02,  6.82067871e-03, ...,\n             1.08703613e-01,  7.28759766e-02,  2.58941650e-02]],\n  \n          [[-1.09802246e-01,  3.52294922e-01, -2.53417969e-01, ...,\n             2.49145508e-01,  2.15606689e-02, -2.70996094e-01],\n           [ 5.24291992e-02,  3.88183594e-01, -2.40478516e-01, ...,\n             5.12695312e-01,  1.18896484e-01, -2.71972656e-01],\n           [ 8.33129883e-02,  4.81567383e-02, -1.99462891e-01, ...,\n             1.95556641e-01, -2.05932617e-01, -1.43066406e-01],\n           ...,\n           [-2.02026367e-01, -2.62695312e-01, -3.58886719e-02, ...,\n             2.51464844e-01,  1.47460938e-01, -6.62841797e-02],\n           [-2.08251953e-01, -2.70019531e-01,  1.92382812e-01, ...,\n             5.68847656e-01,  1.01257324e-01, -1.18774414e-01],\n           [-2.37670898e-01, -9.06982422e-02,  1.43798828e-01, ...,\n             5.58105469e-01,  2.04833984e-01, -2.18139648e-01]],\n  \n          ...,\n  \n          [[ 1.24511719e-01,  5.10253906e-01, -1.06994629e-01, ...,\n             1.34521484e-01,  7.18383789e-02, -1.08215332e-01],\n           [-7.58056641e-02,  3.03955078e-02, -2.03369141e-01, ...,\n             1.18896484e-01, -1.26708984e-01, -1.55395508e-01],\n           [ 1.42089844e-01,  3.02978516e-01, -8.75854492e-02, ...,\n            -9.69886780e-04, -1.39038086e-01, -1.67602539e-01],\n           ...,\n           [-8.28247070e-02, -1.46484375e-01, -2.49671936e-03, ...,\n             4.05517578e-01,  3.37158203e-01,  1.30737305e-01],\n           [-3.58581543e-02, -4.12902832e-02,  1.81762695e-01, ...,\n             4.94628906e-01,  3.48876953e-01,  1.18347168e-01],\n           [-1.83349609e-01, -1.52954102e-01,  1.14669800e-02, ...,\n             2.67333984e-01,  1.32812500e-01, -6.95190430e-02]],\n  \n          [[-9.28344727e-02,  2.14080811e-02,  7.48825073e-03, ...,\n            -5.96618652e-02, -2.22900391e-01, -1.71752930e-01],\n           [-7.30590820e-02, -2.29980469e-01,  1.91528320e-01, ...,\n            -2.01416016e-01, -2.45727539e-01, -1.86035156e-01],\n           [ 6.13098145e-02,  2.17132568e-02,  5.96191406e-01, ...,\n            -2.77832031e-01, -2.78320312e-01, -1.77856445e-01],\n           ...,\n           [-2.77343750e-01, -1.53198242e-01, -5.89294434e-02, ...,\n             6.13403320e-02,  3.90869141e-01,  5.31738281e-01],\n           [-2.75634766e-01, -1.32324219e-01, -1.38916016e-01, ...,\n             7.07397461e-02,  2.32238770e-02,  3.38134766e-01],\n           [-2.48535156e-01, -3.17993164e-02, -1.57226562e-01, ...,\n             3.10058594e-02,  1.51245117e-01, -4.30297852e-02]],\n  \n          [[ 4.78759766e-01,  4.62158203e-01, -7.89794922e-02, ...,\n            -7.09838867e-02,  2.92480469e-01,  1.29638672e-01],\n           [ 1.36425781e+00,  3.34358215e-03, -4.58374023e-02, ...,\n             2.38037109e-02, -2.52929688e-01, -1.29638672e-01],\n           [-1.20300293e-01, -1.76635742e-01, -2.25341797e-01, ...,\n            -2.65380859e-01, -2.74414062e-01, -2.76611328e-01],\n           ...,\n           [ 6.60156250e-01,  1.88964844e-01,  1.12915039e-01, ...,\n             2.18383789e-01,  5.83984375e-01, -1.12670898e-01],\n           [ 6.63574219e-01,  2.90039062e-01,  2.15942383e-01, ...,\n             5.76660156e-01,  4.73144531e-01,  2.17132568e-02],\n           [-1.70410156e-01, -1.62475586e-01, -2.71484375e-01, ...,\n            -7.87353516e-02, -9.87548828e-02, -2.63916016e-01]]],\n  \n  \n         ...,\n  \n  \n         [[[ 1.56173706e-02, -1.35375977e-01, -2.29736328e-01, ...,\n             1.58569336e-01,  2.02758789e-01, -1.02600098e-01],\n           [-9.98535156e-02, -2.52197266e-01, -2.77832031e-01, ...,\n            -7.79418945e-02,  1.14898682e-02, -1.91040039e-01],\n           [-1.13098145e-01, -1.98974609e-01, -2.61962891e-01, ...,\n            -4.47082520e-02,  7.18383789e-02,  1.12426758e-01],\n           ...,\n           [-5.30700684e-02,  1.50146484e-01, -3.05175781e-03, ...,\n             4.49371338e-03,  2.38891602e-01,  5.19531250e-01],\n           [ 2.70019531e-01,  2.94677734e-01,  1.47094727e-01, ...,\n             1.04614258e-01,  1.09130859e-01,  3.98681641e-01],\n           [ 5.80078125e-01,  3.60595703e-01,  5.27343750e-01, ...,\n             4.39941406e-01,  5.24902344e-01,  1.02050781e+00]],\n  \n          [[-1.10168457e-01,  1.57623291e-02,  3.12988281e-01, ...,\n            -1.02600098e-01, -1.49658203e-01, -1.07299805e-01],\n           [-6.22558594e-02,  6.35986328e-02,  3.02490234e-01, ...,\n            -1.00097656e-01, -2.13012695e-01, -1.78466797e-01],\n           [ 2.31933594e-02,  2.13745117e-01,  3.06884766e-01, ...,\n             4.40979004e-03, -1.23107910e-01, -1.06079102e-01],\n           ...,\n           [ 8.69750977e-02,  8.24584961e-02,  3.04870605e-02, ...,\n            -9.32617188e-02, -6.26220703e-02, -1.56738281e-01],\n           [ 6.60400391e-02, -1.52359009e-02, -6.60400391e-02, ...,\n            -3.75976562e-02, -8.55102539e-02, -9.48486328e-02],\n           [-6.77490234e-02, -1.22131348e-01, -1.65893555e-01, ...,\n            -2.30560303e-02, -7.78198242e-02,  8.02612305e-03]],\n  \n          [[-2.41455078e-01, -2.03857422e-01, -3.12805176e-02, ...,\n             1.84570312e-01,  2.70507812e-01, -1.86889648e-01],\n           [-2.58544922e-01, -2.55859375e-01,  7.11059570e-02, ...,\n             2.52929688e-01,  1.80664062e-01, -1.34033203e-01],\n           [-1.97265625e-01, -2.24487305e-01,  8.02001953e-02, ...,\n             3.30810547e-01,  3.74267578e-01, -1.21887207e-01],\n           ...,\n           [-1.63696289e-01, -2.17285156e-01, -1.83105469e-01, ...,\n             3.44238281e-02, -1.71630859e-01, -1.83227539e-01],\n           [-2.42187500e-01, -2.18383789e-01, -1.48315430e-01, ...,\n            -1.42211914e-01, -2.16796875e-01, -2.57324219e-01],\n           [-2.60986328e-01, -2.25708008e-01, -1.70776367e-01, ...,\n            -1.95922852e-02, -1.56860352e-01, -2.72460938e-01]],\n  \n          ...,\n  \n          [[-6.83593750e-02, -1.10107422e-01, -7.60498047e-02, ...,\n             2.35717773e-01,  2.09106445e-01, -3.01513672e-02],\n           [-1.84082031e-01, -1.92993164e-01, -2.05535889e-02, ...,\n             3.15856934e-02, -2.39562988e-03, -1.48681641e-01],\n           [-1.42333984e-01, -1.25732422e-01,  7.80639648e-02, ...,\n             8.74633789e-02,  4.35180664e-02, -4.41894531e-02],\n           ...,\n           [-6.48193359e-02, -1.45751953e-01, -5.80444336e-02, ...,\n            -5.99975586e-02, -1.54052734e-01, -3.36608887e-02],\n           [-6.96411133e-02, -1.01379395e-01, -1.02615356e-02, ...,\n             1.43920898e-01,  1.07971191e-01,  3.12423706e-03],\n           [-2.17285156e-01, -2.02148438e-01, -1.45874023e-01, ...,\n            -3.37829590e-02, -1.40747070e-01, -1.66870117e-01]],\n  \n          [[-1.66748047e-01,  1.33056641e-01,  1.59179688e-01, ...,\n             7.69653320e-02, -1.60522461e-01, -2.42675781e-01],\n           [-2.66601562e-01,  1.55761719e-01,  2.89550781e-01, ...,\n            -4.45251465e-02, -2.03369141e-01, -2.35595703e-01],\n           [-2.09594727e-01,  3.88183594e-01,  3.02001953e-01, ...,\n            -1.47949219e-01, -2.28637695e-01, -2.04833984e-01],\n           ...,\n           [-2.53662109e-01, -3.23181152e-02, -1.72607422e-01, ...,\n            -1.99951172e-01, -1.76879883e-01,  5.45959473e-02],\n           [-2.75390625e-01, -2.19848633e-01, -2.23999023e-01, ...,\n            -2.69287109e-01, -2.77587891e-01, -2.30224609e-01],\n           [-2.47070312e-01, -2.75634766e-01, -2.75878906e-01, ...,\n            -2.78320312e-01, -2.69042969e-01, -2.68554688e-01]],\n  \n          [[ 3.15917969e-01,  5.54687500e-01,  7.39257812e-01, ...,\n             5.06835938e-01,  4.20654297e-01,  2.02148438e-01],\n           [ 9.14306641e-02,  7.17285156e-01,  6.59667969e-01, ...,\n             6.20117188e-01,  5.24414062e-01,  3.62792969e-01],\n           [ 4.05273438e-01,  5.36132812e-01,  3.07617188e-01, ...,\n            -1.77734375e-01, -6.17370605e-02,  3.67736816e-02],\n           ...,\n           [-2.19573975e-02, -2.38800049e-02, -1.86523438e-01, ...,\n            -2.62939453e-01,  1.91406250e-01,  4.23095703e-01],\n           [ 1.16943359e-01, -1.47399902e-02,  5.93566895e-02, ...,\n            -1.60888672e-01, -1.42211914e-01,  2.81982422e-01],\n           [-1.88964844e-01, -2.58789062e-01, -2.34497070e-01, ...,\n            -2.46337891e-01, -2.75634766e-01, -2.64160156e-01]]],\n  \n  \n         [[[-1.70166016e-01, -7.70874023e-02, -1.07650757e-02, ...,\n             5.85632324e-02,  2.60009766e-01,  1.14990234e-01],\n           [-2.50732422e-01, -1.45751953e-01, -9.46044922e-02, ...,\n             7.57324219e-01,  1.14843750e+00,  6.27441406e-01],\n           [-2.36450195e-01, -2.77557373e-02,  8.95996094e-02, ...,\n             4.87304688e-01,  6.81640625e-01,  4.52636719e-01],\n           ...,\n           [-1.81396484e-01, -2.19726562e-02,  5.41992188e-02, ...,\n             8.06152344e-01,  8.65234375e-01,  7.71972656e-01],\n           [-1.21093750e-01,  1.29760742e-01,  2.58056641e-01, ...,\n             9.94140625e-01,  1.08398438e+00,  7.09960938e-01],\n           [ 5.08117676e-02,  3.96972656e-01,  5.54199219e-01, ...,\n             1.36425781e+00,  1.43554688e+00,  9.14550781e-01]],\n  \n          [[ 2.44506836e-01,  2.38281250e-01,  3.79882812e-01, ...,\n             1.96777344e-01,  1.24572754e-01,  9.65118408e-03],\n           [ 3.00537109e-01,  3.06640625e-01,  5.80078125e-01, ...,\n             2.71484375e-01,  3.08349609e-01,  7.41577148e-02],\n           [ 2.38037109e-01,  3.24218750e-01,  7.21191406e-01, ...,\n             9.79614258e-02,  8.30078125e-02, -4.72640991e-03],\n           ...,\n           [ 1.15661621e-01,  1.16271973e-01,  2.60742188e-01, ...,\n             1.20117188e-01,  7.28759766e-02, -4.80651855e-02],\n           [ 1.89331055e-01,  1.78710938e-01,  3.07861328e-01, ...,\n             2.02758789e-01,  1.00036621e-01,  2.23388672e-02],\n           [ 1.25366211e-01,  1.35742188e-01,  1.76635742e-01, ...,\n             1.26708984e-01,  6.42013550e-03, -2.35748291e-03]],\n  \n          [[-8.09936523e-02,  6.56738281e-02, -9.57489014e-03, ...,\n             3.82568359e-01, -9.03320312e-03, -2.24975586e-01],\n           [-4.07714844e-02,  1.22985840e-01, -1.35421753e-02, ...,\n             5.99609375e-01,  1.55883789e-01, -1.79443359e-01],\n           [-8.02612305e-02,  3.20434570e-02, -3.72924805e-02, ...,\n             3.38623047e-01,  1.29150391e-01, -1.77856445e-01],\n           ...,\n           [-1.22558594e-01, -1.08276367e-01, -1.07666016e-01, ...,\n             8.12988281e-01,  2.85156250e-01, -1.23291016e-01],\n           [-1.86767578e-01, -1.18041992e-01, -1.20117188e-01, ...,\n             7.10937500e-01,  4.03564453e-01, -9.27124023e-02],\n           [-2.34375000e-01, -1.30371094e-01, -1.19018555e-01, ...,\n             5.26367188e-01,  3.73779297e-01, -1.35498047e-01]],\n  \n          ...,\n  \n          [[ 1.21459961e-01,  1.33666992e-01,  1.27441406e-01, ...,\n             1.91406250e-01,  1.74438477e-01, -5.23376465e-02],\n           [ 2.12707520e-02,  6.71386719e-02,  2.33001709e-02, ...,\n             1.25488281e-01,  1.48071289e-01,  3.60412598e-02],\n           [-1.75018311e-02,  9.33837891e-02,  4.15954590e-02, ...,\n             1.52969360e-02,  7.92694092e-03, -4.46472168e-02],\n           ...,\n           [ 2.54869461e-04, -1.26571655e-02, -1.03393555e-01, ...,\n             4.57031250e-01,  2.44506836e-01,  1.13891602e-01],\n           [ 2.21862793e-02,  1.16195679e-02,  3.57389450e-04, ...,\n             3.81103516e-01,  2.58056641e-01,  1.06933594e-01],\n           [-9.28344727e-02, -8.21533203e-02, -1.43432617e-02, ...,\n             1.71386719e-01,  1.44775391e-01, -3.08990479e-02]],\n  \n          [[ 1.32202148e-01,  4.28771973e-02, -2.31323242e-02, ...,\n            -1.37939453e-01, -1.56494141e-01, -5.78002930e-02],\n           [ 1.04492188e-01, -2.03857422e-01, -1.87133789e-01, ...,\n            -2.56103516e-01, -2.74414062e-01, -5.48095703e-02],\n           [-7.94067383e-02, -2.44384766e-01, -2.65625000e-01, ...,\n            -9.61914062e-02, -1.30859375e-01,  4.11376953e-02],\n           ...,\n           [-3.72619629e-02, -1.35620117e-01, -1.77978516e-01, ...,\n            -8.33740234e-02, -5.31921387e-02,  9.85717773e-02],\n           [-1.99584961e-01, -1.51367188e-01, -1.35009766e-01, ...,\n            -8.72802734e-02, -1.42974854e-02, -1.74522400e-03],\n           [-2.02392578e-01, -1.56494141e-01, -1.28540039e-01, ...,\n            -1.49536133e-01, -1.03698730e-01,  7.29370117e-03]],\n  \n          [[ 1.36230469e-01,  3.63281250e-01,  1.65649414e-01, ...,\n            -4.51660156e-03,  1.81762695e-01,  3.10302734e-01],\n           [ 1.00036621e-01,  2.76123047e-01, -4.37622070e-02, ...,\n             5.50781250e-01,  8.48144531e-01, -1.22619629e-01],\n           [ 8.34350586e-02,  1.12915039e-01, -1.69799805e-01, ...,\n            -2.63183594e-01, -2.04833984e-01, -2.50000000e-01],\n           ...,\n           [-1.85668945e-01, -2.60498047e-01, -4.65698242e-02, ...,\n             9.63745117e-02,  8.36791992e-02,  6.46972656e-02],\n           [-8.05053711e-02, -2.36328125e-01, -9.22851562e-02, ...,\n             2.74658203e-01,  1.64306641e-01,  2.11425781e-01],\n           [-2.42553711e-01, -2.76611328e-01, -1.89819336e-01, ...,\n            -1.68823242e-01, -1.87988281e-01, -2.62939453e-01]]],\n  \n  \n         [[[-1.31103516e-01, -1.93328857e-02,  1.93115234e-01, ...,\n            -2.49328613e-02,  4.26513672e-01,  7.29370117e-02],\n           [-2.39746094e-01, -1.89453125e-01,  2.39624023e-01, ...,\n            -2.52929688e-01,  3.02246094e-01, -2.20489502e-02],\n           [-1.86157227e-01,  2.73193359e-01,  1.03515625e+00, ...,\n             5.73425293e-02,  7.63183594e-01,  3.42285156e-01],\n           ...,\n           [-1.82495117e-01,  9.39331055e-02,  2.67486572e-02, ...,\n             6.53808594e-01,  7.47558594e-01,  6.16210938e-01],\n           [-1.50146484e-01,  1.61437988e-02, -7.33032227e-02, ...,\n             4.55078125e-01,  1.27050781e+00,  7.13867188e-01],\n           [ 1.55639648e-01,  8.39233398e-02,  5.90209961e-02, ...,\n             5.82519531e-01,  1.69531250e+00,  9.97070312e-01]],\n  \n          [[-1.05957031e-01,  7.82775879e-03,  1.41239166e-03, ...,\n             1.84448242e-01, -1.00097656e-01, -1.32202148e-01],\n           [-6.89086914e-02, -2.51312256e-02, -1.61621094e-01, ...,\n             3.61938477e-02, -1.53320312e-01, -1.61621094e-01],\n           [-1.76525116e-03,  3.36608887e-02,  1.69830322e-02, ...,\n             7.06787109e-02, -8.36791992e-02, -1.26586914e-01],\n           ...,\n           [ 1.04187012e-01,  2.46948242e-01,  3.75976562e-01, ...,\n            -1.98364258e-02, -3.95812988e-02, -1.62109375e-01],\n           [-3.14941406e-02,  1.48193359e-01,  3.12255859e-01, ...,\n            -8.65478516e-02,  8.15429688e-02, -2.34619141e-01],\n           [-1.21154785e-01, -9.59472656e-02,  1.28662109e-01, ...,\n            -1.09069824e-01, -4.43115234e-02, -1.76269531e-01]],\n  \n          [[-4.41360474e-03, -2.78320312e-01, -2.78564453e-01, ...,\n            -2.04467773e-02,  8.76464844e-01, -3.43322754e-02],\n           [-5.14526367e-02, -2.78564453e-01, -2.39868164e-01, ...,\n             5.92956543e-02,  2.82470703e-01, -6.82983398e-02],\n           [ 1.75628662e-02, -2.39746094e-01, -2.71240234e-01, ...,\n             6.24084473e-02,  4.19921875e-01, -9.31396484e-02],\n           ...,\n           [-5.40161133e-02, -1.28906250e-01, -1.23168945e-01, ...,\n            -6.38961792e-03, -2.50732422e-01, -2.71484375e-01],\n           [-1.79931641e-01, -2.25219727e-01, -1.71264648e-01, ...,\n             7.13378906e-01, -2.30468750e-01, -2.78076172e-01],\n           [-2.42553711e-01, -2.38647461e-01, -1.95800781e-01, ...,\n             3.96972656e-01, -4.36401367e-02, -2.45971680e-01]],\n  \n          ...,\n  \n          [[-5.74035645e-02, -2.30346680e-01, -2.16796875e-01, ...,\n            -6.64520264e-03,  3.19580078e-01,  8.65936279e-03],\n           [-1.88842773e-01, -2.77099609e-01, -2.09472656e-01, ...,\n            -5.62438965e-02,  1.84204102e-01,  9.21630859e-02],\n           [-1.72363281e-01, -2.55126953e-01, -2.10815430e-01, ...,\n             7.42187500e-02,  3.96972656e-01,  2.03247070e-01],\n           ...,\n           [ 6.48803711e-02, -7.99560547e-02, -3.22570801e-02, ...,\n            -1.07299805e-01, -2.23266602e-01, -2.14111328e-01],\n           [-1.44042969e-01, -1.54785156e-01, -5.41687012e-02, ...,\n             1.25854492e-01,  9.37652588e-03, -7.19604492e-02],\n           [-1.97998047e-01, -1.86157227e-01, -1.15722656e-01, ...,\n            -5.08117676e-02, -7.23266602e-02, -1.68334961e-01]],\n  \n          [[ 3.46435547e-01,  2.89062500e-01, -1.87377930e-01, ...,\n             8.46862793e-03, -1.56616211e-01, -8.86840820e-02],\n           [-2.15454102e-01, -9.17968750e-02, -2.72705078e-01, ...,\n            -1.59423828e-01, -2.63183594e-01, -1.58447266e-01],\n           [-2.35473633e-01,  3.66699219e-01, -1.42089844e-01, ...,\n            -1.14074707e-01, -1.65161133e-01,  7.14111328e-02],\n           ...,\n           [ 3.59497070e-02, -8.39843750e-02,  7.05566406e-02, ...,\n            -2.78564453e-01, -2.32055664e-01, -1.27319336e-01],\n           [-2.39868164e-01, -2.53417969e-01, -1.98364258e-01, ...,\n            -2.78320312e-01, -2.18994141e-01, -2.76367188e-01],\n           [-2.72949219e-01, -2.64160156e-01, -2.52929688e-01, ...,\n            -2.76611328e-01, -2.61474609e-01, -2.63183594e-01]],\n  \n          [[ 1.56542969e+00,  6.69433594e-01,  6.22070312e-01, ...,\n             8.65234375e-01,  3.29833984e-01,  1.70898438e-01],\n           [ 1.38867188e+00,  2.71093750e+00, -2.16430664e-01, ...,\n             5.72753906e-01, -1.98364258e-01, -1.05529785e-01],\n           [ 1.73242188e+00,  2.13500977e-01,  1.23437500e+00, ...,\n             2.44018555e-01,  3.54003906e-02, -1.55151367e-01],\n           ...,\n           [ 5.32836914e-02, -2.31201172e-01, -1.35009766e-01, ...,\n            -2.74658203e-01, -2.66357422e-01, -2.65625000e-01],\n           [-2.36938477e-01, -2.65625000e-01, -1.61621094e-01, ...,\n            -2.39501953e-01, -2.51220703e-01, -2.58789062e-01],\n           [-2.78320312e-01, -2.62695312e-01, -2.59765625e-01, ...,\n            -1.43676758e-01, -2.13989258e-01, -2.39501953e-01]]]],\n        shape=(16, 256, 40, 40), dtype=float32),\n  array([[[[-6.85424805e-02, -8.16650391e-02, -7.58666992e-02, ...,\n            -7.81860352e-02,  4.49829102e-02, -1.84692383e-01],\n           [-2.22290039e-01, -2.00683594e-01, -1.32812500e-01, ...,\n            -1.78100586e-01, -1.63208008e-01, -2.70263672e-01],\n           [-2.13012695e-01, -1.64794922e-01, -3.52478027e-02, ...,\n            -1.76269531e-01, -1.81274414e-01, -2.73681641e-01],\n           ...,\n           [-2.54882812e-01, -2.22534180e-01, -1.51000977e-01, ...,\n             1.21796875e+01,  1.06171875e+01,  5.03906250e+00],\n           [-2.40478516e-01, -1.69067383e-01,  3.52096558e-03, ...,\n             6.50390625e+00,  5.57812500e+00,  2.16601562e+00],\n           [-1.79931641e-01, -4.15039062e-02,  1.36840820e-01, ...,\n             2.07226562e+00,  1.56738281e+00,  5.76171875e-01]],\n  \n          [[-4.73785400e-03,  6.54907227e-02,  1.47460938e-01, ...,\n             1.03225708e-02, -4.07104492e-02, -3.18603516e-02],\n           [ 3.94592285e-02,  1.31225586e-01,  2.03613281e-01, ...,\n             1.20666504e-01,  4.53186035e-02,  3.30810547e-02],\n           [ 7.57446289e-02,  7.29370117e-02,  8.50830078e-02, ...,\n             1.52343750e-01,  7.96508789e-02,  8.06884766e-02],\n           ...,\n           [ 3.52294922e-01,  4.76318359e-01,  6.72851562e-01, ...,\n            -5.96046448e-08, -2.98023224e-07, -1.16539001e-03],\n           [ 4.07958984e-01,  4.61425781e-01,  5.14648438e-01, ...,\n            -1.63912773e-04, -5.68389893e-04, -6.03027344e-02],\n           [ 2.87353516e-01,  3.23486328e-01,  3.43750000e-01, ...,\n            -1.89819336e-01, -2.35595703e-01, -2.47802734e-01]],\n  \n          [[-1.60766602e-01, -1.03912354e-02,  1.27029419e-02, ...,\n            -1.88598633e-01, -2.38403320e-01, -1.07971191e-01],\n           [-1.05834961e-01,  1.37084961e-01,  2.22290039e-01, ...,\n            -1.99584961e-01, -2.38403320e-01, -5.92956543e-02],\n           [-1.81884766e-02,  1.81884766e-01,  2.49633789e-01, ...,\n            -2.10327148e-01, -2.44506836e-01, -7.68432617e-02],\n           ...,\n           [-1.16149902e-01,  1.72973633e-01,  3.12988281e-01, ...,\n            -1.37090683e-06, -6.49690628e-06, -4.77600098e-03],\n           [-1.20727539e-01,  1.75415039e-01,  3.84765625e-01, ...,\n            -1.81484222e-03, -4.24575806e-03, -1.17492676e-01],\n           [-1.10351562e-01,  6.48803711e-02,  3.01269531e-01, ...,\n            -2.77587891e-01, -2.64160156e-01, -2.24487305e-01]],\n  \n          ...,\n  \n          [[-1.45019531e-01, -1.56005859e-01, -1.40869141e-01, ...,\n            -1.35375977e-01, -1.10473633e-01, -1.19323730e-01],\n           [-7.52563477e-02, -3.63769531e-02, -2.33154297e-02, ...,\n            -5.10864258e-02, -3.57971191e-02,  1.19934082e-02],\n           [-7.29370117e-02, -3.99169922e-02, -9.47570801e-03, ...,\n            -4.13513184e-02, -9.40551758e-02,  2.97241211e-02],\n           ...,\n           [ 6.35375977e-02,  9.72290039e-02,  1.92871094e-01, ...,\n            -2.98023224e-07, -1.25169754e-06, -1.90448761e-03],\n           [ 8.90502930e-02,  1.94824219e-01,  2.66601562e-01, ...,\n            -5.33580780e-04, -1.31130219e-03, -8.92944336e-02],\n           [ 4.45251465e-02,  1.15417480e-01,  2.20703125e-01, ...,\n            -2.64160156e-01, -2.75634766e-01, -2.50488281e-01]],\n  \n          [[-1.00769043e-01, -8.68530273e-02, -1.75170898e-02, ...,\n            -6.31713867e-02, -1.82952881e-02, -7.76367188e-02],\n           [-1.54174805e-01, -1.02905273e-01,  6.06536865e-03, ...,\n            -3.84216309e-02,  8.17871094e-03, -1.26953125e-01],\n           [-9.28344727e-02, -1.29760742e-01, -1.62109375e-01, ...,\n            -1.95922852e-01, -6.56127930e-02, -1.27075195e-01],\n           ...,\n           [ 5.75866699e-02,  1.49291992e-01, -2.50434875e-03, ...,\n            -1.78813934e-07, -3.57627869e-07, -6.27040863e-04],\n           [ 1.47583008e-01,  2.10327148e-01,  1.55029297e-01, ...,\n            -4.80175018e-04, -6.31332397e-04, -2.83660889e-02],\n           [-5.49316406e-02,  8.50830078e-02,  4.31213379e-02, ...,\n            -1.92382812e-01, -1.52465820e-01, -2.34985352e-01]],\n  \n          [[ 1.03393555e-01,  5.01403809e-02, -2.31567383e-01, ...,\n            -1.69067383e-01, -1.03820801e-01,  7.04345703e-02],\n           [-8.91113281e-02, -2.08251953e-01, -2.47680664e-01, ...,\n            -7.45849609e-02,  1.15539551e-01,  5.69152832e-03],\n           [ 2.90527344e-01, -6.14624023e-02, -4.66003418e-02, ...,\n            -5.49316406e-02,  1.06872559e-01,  2.13623047e-01],\n           ...,\n           [ 1.08398438e+00,  1.08886719e+00,  9.51171875e-01, ...,\n            -6.08215332e-02, -4.00085449e-02, -2.57812500e-01],\n           [ 1.58886719e+00,  1.23242188e+00,  7.50976562e-01, ...,\n            -2.75146484e-01, -2.70996094e-01,  6.34765625e-01],\n           [ 1.88378906e+00,  1.97070312e+00,  1.78125000e+00, ...,\n             2.11718750e+00,  1.17968750e+00,  2.06176758e-01]]],\n  \n  \n         [[[-4.80651855e-02, -4.71496582e-02, -4.01306152e-02, ...,\n             1.24664307e-02,  2.00653076e-02, -1.88354492e-01],\n           [-2.19482422e-01, -1.93359375e-01, -1.94824219e-01, ...,\n            -1.32080078e-01, -1.39404297e-01, -2.62207031e-01],\n           [-2.20336914e-01, -1.88842773e-01, -1.63452148e-01, ...,\n            -4.58984375e-02, -9.23461914e-02, -2.57812500e-01],\n           ...,\n           [ 2.46093750e-01,  9.12475586e-02, -1.03210449e-01, ...,\n             1.53930664e-01,  2.44873047e-01, -1.80175781e-01],\n           [ 2.32788086e-01,  2.64739990e-02, -1.30126953e-01, ...,\n             1.14624023e-01,  3.71826172e-01, -1.14562988e-01],\n           [ 3.05175781e-01,  2.20214844e-01,  9.71069336e-02, ...,\n             2.59521484e-01,  5.84472656e-01, -3.28063965e-02]],\n  \n          [[-5.54504395e-02,  1.22680664e-02,  1.30981445e-01, ...,\n             9.67407227e-02,  2.03247070e-02,  3.68041992e-02],\n           [ 6.51168823e-03,  7.91015625e-02,  1.70898438e-01, ...,\n             1.57348633e-01,  4.87976074e-02,  6.68334961e-02],\n           [ 3.48510742e-02,  1.13281250e-01,  1.62963867e-01, ...,\n             1.57104492e-01,  3.85131836e-02,  7.16552734e-02],\n           ...,\n           [-5.53283691e-02, -1.17874146e-02,  1.29638672e-01, ...,\n            -5.13458252e-03, -4.15954590e-02, -9.73510742e-02],\n           [-4.84924316e-02,  1.74407959e-02,  1.16210938e-01, ...,\n            -6.71997070e-02, -1.18591309e-01, -1.39404297e-01],\n           [-9.55200195e-02, -9.60540771e-03,  7.83081055e-02, ...,\n            -7.81860352e-02, -1.20300293e-01, -1.22924805e-01]],\n  \n          [[ 1.41067505e-02,  5.39855957e-02,  7.61032104e-03, ...,\n            -1.74560547e-01, -1.75415039e-01, -5.62744141e-02],\n           [-4.50897217e-03, -8.29315186e-03, -3.35083008e-02, ...,\n            -1.56005859e-01, -1.90063477e-01, -7.32421875e-02],\n           [ 8.91113281e-02, -1.61285400e-02,  6.62841797e-02, ...,\n            -3.85131836e-02, -1.59667969e-01, -1.07421875e-01],\n           ...,\n           [-1.81396484e-01, -9.75952148e-02, -9.11712646e-03, ...,\n            -2.60253906e-01, -2.68066406e-01, -1.53686523e-01],\n           [-2.24975586e-01, -1.92016602e-01, -1.12182617e-01, ...,\n            -2.60498047e-01, -2.37426758e-01, -1.43798828e-01],\n           [-2.08007812e-01, -1.75292969e-01, -1.40136719e-01, ...,\n            -2.34375000e-01, -2.37670898e-01, -1.81884766e-01]],\n  \n          ...,\n  \n          [[-1.53076172e-01, -1.53930664e-01, -1.97143555e-01, ...,\n            -1.18591309e-01, -1.46850586e-01, -1.54418945e-01],\n           [-6.22253418e-02, -4.58374023e-02, -1.26098633e-01, ...,\n            -5.37719727e-02, -1.40380859e-01, -1.14929199e-01],\n           [-4.54101562e-02, -8.63037109e-02, -5.55114746e-02, ...,\n             1.77917480e-02, -7.45239258e-02, -5.42907715e-02],\n           ...,\n           [-1.90124512e-02, -1.45629883e-01, -1.67358398e-01, ...,\n            -2.16552734e-01, -1.52709961e-01, -5.21850586e-02],\n           [-8.57543945e-02, -1.60156250e-01, -1.42578125e-01, ...,\n            -1.80175781e-01, -1.40502930e-01, -9.24682617e-02],\n           [-1.12548828e-01, -1.36474609e-01, -1.11938477e-01, ...,\n            -1.50390625e-01, -9.52148438e-02, -1.16882324e-01]],\n  \n          [[-1.56555176e-02, -2.99835205e-02,  2.85644531e-01, ...,\n             3.06396484e-01,  3.43505859e-01,  2.21069336e-01],\n           [ 2.38037109e-02,  2.30102539e-02,  3.57910156e-01, ...,\n             5.41992188e-01,  3.03222656e-01, -2.92663574e-02],\n           [ 3.93676758e-02, -1.29638672e-01,  3.10791016e-01, ...,\n             3.87207031e-01,  2.68554688e-01,  2.69012451e-02],\n           ...,\n           [-2.48291016e-01,  7.76367188e-02,  2.82958984e-01, ...,\n             1.29638672e-01,  9.27124023e-02, -1.25366211e-01],\n           [-2.58300781e-01,  6.42776489e-03,  2.60009766e-01, ...,\n            -1.50390625e-01, -2.20092773e-01, -1.88720703e-01],\n           [-2.78564453e-01, -2.34863281e-01, -1.25122070e-01, ...,\n            -2.75634766e-01, -2.71728516e-01, -2.69531250e-01]],\n  \n          [[ 1.16760254e-01, -2.01782227e-01, -4.70581055e-02, ...,\n            -2.36450195e-01,  1.23962402e-01,  1.70410156e-01],\n           [ 1.90795898e-01,  5.22766113e-02, -1.16638184e-01, ...,\n            -1.47460938e-01, -1.95434570e-01, -2.76855469e-01],\n           [ 4.72412109e-01,  6.19628906e-01,  2.01171875e-01, ...,\n            -2.60986328e-01, -2.56103516e-01, -2.78320312e-01],\n           ...,\n           [-2.13134766e-01,  4.73876953e-01,  7.23144531e-01, ...,\n             9.21386719e-01,  5.34179688e-01,  1.71752930e-01],\n           [-6.78100586e-02,  2.09350586e-01,  7.11669922e-02, ...,\n            -7.35473633e-02,  2.39624023e-01, -8.22753906e-02],\n           [-1.69525146e-02,  3.95507812e-01,  9.80468750e-01, ...,\n             6.64550781e-01, -1.99707031e-01, -6.79321289e-02]]],\n  \n  \n         [[[-1.38671875e-01, -9.21630859e-02,  1.30126953e-01, ...,\n             1.04980469e-01,  1.28173828e-01, -7.75756836e-02],\n           [-2.35717773e-01, -1.82861328e-01, -1.86004639e-02, ...,\n            -9.65576172e-02,  9.33837891e-02, -2.07397461e-01],\n           [-1.81884766e-01, -2.88085938e-02,  2.33459473e-02, ...,\n             5.01708984e-02,  1.41479492e-01, -2.33398438e-01],\n           ...,\n           [-6.14318848e-02, -5.52368164e-03, -8.18481445e-02, ...,\n             2.45849609e-01,  1.92016602e-01, -2.10449219e-01],\n           [ 1.56402588e-02, -3.42407227e-02, -7.39135742e-02, ...,\n             2.95166016e-01,  1.99951172e-01, -1.90429688e-01],\n           [ 7.12890625e-02,  1.40136719e-01,  9.18579102e-02, ...,\n             3.69873047e-01,  2.98095703e-01, -7.41577148e-02]],\n  \n          [[ 1.21093750e-01,  3.92150879e-02, -5.30700684e-02, ...,\n            -1.47460938e-01, -1.65527344e-01, -7.42187500e-02],\n           [ 1.03393555e-01,  3.16162109e-02, -9.22241211e-02, ...,\n            -1.64550781e-01, -1.88720703e-01, -1.18347168e-01],\n           [-5.57250977e-02, -6.43920898e-02, -9.72900391e-02, ...,\n            -1.08764648e-01, -1.52465820e-01, -1.40258789e-01],\n           ...,\n           [ 2.38037109e-02,  1.29150391e-01,  3.31298828e-01, ...,\n             1.30859375e-01,  7.83081055e-02,  1.01562500e-01],\n           [-7.41195679e-03,  7.96508789e-02,  2.02880859e-01, ...,\n             1.42089844e-01,  8.47778320e-02,  1.00585938e-01],\n           [-3.45458984e-02, -1.45797729e-02,  6.57348633e-02, ...,\n             1.65893555e-01,  1.06018066e-01,  6.45751953e-02]],\n  \n          [[-1.92626953e-01,  8.89282227e-02,  7.94067383e-02, ...,\n            -1.08154297e-01, -1.80908203e-01, -1.70043945e-01],\n           [-1.63085938e-01,  9.05761719e-02,  1.64672852e-01, ...,\n            -9.80377197e-04, -1.88598633e-01, -1.95434570e-01],\n           [-1.25579834e-02,  2.73590088e-02,  1.58569336e-01, ...,\n             3.21655273e-02, -1.64794922e-01, -1.35375977e-01],\n           ...,\n           [-2.22412109e-01,  6.97326660e-03,  1.43188477e-01, ...,\n             5.86700439e-03, -2.01171875e-01, -1.99951172e-01],\n           [-2.29980469e-01, -3.66210938e-02, -4.00695801e-02, ...,\n            -8.36181641e-02, -2.25097656e-01, -1.95922852e-01],\n           [-1.82250977e-01, -3.64990234e-02, -8.83178711e-02, ...,\n            -3.25927734e-02, -1.97387695e-01, -2.09838867e-01]],\n  \n          ...,\n  \n          [[-1.79809570e-01, -1.95434570e-01, -2.33276367e-01, ...,\n            -2.22045898e-01, -2.08374023e-01, -2.09350586e-01],\n           [-9.78393555e-02, -1.18591309e-01, -1.32934570e-01, ...,\n            -6.18896484e-02, -8.27636719e-02, -1.65161133e-01],\n           [-1.92565918e-02, -7.26928711e-02, -3.92761230e-02, ...,\n             4.64477539e-02, -6.59790039e-02, -1.47949219e-01],\n           ...,\n           [-1.01623535e-02, -2.56042480e-02, -3.25622559e-02, ...,\n             7.34863281e-02, -6.12182617e-02, -9.17358398e-02],\n           [-5.41687012e-02, -6.39648438e-02, -3.86047363e-02, ...,\n             1.49780273e-01, -1.61743164e-02, -5.40161133e-02],\n           [-7.86743164e-02, -8.87451172e-02, -9.77172852e-02, ...,\n             1.57592773e-01,  9.46044922e-02,  2.37426758e-02]],\n  \n          [[-1.05514526e-02, -9.61303711e-03, -4.20532227e-02, ...,\n            -1.48681641e-01, -2.04833984e-01, -1.48681641e-01],\n           [ 1.07543945e-01,  2.38891602e-01, -6.88476562e-02, ...,\n            -1.17187500e-01, -6.68334961e-02, -4.58679199e-02],\n           [-1.26586914e-01, -1.25854492e-01, -6.92138672e-02, ...,\n            -7.75146484e-02, -3.02124023e-02, -9.83276367e-02],\n           ...,\n           [-7.74536133e-02,  6.66503906e-01,  9.82421875e-01, ...,\n             1.78100586e-01,  2.31811523e-01,  2.19238281e-01],\n           [-1.44409180e-01,  4.42626953e-01,  5.67382812e-01, ...,\n             1.90063477e-01,  2.93701172e-01,  3.19580078e-01],\n           [-2.46704102e-01, -9.82055664e-02, -9.33837891e-02, ...,\n             9.05609131e-03,  3.21044922e-02,  1.16943359e-01]],\n  \n          [[ 1.27929688e+00,  3.55712891e-01,  3.62548828e-02, ...,\n             3.57177734e-01,  3.19824219e-01,  5.53710938e-01],\n           [-5.40466309e-02,  8.29589844e-01,  5.27343750e-01, ...,\n            -1.56494141e-01,  1.98242188e-01, -7.06787109e-02],\n           [-1.19018555e-01, -8.80737305e-02,  2.99804688e-01, ...,\n            -8.37402344e-02,  2.13745117e-01, -1.45751953e-01],\n           ...,\n           [ 8.36914062e-01,  3.66943359e-01,  9.59960938e-01, ...,\n             1.11328125e+00,  6.23535156e-01,  2.88085938e-01],\n           [ 1.28515625e+00,  3.22753906e-01,  5.40527344e-01, ...,\n             7.63671875e-01,  3.44238281e-01,  1.45263672e-01],\n           [ 1.36816406e+00,  1.15429688e+00,  1.21289062e+00, ...,\n             1.02832031e+00,  6.10839844e-01,  1.02148438e+00]]],\n  \n  \n         ...,\n  \n  \n         [[[-8.70361328e-02, -1.70043945e-01, -6.20117188e-02, ...,\n            -2.15148926e-02, -2.38189697e-02, -1.84936523e-01],\n           [-2.53417969e-01, -2.44384766e-01,  1.95007324e-02, ...,\n            -8.38623047e-02, -3.96728516e-02, -2.52685547e-01],\n           [-2.42187500e-01, -2.23999023e-01,  9.25445557e-03, ...,\n            -7.09228516e-02,  5.77163696e-03, -2.55615234e-01],\n           ...,\n           [-1.25976562e-01, -8.70971680e-02, -1.42333984e-01, ...,\n             3.00537109e-01,  2.27783203e-01, -2.10205078e-01],\n           [-7.92846680e-02, -1.21704102e-01, -1.66137695e-01, ...,\n             1.84204102e-01,  1.84204102e-01, -2.09350586e-01],\n           [ 1.37329102e-01,  3.35693359e-02, -3.26232910e-02, ...,\n             2.99560547e-01,  4.01611328e-01,  3.70483398e-02]],\n  \n          [[ 6.57348633e-02,  2.10327148e-01,  2.11303711e-01, ...,\n             6.22558594e-02,  6.11114502e-03,  9.75728035e-05],\n           [ 1.47460938e-01,  1.88842773e-01,  2.06054688e-01, ...,\n             1.15417480e-01, -1.25656128e-02,  4.39147949e-02],\n           [ 5.19104004e-02,  1.83471680e-01,  2.44140625e-01, ...,\n             8.16650391e-02,  1.42364502e-02,  5.86853027e-02],\n           ...,\n           [ 1.27807617e-01,  2.16796875e-01,  3.48876953e-01, ...,\n             1.45996094e-01,  7.83691406e-02,  9.50622559e-03],\n           [ 1.23718262e-01,  1.88354492e-01,  3.40576172e-01, ...,\n             1.00830078e-01, -2.46734619e-02, -7.71484375e-02],\n           [ 1.76849365e-02,  8.62426758e-02,  2.21069336e-01, ...,\n            -1.14746094e-02, -5.74340820e-02, -7.91625977e-02]],\n  \n          [[-1.28417969e-01,  2.57812500e-01,  2.27783203e-01, ...,\n            -1.05041504e-01, -1.63085938e-01, -7.94677734e-02],\n           [-1.11633301e-01,  2.87841797e-01,  9.17968750e-02, ...,\n            -1.95678711e-01, -1.99340820e-01, -6.95800781e-02],\n           [ 1.77154541e-02,  2.83447266e-01,  1.62719727e-01, ...,\n            -1.66259766e-01, -1.10656738e-01, -2.18353271e-02],\n           ...,\n           [-1.90185547e-01, -1.19201660e-01,  1.74560547e-02, ...,\n            -2.02148438e-01, -2.57324219e-01, -1.47949219e-01],\n           [-2.58544922e-01, -1.80053711e-01,  2.36206055e-02, ...,\n            -2.23266602e-01, -2.74658203e-01, -1.75170898e-01],\n           [-2.60009766e-01, -1.99218750e-01, -1.05667114e-02, ...,\n            -2.33398438e-01, -2.55615234e-01, -1.93725586e-01]],\n  \n          ...,\n  \n          [[-1.12365723e-01, -7.17773438e-02, -7.91625977e-02, ...,\n            -2.08282471e-02,  6.92367554e-03, -2.72827148e-02],\n           [-4.55627441e-02,  5.26123047e-02,  2.94342041e-02, ...,\n             6.40869141e-02,  1.02905273e-01,  3.99780273e-02],\n           [-5.66406250e-02, -3.25622559e-02,  4.27246094e-02, ...,\n            -3.08380127e-02,  1.77917480e-02, -1.35955811e-02],\n           ...,\n           [-1.77192688e-03, -9.94110107e-03,  1.69372559e-02, ...,\n            -1.35009766e-01, -1.12304688e-01,  1.90124512e-02],\n           [-4.58679199e-02, -3.85131836e-02,  3.60717773e-02, ...,\n            -1.43310547e-01, -1.40869141e-01, -1.44195557e-02],\n           [-1.10900879e-01, -8.39843750e-02,  3.09295654e-02, ...,\n            -7.73315430e-02, -5.77697754e-02, -1.63421631e-02]],\n  \n          [[ 1.66503906e-01,  8.18481445e-02, -9.94262695e-02, ...,\n             1.52099609e-01,  1.56982422e-01,  6.37207031e-02],\n           [ 1.18408203e-01,  1.59301758e-01, -2.59765625e-01, ...,\n             2.90039062e-01,  1.38671875e-01, -5.82275391e-02],\n           [-1.39541626e-02,  1.34887695e-01, -7.70263672e-02, ...,\n             5.42602539e-02, -7.44018555e-02, -4.82788086e-02],\n           ...,\n           [-1.83227539e-01,  8.23974609e-02,  1.16943359e-01, ...,\n             1.79199219e-01,  2.70019531e-01,  2.72705078e-01],\n           [-1.55883789e-01,  8.58154297e-02,  7.94067383e-02, ...,\n             3.27148438e-01,  2.46582031e-01,  1.37207031e-01],\n           [-2.77099609e-01, -2.30834961e-01, -6.90307617e-02, ...,\n            -1.77490234e-01, -2.48291016e-01, -2.45361328e-01]],\n  \n          [[ 6.18652344e-01,  5.10253906e-01,  5.60546875e-01, ...,\n             1.97753906e-01,  4.10888672e-01,  8.25683594e-01],\n           [ 7.42797852e-02,  7.76855469e-01, -1.41723633e-01, ...,\n            -6.64062500e-02,  2.45849609e-01,  1.69189453e-01],\n           [ 1.43798828e-01,  3.01757812e-01, -2.57080078e-01, ...,\n             1.92626953e-01, -4.27246094e-02, -1.31591797e-01],\n           ...,\n           [ 4.37988281e-01,  1.06933594e+00,  7.33886719e-01, ...,\n             1.31835938e+00,  1.04589844e+00,  5.76171875e-01],\n           [ 7.35351562e-01,  1.94531250e+00,  5.46386719e-01, ...,\n             2.78320312e-01,  4.88037109e-01,  8.20312500e-01],\n           [ 2.86132812e-01,  1.20117188e+00,  1.23437500e+00, ...,\n             3.99414062e-01,  1.06054688e+00,  9.52148438e-01]]],\n  \n  \n         [[[-2.10815430e-01, -1.37084961e-01,  4.10156250e-02, ...,\n             1.03515625e-01, -3.12500000e-02, -1.32324219e-01],\n           [-2.71484375e-01, -2.30102539e-01, -1.21093750e-01, ...,\n             2.35748291e-03,  3.11126709e-02, -2.23022461e-01],\n           [-2.73193359e-01, -2.57080078e-01, -2.25952148e-01, ...,\n             2.62451172e-02,  1.70593262e-02, -2.39379883e-01],\n           ...,\n           [-1.76757812e-01, -8.17871094e-02,  3.00979614e-03, ...,\n             4.30419922e-01,  3.90625000e-01, -1.52954102e-01],\n           [-1.96655273e-01, -1.31225586e-01, -3.79028320e-02, ...,\n             3.95507812e-01,  3.55224609e-01, -1.60766602e-01],\n           [-1.50756836e-01, -8.12988281e-02, -1.70135498e-02, ...,\n             4.12841797e-01,  3.38134766e-01, -1.46362305e-01]],\n  \n          [[ 2.97363281e-01,  3.43017578e-01,  3.28369141e-01, ...,\n             8.29467773e-02,  1.16394043e-01,  1.51611328e-01],\n           [ 3.97949219e-01,  4.14550781e-01,  4.70214844e-01, ...,\n             8.07495117e-02,  6.71386719e-02,  1.17980957e-01],\n           [ 3.56201172e-01,  4.50683594e-01,  6.07910156e-01, ...,\n             6.77490234e-02,  2.85034180e-02,  6.08215332e-02],\n           ...,\n           [ 2.93945312e-01,  3.72558594e-01,  4.19433594e-01, ...,\n             1.99218750e-01,  4.15039062e-02,  9.17358398e-02],\n           [ 2.87109375e-01,  3.61816406e-01,  3.86230469e-01, ...,\n             2.13500977e-01,  8.17260742e-02,  1.16577148e-01],\n           [ 1.83715820e-01,  3.09326172e-01,  3.08349609e-01, ...,\n             1.18347168e-01,  7.03125000e-02,  5.97839355e-02]],\n  \n          [[ 7.07626343e-03,  2.67822266e-01,  3.32763672e-01, ...,\n            -1.82247162e-03, -1.08581543e-01, -1.98486328e-01],\n           [ 2.68096924e-02,  4.21142578e-01,  3.39843750e-01, ...,\n            -1.41601562e-01, -2.08618164e-01, -5.99365234e-02],\n           [ 7.53784180e-02,  3.22509766e-01,  2.94433594e-01, ...,\n            -1.53442383e-01, -2.16186523e-01, -9.19189453e-02],\n           ...,\n           [-3.09295654e-02,  5.50842285e-02,  1.52221680e-01, ...,\n             4.30908203e-02, -1.79687500e-01, -1.65527344e-01],\n           [-6.97021484e-02,  3.74145508e-02,  9.64355469e-02, ...,\n            -2.20489502e-02, -1.93481445e-01, -1.44287109e-01],\n           [-1.11572266e-01, -2.83660889e-02,  9.31396484e-02, ...,\n            -4.44030762e-02, -1.73950195e-01, -1.53930664e-01]],\n  \n          ...,\n  \n          [[-1.55868530e-02,  6.70776367e-02,  3.35388184e-02, ...,\n            -9.80224609e-02, -1.03332520e-01, -1.00891113e-01],\n           [ 7.12890625e-02,  1.30615234e-01,  1.17492676e-01, ...,\n            -1.33666992e-01, -1.35864258e-01, -5.46875000e-02],\n           [-3.93066406e-02, -1.16043091e-02, -2.91748047e-02, ...,\n            -1.46118164e-01, -1.68090820e-01, -1.15844727e-01],\n           ...,\n           [ 6.32324219e-02, -2.89611816e-02, -4.53796387e-02, ...,\n             4.79736328e-02, -3.67736816e-02, -4.99877930e-02],\n           [-1.68457031e-02, -5.58776855e-02, -5.89294434e-02, ...,\n             2.99682617e-02, -4.12902832e-02, -3.07312012e-02],\n           [-7.39746094e-02, -7.55004883e-02, -7.76367188e-02, ...,\n             1.19934082e-02,  3.11584473e-02, -1.48010254e-02]],\n  \n          [[ 3.53759766e-01,  1.14440918e-01, -1.14257812e-01, ...,\n            -4.33654785e-02, -2.07397461e-01, -2.74414062e-01],\n           [ 3.40576172e-01,  1.30004883e-01,  5.02929688e-02, ...,\n             1.62475586e-01,  6.69555664e-02,  8.60595703e-02],\n           [ 1.80664062e-01,  1.66748047e-01,  1.46972656e-01, ...,\n             2.63427734e-01,  2.32421875e-01,  1.74560547e-01],\n           ...,\n           [ 1.01257324e-01,  2.44018555e-01,  6.77490234e-02, ...,\n            -1.09436035e-01,  4.04357910e-02,  2.08618164e-01],\n           [ 5.31005859e-02,  1.62475586e-01,  9.45434570e-02, ...,\n            -4.04052734e-02,  8.16040039e-02,  2.50732422e-01],\n           [-1.01623535e-01, -2.89764404e-02, -4.74853516e-02, ...,\n            -1.60278320e-01, -7.67822266e-02,  3.38134766e-02]],\n  \n          [[ 6.49414062e-01, -7.08007812e-02, -2.71728516e-01, ...,\n            -7.19604492e-02,  9.94262695e-02, -1.68457031e-01],\n           [ 4.33593750e-01,  1.10961914e-01, -1.38671875e-01, ...,\n            -2.16674805e-01, -2.47802734e-01, -1.70532227e-01],\n           [ 4.92919922e-01,  4.43603516e-01,  3.80615234e-01, ...,\n            -2.66601562e-01, -2.37548828e-01, -1.83227539e-01],\n           ...,\n           [ 1.02929688e+00,  9.47265625e-01,  5.07812500e-01, ...,\n             6.94580078e-02, -7.89794922e-02, -1.66473389e-02],\n           [ 5.44921875e-01,  4.45068359e-01,  9.80834961e-02, ...,\n            -6.24389648e-02, -1.23977661e-02,  2.87353516e-01],\n           [ 7.47558594e-01,  6.95800781e-01,  5.38574219e-01, ...,\n             4.08935547e-01,  5.17578125e-01,  8.12011719e-01]]],\n  \n  \n         [[[ 2.49633789e-02,  2.27905273e-01,  4.22363281e-01, ...,\n             1.18347168e-01,  1.12121582e-01, -1.29394531e-01],\n           [-1.02355957e-01,  2.69165039e-02,  2.20581055e-01, ...,\n            -9.61914062e-02, -7.66372681e-03, -2.00317383e-01],\n           [-1.29638672e-01,  8.84399414e-02,  3.42285156e-01, ...,\n            -1.28906250e-01, -5.72509766e-02, -2.19848633e-01],\n           ...,\n           [-2.11303711e-01, -1.72485352e-01, -7.12280273e-02, ...,\n             6.00585938e-01,  1.20410156e+00,  2.74505615e-02],\n           [-2.17773438e-01, -2.02758789e-01, -8.16040039e-02, ...,\n             6.51367188e-01,  9.26269531e-01,  5.86853027e-02],\n           [-2.95410156e-02, -5.25207520e-02,  1.74713135e-02, ...,\n             9.95117188e-01,  1.08886719e+00,  2.37182617e-01]],\n  \n          [[-1.35620117e-01, -1.72363281e-01, -1.49902344e-01, ...,\n            -1.28784180e-01, -1.37939453e-01, -6.26831055e-02],\n           [-1.39648438e-01, -1.95922852e-01, -2.01782227e-01, ...,\n            -9.34448242e-02, -1.44042969e-01, -5.99365234e-02],\n           [-1.79077148e-01, -1.83959961e-01, -1.83959961e-01, ...,\n            -2.25524902e-02, -4.95300293e-02,  9.26208496e-03],\n           ...,\n           [ 3.33496094e-01,  3.72558594e-01,  3.23974609e-01, ...,\n            -1.03210449e-01, -1.59912109e-01, -1.18347168e-01],\n           [ 2.68066406e-01,  3.53027344e-01,  3.79394531e-01, ...,\n            -1.41357422e-01, -1.46850586e-01, -1.11816406e-01],\n           [ 8.30078125e-02,  1.60156250e-01,  2.52929688e-01, ...,\n            -1.07360840e-01, -1.36718750e-01, -1.04797363e-01]],\n  \n          [[ 7.69042969e-02,  2.29614258e-01,  3.56445312e-02, ...,\n            -1.98120117e-01, -1.19323730e-01, -9.17968750e-02],\n           [ 7.15942383e-02,  2.40722656e-01, -1.51489258e-01, ...,\n            -1.98242188e-01, -1.88598633e-01, -7.91015625e-02],\n           [ 1.34887695e-01,  2.25952148e-01, -1.98608398e-01, ...,\n            -9.60083008e-02, -1.45629883e-01, -9.79003906e-02],\n           ...,\n           [-1.04003906e-01,  1.63696289e-01,  4.10156250e-01, ...,\n            -1.22985840e-01, -1.75903320e-01, -1.70745850e-02],\n           [-1.84082031e-01,  8.16040039e-02,  2.91748047e-01, ...,\n            -1.54541016e-01, -2.37182617e-01, -1.53076172e-01],\n           [-2.10083008e-01,  1.43203735e-02,  1.59179688e-01, ...,\n            -1.00524902e-01, -2.10083008e-01, -1.99951172e-01]],\n  \n          ...,\n  \n          [[-1.43066406e-01, -2.11181641e-01, -2.60742188e-01, ...,\n            -2.16674805e-01, -1.76879883e-01, -1.83593750e-01],\n           [-1.85241699e-02, -1.35375977e-01, -2.37060547e-01, ...,\n            -1.46362305e-01, -1.24755859e-01, -9.04541016e-02],\n           [ 1.77097321e-03, -4.57458496e-02, -2.11181641e-01, ...,\n            -1.27929688e-01, -1.40380859e-01, -1.25732422e-01],\n           ...,\n           [-3.24401855e-02, -4.29992676e-02,  1.57318115e-02, ...,\n            -1.01379395e-01, -9.82666016e-02, -2.61077881e-02],\n           [-7.42187500e-02, -7.79724121e-03,  2.19421387e-02, ...,\n            -1.44042969e-01, -1.88720703e-01, -1.41723633e-01],\n           [-1.21154785e-01, -5.32836914e-02, -1.17416382e-02, ...,\n            -1.38427734e-01, -1.45141602e-01, -1.41845703e-01]],\n  \n          [[-1.33300781e-01, -2.49511719e-01, -2.63427734e-01, ...,\n            -1.80541992e-01, -1.28417969e-01, -1.89697266e-01],\n           [-2.02636719e-01, -1.77612305e-01, -2.40234375e-01, ...,\n             1.04736328e-01,  8.78295898e-02, -1.77246094e-01],\n           [-1.28662109e-01, -4.92858887e-02, -5.23376465e-02, ...,\n            -2.44598389e-02, -5.89294434e-02, -1.77490234e-01],\n           ...,\n           [ 7.42340088e-03,  1.28662109e-01,  3.31420898e-02, ...,\n             7.66601562e-02, -1.36352539e-01, -1.52465820e-01],\n           [-1.31378174e-02,  1.53930664e-01,  1.28417969e-01, ...,\n            -2.20581055e-01, -2.17285156e-01, -1.60156250e-01],\n           [-2.31567383e-01, -1.19018555e-01,  3.95774841e-04, ...,\n            -2.76367188e-01, -2.65380859e-01, -2.77099609e-01]],\n  \n          [[ 4.55566406e-01, -1.54418945e-01, -1.72729492e-01, ...,\n            -2.32788086e-01, -8.41674805e-02,  5.97656250e-01],\n           [ 2.22045898e-01, -2.03125000e-01, -1.04797363e-01, ...,\n            -6.06689453e-02,  3.29589844e-02, -9.44824219e-02],\n           [ 5.86914062e-01,  2.79785156e-01, -2.66357422e-01, ...,\n            -2.75390625e-01, -2.31567383e-01, -2.62695312e-01],\n           ...,\n           [ 5.44433594e-01,  2.10205078e-01,  8.06274414e-02, ...,\n            -2.38403320e-01, -2.77587891e-01, -2.77587891e-01],\n           [ 1.18945312e+00,  5.03906250e-01,  2.68798828e-01, ...,\n            -1.90673828e-01, -2.08496094e-01, -2.22534180e-01],\n           [ 6.25976562e-01,  5.99121094e-01,  9.51171875e-01, ...,\n            -2.14355469e-01, -1.46972656e-01, -2.73193359e-01]]]],\n        shape=(16, 256, 20, 20), dtype=float32)],\n array([[[-3.37711900e-01, -4.78824973e-02, -1.13458538e+00,\n          -1.47095013e+00],\n         [-6.04473948e-01,  5.06344080e-01, -1.08185101e+00,\n          -1.26947308e+00],\n         [-1.56655982e-02, -1.05145335e-01, -5.24477959e-01,\n          -5.86489677e-01],\n         ...,\n         [-2.98712635e+00, -6.94914877e-01, -1.69063282e+00,\n          -1.95125294e+00],\n         [ 7.13456035e-01, -2.02122760e+00, -1.45672894e+00,\n          -1.43381023e+00],\n         [ 1.25731564e+00, -1.61057186e+00, -3.47556686e+00,\n          -3.85740280e+00]],\n \n        [[ 1.73851275e+00,  4.12191674e-02, -1.50110149e+00,\n          -1.45691204e+00],\n         [-7.11979270e-02,  3.62935901e-01, -1.12506390e+00,\n          -1.21637249e+00],\n         [ 2.50677645e-01, -2.03793859e+00, -2.73311329e+00,\n          -2.79170704e+00],\n         ...,\n         [-9.32235837e-01,  1.05321574e+00, -1.21358204e+00,\n          -8.65437508e-01],\n         [ 7.11649895e-01, -8.90628040e-01, -2.51682663e+00,\n          -2.71775436e+00],\n         [-2.45560884e+00,  2.76933104e-01, -1.49825001e+00,\n          -1.25752735e+00]],\n \n        [[ 9.38407302e-01,  1.32952619e+00,  4.53462601e-02,\n          -4.17544365e-01],\n         [-3.45623851e-01,  6.28682554e-01,  4.76010323e-01,\n          -1.41177177e-01],\n         [-3.66009593e-01,  6.15325511e-01,  3.67611885e-01,\n          -1.11880302e-01],\n         ...,\n         [ 6.55040938e+04,  6.55040664e+04,  6.55050195e+04,\n           6.55048711e+04],\n         [ 6.55040938e+04,  6.55040664e+04,  6.55050195e+04,\n           6.55048711e+04],\n         [ 6.55040938e+04,  6.55040664e+04,  6.55050195e+04,\n           6.55048711e+04]],\n \n        ...,\n \n        [[ 3.56039330e-02,  3.34319651e-01, -5.59145927e-01,\n          -6.81216240e-01],\n         [ 1.01137483e+00,  8.92304301e-01, -7.13442802e-01,\n          -7.43227959e-01],\n         [ 4.12288308e-02,  2.92571604e-01, -6.08462334e-01,\n          -7.54946709e-01],\n         ...,\n         [-9.12691832e-01, -1.32748747e+00, -2.52439499e+00,\n          -3.20237350e+00],\n         [ 1.56422448e+00, -2.67988473e-01, -2.53757858e+00,\n          -1.81296921e+00],\n         [-1.30021548e+00, -1.50189593e-01, -1.83445358e+00,\n          -2.13572311e+00]],\n \n        [[ 1.55538023e-01, -5.54508567e-02, -2.25161552e-01,\n          -7.33950615e-01],\n         [ 1.16106915e+00,  9.04389262e-01, -1.61684990e-01,\n           2.19174385e-01],\n         [-7.30564535e-01, -1.51793170e+00,  4.35971260e-01,\n          -8.82388115e-01],\n         ...,\n         [ 1.29938412e+00,  8.59409571e-01, -2.70083427e-01,\n           2.33822823e-01],\n         [ 6.25211239e-01,  2.75610805e-01,  1.95109367e-01,\n          -1.50593758e-01],\n         [ 1.12902403e-01,  3.01263928e-01,  1.48168306e+01,\n           7.64096260e-01]],\n \n        [[-4.87469554e-01,  6.47736430e-01, -1.27722454e+00,\n          -1.26507854e+00],\n         [-2.49332786e-02,  2.25606799e-01, -1.60943890e+00,\n          -1.85553265e+00],\n         [ 5.68807483e-01,  1.52423024e-01,  5.02377510e-01,\n           6.28376007e-03],\n         ...,\n         [ 2.99099064e+00, -2.81740904e-01, -2.14939499e+00,\n          -2.12107468e+00],\n         [ 2.61670756e+00,  6.96504056e-01, -4.56980515e+00,\n          -4.20359421e+00],\n         [ 3.45298433e+00,  1.36523652e+00, -4.31296921e+00,\n          -3.00184250e+00]]], shape=(16, 300, 4), dtype=float32),\n array([[[-2.4003906 , -0.98095703, -1.5917969 , ..., -0.47143555,\n           2.53125   , -1.5332031 ],\n         [-3.1308594 ,  2.0761719 , -1.9990234 , ..., -1.1669922 ,\n          -0.83496094, -1.1152344 ],\n         [ 0.66064453, -3.0234375 , -2.34375   , ..., -3.8535156 ,\n          -2.8183594 , -3.5820312 ],\n         ...,\n         [-2.3710938 , -4.2539062 , -2.4824219 , ..., -4.0585938 ,\n          -3.3496094 , -3.6953125 ],\n         [-2.3730469 , -3.3222656 , -2.4726562 , ..., -3.5390625 ,\n          -3.4199219 , -3.390625  ],\n         [-2.375     , -3.5390625 , -2.4765625 , ..., -2.5644531 ,\n          -3.03125   , -2.9082031 ]],\n \n        [[-3.0332031 , -2.7441406 , -1.1796875 , ...,  0.8676758 ,\n          -0.7988281 , -1.40625   ],\n         [-3.0976562 , -2.890625  , -0.48095703, ...,  0.6669922 ,\n          -0.47802734, -1.5097656 ],\n         [-2.2050781 , -3.0449219 , -1.2207031 , ...,  0.3461914 ,\n          -0.48535156, -2.1269531 ],\n         ...,\n         [-3.6074219 , -3.4707031 , -2.7675781 , ..., -3.6601562 ,\n          -3.0800781 , -2.7558594 ],\n         [-3.2929688 , -4.1875    , -2.9199219 , ..., -3.6875    ,\n          -2.3789062 , -3.0390625 ],\n         [-2.3789062 , -4.015625  , -2.7441406 , ..., -3.7304688 ,\n          -3.1640625 , -3.0488281 ]],\n \n        [[-3.4824219 ,  1.0234375 , -1.3935547 , ..., -1.5751953 ,\n          -0.29223633, -0.6489258 ],\n         [ 0.52441406, -2.8398438 , -2.2519531 , ..., -3.9746094 ,\n          -2.9355469 , -3.5097656 ],\n         [ 0.2614746 , -3.6523438 , -2.6816406 , ..., -4.890625  ,\n          -3.421875  , -3.8867188 ],\n         ...,\n         [-3.7324219 , -5.6523438 , -2.5039062 , ..., -6.1523438 ,\n          -3.3691406 , -3.1347656 ],\n         [-3.7324219 , -5.6523438 , -2.5039062 , ..., -6.1523438 ,\n          -3.3691406 , -3.1347656 ],\n         [-3.7324219 , -5.6523438 , -2.5039062 , ..., -6.1523438 ,\n          -3.3691406 , -3.1347656 ]],\n \n        ...,\n \n        [[ 0.04351807, -3.2832031 , -2.4433594 , ..., -3.625     ,\n          -2.8574219 , -3.6230469 ],\n         [-1.8037109 , -1.8417969 , -0.29223633, ..., -0.85253906,\n          -1.2148438 , -1.5585938 ],\n         [-0.34448242, -3.6074219 , -2.4707031 , ..., -4.1601562 ,\n          -3.0117188 , -3.6425781 ],\n         ...,\n         [-2.9355469 , -3.9941406 , -2.3828125 , ..., -4.2226562 ,\n          -3.8164062 , -2.9921875 ],\n         [-3.9082031 , -4.5351562 , -2.3828125 , ..., -3.6796875 ,\n          -3.9257812 , -3.4746094 ],\n         [-2.3828125 , -3.6503906 , -2.8457031 , ..., -3.4511719 ,\n          -3.3320312 , -3.2617188 ]],\n \n        [[-3.2578125 , -0.99072266, -1.8056641 , ..., -1.5400391 ,\n           2.1191406 , -1.9541016 ],\n         [-2.875     ,  1.8769531 , -2.1464844 , ..., -1.9892578 ,\n          -1.6767578 , -1.4316406 ],\n         [ 0.34399414, -3.1992188 , -2.5683594 , ..., -3.4648438 ,\n          -3.3359375 , -3.8125    ],\n         ...,\n         [-2.9003906 , -2.4726562 , -3.0800781 , ..., -3.3203125 ,\n          -3.0136719 , -2.8515625 ],\n         [-2.4765625 , -3.8574219 , -2.9355469 , ..., -4.1679688 ,\n          -3.3261719 , -2.9726562 ],\n         [-2.4765625 , -4.3242188 , -2.7988281 , ..., -4.6757812 ,\n          -3.5429688 , -3.3417969 ]],\n \n        [[-3.0175781 ,  1.3261719 , -1.8652344 , ..., -1.3486328 ,\n          -1.0371094 , -1.2998047 ],\n         [-2.6484375 , -1.3339844 , -1.7265625 , ..., -1.1953125 ,\n           1.1640625 , -1.8740234 ],\n         [ 0.99658203, -3.4414062 , -2.734375  , ..., -4.6914062 ,\n          -3.1035156 , -4.046875  ],\n         ...,\n         [-2.9882812 , -4.3164062 , -3.3808594 , ..., -3.7285156 ,\n          -3.2050781 , -3.4023438 ],\n         [-2.3808594 , -3.1640625 , -2.671875  , ..., -2.4746094 ,\n          -3.1816406 , -3.0546875 ],\n         [-3.6328125 , -3.125     , -2.9238281 , ..., -3.1972656 ,\n          -2.9824219 , -2.6972656 ]]], shape=(16, 300, 7), dtype=float32),\n array([[[0.41636536, 0.48803166, 0.24331588, 0.18679823],\n         [0.3533208 , 0.62394905, 0.2531559 , 0.21934745],\n         [0.49608365, 0.47373787, 0.37180573, 0.35744068],\n         ...,\n         [0.04801086, 0.3329406 , 0.15569264, 0.12441681],\n         [0.67116433, 0.11699212, 0.18896814, 0.1925057 ],\n         [0.7785637 , 0.16650924, 0.03001548, 0.02068585]],\n \n        [[0.8504981 , 0.5103033 , 0.18226129, 0.18894006],\n         [0.48220798, 0.58975095, 0.24507318, 0.22857547],\n         [0.5623433 , 0.1152768 , 0.06104746, 0.05777396],\n         ...,\n         [0.28247136, 0.74139196, 0.22906786, 0.29620454],\n         [0.6707656 , 0.29098022, 0.07468696, 0.0619338 ],\n         [0.07902934, 0.56879413, 0.18268667, 0.22139984]],\n \n        [[0.71877784, 0.7907622 , 0.5113346 , 0.39710456],\n         [0.41444403, 0.6521907 , 0.6168053 , 0.46476424],\n         [0.40950558, 0.64915466, 0.59088176, 0.47205904],\n         ...,\n         [1.        , 1.        , 1.        , 1.        ],\n         [1.        , 1.        , 1.        , 1.        ],\n         [1.        , 1.        , 1.        , 1.        ]],\n \n        ...,\n \n        [[0.50890005, 0.58281004, 0.3637451 , 0.33598992],\n         [0.7332891 , 0.7093654 , 0.32883856, 0.3222987 ],\n         [0.51030576, 0.5726256 , 0.35241005, 0.3197444 ],\n         ...,\n         [0.2864493 , 0.20957527, 0.0741656 , 0.0390765 ],\n         [0.8269587 , 0.433401  , 0.07326541, 0.14027965],\n         [0.21412876, 0.462523  , 0.13770857, 0.1056729 ]],\n \n        [[0.5388063 , 0.48614085, 0.44394627, 0.3243284 ],\n         [0.7615269 , 0.7118507 , 0.45966658, 0.5545753 ],\n         [0.32507086, 0.1797663 , 0.6072987 , 0.29268315],\n         ...,\n         [0.7857313 , 0.70253724, 0.4328866 , 0.5581908 ],\n         [0.65140283, 0.5684698 , 0.5486232 , 0.46242258],\n         [0.5281957 , 0.57475144, 0.99999964, 0.6822424 ]],\n \n        [[0.38048986, 0.65650016, 0.21802306, 0.22010088],\n         [0.49376702, 0.55616367, 0.16666654, 0.13522461],\n         [0.63848794, 0.5380322 , 0.62301785, 0.50157094],\n         ...,\n         [0.9521654 , 0.43002704, 0.10438778, 0.10706528],\n         [0.9319291 , 0.6674122 , 0.01025375, 0.01472181],\n         [0.96932006, 0.79660946, 0.0132167 , 0.04734271]]],\n       shape=(16, 300, 4), dtype=float32),\n array([[[-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         ...,\n         [-3.6699219, -4.765625 , -2.7324219, ..., -3.4863281,\n          -3.734375 , -2.7246094],\n         [-3.3945312, -4.3007812, -2.5234375, ..., -2.7871094,\n          -3.3574219, -2.46875  ],\n         [-3.5253906, -5.1601562, -2.9550781, ..., -3.6757812,\n          -3.6289062, -2.8769531]],\n \n        [[-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         ...,\n         [-3.6777344, -5.328125 , -3.5332031, ..., -4.6484375,\n          -4.2695312, -3.0976562],\n         [-3.4179688, -5.2304688, -3.8476562, ..., -4.6601562,\n          -4.5429688, -2.9335938],\n         [-3.4140625, -5.8203125, -4.0742188, ..., -4.671875 ,\n          -4.4414062, -3.2207031]],\n \n        [[-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         ...,\n         [-4.265625 , -3.5058594, -2.765625 , ..., -3.234375 ,\n          -3.734375 , -2.4882812],\n         [-4.1015625, -3.4414062, -2.9609375, ..., -3.0039062,\n          -3.984375 , -2.6894531],\n         [-4.0117188, -4.5742188, -3.6914062, ..., -3.7832031,\n          -4.6484375, -3.0371094]],\n \n        ...,\n \n        [[-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         ...,\n         [-4.4179688, -4.7929688, -3.5390625, ..., -4.8046875,\n          -4.5390625, -2.8867188],\n         [-3.9355469, -5.1210938, -3.671875 , ..., -4.7148438,\n          -4.6601562, -3.1699219],\n         [-4.0351562, -5.9726562, -4.03125  , ..., -5.0273438,\n          -4.796875 , -3.3457031]],\n \n        [[-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         ...,\n         [-3.7167969, -2.7402344, -2.9511719, ..., -3.390625 ,\n          -4.2226562, -2.9082031],\n         [-3.796875 , -2.7539062, -3.3320312, ..., -3.6953125,\n          -4.3164062, -3.0390625],\n         [-3.7695312, -3.9355469, -4.046875 , ..., -3.9550781,\n          -4.5664062, -3.25     ]],\n \n        [[-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         [-3.7324219, -5.6523438, -2.5039062, ..., -6.1523438,\n          -3.3691406, -3.1347656],\n         ...,\n         [-3.7890625, -4.8828125, -4.0039062, ..., -4.84375  ,\n          -4.0351562, -2.8652344],\n         [-3.6640625, -4.4570312, -4.046875 , ..., -4.640625 ,\n          -3.8125   , -2.9902344],\n         [-3.5390625, -5.2851562, -4.1171875, ..., -4.6601562,\n          -4.671875 , -3.3183594]]], shape=(16, 8400, 7), dtype=float32),\n array([[[ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         ...,\n         [ 1.8506343e+00,  3.6913028e+00, -2.4683256e+00, -2.3169584e+00],\n         [ 2.4191961e+00,  3.6624141e+00, -2.2451811e+00, -2.3203764e+00],\n         [ 3.5619082e+00,  3.6517062e+00, -2.2315092e+00, -2.3452787e+00]],\n \n        [[ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         ...,\n         [ 1.9082210e+00,  3.0913882e+00, -2.1509428e+00, -2.5005522e+00],\n         [ 2.3819036e+00,  2.8658023e+00, -1.9746733e+00, -2.1890287e+00],\n         [ 3.4438052e+00,  2.6773257e+00, -2.8101225e+00, -1.9395170e+00]],\n \n        [[ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         ...,\n         [ 1.3043087e+00,  2.4732242e+00, -2.6910686e-01, -1.7752104e+00],\n         [ 1.0835638e+00,  2.5542789e+00,  4.5346260e-02, -1.8897123e+00],\n         [ 1.7202945e+00,  2.3345523e+00, -8.5016155e-01, -1.7485991e+00]],\n \n        ...,\n \n        [[ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         ...,\n         [ 1.2823360e+00,  1.7906070e+00, -2.7887249e-01, -1.1492338e+00],\n         [ 2.4561224e+00,  3.1172671e+00, -2.1074858e+00, -2.6900053e+00],\n         [ 3.3433414e+00,  2.7056460e+00, -2.5874662e+00, -1.9517241e+00]],\n \n        [[ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         ...,\n         [ 5.3332090e-02,  1.4644351e+00,  7.9105806e+00, -4.0729046e-01],\n         [ 2.6325130e-01,  1.4019351e+00,  5.8324556e+00, -2.9547405e-01],\n         [ 1.1519351e+00,  1.1988101e+00,  1.5072823e-02, -2.6715374e-01]],\n \n        [[ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         [ 6.5504094e+04,  6.5504066e+04,  6.5505020e+04,  6.5504871e+04],\n         ...,\n         [ 1.8951290e+00,  2.5825992e+00, -8.9068890e-01, -1.7266264e+00],\n         [ 2.4419012e+00,  2.8911929e+00, -1.6846342e+00, -2.2446928e+00],\n         [ 2.9864078e+00,  2.4976382e+00, -2.2036772e+00, -2.0786772e+00]]],\n       shape=(16, 8400, 4), dtype=float32))\n\n\n\n# Get the logits\ntest_pred_logits = test_dataset_preds.predictions[0][1]\n\n# Get the boxes\ntest_pred_boxes = test_dataset_preds.predictions[0][2]\n\n# Get the label IDs\ntest_pred_label_ids = test_dataset_preds.label_ids\n\n# Check shapes\ntest_pred_logits.shape, test_pred_boxes.shape, len(test_pred_label_ids)\n\n((16, 300, 7), (16, 300, 4), 14)\n\n\n\nlen(processed_dataset[\"test\"])\n\n224\n\n\n\n%%time\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n# random_test_sample_outputs\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n[INFO] Making predictions on test item with index: 163\nCPU times: user 316 ms, sys: 0 ns, total: 316 ms\nWall time: 297 ms\n\n\n\n# image_processor.preprocess?\n\nTK - if your predictions aren‚Äôt the exact same, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.3, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=random_test_sample[\"labels\"][\"orig_size\"].unsqueeze(0) # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = half_boxes(random_test_sample_outputs_post_processed[0][\"boxes\"])\n\n# Create a list of labels to plot on the boxes \n# TK - Update the colours here\nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores:\")\nfor label in random_test_sample_labels_to_plot:\n    print(label)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_image(dataset[\"test\"][random_test_pred_index][\"image\"])),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\nUnused or unrecognized kwargs: annotations, masks_path.\n\n\n[INFO] Making predictions on test item with index: 173\n[INFO] Labels with scores:\nPred: bin (0.9228)\nPred: trash (0.6565)\nPred: hand (0.4087)\n\n\n\n\n\n\n\n\n\n\nrandom_test_sample[\"labels\"][\"orig_size\"].unsqueeze(0)\n\ntensor([[1280,  960]])\n\n\n\nTK - nice!!! these boxes look far better than our randomly predicted boxes with an untrained model‚Ä¶\nTK - plot the boxes versus the ground truth (e.g.¬†ground truth = green, predictions = red)\n\n\n15.1 TK - Predict on image from filepath\n\n# Pred on image from pathname\nfrom pathlib import Path\nfrom PIL import Image\npath_to_test_image_folder = Path(\"data/trashify_test_images\")\ntest_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\ntest_image_targ_filepath = random.choice(test_image_filepaths)\n# test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\ntest_image_pil = Image.open(test_image_targ_filepath)\ntest_image_preprocessed = image_processor.preprocess(images=test_image_pil,\n                                                     return_tensors=\"pt\")\n\ndef get_image_dimensions_from_pil(image: Image.Image) -&gt; torch.tensor:\n    \"\"\"\n    Convert the dimensions of a PIL image to a PyTorch tensor in the order (height, width).\n\n    Args:\n        image (Image.Image): The input PIL image.\n\n    Returns:\n        torch.Tensor: A tensor containing the height and width of the image.\n    \"\"\"\n    # Get (width, height) of image (PIL.Image.size returns width, height)\n    width, height = image.size\n\n    # Convert to a tensor in the order (height, width)\n    image_dimensions_tensor = torch.tensor([height, width])\n\n    return image_dimensions_tensor\n\n# Get image original size\ntest_image_size = get_image_dimensions_from_pil(image=test_image_pil)\n\n# Make predictions on the preprocessed image\nrandom_test_sample_outputs = model(pixel_values=test_image_preprocessed[\"pixel_values\"].to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\nTHRESHOLD = 0.2\n\n# Post process the predictions\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=THRESHOLD,\n    target_sizes=[test_image_size] # needs to be same length as batch dimension of the logits (e.g. [[height, width]])\n)\n\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a lsit of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\"\n                                     for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(\"[INFO] Labels with scores:\")\nfor item in random_test_sample_labels_to_plot:\n    print(item)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=test_image_pil),                    \n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[111], line 6\n      4 path_to_test_image_folder = Path(\"data/trashify_test_images\")\n      5 test_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\n----&gt; 6 test_image_targ_filepath = random.choice(test_image_filepaths)\n      7 # test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\n      8 test_image_pil = Image.open(test_image_targ_filepath)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/random.py:373, in Random.choice(self, seq)\n    370 # As an accommodation for NumPy, we don't use \"if not seq\"\n    371 # because bool(numpy.array()) raises a ValueError.\n    372 if not len(seq):\n--&gt; 373     raise IndexError('Cannot choose from an empty sequence')\n    374 return seq[self._randbelow(len(seq))]\n\nIndexError: Cannot choose from an empty sequence"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "16 TK - Upload our trained model to Hugging Face Hub",
    "text": "16 TK - Upload our trained model to Hugging Face Hub\nTK - Let‚Äôs make our model available for others to use.\n\n# TK\n# Make extensions to make the model better... (e.g. data augmentation = harder training set = better overall validation loss)\n# Model with data augmentation\n# Model with longer training (e.g. 100 epochs) \n# Research eval_do_concat_batches=False/True & see what the results do...\n\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_save_path}\")\nmodel_v1_trainer.save_model(model_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_25_epochs_lr_1e-04\n\n\n\n# Push the model to the hub\n# Note: this will require you to have your Hugging Face account setup \nmodel_v1_trainer.push_to_hub(commit_message=\"upload trashify object detection model\",\n                    # token=None # Optional to add a token manually\n                    )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector/commit/ab273cec67e5124ac047dc1e068c379c718e6c37', commit_message='upload trashify object detection model', commit_description='', oid='ab273cec67e5124ac047dc1e068c379c718e6c37', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector'), pr_revision=None, pr_num=None)"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#creating-a-demo-of-our-model-with-gradio",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#creating-a-demo-of-our-model-with-gradio",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "17 Creating a demo of our model with Gradio",
    "text": "17 Creating a demo of our model with Gradio\n\n%%writefile demos/trashify_object_detector/README.md\n---\ntitle: Trashify Demo V1 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector V1 \n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - add links to resources to learn more\n\nOverwriting demos/trashify_object_detector/README.md\n\n\n\n%%writefile demos/trashify_object_detector/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local \nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector\"\n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V1\",\n    description=\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25],\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector/app.py\n\n\n\n17.1 TK - Upload demo to Hugging Face Spaces to get it live\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v1\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v1\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v1\n[INFO] Uploading demos/trashify_object_detector to repo: mrdbourke/trashify_demo_v1\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v1/tree/main/.\n\n\nTK - see the demo here: https://huggingface.co/spaces/mrdbourke/trashify_demo_v1\n\n\n17.2 TK - Testing the hosted demo\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v1.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"1000\"\n&gt;&lt;/iframe&gt;     \n''')"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---improve-our-model-with-data-augmentation",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---improve-our-model-with-data-augmentation",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "18 TK - Improve our model with data augmentation",
    "text": "18 TK - Improve our model with data augmentation\nUPTOHERE - Read for object detection augmentation (keep it simple) - Check out the papers for detection augmentation - Train a model with data augmentation - Compare the model‚Äôs metrics between data augmentation and no data augmentation\n\n18.1 Load dataset\n\nfrom datasets import load_dataset\n\n# load_dataset?\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\n\n# Split the data\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.6, seed=42) # split the test set into 40/60 validation/test\n\n# Create splits\ndataset[\"train\"] = dataset_split[\"train\"]\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\ndataset\n\n[INFO] Length of original dataset: 1128\n\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 135\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 204\n    })\n})\n\n\n\n# Get the categories from the dataset\n# Note: this requires the dataset to have been uploaded with this feature setup\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\n\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nid2label, label2id\n\n({0: 'bin',\n  1: 'hand',\n  2: 'not_bin',\n  3: 'not_hand',\n  4: 'not_trash',\n  5: 'trash',\n  6: 'trash_arm'},\n {'bin': 0,\n  'hand': 1,\n  'not_bin': 2,\n  'not_hand': 3,\n  'not_trash': 4,\n  'trash': 5,\n  'trash_arm': 6})\n\n\n\n# View a random sample\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 955,\n 'annotations': {'file_name': ['ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg'],\n  'image_id': [955, 955, 955, 955],\n  'category_id': [5, 1, 0, 4],\n  'bbox': [[464.79998779296875, 625.5999755859375, 68.30000305175781, 92.5],\n   [483.0, 686.2000122070312, 173.0, 247.3000030517578],\n   [102.80000305175781, 361.70001220703125, 813.5, 734.0],\n   [325.29998779296875,\n    716.5999755859375,\n    189.60000610351562,\n    215.3000030517578]],\n  'iscrowd': [0, 0, 0, 0],\n  'area': [6317.75, 42782.8984375, 597109.0, 40820.87890625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n\n\n18.2 Setup model\n\nfrom transformers import AutoModelForObjectDetection, AutoImageProcessor\n\n# Model config - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig \n# Model docs - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel \nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n\n# Set image size\nIMAGE_SIZE = 640 # other common image sizes include: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Get the image processor (this is required for prepraring images)\n# See docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height)\n    size={\"shortest_edge\": IMAGE_SIZE, \"longest_edge\": IMAGE_SIZE},\n    max_size=None # Note: this parameter is deprecated and will produce a warning if used during processing.\n)\n\n# Check out the image processor\nimage_processor\n\nConditionalDetrImageProcessor {\n  \"do_convert_annotations\": true,\n  \"do_normalize\": true,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"ConditionalDetrImageProcessor\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"size\": {\n    \"longest_edge\": 640,\n    \"shortest_edge\": 640\n  }\n}\n\n\n\n# First create a couple of dataclasses to store our data format\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n@dataclass\nclass SingleCOCOAnnotation:\n    \"An instance of a single COCO annotation. See COCO format: https://cocodataset.org/#format-data\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in format [x_top_left, y_top_left, width, height]\n    area: float = 0.0\n    iscrowd: int = 0\n\n@dataclass\nclass ImageCOCOAnnotations:\n    \"A collection of COCO annotations for a given image_id.\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in format \n) -&gt; dict:\n    # Turn input lists into a list of dicts\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # Return dictionary of annotations with format {\"image_id\": ..., \"annotations\": ...}\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\n# Let's try it out\nimage_id = 0\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 0,\n 'annotations': [{'image_id': 0,\n   'category_id': 0,\n   'bbox': [452.79998779296875,\n    446.6000061035156,\n    272.70001220703125,\n    388.20001220703125],\n   'area': 105862.140625,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [146.5, 487.5, 348.3999938964844, 424.79998779296875],\n   'area': 148000.3125,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [8.300000190734863, 522.5, 241.3000030517578, 505.0],\n   'area': 121856.5,\n   'iscrowd': 0}]}\n\n\n\n# Setup the model\n# TODO: Can functionize this to create a base model (e.g. a model with all the base settings/untrained weights) \ndef create_model():\n    model = AutoModelForObjectDetection.from_pretrained(\n                pretrained_model_name_or_path=MODEL_NAME,\n                label2id=label2id,\n                id2label=id2label,\n                ignore_mismatched_sizes=True,\n                backbone=\"resnet50\")\n    return model\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n\n18.3 tk - Setup and visualize transforms (augmentations)\n\nTK - explain simple augmentations:\n\nRandomHorizontalFlip\nColorJitter\n\nThat‚Äôs it‚Ä¶\nTailor the data augmentations to your own dataset/problem\n\n\n\n\nimport torch\nimport torchvision\n\nfrom torchvision.transforms import v2 \nfrom torchvision.transforms.v2.functional import to_pil_image, pil_to_tensor, pad\nfrom torchvision.utils import draw_bounding_boxes\n\n# Optional transform from here: https://arxiv.org/pdf/2012.07177\n# Scale jitter -&gt; pad -&gt; resize \n\ntrain_transforms = v2.Compose([\n    v2.ToImage(),\n    # v2.RandomResizedCrop(size=(640, 640), antialias=True),\n    # v2.Resize(size=(640, 640)),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.ScaleJitter(target_size=(640, 640)),\n    # PadToSize(target_height=640, target_width=640),\n    v2.RandomHorizontalFlip(p=0.5),\n    # v2.RandomPhotometricDistort(p=0.75),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.Resize(size=(640, 640)),\n    v2.ColorJitter(brightness=0.75, # randomly adjust the brightness \n                   contrast=0.75), # randomly alter the contrast\n    # v2.RandomPerspective(distortion_scale=0.3, \n    #                      p=0.3,\n    #                      fill=(123, 117, 104)), # fill with average colour\n    # v2.RandomZoomOut(side_range=(1.0, 1.5),\n    #                  fill=(123, 117, 104)),\n    v2.ToDtype(dtype=torch.float32, scale=True),\n\n    # v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    # sanitize boxes, recommended to be called at least once at the end of the transform pipeline\n    # https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes\n    v2.SanitizeBoundingBoxes(labels_getter=None) \n])\n\n\n\n18.4 TK - Visualize transforms\n\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\n\n# Perform transform on image\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_image_width, random_sample_image_height = random_sample[\"image\"].size\nrandom_sample_boxes_xywh = random_sample[\"annotations\"][\"bbox\"] # these are in XYWH format\nrandom_sample_boxes_xyxy = torchvision.ops.box_convert(boxes=torch.tensor(random_sample_boxes_xywh),\n                                                       in_fmt=\"xywh\",\n                                                       out_fmt=\"xyxy\")\n\n# Format boxes to be xyxy for transforms\nrandom_sample_boxes_xyxy = torchvision.tv_tensors.BoundingBoxes(\n    data=random_sample_boxes_xyxy,\n    format=\"XYXY\",\n    canvas_size=(random_sample_image_height, random_sample_image_width) # comes in the form height, width\n)\n\nrandom_sample_image_transformed, random_sample_boxes_transformed = train_transforms(random_sample_image,\n                                                                                    random_sample_boxes_xyxy)\n\n\nrandom_sample_original_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                       image=pil_to_tensor(pic=random_sample_image),                    \n                                                       boxes=random_sample_boxes_xyxy,\n                                                       labels=None,\n                                                       width=3))\nrandom_sample_original_image_with_boxes_size = (random_sample_original_image_with_boxes.size[1], random_sample_original_image_with_boxes.size[0])\n\n# Plot the predicted boxes on the random test image \nrandom_sample_transformed_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                          image=random_sample_image_transformed,                    \n                                                          boxes=random_sample_boxes_transformed,\n                                                          labels=None,\n                                                          width=3))\nrandom_sample_transformed_image_with_boxes_size = (random_sample_transformed_image_with_boxes.size[1], random_sample_transformed_image_with_boxes.size[0])\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Display image 1\naxes[0].imshow(random_sample_original_image_with_boxes)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image | Size: {random_sample_original_image_with_boxes_size} (hxw)\")\n\n# Display image 2\naxes[1].imshow(random_sample_transformed_image_with_boxes)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Transformed Image | Size: {random_sample_transformed_image_with_boxes_size} (hxw)\")\n\n# Show the plot\nplt.tight_layout()\nplt.show();\n\n\n\n\n\n\n\n\n\n\n18.5 TK - Create function to preprocess and transform batch of examples\n\nfrom torchvision import tv_tensors\n\ndef preprocess_and_transform_batch(examples,\n                                   image_processor,\n                                   transforms=None # Note: Could optionally add transforms (e.g. data augmentation) here \n                                   ):\n    \"\"\"\n    Function to preprocess batches of data.\n\n    Can optionally apply a transform later on.\n    \"\"\"\n    images = []\n    \n    coco_annotations = [] \n\n    for image, image_id, annotations_dict in zip(examples[\"image\"], examples[\"image_id\"], examples[\"annotations\"]):\n        # Note: may need to open image if it is an image path rather than PIL.Image\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n    \n        # Note: Could optionally apply a transform here.\n        if transforms:\n            width, height = image.size[0], image.size[1]\n            bbox_list = tv_tensors.BoundingBoxes(data=torch.tensor(bbox_list),\n                                                 format=\"XYWH\",\n                                                 canvas_size=(height, width)) # canvas_size = height, width\n            image, bbox_list = transforms(image, \n                                          bbox_list)\n\n        # Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # Add images/annotations to their respective lists\n        images.append(image)\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\",\n                                                    do_rescale=False if transforms else True,\n                                                    do_resize=True,\n                                                    do_pad=True)\n    \n    return preprocessed_batch\n\n\nfrom functools import partial\n\n# Make a transform for different splits\ntrain_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=train_transforms,\n    image_processor=image_processor\n)\n\nvalidation_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=None,\n    image_processor=image_processor\n)\n\n\nprocessed_dataset = dataset.copy()\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(train_transform_batch)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(validation_transform_batch)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(validation_transform_batch)\n\n\n# Create data_collate_function to collect samples into batches\n# TK - want to get a dictionary of {\"pixel_mask\": [batch_of_samples], \"labels\": [batch_of_samples], \"pixel_mask\": [batch_of_samples]}\ndef data_collate_function(batch):\n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in batch])\n\n    return collated_data\n\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\n\nfrom transformers import TrainingArguments, Trainer\n\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 without running out of memory\nBATCH_SIZE = 16\n\n# Disable warnings about `max_size` parameter being deprecated (this is okay)\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\n# Note: AdamW Optimizer is used by default\ntraining_args = TrainingArguments(\n    output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\", # Tk - make sure this is suitable for data aug model\n    num_train_epochs=25,\n    fp16=True,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=1e-4,\n    lr_scheduler_type=\"linear\", # default = \"linear\", can try others such as \"cosine\", \"constant\" etc\n    weight_decay=1e-4,\n    max_grad_norm=0.01,\n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False,\n    eval_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    logging_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    report_to=\"none\", # don't save experiments to a third party service\n    dataloader_num_workers=4,\n    warmup_ratio=0.05,\n    push_to_hub=False,\n    eval_do_concat_batches=False\n)\n\nmodel_v2_trainer = Trainer(\n    model=model_aug,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: add a metrics function, just see if model trains first\n)\n\nmodel_v2_results = model_v2_trainer.train()\n\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/accelerate/accelerator.py:488: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n  self.scaler = torch.cuda.amp.GradScaler(**kwargs)\n\n\n\n    \n      \n      \n      [1250/1250 08:19, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\n\n\n\n\n1\n100.473500\n8.029722\n\n\n2\n4.369000\n2.737582\n\n\n3\n2.551800\n2.183892\n\n\n4\n2.222600\n1.922801\n\n\n5\n1.990600\n1.740759\n\n\n6\n1.821900\n1.557272\n\n\n7\n1.697400\n1.477890\n\n\n8\n1.602700\n1.451024\n\n\n9\n1.551700\n1.371128\n\n\n10\n1.449100\n1.317680\n\n\n11\n1.433500\n1.281066\n\n\n12\n1.364500\n1.247493\n\n\n13\n1.331400\n1.206003\n\n\n14\n1.297300\n1.187397\n\n\n15\n1.250600\n1.179421\n\n\n16\n1.231900\n1.165661\n\n\n17\n1.147900\n1.129974\n\n\n18\n1.146600\n1.117911\n\n\n19\n1.113800\n1.109535\n\n\n20\n1.115300\n1.096120\n\n\n21\n1.089400\n1.078995\n\n\n22\n1.069100\n1.087004\n\n\n23\n1.061900\n1.080366\n\n\n24\n1.045900\n1.071728\n\n\n25\n1.036300\n1.070385\n\n\n\n\n\n\nTK - Note: You might get the following issue (negative bounding box coordinate predictions), can try again for more stable predictions (predictions are inherently random to begin with) or use a learning rate warmup to help stabilize predictions:\n\nValueError: boxes1 must be in [x0, y0, x1, y1] (corner) format, but got tensor([[ 0.5796, 0.5566, 0.9956, 0.9492], [ 0.5718, 0.0610, 0.7202, 0.1738], [ 0.8218, 0.5107, 0.9878, 0.6289], ‚Ä¶, [ 0.1379, 0.1403, 0.6709, 0.6138], [ 0.7471, 0.4319, 1.0088, 0.5864], [-0.0660, 0.2052, 0.2067, 0.5107]], device=‚Äòcuda:0‚Äô, dtype=torch.float16)\n\n\n\n18.6 TK - Save the trained model\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_v2_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_v2_save_path}\")\nmodel_v2_trainer.save_model(model_v2_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_25_epochs_lr_1e-04"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "19 TK - Upload Augmentation Model to Hugging Face Hub",
    "text": "19 TK - Upload Augmentation Model to Hugging Face Hub\n\n# Push the model to the Hugging Face Hub\n# TK Note: This will require you to have your Hugging Face account setup (e.g. see the setup guide, tk - link to setup guide)\n# TK - this will push to the parameter `output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\"`\nmodel_v2_trainer.push_to_hub(commit_message=\"upload trashify object detection model with data augmentation\"\n                             # token=None, # Optional to add token manually\n                            )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug/commit/2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', commit_message='upload trashify object detection model with data augmentation', commit_description='', oid='2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug'), pr_revision=None, pr_num=None)"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---compare-results-of-different-models",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---compare-results-of-different-models",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "20 TK - Compare results of different models",
    "text": "20 TK - Compare results of different models\nUPTOHERE - Showcase model 2 doing better because of augmentation (harder to learn)\n\nTK - Compare v1 model to v2\n\nTK - Get model_v1 results into a variable and save it for later\nCompare both of these as plots against each other, e.g.¬†have the training curves for aug/no_aug on one plot and the curves for validation data for aug/no_aug on another plot\n\nTK - offer extensions to improve the model\n\nTK - training model for longer, potentially using synthetic data‚Ä¶?\n\nTK - could I use 1000 high quality synthetic data samples to improve our model?\n\nTK - try use a different learning rate\n\n\n\n# TK - Turn this workflow into a function e.g. def get_history_from_trainer() -&gt; df/dict of history\ndef get_history_metrics_from_trainer(trainer):\n    trainer_history = trainer.state.log_history \n    trainer_history_metrics = trainer_history[:-1] # get everything except the training time metrics (we've seen these already)\n    trainer_history_training_time = trainer_history[-1]\n\n    model_train_loss = [item[\"loss\"] for item in trainer_history_metrics if \"loss\" in item.keys()]\n    model_eval_loss = [item[\"eval_loss\"] for item in trainer_history_metrics if \"eval_loss\" in item.keys()]\n    model_learning_rate = [item[\"learning_rate\"] for item in trainer_history_metrics if \"learning_rate\" in item.keys()] \n\n    return model_train_loss, model_eval_loss, model_learning_rate, trainer_history_training_time\n\nmodel_v1_train_loss, model_v1_eval_loss, model_v1_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v1_trainer)\nmodel_v2_train_loss, model_v2_eval_loss, model_v2_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v2_trainer)\n\n\nimport matplotlib.pyplot as plt\n\n# Plot model loss curves against each other for same model\n# Note: Start from index 1 onwards to remove large loss spike at beginning of training \nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nax[0].plot(model_v1_train_loss[1:], label=\"Model V1 Train Loss\")\nax[0].plot(model_v1_eval_loss[1:], label=\"Model V1 Eval Loss\")\nax[0].set_title(\"Model V1 Loss Curves\")\nax[0].set_ylabel(\"Loss\")\nax[0].set_xlabel(\"Epoch\")\nax[0].legend()\n\nax[1].plot(model_v2_train_loss[1:], label=\"Model V2 Train Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model V2 Eval Loss\")\nax[1].set_title(\"Model V2 Loss Curves\")\nax[1].set_ylabel(\"Loss\")\nax[1].set_xlabel(\"Epoch\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - notice the overfitting begin to happen with model v1 (no data augmentation) but model v2 has less overfitting and achieves a lower validation loss\n\nimport matplotlib.pyplot as plt\n\nplt.plot(model_v1_learning_rate, label=\"Model V1\")\nplt.plot(model_v2_learning_rate, label=\"Model V2\")\nplt.title(\"Model Learning Rate vs. Epoch\")\nplt.ylabel(\"Learning Rate\")\nplt.xlabel(\"Epoch\")\nplt.legend();\n\n\n\n\n\n\n\n\n\n# Plot loss values against each other\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nnum_epochs = range(0, len(model_v1_train_loss))\nax[0].plot(model_v1_train_loss[1:], label=\"Model 1 Training Loss\")\nax[0].plot(model_v2_train_loss[1:], label=\"Model 2 Training Loss\")\nax[0].set_title(\"Model Training Loss Curves\")\nax[0].set_ylabel(\"Training Loss\")\nax[0].set_xlabel(\"Epochs\")\nax[0].legend()\n\nax[1].plot(model_v1_eval_loss[1:], label=\"Model 1 Eval Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model 2 Eval Loss\")\nax[1].set_title(\"Model Eval Loss Curves\")\nax[1].set_ylabel(\"Eval Loss\")\nax[1].set_xlabel(\"Epochs\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - describe the loss curves here, model 2 curves may be higher for training loss but they really start to accelerate on the evaluation set towards the end"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---create-demo-with-augmentation-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---create-demo-with-augmentation-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "21 TK - Create demo with Augmentation Model",
    "text": "21 TK - Create demo with Augmentation Model\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/README.md\n---\ntitle: Trashify Demo V2 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V2\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V2\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The [model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) in V2 has been trained with data augmentation preprocessing (color jitter, horizontal flipping) to improve robustness. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model/app.py\n\n\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v2\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify V2 box detection model (with data augmentation) app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v2\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v2\n[INFO] Uploading demos/trashify_object_detector_data_aug_model to repo: mrdbourke/trashify_demo_v2\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v2/tree/main/.\n\n\n\n# Next:\n# Upload augmentation model to Hugging Face Hub ‚úÖ\n# Create demo for augmentation model ‚úÖ\n# Compare results from augmentation model to non-augmentation model ‚úÖ\n\n\n21.1 TK - Make a prediction on a random test sample with model using data aug model\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model_aug(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                       pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.25, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_test_sample[\"labels\"][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\nprint(f\"[INFO] Boxes:\")\nfor item in random_test_sample_pred_boxes:\n    print(item.detach().cpu())\nprint(f\"[INFO] Total preds: {len(random_test_sample_labels_to_plot)}\")\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Making predictions on test item with index: 163\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Boxes:\ntensor([  10.7812,  393.1250,  950.1562, 1160.6250])\ntensor([ 149.8828,  667.9688,  471.6797, 1018.2812])\ntensor([405.0000, 679.1406, 668.4375, 972.1094])\ntensor([248.2031, 472.6562, 675.7031, 994.8438])\ntensor([ 140.6250,  467.3438,  675.9375, 1002.6562])\ntensor([ 373.2422,  896.4844,  648.6328, 1063.5156])\ntensor([  10.3125,  667.9688,  472.0312, 1264.5312])\n[INFO] Total preds: 7"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "22 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)",
    "text": "22 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)\nUPTOHERE * Take preds from model v2 and perform NMS on them to see what happens * Need to calculate: * IoU (intersection over union) * Can write about these in a blog post as extension material * Test image index good to practice on: * 163, 108 * Create a demo which compares NMS-free boxes to boxes with NMS\n\n22.1 TK - NMS filtering logic to do\nTK - create a table of different items here\n\nSimplest filtering: keep only 1x class label with the highest score per image (e.g.¬†if there are two ‚Äúhand‚Äù predictions, keep only the highest scoring one) ‚úÖ\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\nGreedy IoU filtering: Filter boxes which have IoU &gt; 0.9 (big overlap) and keep the box with the higher score ‚úÖ\n\nTK - problem here is that it may filter heavily overlapping classes (e.g.¬†if there are many boxes of different classes clustered together because your objects overlap, such as on a plate of food, items may overlap)\n\nClass-aware IoU filtering: Filter boxes which have the same label and have IoU &gt; 0.5 and keep the box with the higher score\n\nOther potential NMS options: * Greedy NMS (good for distinct boxes, just take the highest scoring box per class) * Soft-NMS with linear penalty (good for boxes which may have overlap, e.g.¬†smaller boxes in clusters) * Class-aware NMS (only perform NMS on same class of boxes)\n\nSee this video here: https://youtu.be/VAo84c1hQX8?si=dYftsYADb9Kq-bul\nTK - show prediction with more boxes than ideal, then introduce NMS as a technique to fix the predictions (e.g.¬†on the same sample)\n\nTK - NMS doesn‚Äôt need an extra model, just a way to\n\nTK - test index 163 is a good example with many boxes that could be shortened to a few\n\n\n\n22.2 TK - Simple NMS - Keep only highest scoring class per prediction\nTK - This is the simplest method and simply iterates through the boxes and keep the highest scoring box per class (e.g.¬†if there are two ‚Äúhand‚Äù prediction boxes, only keep the higher scoring one).\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\n\n# Mask with simple NMS keep mask\nkeep_boxes, keep_labels, keep_scores = filter_highest_scoring_box_per_class(boxes=random_test_sample_pred_boxes,\n                                                                            labels=random_test_sample_pred_labels,\n                                                                            scores=random_test_sample_pred_scores)\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_scores))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes))\n\n7 7 7\n4 4 4\n\n\n\nkeep_boxes, keep_labels, keep_scores\n\n(tensor([[  10.7812,  393.1250,  950.1562, 1160.6250],\n         [ 149.8828,  667.9688,  471.6797, 1018.2812],\n         [ 405.0000,  679.1406,  668.4375,  972.1094],\n         [ 373.2422,  896.4844,  648.6328, 1063.5156]], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;),\n tensor([0, 1, 5, 4], device='cuda:0'),\n tensor([0.6625, 0.5412, 0.5007, 0.3237], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;))\n\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(\"Simple NMS - Only keep the highest scoring box per prediction\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: not_trash (0.3237)']\n\n\n\n\n\n\n\n\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\n\n22.3 TK - Greedy IoU Filtering - Intersection over Union - If a pair of boxes have an IoU over a certain threshold, keep the box with the higher score\n\nIoU in torchmetrics - https://lightning.ai/docs/torchmetrics/stable/detection/intersection_over_union.html\n\nTo calculate the Intersection over Union (IoU) between two bounding boxes:\n\nCoordinates of the intersection rectangle: \\[\nx_{\\text{left}} = \\max(x_{1A}, x_{1B})\n\\] \\[\ny_{\\text{top}} = \\max(y_{1A}, y_{1B})\n\\] \\[\nx_{\\text{right}} = \\min(x_{2A}, x_{2B})\n\\] \\[\ny_{\\text{bottom}} = \\min(y_{2A}, y_{2B})\n\\]\n\nWhere:\n\\[\n   \\text{A} = \\text{Box 1}\n\\] \\[\n   \\text{B} = \\text{Box 2}\n\\]\n\nWidth and height of the intersection: \\[\n\\text{intersection\\_width} = \\max(0, x_{\\text{right}} - x_{\\text{left}})\n\\] \\[\n\\text{intersection\\_height} = \\max(0, y_{\\text{bottom}} - y_{\\text{top}})\n\\]\nArea of Overlap: \\[\n\\text{Area of Overlap} = \\text{intersection\\_width} \\times \\text{intersection\\_height}\n\\]\nArea of Union: \\[\n\\text{Area of Union} = \\text{Area of Box 1} + \\text{Area of Box 2} - \\text{Area of Overlap}\n\\]\nIntersection over Union (IoU): $$ = / \n\n\n# IoU = Intersection / Union\n# Inserction =\n    # x_left = max(x1_A, x1_B)\n    # y_top = max(y1_A, y1_B)\n    # x_right = min(x2_A, x2_B)\n    # y_bottom = min(y2_A, x2_B)\n    # \n    # Where: \n        # A = Box 1\n        # B = Box 2\n    # intersection_width = max(0, x_right - x_left)\n    # interesection_height = max(0, y_bottom - y_top)\n    # area_intersection = intersection_width * intersection_height\n# Union = area_box_1 + area_box_2 - intersection\n\ndef intersection_over_union_score(box_1, box_2):\n    \"\"\"Calculates Intersection over Union (IoU) score for two given boxes in XYXY format.\"\"\"\n    assert len(box_1) == 4, f\"Box 1 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_1)}, see: {box_1}\"\n    assert len(box_2) == 4, f\"Box 2 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_2)}, see: {box_2}\"\n\n    x1_box_1, y1_box_1, x2_box_1, y2_box_1 = box_1[0], box_1[1], box_1[2], box_1[3]\n    x1_box_2, y1_box_2, x2_box_2, y2_box_2 = box_2[0], box_2[1], box_2[2], box_2[3]\n\n    # Get coordinates of overlapping box (note: there may not be any overlapping box)\n    x_left = torch.max(x1_box_1, x1_box_2)\n    y_top = torch.max(y1_box_1, y1_box_2)\n    x_right = torch.min(x2_box_1, x2_box_2)\n    y_bottom = torch.min(y2_box_1, y2_box_2)\n\n    # Calculate the intersection width and height (we take the max of 0 and the value to find non-overlapping boxes)\n    intersection_width = max(0, x_right - x_left)\n    intersection_height = max(0, y_bottom - y_top)\n\n    # Calculate the area of intersection (note: this will 0 if either width or height are 0)\n    area_of_intersection = intersection_height * intersection_width\n\n    # Calculate individual box areas\n    box_1_area = (x2_box_1 - x1_box_1) * (y2_box_1 - y1_box_1) # width * height \n    box_2_area = (x2_box_2 - x1_box_2) * (y2_box_2 - y1_box_2)\n\n    # Calcuate area of union (sum of box areas minus the intersection area)\n    area_of_union = box_1_area + box_2_area - area_of_intersection\n\n    # Calculate the IoU score\n    iou_score = area_of_intersection / area_of_union\n\n    return iou_score\n\n\niou_score_test_pred_boxes = intersection_over_union_score(box_1=random_test_sample_pred_boxes[4],\n                                                          box_2=random_test_sample_pred_boxes[3])\n\nprint(f\"[INFO] IoU Score: {iou_score_test_pred_boxes}\")\n\n\nrandom_test_sample_pred_boxes[0], random_test_sample_pred_boxes[1]\n\n[INFO] IoU Score: 0.7790185809135437\n\n\n(tensor([  10.7812,  393.1250,  950.1562, 1160.6250], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;),\n tensor([ 149.8828,  667.9688,  471.6797, 1018.2812], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;))\n\n\n\n# TK - for visualization purposes, write code to highlight the intersecting points on a box and print the IoU score in the middle of the box\n\n# IoU logic\n    # 1. General IoU threshold (removing boxes at a global level, regardless of label)\n        # -&gt; for box pairs with IoU &gt; 0.9, keep the higher scoring box \n    # 2. Label specific IoU threshold (only concern is comparing boxes with the same label)\n        # -&gt; for box pairs with same label and IoU &gt; 0.5, keep the higher scoring box\n\n\nkeep_boxes = []\nkeep_scores = []\nkeep_labels = []\n\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\nkeep_indexes = torch.ones(len(random_test_sample_pred_boxes), dtype=torch.bool)\n\niou_general_threshold = 0.9 # general threshold = remove the lower scoring box in box pairs with over iou_general_threshold regardless of the label\niou_class_level_threshold = 0.5 # remove overlapping similar classes\n\n# TODO: Add a clause here to include if class labels are the same, then filter based on the class-specifc IoU threshold\nfilter_global = True\nfilter_same_label = True\n\n# Count the total loops\ntotal_loops = 0\n\nfor i, box_A in enumerate(random_test_sample_pred_boxes):\n    if not keep_indexes[i]: # insert clause to prevent calculating on already filtered labels\n        continue \n\n    for j, box_B in enumerate(random_test_sample_pred_boxes):\n        if not keep_indexes[i]:\n            continue\n\n        # Only calculate IoU score if indexes aren't the same (saves comparing the same index boxes for unwanted calculations)\n        if (i != j): \n            iou_score = intersection_over_union_score(box_1=box_A, box_2=box_B)\n            print(f\"[INFO] IoU Score for box {(i, j)}: {iou_score}\")\n\n            if filter_global:\n                if iou_score &gt; iou_general_threshold:\n                    score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                    if score_A &gt; score_B:\n                        print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                        keep_indexes[j] = False\n                    else:\n                        print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                        keep_indexes[i] = False\n                \n            if filter_same_label:\n                if iou_score &gt; iou_class_level_threshold:\n                    i_label = random_test_sample_pred_labels[i]\n                    j_label = random_test_sample_pred_labels[j]\n                    if i_label == j_label:\n                        print(f\"Labels are equal: {i_label, j_label}\")\n                        score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                        if score_A &gt; score_B:\n                            print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                            keep_indexes[j] = False\n                        else:\n                            print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                            keep_indexes[i] = False\n\n        total_loops += 1\n                \nprint(keep_indexes)\n\nkeep_scores = random_test_sample_pred_scores[keep_indexes]\nkeep_labels = random_test_sample_pred_labels[keep_indexes]\nkeep_boxes = random_test_sample_pred_boxes[keep_indexes]\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_boxes))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes), sum(keep_indexes))\n\nprint(f\"[INFO] Number of total loops: {total_loops}, max possible loops: {len(random_test_sample_pred_boxes)**2}\")\n\n[INFO] IoU Score for box (0, 1): 0.156358003616333\n[INFO] IoU Score for box (0, 2): 0.10704872757196426\n[INFO] IoU Score for box (0, 3): 0.3096315264701843\n[INFO] IoU Score for box (0, 4): 0.3974636495113373\n[INFO] IoU Score for box (0, 5): 0.06380129605531693\n[INFO] IoU Score for box (0, 6): 0.2954297661781311\n[INFO] IoU Score for box (1, 0): 0.156358003616333\n[INFO] IoU Score for box (1, 2): 0.11466032266616821\n[INFO] IoU Score for box (1, 3): 0.2778415083885193\n[INFO] IoU Score for box (1, 4): 0.36936208605766296\n[INFO] IoU Score for box (1, 5): 0.08170551061630249\n[INFO] IoU Score for box (1, 6): 0.4092644155025482\n[INFO] IoU Score for box (2, 0): 0.10704872757196426\n[INFO] IoU Score for box (2, 1): 0.11466032266616821\n[INFO] IoU Score for box (2, 3): 0.34572935104370117\n[INFO] IoU Score for box (2, 4): 0.26932957768440247\n[INFO] IoU Score for box (2, 5): 0.17588727176189423\n[INFO] IoU Score for box (2, 6): 0.058975815773010254\n[INFO] IoU Score for box (3, 0): 0.3096315264701843\n[INFO] IoU Score for box (3, 1): 0.2778415083885193\n[INFO] IoU Score for box (3, 2): 0.34572935104370117\n[INFO] IoU Score for box (3, 4): 0.7790185809135437\nLabels are equal: (tensor(5, device='cuda:0'), tensor(5, device='cuda:0'))\n[INFO] Box to keep index: 3 -&gt; tensor([248.2031, 472.6562, 675.7031, 994.8438], device='cuda:0',\n       grad_fn=&lt;UnbindBackward0&gt;)\n[INFO] IoU Score for box (3, 5): 0.11186295002698898\n[INFO] IoU Score for box (3, 6): 0.1719416379928589\n[INFO] IoU Score for box (5, 0): 0.06380129605531693\n[INFO] IoU Score for box (5, 1): 0.08170551061630249\n[INFO] IoU Score for box (5, 2): 0.17588727176189423\n[INFO] IoU Score for box (5, 3): 0.11186295002698898\n[INFO] IoU Score for box (5, 4): 0.0963958203792572\n[INFO] IoU Score for box (5, 6): 0.05411146208643913\n[INFO] IoU Score for box (6, 0): 0.2954297661781311\n[INFO] IoU Score for box (6, 1): 0.4092644155025482\n[INFO] IoU Score for box (6, 2): 0.058975815773010254\n[INFO] IoU Score for box (6, 3): 0.1719416379928589\n[INFO] IoU Score for box (6, 4): 0.24588997662067413\n[INFO] IoU Score for box (6, 5): 0.05411146208643913\ntensor([ True,  True,  True,  True, False,  True,  True])\n7 7 7\n6 6 6 tensor(6)\n[INFO] Number of total loops: 42, max possible loops: 49\n\n\n\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(f\"Greedy IoU Filtering (General) - For boxes with IoU &gt; {iou_general_threshold}, keep the higher scoring box\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n\n\n\n\n\n\n\n\n\n\n# TK - more NMS logic:\n# If there are more than two hands, keep the one with the higher score..."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "23 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)",
    "text": "23 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)\nUPTOHERE:\n\nupload the demo to Hugging Face Spaces as Trashify V3\nMake sure the demo works\nGo back through the code and start tidying up/explaining things\n\nCreate a blog post to discuss different box formats in object detection\nCreate a blog post for NMS + IoU filtering (can create an IoU function that colours in the intersection parts)\nCreate an extension for longer training + synthetic data + evaluation metrics + deploying on transformers.js\n\n\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model_with_nms/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/README.md\n---\ntitle: Trashify Demo V3 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V3\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\ndef create_return_string(list_of_predicted_labels, target_items=[\"trash\", \"bin\", \"hand\"]):\n     # Setup blank string to print out\n    return_string = \"\"\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(list_of_predicted_labels) == 0) or not (any_in_list(list_a=target_items, list_b=list_of_predicted_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in list_of_predicted_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}). But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        return_string = f\"+1! Found the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}), thank you for cleaning up the area!\"\n\n    print(return_string)\n\n    return return_string\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Create a copy of the image to draw on it for NMS\n    image_nms = image.copy()\n    draw_nms = ImageDraw.Draw(image_nms)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    # TK - update this for NMS\n    class_name_text_labels_nms = []\n\n    # Get original boxes, scores, labels\n    original_boxes = results[\"boxes\"]\n    original_labels = results[\"labels\"]\n    original_scores = results[\"scores\"]\n\n    # Filter boxes and only keep 1x of each label with highest score\n    filtered_boxes, filtered_labels, filtered_scores = filter_highest_scoring_box_per_class(boxes=original_boxes,\n                                                                                            labels=original_labels,\n                                                                                            scores=original_scores)\n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(original_boxes, original_labels, original_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(filtered_boxes, filtered_labels, filtered_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels_nms.append(label_name)\n\n        # Draw the rectangle\n        draw_nms.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw_nms.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    \n    # Remove the draw each time\n    del draw\n    del draw_nms\n\n    # Create the return string\n    return_string = create_return_string(list_of_predicted_labels=class_name_text_labels)\n    return_string_nms = create_return_string(list_of_predicted_labels=class_name_text_labels_nms)\n    \n    return image, return_string, image_nms, return_string_nms\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output (no filtering)\"),\n        gr.Text(label=\"Text Output (no filtering)\"),\n        gr.Image(type=\"pil\", label=\"Image Output (with max score per class box filtering)\"),\n        gr.Text(label=\"Text Output (with max score per class box filtering)\")\n        \n    ],\n    title=\"üöÆ Trashify Object Detection Demo V3\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The model in V3 is [same model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) as in [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) (trained with data augmentation) but has an additional post-processing step (NMS or [Non Maximum Suppression](https://paperswithcode.com/method/non-maximum-suppression)) to filter classes for only the highest scoring box of each class. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/app.py\n\n\n\n23.1 TK - Upload our demo to the Hugging Face Hub\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model_with_nms\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v3\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model v3 app.py with NMS post processing\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v3\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v3\n[INFO] Uploading demos/trashify_object_detector_data_aug_model_with_nms to repo: mrdbourke/trashify_demo_v3\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v3/tree/main/.\n\n\n\n\n23.2 tK - Embed the Space to Test the Model\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"1000\"\n    height=\"1600\"\n&gt;&lt;/iframe&gt;     \n''')\n\n\n     \n\n\n\n# UPTOHERE\n# Next, focus on a single input -&gt; output ‚úÖ\n# Show case what an output from the model looks like untrained (e.g. plot the next boxes on it) ‚úÖ\n# After showcasing 1x prediction, move onto training a model and seeing if we can get it to improve ‚úÖ\n# Continually focus on 1 input, 1 output until we can scale up ‚úÖ\n# Create a demo of our model and upload it to Hugging Face ‚úÖ\n    # Add examples to test the demo ‚úÖ\n    # Write code to upload the demo to Hugging Face ‚úÖ\n# Create visualization of input and output of data augmentation ‚úÖ\n# Create demo of model with data augmentation ‚úÖ\n# Model 2: Try improve our model with data augmentation ‚úÖ\n    # Visualize data augmentation examples in and out of the model \n    # Note: looks like augmentation may hurt our results... ü§î, this is because our data is so similar, potentially could help with more diverse data, e.g. synthetic data \n    # Try in a demo and see how it works -&gt; Trashify Demo V2 ‚úÖ \n    # Extension: Also try a model training for longer \n# Model 3 (just improve with NMS): Create NMS option so only highest quality boxes are kept for each class ‚úÖ\n\n# Next:\n\n# Go through notebook and clean it up for \n# Once we've got a better performing model, introduce evaluation metrics\n# End: three models, three demos, one without data augmentation, one with it, one with NMS (post-processing) + can have as an extension to train the model for longer and see what happens\n\n# Extensions:\n# Train a model for longer and see if it improves (e.g. 72 epochs) \n\n# Workflow:\n# Untrained model -&gt; input/output -&gt; poor results (always visualize, visualize, visualize!)\n# Trained model -&gt; input/output -&gt; better results (always visualize, visualize, visualize!)\n\n# Outline:\n# Single input/output with untrained model (bad output)\n# Train model to improve on single input/output\n# Introduce evaluation metric\n# Introduce data augmentation, see D-FINE paper for data augmentation options (we can keep it simple)\n    # See: https://arxiv.org/pdf/2410.13842 \n    # \"The total batch size is 32 across all variants. Training schedules include 72 epochs with advanced augmentation (RandomPhotometricDistort, RandomZoomOut, RandomIoUCrop, and RMultiScaleInput)\n    # followed by 2 epochs without advanced augmentation for D-FINE-X and D-FINE-L, and 120 epochs with advanced augmentation followed by 4\n    # epochs without advanced augmentation for D-FINE-M and D-FINE-S (RT-DETRv2 Training Strategy (Lv et al., 2024) in Table 3)\"\n    # TODO: Read RT-DETRv2 training strategy from paper mentioned above\n    # TODO: Read PP-YOLO data augmentation paper (keep it simple to begin with, can increase when needed)\n# Create demo with Gradio\n# Create demo with Transformers.js, see: https://huggingface.co/docs/transformers.js/en/tutorials/vanilla-js"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#extensions-extra-curriculum",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#extensions-extra-curriculum",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "24 Extensions + Extra-Curriculum",
    "text": "24 Extensions + Extra-Curriculum\n\nExtension: possibly improve the model with synthetic data? e.g.¬†on classes/bins not visible in the model\nExtension: train the model for longer and see how it improves, this could be model v4\n\nBaselines:\n\nV1 = model no data augmentaiton\nV2 = model with data augmentation\nV3 = model with NMS (post processing)\n\nExtensions:\n\nV4 = model trained for longer with NMS\nV5 = synthetic data scaled up‚Ä¶?\n\n\nExtension: Zero-shot object detection - but what if I don‚Äôt have labels?\n\nThis could discuss the use of zero-shot object detection models such as GroundingDINO and OmDet\nSee OmDet - https://huggingface.co/omlab/omdet-turbo-swin-tiny-hf\nSee GroundingDINO - https://huggingface.co/docs/transformers/en/model_doc/grounding-dino\n\nExtension: Try to repeat the workflow we‚Äôve gone through with another model such as https://huggingface.co/IDEA-Research/dab-detr-resnet-50-dc5-pat3 (apparently it is slightly better performing on COCO too)\n\nOther models to try:\n\nRT-DETRv2 - https://huggingface.co/docs/transformers/main/en/model_doc/rt_detr_v2\n\nCode - https://github.com/lyuwenyu/RT-DETR"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#summary",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#summary",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "25 Summary",
    "text": "25 Summary\n\nBounding box formats: An important step in any object detection project is to figure out what format your bounding boxes are in."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#extra-resources",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-D-FINE.html#extra-resources",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "26 Extra resources",
    "text": "26 Extra resources\n\nA Guide to Bounding Box Formats and How to Draw Them by Daniel Bourke."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "",
    "text": "Details:\nIn progress:\nLater:\nSource code on GitHub | Online book version | Setup guide | Video Course (coming soon)\nTo postprocess the outputs of our model we can use the transformers.ConditionalDetrImageProcessor.post_process_object_detection() method.\nLet‚Äôs frist recompute the model‚Äôs outputs for our preprocessed single sample.\nmodel.to(\"cpu\")\n\n# Recompute the random sample outputs with our preprocessed sample\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    # pixel_mask=random_sample_preprocessed[\"pixel_mask\"],\n)\n\n# Inspect the output type\ntype(random_sample_outputs)\n\ntransformers.models.rt_detr_v2.modeling_rt_detr_v2.RTDetrV2ObjectDetectionOutput\nWonderful!\nWe get the exact output our post_process_object_detection() method is looking for.\nNow we can fill in the following parameters:\nYou can see what happens behind the scenes of post_process_object_detection in the source code.\n# Set the score threshold for postprocessing\nTHRESHOLD = 0.63\n\n# Post process a single output from our model\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=THRESHOLD, # all boxes with scores under this value will be discarded (best to experiment with it)\n    target_sizes=random_sample_preprocessed[\"labels\"][0][\"orig_size\"].unsqueeze(0) # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6400], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([5]),\n  'boxes': tensor([[206.2309,   4.1921, 336.9805, 200.3396]], grad_fn=&lt;IndexBackward0&gt;)}]\nrandom_sample_preprocessed[\"labels\"][0][\"orig_size\"].unsqueeze(0)\n\ntensor([[1280,  960]])\nPerfect!\nThis looks like something we can use.\nLet‚Äôs break down each of the keys in random_sample_outputs_post_processed.\nWe get three equal length tensors:"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---overview",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---overview",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "1 TK - Overview",
    "text": "1 TK - Overview\nTK - Make an intro about being on the Trashify üöÆ team with a mission to make the world a cleaner place, trashify = using ML to incentivize people to pick up trash in their local area\nWelcome to the Learn Hugging Face Object Detection project!\nInside this project, we‚Äôll learn bits and pieces about the Hugging Face ecosystem as well as how to build our own custom object detection model.\nWe‚Äôll start with a collection of images with bounding box files as our dataset, fine-tune an existing computer vision model to detect items in an image and then share our model as a demo others can use.\nTK image - update cover image for object detection  \n\nWe‚Äôre going to put on our internship hats and build a food not food text classification model using tools from the Hugging Face ecosystem.\n\n\n‚Äì&gt;\n\n\n\n\n\n\nNote\n\n\n\nFeel to keep reading through the notebook but if you‚Äôd like to run the code yourself, be sure to go through the setup guide first.\n\n\n\n1.1 TK - What we‚Äôre going to build\nWe‚Äôre going to be bulding Trashify üöÆ, an object detection model which incentivises people to pick up trash in their local area by detecting bin, trash, hand.\nIf all three items are detected, a person gets +1 point!\nFor example, say you were going for a walk around your neighbourhood and took a photo of yourself picking up a piece (with your hand or trash arm) of trash and putting it in the bin, you would get a point.\nWith this object detection model, you could deploy it to an application which would automatically detect the target classes and then save the result to an online leaderboard.\nThe incentive would be to score the most points, in turn, picking up the most piecces of trash, in a given area.\nMore specifically, we‚Äôre going to follow the following steps:\n\nData: Problem defintion and dataset preparation - Getting a dataset/setting up the problem space.\nModel: Finding, training and evaluating a model - Finding an object detection model suitable for our problem on Hugging Face and customizing it to our own dataset.\nDemo: Creating a demo and put our model into the real world - Sharing our trained model in a way others can access and use.\n\nBy the end of this project, you‚Äôll have a trained model and demo on Hugging Face you can share with others:\n\nfrom IPython.display import HTML \n\nHTML(\"\"\"\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"850\"\n&gt;&lt;/iframe&gt;\n\"\"\")\n\n\n\n\n\n\n\n1.2 TK - What is object detection?\nObject detection is the process of identifying and locating an item in an image.\nWhere item can mean almost anything.\nFor example:\n\nDetecting car licence plates in a video feed (videos are a series of images) for a parking lot entrance.\nDetecting delivery people walking towards your front door on a security camera.\nDetecting defects on a manufacturing line.\nDetecting pot holes in the road so repair works can automatically be scheduled.\nDetecting small pests (Varroa Mite) on the bodies of bees.\nDetecting weeds in a field so you know what to remove and what to keep.\n\n‚Äì\nTK - add examples of actual trash identification projects, see:\n\nGoogle using machine learning for trash identification ‚Äî https://sustainability.google/operating-sustainably/stories/circular-economy-marketplace/\nTrashify website for identifying trash ‚Äî https://www.trashify.tech/\nWaste management with deep learning ‚Äî https://www.sciencedirect.com/science/article/abs/pii/S0956053X23001915\nLabel Studio being used for labelling a trash dataset ‚Äî https://labelstud.io/blog/ameru-labeling-for-a-greener-world/\n\n‚Äì\n\n\n\n\n\n\nNote\n\n\n\nNote: Object detection is also sometimes referred to as image localization or object localization. For consistency, I will use the term object detection, however, either of these terms could substitute.\n\n\n\n\n\n* TK image - examples of where object detection is used\n\n\n\nImage classification deals with classifying an image as a whole into a single class, object detection endeavours to find the specific target item and where it is in an image.\nOne of the most common ways of showing where an item is in an image is by displaying a bounding box (a rectangle-like box around the target item).\nAn object detection model will often take an input image tensor in the shape [3, 640, 640] ([colour_channels, height, width]) and output a tensor in the form [class_name, x_min, y_min, x_max, y_max] or [class_name, x1, y1, x2, y2] (this is two ways to write the same example format, there are more formats, we‚Äôll see these below in Table¬†1).\nWhere:\n\nclass_name = The classification of the target item (e.g.¬†\"car\", \"person\", \"banana\", \"piece_of_trash\", this could be almost anything).\nx_min = The x value of the top left corner of the box.\ny_min = The y value of the top left corner of the box.\nx_max = The x value of the bottom right corner of the box.\ny_max = The y value of the bottom right corner of the box.\n\n‚Äì TK image ‚Äì example of a bounding box on an image\n\n\n\n\n\n\nObject detection bounding box formats\n\n\n\nWhen you get into the world of object detection, you will find that there are several different bounding box formats.\nThere are three major formats you should be familiar with: XYXY, XYWH, CXCYWH (there are more but these are the most common).\nKnowing which bounding box format you‚Äôre working with can be the difference between a good model and a very poor model (wrong bounding boxes = wrong outcome).\nWe‚Äôll get hands-on with a couple of these in this project.\nBut for an in-depth example of all three, I created a guide on different bounding box formats and how to draw them, reading this should give a good intuition behind each style of bounding box.\n\n\n\n\n1.3 TK - Why train your own object detection models?\nYou can customize pre-trained models for object detection as well as API-powered models and LLMs such as Gemini, LandingAI and DINO-X.\nDepending on your requirements, there are several pros and cons for using your own model versus using an API.\nTraining/fine-tuning your own model:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nControl: Full control over model lifecycle.\nCan be complex to get setup.\n\n\nNo usage limits (aside from compute constraints).\nRequires dedicated compute resources for training/inference.\n\n\nCan train once and deploy everywhere/whenever you want (for example, Tesla deploying a model to all self-driving cars).\nRequires maintenance over time to ensure performance remains up to par.\n\n\nPrivacy: Data can be kept in-house/app and doesn‚Äôt need to go to a third party.\nCan require longer development cycles compared to using existing APIs.\n\n\nSpeed: Customizing a small model for a specific use case often means it runs much faster on local hardware, for example, modern object detection models can achieve 70-100+ FPS (frames per second) on modern GPU hardware.\n\n\n\n\nUsing a pre-built model API:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nEase of use: often can be setup within a few lines of code.\nIf the model API goes down, your service goes down.\n\n\nNo maintenance of compute resources.\nData is required to be sent to a third-party for processing.\n\n\nAccess to the most advanced models.\nThe API may have usage limits per day/time period.\n\n\nCan scale if usage increases.\nCan be much slower than using dedicated models due to requiring an API call.\n\n\n\nFor this project, we‚Äôre going to focus on fine-tuning our own model.\n\n\n1.4 TK - Workflow we‚Äôre going to follow\nThe good news for us is that the Hugging Face ecosystem makes working on custom machine learning projects an absolute blast.\nAnd workflow is reproducible across several kinds of projects.\nStart with data (or skip this step and go straight to a model) -&gt; get/customize a model -&gt; build and share a demo.\nWith this in mind, our motto is data, model, demo!\nMore specifically, we‚Äôre going to follow the rough workflow of:\n\nCreate, preprocess and load data using Hugging Face Datasets.\nDefine the model we‚Äôd like use with transformers.AutoModelForObjectDetection (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nI say rough because machine learning projects are often non-linear in nature.\nAs in, because machine learning projects involve many experiments, they can kind of be all over the place.\nBut this worfklow will give us some good guidelines to follow.\n\n\n\n\nA general Hugging Face workflow from idea to shared model and demo using tools from the Hugging Face ecosystem. You‚Äôll notice some of the steps don‚Äôt match with our workflow outline above. This is because the text-based workflow outline above breaks some of the steps down for educational purposes. These kind of workflows are not set in stone and are more of guide than specific directions. See information on each of the tools in the Hugging Face documentation."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---importing-necessary-libraries",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---importing-necessary-libraries",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "2 TK - Importing necessary libraries",
    "text": "2 TK - Importing necessary libraries\nLet‚Äôs get started!\nFirst, we‚Äôll import the required libraries.\nIf you‚Äôre running on your local computer, be sure to check out the getting setup guide to make sure you have everything you need.\nIf you‚Äôre using Google Colab, many of them the following libraries will be installed by default.\nHowever, we‚Äôll have to install a few extras to get everything working.\n\n\n\n\n\n\nNote\n\n\n\nIf you‚Äôre running on Google Colab, this notebook will work best with access to a GPU. To enable a GPU, go to Runtime ‚û°Ô∏è Change runtime type ‚û°Ô∏è Hardware accelerator ‚û°Ô∏è GPU.\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio.\n\nAnd the following library is not part of the Hugging Face ecosystem but it is helpful for evaluating our models:\n\ntorchmetrics - a library containing many evaluation metrics compatible with PyTorch/Transformers, you can install it via pip install torchmetrics.\n\nWe can also check the versions of our software with package_name.__version__.\n\n# Install/import dependencies (this is mostly for Google Colab, as the other dependences are available by default in Colab)\ntry:\n  import datasets, evaluate, accelerate\n  import gradio as gr\nexcept ModuleNotFoundError:\n  !pip install -U datasets evaluate accelerate gradio # -U stands for \"upgrade\" so we'll get the latest version by default\n  import datasets, evaluate, accelerate\n  import gradio as gr\n\nimport random\n\nimport numpy as np\n\nimport torch\nimport transformers\n\n# Required for evaluation\n# Can install with !pip install torchmetrics[detection]\nimport torchmetrics\nimport pycocotools\n\n# Check versions (as long as you've got the following versions or higher, you should be good)\nprint(f\"Using transformers version: {transformers.__version__}\")\nprint(f\"Using datasets version: {datasets.__version__}\")\nprint(f\"Using torch version: {torch.__version__}\")\nprint(f\"Using torchmetrics version: {torchmetrics.__version__}\")\n\nUsing transformers version: 4.52.0.dev0\nUsing datasets version: 3.6.0\nUsing torch version: 2.7.0+cu126\nUsing torchmetrics version: 1.4.1\n\n\nWonderful, as long as your versions are the same or higher to the versions above, you should be able to run the code below."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#getting-a-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#getting-a-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "3 Getting a dataset",
    "text": "3 Getting a dataset\nOkay, now we‚Äôre got the required libraries, let‚Äôs get a dataset.\nGetting a dataset is one of the most important things a machine learning project.\nThe dataset you often determines the type of model you use as well as the quality of the outputs of that model.\nMeaning, if you have a high quality dataset, chances are, your future model could also have high quality outputs.\nIt also means if your dataset is of poor quality, your model will likely also have poor quality outputs.\nFor an object detection problem, your dataset will likely come in the form of a group of images as well as a file with annotations belonging to those images.\nFor example, you might have the following setup:\nfolder_of_images/\n    image_1.jpeg\n    image_2.jpeg\n    image_3.jpeg\nannotations.json\nWhere the annotations.json contains details about the contains of each image:\n\n\nannotations.json\n\n[\n    {\n        'image_path': 'image_1.jpeg', \n        'image_id': 42,\n        'annotations': \n            {\n                'file_name': ['image_1.jpeg'],\n                'image_id': [42],\n                'category_id': [1],\n                'bbox': [\n                            [360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n                        ],\n                'area': [46390.9609375]\n            },\n        'label_source': 'manual_prodigy_label',\n        'image_source': 'manual_taken_photo'\n    },\n\n    ...(more labels down here)\n]\n\nDon‚Äôt worry too much about the exact meaning of everything in the above annotations.json file for now (this is only one example, there are many different ways object detection information could be displayed).\nThe main point is that each target image is paired with an assosciated label.\nNow like all good machine learning cooking shows, I‚Äôve prepared a dataset from earlier.\nTK image - dataset on Hugging Face\nIt‚Äôs stored on Hugging Face Datasets (also called the Hugging Face Hub) under the name mrdbourke/trashify_manual_labelled_images.\nThis is a dataset I‚Äôve collected manually by hand (yes, by picking up 1000+ pieces of trash and photographing it) as well as labelled by hand (by drawing boxes on each image with a labelling tool called Prodigy).\n\n3.1 Loading the dataset\nTo load a dataset stored on the Hugging Face Hub we can use the datasets.load_dataset(path=NAME_OR_PATH_OF_DATASET) function and pass it the name/path of the dataset we want to load.\nIn our case, our dataset name is mrdbourke/trashify_manual_labelled_images (you can also change this for your own dataset).\nAnd since our dataset is hosted on Hugging Face, when we run the following code for the first time, it will download it.\nIf your target dataset is quite large, this download may take a while.\nHowever, once the dataset is downloaded, subsequent reloads will be mush faster.\n\n\n\n\n\n\nGetting information about a function/method\n\n\n\nOne way to find out what a function or method does is to lookup the documentation.\nAnother way is to write the function/method name with a question mark afterwards.\nFor example:\nfrom datasets import load_dataset\n\nload_dataset?\nGive it a try.\nYou should see some helpful information about what inputs the method takes and how they are used.\n\n\nLet‚Äôs load our dataset and check it out.\n\nfrom datasets import load_dataset\n\n# Load our Trashify dataset\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nBeautiful!\nWe can see that there is a train split of the dataset already which currently contains all of the samples (1128 in total).\nThere are also some features that come with our dataset which are related to our object detection goal.\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\nprint(f\"[INFO] Dataset features:\") \n\nfrom pprint import pprint\n\npprint(dataset['train'].features)\n\n[INFO] Length of original dataset: 1128\n[INFO] Dataset features:\n{'annotations': Sequence(feature={'area': Value(dtype='float32', id=None),\n                                  'bbox': Sequence(feature=Value(dtype='float32',\n                                                                 id=None),\n                                                   length=4,\n                                                   id=None),\n                                  'category_id': ClassLabel(names=['bin',\n                                                                   'hand',\n                                                                   'not_bin',\n                                                                   'not_hand',\n                                                                   'not_trash',\n                                                                   'trash',\n                                                                   'trash_arm'],\n                                                            id=None),\n                                  'file_name': Value(dtype='string', id=None),\n                                  'image_id': Value(dtype='int64', id=None),\n                                  'iscrowd': Value(dtype='int64', id=None)},\n                         length=-1,\n                         id=None),\n 'image': Image(mode=None, decode=True, id=None),\n 'image_id': Value(dtype='int64', id=None),\n 'image_source': Value(dtype='string', id=None),\n 'label_source': Value(dtype='string', id=None)}\n\n\nNice!\nWe can see our dataset features contain the following fields:\n\nannotations - A sequence of values including a bbox field (short for bounding box) as well as category_id field which contains the target objects we‚Äôd like to identify in our images (['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nimage - This contains the target image assosciated with a given set of annotations (in our case, images and annotations have been uploaded to the Hugging Face Hub together).\nimage_id - A unique ID assigned to a given sample.\nimage_source - Where the image came from (all of our images have been manually collected).\nlabel_source - Where the image label came from (all of our images have been manually labelled).\n\n\n\n3.2 Viewing a single sample from our data\nNow we‚Äôve seen the features, let‚Äôs check out a single sample from our dataset.\nWe can index on a single sample of the \"train\" set just like indexing on a Python list.\n\n# View a single sample of the dataset\ndataset[\"train\"][42]\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 745,\n 'annotations': {'file_name': ['094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg'],\n  'image_id': [745, 745, 745],\n  'category_id': [5, 1, 0],\n  'bbox': [[333.1000061035156,\n    611.2000122070312,\n    244.89999389648438,\n    321.29998779296875],\n   [504.0, 612.9000244140625, 451.29998779296875, 650.7999877929688],\n   [202.8000030517578,\n    366.20001220703125,\n    532.9000244140625,\n    555.4000244140625]],\n  'iscrowd': [0, 0, 0],\n  'area': [78686.3671875, 293706.03125, 295972.65625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nWe see a few more details here compared to just looking at the features.\nWe notice the image is a PIL.Image with size 960x1280 (width x height).\nAnd the file_name is a UUID (Universially Unique Identifier, made with uuid.uuid4()).\nThe bbox field in the annotations key contains a list of bounding boxes assosciated with the image.\nIn this case, there are 3 different bounding boxes.\nWith the category_id values of 5, 1, 0 (we‚Äôll map these to class names shortly).\nLet‚Äôs inspect a single bounding box.\n\ndataset[\"train\"][42][\"annotations\"][\"bbox\"][0]\n\n[333.1000061035156, 611.2000122070312, 244.89999389648438, 321.29998779296875]\n\n\nThis array gives us the coordinates of a single bounding box in the format XYWH.\nWhere:\n\nX is the x-coordinate of the top left corner of the box (333.1).\nY is the y-coordinate of the top left corner of the box (611.2).\nW is the width of the box (244.9).\nH is the height of the box (321.3).\n\nAll of these values are in absolute pixel values (meaning an x-coordinate of 333.1 is 333.1 pixels across on the x-axis).\nHow do I know this?\nI know this because I created the box labels and this is the default value Prodigy (the labelling tool I used) outputs boxes.\nHowever, if you were to come across another bouding box dataset, one of the first steps would be to figure out what format your bounding boxes are in.\nWe‚Äôll see more on bounding box formats shortly.\n\n\n3.3 Extracting the category names from our data\nBefore we start to visualize our sample image and bounding boxes, let‚Äôs extract the category names from our dataset.\nWe can do so by accessing the features attribute our of dataset and then following it through to find the category_id feature, this contains a list of our text-based class names.\n\n\n\n\n\n\nNote\n\n\n\nWhen working with different categories, it‚Äôs good practice to get a list or mapping (e.g.¬†a Python dictionary) from category name to ID and vice versa.\nFor example:\n# Category to ID\n{\"class_name\": 0}\n\n# ID to Category\n{0: \"class_name\"}\nNot all datasets will have this implemented in an easy to access way, so it might take a bit of research to get it created.\n\n\nLet‚Äôs access the class names in our dataset and save them to a variable categories.\n\n# Get the categories from the dataset\n# Note: This requires the dataset to have been uploaded with this information setup, not all datasets will have this available.\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\nBeautiful!\nWe get the following class names:\n\nbin - A rubbish bin or trash can.\nhand - A person‚Äôs hand.\nnot_bin - Negative version of bin for items that look like a bin but shouldn‚Äôt be identified as one.\nnot_hand - Negative version of hand for items that look like a hand but shouldn‚Äôt be identified as one.\nnot_trash - Negative version of trash for items that look like trash but shouldn‚Äôt be identified as it.\ntrash - An item of trash you might find on a walk such as an old plastic bottle, food wrapper, cigarette butt or used coffee cup.\ntrash_arm - A mechanical arm used for picking up trash.\n\nThe goal of our computer vision model will be: given an image, detect items belonging to these target classes if they are present.\n\n\n3.4 Creating a mapping from numbers to labels\nNow we‚Äôve got our text-based class names, let‚Äôs create a mapping from label to ID and ID to label.\nFor each of these, Hugging Face use the terminology label2id and id2label respectively.\n\n# Map ID's to class names and vice versa\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nprint(f\"Label to ID mapping:\\n{label2id}\\n\")\nprint(f\"ID to label mapping:\\n{id2label}\")\n# id2label, label2id\n\nLabel to ID mapping:\n{'bin': 0, 'hand': 1, 'not_bin': 2, 'not_hand': 3, 'not_trash': 4, 'trash': 5, 'trash_arm': 6}\n\nID to label mapping:\n{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash', 6: 'trash_arm'}\n\n\n\n\n3.5 Creating a colour palette\nOk we know which class name matches to which ID, now let‚Äôs create a dictionary of different colours we can use to display our bounding boxes.\nIt‚Äôs one thing to plot bounding boxes, it‚Äôs another thing to make them look nice.\nAnd we always want our plots looking nice!\nWe‚Äôll colour the positive classes bin, hand, trash, trash_arm in nice bright colours.\nAnd the negative classes not_bin, not_hand, not_trash in a light red colour to indicate they‚Äôre the negative versions.\nOur colour dictionary will map class_name -&gt; (red, green, blue) (or RGB) colour values.\n\n# Make colour dictionary\ncolour_palette = {\n    'bin': (0, 0, 224),         # Bright Blue (High contrast with greenery) in format (red, green, blue)\n    'not_bin': (255, 80, 80),   # Light Red to indicate negative class\n\n    'hand': (148, 0, 211),      # Dark Purple (Contrasts well with skin tones)\n    'not_hand': (255, 80, 80),  # Light Red to indicate negative class\n\n    'trash': (0, 255, 0),       # Bright Green (For trash-related items)\n    'not_trash': (255, 80, 80), # Light Red to indicate negative class\n\n    'trash_arm': (255, 140, 0), # Deep Orange (Highly visible)\n}\n\nLet‚Äôs check out what these colours look like!\nIt‚Äôs the ABV motto: Always Be Visualizing!\nWe can plot our colours with matplotlib.\nWe‚Äôll just have to write a small function to normalize our colour values from [0, 255] to [0, 1] (matplotlib expects our colour values to be between 0 and 1).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Normalize RGB values to 0-1 range\ndef normalize_rgb(rgb_tuple):\n    return tuple(x/255 for x in rgb_tuple)\n\n# Turn colors into normalized RGB values for matplotlib\ncolors_and_labels_rgb = [(key, normalize_rgb(value)) for key, value in colour_palette.items()]\n\n# Create figure and axis\nfig, ax = plt.subplots(1, 7, figsize=(8, 1))\n\n# Flatten the axis array for easier iteration\nax = ax.flatten()\n\n# Plot each color square\nfor idx, (label, color) in enumerate(colors_and_labels_rgb):\n    ax[idx].add_patch(plt.Rectangle(xy=(0, 0), \n                                    width=1, \n                                    height=1, \n                                    facecolor=color))\n    ax[idx].set_title(label)\n    ax[idx].set_xlim(0, 1)\n    ax[idx].set_ylim(0, 1)\n    ax[idx].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nSensational!\nNow we know what colours to look out for when we visualize our bounding boxes."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "4 TK - Plotting a single image and visualizing the boxes",
    "text": "4 TK - Plotting a single image and visualizing the boxes\nOkay, okay, finally time to plot an image!\nLet‚Äôs take a random sample from our dataset and plot the image as well as the box on it.\nTo save some space in our notebook (plotting many images can increase the size of our notebook dramatically), we‚Äôll create two small helper functions:\n\nhalf_image - Halves the size of a given image.\nhalf_boxes - Divides the input coordinates of a given input box by 2.\n\nThese functions aren‚Äôt 100% necessary in our workflow.\nThey‚Äôre just to make the images slightly smaller so they fit better in the notebook.\n\nimport PIL\n\ndef half_image(image: PIL.Image) -&gt; PIL.Image:\n    \"\"\"\n    Resizes a given input image by half and returns the smaller version.\n    \"\"\"\n    return image.resize(size=(image.size[0] // 2, image.size[1] // 2))\n\ndef half_boxes(boxes):\n    \"\"\"\n    Halves an array/tensor of input boxes and returns them. Necessary for plotting them on a half-sized image.\n\n    For example:\n\n    boxes = [100, 100, 100, 100]\n    half_boxes = half_boxes(boxes)\n    print(half_boxes)\n\n    &gt;&gt;&gt; [50, 50, 50, 50]\n    \"\"\"\n    if isinstance(boxes, list):\n        # If boxes are list of lists, then we have multiple boxes\n        for box in boxes:\n            if isinstance(box, list):\n                return [[coordinate // 2 for coordinate in box] for box in boxes]\n            else:\n                return [coordinate // 2 for coordinate in boxes]         \n    \n    if isinstance(boxes, np.ndarray):\n        return (boxes // 2)\n    \n    if isinstance(boxes, torch.Tensor):\n        return (boxes // 2)\n\n# Test the functions \nimage_test = dataset[\"train\"][42][\"image\"]\nimage_test_half = half_image(image_test)\nprint(f\"[INFO] Original image size: {image_test.size} | Half image size: {image_test_half.size}\")\n\nboxes_test_list = [100, 100, 100, 100]\nprint(f\"[INFO] Original boxes: {boxes_test_list} | Half boxes: {half_boxes(boxes_test_list)}\")\n\nboxes_test_torch = torch.tensor([100.0, 100.0, 100.0, 100.0])\nprint(f\"[INFO] Original boxes: {boxes_test_torch} | Half boxes: {half_boxes(boxes_test_torch)}\")\n\n[INFO] Original image size: (960, 1280) | Half image size: (480, 640)\n[INFO] Original boxes: [100, 100, 100, 100] | Half boxes: [50, 50, 50, 50]\n[INFO] Original boxes: tensor([100., 100., 100., 100.]) | Half boxes: tensor([50., 50., 50., 50.])\n\n\nTo plot an image and its assosciated boxes, we‚Äôll do the following steps:\n\nSelect a random sample from the dataset.\nExtract the \"image\" (our image is in PIL format) and \"bbox\" keys from the random sample.\n\nWe can also optionally halve the size of our image/boxes to save space. In our case, we will halve our image and boxes.\n\nTurn the box coordinates into a torch.tensor (we‚Äôll be using torchvision utilities to plot the image and boxes).\nConvert the box format from XYXY to XYWH using torchvision.ops.box_convert (we do this because torchvision.utils.draw_bounding_boxes requires XYXY format as input).\nGet a list of label names (e.g.¬†\"bin\", \"trash\", etc) assosciated with each of the boxes as well as a list of colours to match (these will be from our colour_palette).\nDraw the boxes on the target image by:\n\nTurning the image into a tensor with torchvision.transforms.functional.pil_to_tensor.\nDraw the bounding boxes on our image tensor with torchvision.utils.draw_bounding_boxes.\nTurn the image and bounding box tensors back into a PIL image with torchvision.transforms.functional.pil_to_tensor.\n\n\nPhew!\nA fair few steps‚Ä¶\nBut we‚Äôve got this!\n\n\n\n\n\n\nNote\n\n\n\nIf the terms XYXY or XYWH or all of the drawing methods sound a bit confusing or intimidating, don‚Äôt worry, there‚Äôs a fair bit going on here.\nWe‚Äôll cover bounding box formats, such as XYXY shortly.\nIn the meantime, if you want to learn more about different bounding box formats and how to draw them, I wrote A Guide to Bounding Box Formats and How to Draw Them which you might find helpful.\n\n\n\n# Plotting a bounding box on a single image\nimport random\n\nimport torch\n\nfrom torchvision.ops import box_convert\nfrom torchvision.utils import draw_bounding_boxes\n\nfrom torchvision.transforms.functional import pil_to_tensor, to_pil_image \n\n# 1. Select a random sample from our dataset\nrandom_index = random.randint(0, len(dataset[\"train\"]))\nprint(f\"[INFO] Showing training sample from index: {random_index}\")\nrandom_sample = dataset[\"train\"][random_index]\n\n# 2. Get image and boxes from random sample\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_boxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Optional: Half the image and boxes for space saving (all of the following code will work with/without half size images)\nhalf_random_sample_image = half_image(random_sample_image)\nhalf_random_sample_boxes = half_boxes(random_sample_boxes)\n\n# 3. Turn box coordinates in a tensor\nboxes_xywh = torch.tensor(half_random_sample_boxes)\nprint(f\"Boxes in XYWH format: {boxes_xywh}\")\n\n# 4. Convert boxes from XYWH -&gt; XYXY \n# torchvision.utils.draw_bounding_boxes requires input boxes in XYXY format (X_min, y_min, X_max, y_max)\nboxes_xyxy = box_convert(boxes=boxes_xywh,\n                         in_fmt=\"xywh\",\n                         out_fmt=\"xyxy\")\nprint(f\"Boxes XYXY: {boxes_xyxy}\")\n\n# 5. Get label names of target boxes and colours to match\nrandom_sample_label_names = [categories.int2str(x) for x in random_sample[\"annotations\"][\"category_id\"]]\nrandom_sample_colours = [colour_palette[label_name] for label_name in random_sample_label_names]\nprint(f\"Label names: {random_sample_label_names}\")\nprint(f\"Colour names: {random_sample_colours}\")\n\n# 6. Draw the boxes on the image as a tensor and then turn it into a PIL image\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_random_sample_image),\n        boxes=boxes_xyxy,\n        colors=random_sample_colours,\n        labels=random_sample_label_names,\n        width=2,\n        label_colors=random_sample_colours\n    )\n)\n\n[INFO] Showing training sample from index: 1080\nBoxes in XYWH format: tensor([[148., 233., 149., 233.],\n        [183., 364., 173., 181.],\n        [ 93., 171., 224., 256.],\n        [374., 242., 104., 305.]])\nBoxes XYXY: tensor([[148., 233., 297., 466.],\n        [183., 364., 356., 545.],\n        [ 93., 171., 317., 427.],\n        [374., 242., 478., 547.]])\nLabel names: ['trash', 'hand', 'bin', 'bin']\nColour names: [(0, 255, 0), (148, 0, 211), (0, 0, 224), (0, 0, 224)]\n\n\n\n\n\n\n\n\n\nOutstanding!\nOur first official bounding boxes plotted on an image!\nNow the idea of Trashify üöÆ is coming to life.\nDepending on the random sample you‚Äôre looking at, you should see some combination of ['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm'].\nOur goal will be to build an object detection model to replicate these boxes on a given image.\n\n\n\n\n\n\nGetting familiar with a dataset: viewing 100 random samples\n\n\n\nWhenever working with a new dataset, I find it good practice to view 100+ random samples of the data.\nIn our case, this would mean viewing 100 random images with their bounding boxes drawn on them.\nDoing so starts to build your own intuition of the data.\nUsing this intuition, along with evaluation metrics, you can start to get a better idea of how your model might be performing later on.\nKeep this in mind for any new dataset or problem space you‚Äôre working on.\nStart by looking at 100+ random samples.\nAnd yes, generally more is better.\nSo you can practice by running the code cell above a number of times to see the different kinds of images and boxes in the dataset.\nCan you think of any scenarios which the dataset might be missing?"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#different-bounding-box-formats",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#different-bounding-box-formats",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "5 Different bounding box formats",
    "text": "5 Different bounding box formats\nWhen drawing our bounding box, we discussed the terms XYXY and XYWH.\nWell, we didn‚Äôt really discuss these at all‚Ä¶\nBut that‚Äôs why we‚Äôre here.\nOne of the most confusing things in the world of object detection is the different formats bounding boxes come in.\nAre your boxes in XYXY, XYWH or CXCYWH?\nAre they in absolute format?\nOr normalized format?\nPerhaps a table will help us.\nThe following table contains a non-exhaustive list of some of the most common bounding box formats you‚Äôll come across in the wild.\n\n\n\nTable¬†1: Different bounding box formats\n\n\n\n\n\nBox format\nDescription\nAbsolute Example\nNormalized Example\nSource\n\n\n\n\nXYXY\nDescribes the top left corner coordinates (x1, y1) as well as the bottom right corner coordinates of a box.  Also referred to as:  [x1, y1, x2, y2]  or  [x_min, y_min, x_max, y_max]\n[8.9, 275.3, 867.5, 964.0]\n[0.009, 0.215, 0.904, 0.753]\nPASCAL VOC Dataset uses the absolute version of this format, torchvision.utils.draw_bounding_boxes defaults to the absolute version of this format.\n\n\nXYWH\nDescribes the top left corner coordinates (x1, y1) as well as the width (box_width) and height (box_height) of the target box. The bottom right corners (x2, y2) are found by adding the width and height to the top left corner coordinates (x1 + box_width, y1 + box_height).  Also referred to as:  [x1, y1, box_width, box_height]  or  [x_min, y_min, box_width, box_height]\n[8.9, 275.3, 858.6, 688.7]\n[0.009, 0.215, 0.894, 0.538]\nThe COCO (Common Objects in Context) dataset uses the absolute version of this format, see the section under ‚Äúbbox‚Äù.\n\n\nCXCYWH\nDescribes the center coordinates of the bounding box (center_x, center_y) as well as the width (box_width) and height (box_height) of the target box.  Also referred to as:  [center_x, center_y, box_width, box_height]\n[438.2, 619.65, 858.6, 688.7]\n[0.456, 0.484, 0.894, 0.538]\nNormalized version introduced in the YOLOv3 (You Only Look Once) paper and is used by many later forms of YOLO.\n\n\n\n\n\n\n\n5.1 Absolute or normalized format?\nIn absolute coordinate form, bounding box values are in the same format as the width and height dimensions (e.g.¬†our image is 960x1280 pixels).\nFor example in XYXY format: [\"bin\", 8.9, 275.3, 867.5, 964.0]\nAn (x1, y1) (or (x_min, y_min)) coordinate of (8.9, 275.3) means the top left corner is 8.9 pixels in on the x-axis, and 275.3 pixels down on the y-axis.\nIn normalized coordinate form, values are between [0, 1] and are proportions of the image width and height.\nFor example in XYXY format: [\"bin\", 0.009, 0.215, 0.904, 0.753]\nA normalized (x1, y1) (or (x_min, y_min)) coordinate of (0.009, 0.215) means the top left corner is 0.009 * image_width pixels in on the x-axis and 0.215 * image_height down on the y-axis.\nTo convert absolute coordinates to normalized, you can divide x-axis values by the image width and y-axis values by the image height.\n\\[\nx_{\\text{normalized}} = \\frac{x_{\\text{absolute}}}{\\text{image\\_width}} \\quad y_{\\text{normalized}} = \\frac{y_{\\text{absolute}}}{\\text{image\\_height}}\n\\]\n\n\n5.2 Which bounding box format should you use?\nThe bounding box format you use will depend on the framework, model and existing data you‚Äôre trying to use.\nFor example, the take the following frameworks:\n\nPyTorch - If you‚Äôre using PyTorch pre-trained models, for example, torchvision.models.detection.fasterrcnn_resnet50_fpn, you‚Äôll want absolute XYXY ([x1, y1, x2, y2]) format.\nHugging Face Transformers - If you‚Äôre using a Hugging Face Transformers model such as Conditional DETR, you‚Äôll want to take note that outputs from the model can be of one type (e.g.¬†CXCYWH) but they can be post-processed into another type (e.g.¬†absolute XYXY).\nUltralytics YOLO - If you‚Äôre using a YOLO-like model such as Ultralytics YOLO, you‚Äôll want normalized CXCYWH ([center_x, center_y, width, height]) format.\nGoogle Gemini - If you‚Äôre using Google Gemini to predict bounding boxes on your images, then you‚Äôll want to pay attention to the special [y_min, x_min, y_max, x_max] (YXYX) normalized coordinates.\n\nOr if you note that someone has said their model is pre-trained on the COCO dataset, chances are the data has been formatted in XYWH format (see Table¬†1).\n\n\n\n\n\n\nNote\n\n\n\nFor more on different bounding box formats and how to draw them, see A Guide to Bounding Box Formats and How to Draw Them.\n\n\n\n# TK - should I functionize the plotting of boxes and image so we can do input/output with tensors + data augmentations on that (E.g. original: image, augmented: image),\n# - is this needed?"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#getting-an-object-detection-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#getting-an-object-detection-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "6 Getting an object detection model",
    "text": "6 Getting an object detection model\nThere are two main ways of getting an object detection model:\n\nBuilding it yourself. For example, constructing it layer by layer, testing it and training it on your target problem.\nUsing an existing one. For example, find an existing model on a problem space similar to your own and then adapt it via transfer learning (TK - add link to glossary) to your own task.\n\nIn our case, we‚Äôre going to focus on the latter.\nWe‚Äôll be taking a pre-trained object detection model and fine-tuning it on our Trashify üöÆ dataset so it outputs the boxes and labels we‚Äôre after.\n\n6.1 Places to get object detection models\nInstead of building your own machine learning model from scratch, it‚Äôs common practice to take an existing model that works on similar problem space to yours and then fine-tune (TK - add link to glossary) it to your own use case.\nThere are several places to get object detection models:\n\n\n\nTable¬†2: Places to get pre-trained object detection models\n\n\n\n\n\nLocation\nDescription\n\n\n\n\nHugging Face Hub\nOne the best places on the internet to find open-source machine learning models of nearly any kind. You can find pre-trained object detection models here such as facebook/detr-resnet-50, a model from Facebook (Meta) and microsoft/conditional-detr-resnet-50, a model from Microsoft and the model we‚Äôre going to use as our base model. Many of the models are permissively licensed, meaning you can use them for your own projects.\n\n\ntorchvision\nPyTorch‚Äôs built-in domain library for computer vision has several pre-trained object detection models which you can use in your own workflows.\n\n\npaperswithcode.com/task/object-detection\nWhilst not a direct place to download object detection models from, paperswithcode contains benchmarks for many machine learning tasks (including object detection) which shows the current state of the art (best performing) models and usually includes links to where to get the code.\n\n\nDetectron2\nDetectron2 is an open-source library to help with many of the tasks in detecting items in images. Inside you‚Äôll find several pre-trained and adaptable models as well as utilities such as data loaders for object detection and segmentation tasks.\n\n\nYOLO Series\nA running series of ‚ÄúYou Only Look Once‚Äù models. Usually, the higher the number, the better performing. For example, YOLOv11 by Ultralytics should outperform YOLOv10, however, this often requires testing on your own dataset. Beware of the license, it is under the AGPL-3.0 license which may cause issues in some organizations.\n\n\nmmdetection library\nAn open-source library from the OpenMMLab which contains many different open-source models as well as detection-specific utilties.\n\n\n\n\n\n\nWhen you find a pre-trained object detection model, you‚Äôll often see statements such as:\n\nConditional DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images).\nSource: https://huggingface.co/microsoft/conditional-detr-resnet-50\n\nThis means the model has already been trained on the COCO object detection dataset which contains 118,000 images and 80 classes such as [\"cake\", \"person\", \"skateboard\"...].\nThis is a good thing.\nIt means that the model should have a fairly good starting point when we try to adapt it to our own project.\n\n\n6.2 Downloading our model from Hugging Face\nFor our Trashify üöÆ project we‚Äôre going to be using the pre-trained object detection model microsoft/conditional-detr-resnet-50 which was originally introduced in the paper Conditional DETR for Fast Training Convergence.\n\n\n\n\n\n\nNote\n\n\n\nThe term ‚ÄúDETR‚Äù stands for ‚ÄúDEtection TRansformer‚Äù.\nWhere ‚ÄúTransformer‚Äù refers to the Transformer neural network architecture, specifically the Vision Transformer (or ViT) rather than the Hugging Face transformers library (quite confusing, yes).\nSo DETR means ‚Äúperforming detection with the Transformer architecture‚Äù.\nAnd the ‚ÄúResNet‚Äù part stands for ‚ÄúResidual Neural Network‚Äù which is a common computer vision backbone. The ‚Äú50‚Äù refers to the number of layers in the network. Saying ‚ÄúResNet-50‚Äù means the 50 layer version of ResNet. ResNet-101 and ResNet-18 are two other larger and smaller variants.\n\n\nTo use this model, there are some helpful documentation resources we should be aware of:\n\n\n\nTable¬†3: Model documentation resources\n\n\n\n\n\nResource\nDescription\n\n\n\n\nConditional DETR documentation\nContains detailed information on each of the transformers.ConditionalDetr classes.\n\n\ntransformers.ConditionalDetrConfig\nContains the configuration settings for our model such as number of layers and other hyperparameters.\n\n\ntransformers.ConditionalDetrImageProcessor\nContains several preprocessing on post processing functions and settings for data going into and out of our model. Here we can set values such as size in the preprocess method which will resize our images to a certain size. We can also use the post_process_object_detection method to process the raw outputs of our model into a more usable format.\n\n\ntransformers.ConditionalDetrModelForObjectdetection\nThis will enable us to load the Conditional DETR model weights and enable to pass data through them via the forward method.\n\n\ntransformers.AutoImageProcessor\nThis will enable us to create an instance of transformers.ConditionalDetrImageProcessor by passing the model name microsoft/conditional-detr-resnet-50 to the from_pretrained method. Hugging Face Transformers uses several Auto Classes for various problem spaces and models.\n\n\ntransformers.AutoModelForObjectDetection\nEnables us to load the model architecture and weights for the Conditional DETR architecture by passing the model name microsoft/conditional-detr-resnet-50 to the from_pretrained method.\n\n\n\n\n\n\nWe‚Äôll get hands-on which each of these throughout the project.\nFor now, if you‚Äôd like to read up more on each, I‚Äôd highly recommend it.\nKnowing how to navigate and read through a framework‚Äôs documentation is a very helpful skill to have.\n\n\n\n\n\n\nNote\n\n\n\nThere are other object detection models we could try on the Hugging Face Hub such as facebook/detr-resnet-50 or IDEA-Research/dab-detr-resnet-50-dc5-pat3.\nFor now, we‚Äôll stick with microsoft/conditional-detr-resnet-50.\nIt‚Äôs easy to get stuck figuring out which model to use instead of just trying one and seeing how it goes.\nBest to get something small working with one model and try another one later as part of a series of experiments to try and improve your results.\n\n\nWe can load our model with transformers.AutoModelForObjectDetection.from_pretrained and passing in the following parameters:\n\npretrained_model_name_or_path - Our target model, which can be a local path or Hugging Face model name (e.g.¬†microsoft/conditional-detr-resnet-50).\nlabel2id - A dictionary mapping our class names/labels to their numerical ID, this is so our model will know how many classes to output.\nid2label - A dictionary mapping numerical IDs to our class names/labels, so our model will know how many classes we‚Äôre working with and what their IDs are.\nignore_mismatched_sizes=True (default) - We‚Äôll set this to True so that our model can be instatiated with a varying number of classes compared to what it may have been trained on (e.g.¬†if our model was trained on the 91 classes from COCO, we only need 7).\nbackbone=\"resnet50\" (default) - We‚Äôll tell our model what kind of computer vision backbone to use for extracting features from our images.\n\nSee the full documentation for a full list of parameters we can use.\nLet‚Äôs create a model!\n\nfrom transformers import AutoModelForObjectDetection\n\nMODEL_NAME = \"PekingU/rtdetr_v2_r50vd\"\n\nmodel = AutoModelForObjectDetection.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    label2id=label2id,\n    id2label=id2label,\n    # Original model was trained with a different number of output classes to ours\n    # So we'll ignore any mismatched sizes (e.g. 91 vs. 7)\n    # Try turning this to False and see what happens\n    ignore_mismatched_sizes=True, \n    # backbone=\"resnet50\"\n)\n\n# Uncomment to see full model archietecture\n# model\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nBeautiful!\nWe‚Äôve got a model ready.\nYou might‚Äôve noticed a warning about the model needing to be trained on a down-stream task:\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match: - class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated - class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\nThis is because our model has a different number of target classes (7 in total) comapred to the original model (91 in total, from the COCO dataset).\nSo in order to get this pretrained model to work on our dataset, we‚Äôll need to fine-tune it.\nYou might also notice that if you set ignore_mismatched_sizes=False, you‚Äôll get an error:\n\nRuntimeError: Error(s) in loading state_dict for ConditionalDetrForObjectDetection: size mismatch for class_labels_classifier.weight: copying a param with shape torch.Size([91, 256]) from checkpoint, the shape in current model is torch.Size([7, 256]). size mismatch for class_labels_classifier.bias: copying a param with shape torch.Size([91]) from checkpoint, the shape in current model is torch.Size([7]). You may consider adding ignore_mismatched_sizes=True in the model from_pretrained method.\n\nThis is a similar warning to the one above.\nKeep this is mind for when you‚Äôre working with pretrained models.\nIf you are using data slightly different to what the model was trained on, you may need to alter the setup hyperparameters as well as fine-tune it on your own data.\n\n\n6.3 Inspecting our model‚Äôs layers\nWe can inspect the full model architecture by running print(model) (I‚Äôve commented this out for brevity).\nAnd if you do so, you‚Äôll see a large list of layers which combine to contribute to make the overall model.\nThe following subset of layers has been truncated for brevity.\n# Shortened version of the model architecture, print the full model to see all layers\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n              ...\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d())))\n            ...\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n              ...\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True))))\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(...)\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)))\n      (ref_point_head): MLP(\n        ...\n      ))))\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)))))\nIf we check out a few of our model‚Äôs layers, we can see that it is a combination of convolutional, attention, MLP (multi-layer perceptron) and linear layers.\nI‚Äôll leave exploring each of these layer types for extra-curriculum.\nFor now, think of them as progressively pattern extractors.\nWe‚Äôll feed our input image into our model and layer by layer it will manipulate the pixel values to try and extract patterns in a way so that its internal parameters matches the image to its input annotations.\nMore specifically, if we dive into the final two layer sections:\n\nclass_labels_classifier = classification head with out_features=7 (one for each of our labels, 'bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nbbox_predictor = regression head with out_features=4 (one for each of our bbox coordinates, e.g.¬†[center_x, center_y, width, height]).\n\n\nprint(f\"[INFO] Final classification layer: {model.class_labels_classifier}\\n\")\nprint(f\"[INFO] Final box regression layer: {model.bbox_predictor}\")\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 print(f\"[INFO] Final classification layer: {model.class_labels_classifier}\\n\")\n      2 print(f\"[INFO] Final box regression layer: {model.bbox_predictor}\")\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1940, in Module.__getattr__(self, name)\n   1938     if name in modules:\n   1939         return modules[name]\n-&gt; 1940 raise AttributeError(\n   1941     f\"'{type(self).__name__}' object has no attribute '{name}'\"\n   1942 )\n\nAttributeError: 'RTDetrV2ForObjectDetection' object has no attribute 'class_labels_classifier'\n\n\n\nThese two layers are what are going to output the final predictions of our model in structure similar to our annotations.\nThe class_labels_classifier will output the predicted class label of a given bounding box output from bbox_predictor.\nIn essence, we are trying to get all of the pretrained patterns (also called parameters/weights & biases) of the previous layers to conform to the ideal outputs we‚Äôd like at the end.\n\n\n6.4 Counting the number of parameters in our model\nParameters are individual values which contribute to a model‚Äôs final output.\nParameters are also referred to as weights and biases.\nYou can think of these individual weights as small pushes and pulls on the input data to get it to match the input annotations.\nIf our weights were perfect, we could input an image and always get back the correct bounding boxes and class labels.\nIt‚Äôs very unlikely to ever have perfect weights (unless your dataset is very small) but we can make them quite good (and useful).\nWhen you have a good set of weights, this is known as a good representation.\nRight now, our weights have been trained on COCO, a collection of 91 different common objects.\nSo they have a fairly good representation of detecting general common objects, however, we‚Äôd like to fine-tune these weights to detect our target objects.\nImportantly, our model will not be starting from scratch when it begins to train.\nIt will instead take off from its existing knowledge of detecting common objects in images and try to adhere to our task.\nWhen it comes to parameters and weights, generally, more is better.\nMeaning the more parameters your model has, the better representation it can learn.\nFor example, ResNet50 (our computer vision backbone) has ~25 million parameters, about 100 MB in float32 precision or 50MB in float16 precision.\nWhereas a model such as Llama-3.1-405B has ~405 billion parameters, about 1.45 TB in float32 precision or 740 GB in float16 precision, about 16,000x more than ResNet50.\nHowever, as we can see having more parameters comes with the tradeoff of size and latency.\nFor each new parameter requires to be stored and it also adds an extra computation unit to your model.\nIn the case of Trashify, since we‚Äôd like our model to run on-device (e.g.¬†make predictions live on an iPhone), we‚Äôd opt for the smallest number of parameters we could get acceptable results from.\nIf performance is your number 1 criteria and size and latency don‚Äôt matter, then you‚Äôd likely opt for the model with the largest number of parameters (though always evaluate these models on your own data, larger models are generally better, not always better).\nSince our model is built using PyTorch, let‚Äôs write a small function to count the number of:\n\nTrainable parameters (parameters which will be tweaked during training)\nNon-trainable parameters (parameters which will not be tweaked during training)\nTotal parameters (trainable parameters + non-trainable parameters)\n\n\n# Count the number of parameters in the model\ndef count_parameters(model):\n    \"\"\"Takes in a PyTorch model and returns the number of parameters.\"\"\"\n    trainable_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    non_trainable_parameters = sum(p.numel() for p in model.parameters() if not p.requires_grad)\n    total_parameters = sum(p.numel() for p in model.parameters())\n    print(f\"Total parameters: {total_parameters:,}\")\n    print(f\"Trainable parameters (will be updated): {trainable_parameters:,}\")\n    print(f\"Non-trainable parameters (will not be updated): {non_trainable_parameters:,}\")\n\ncount_parameters(model)\n\nTotal parameters: 42,741,357\nTrainable parameters (will be updated): 42,741,357\nNon-trainable parameters (will not be updated): 0\n\n\nCool!\nIt looks like our model has a total of 43,396,813 parameters, of which, most of them are trainable.\nThis means that when we fine-tune our model later on, we‚Äôll be tweaking the majority of the parameters to try and represent our data.\nIn practice, this is known as full fine-tuning, trying to fine-tune a large portion of the model to our data.\nThere are other methods for fine-tuning, such as feature extraction (where you only fine-tune the final layers of the model) and partial fine-tuning (where you fine-tune a portion of the model).\nAnd even methods such as LoRA (Low-Rank Adaptation) which fine-tunes an adaptor matrix as a compliment to the model‚Äôs parameters.\n\n\n6.5 Creating a function to build our model\nSince machine learning is very experimental, we may want to create multiple instances of our model to test various things.\nSo let‚Äôs functionize the creation of a new model with parameters for our target model name, id2label and label2id dictionaries.\n\nfrom transformers import AutoModelForObjectDetection\n\n# Setup the model\ndef create_model(pretrained_model_name_or_path: str = MODEL_NAME, \n                 label2id: dict = label2id, \n                 id2label: dict = id2label):\n    \"\"\"Creates and returns an instance of AutoModelForObjectDetection.\n    \n    Args: \n        pretrained_model_name_or_path (str): The name or path of the pretrained model to load. \n            Defaults to MODEL_NAME.\n        label2id (dict): A dictionary mapping class labels to IDs. Defaults to label2id.\n        id2label (dict): A dictionary mapping class IDs to labels. Defaults to id2label.\n    \n    Returns:\n        AutoModelForObjectDetection: A pretrained model for object detection with number of output\n            classes equivalent to len(label2id).\n    \"\"\"\n    model = AutoModelForObjectDetection.from_pretrained(\n        pretrained_model_name_or_path=MODEL_NAME,\n        label2id=label2id,\n        id2label=id2label,\n        ignore_mismatched_sizes=True, # default\n        # backbone=\"resnet50\", # default \n    )\n    return model\n\nPerfect!\nAnd to make sure our function works‚Ä¶\n\nMODEL_NAME\n\n'PekingU/rtdetr_v2_r50vd'\n\n\n\n# Create a new model instance\nmodel = create_model()\n# model\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\n\n\n6.6 Trying to pass a single sample through our model (part 1)\nOkay, now we‚Äôve got a model, let‚Äôs put some data through it!\nWhen we call our model, because it‚Äôs a PyTorch Module (torch.nn.Module) it will by default run the forward method.\nIn PyTorch, forward overrides the special __call__ method on functions.\nSo we can pass data into our model by running:\nmodel(input_data)\nWhich is equivalent to running:\nmodel.forward(input_data)\nTo see what happens when we call our model, let‚Äôs inspect the forward method‚Äôs docstring with model.forward?.\n\n# What happens when we call our model?\n# Note: for PyTorch modules, `forward` overrides the __call__ method, \n# so calling the model is equivalent to calling the forward method.\nmodel.forward?\n\n\n\nOutput of model.forward?\n\nSignature:\nmodel.forward(\n    pixel_values: torch.FloatTensor,\n    pixel_mask: Optional[torch.LongTensor] = None,\n    decoder_attention_mask: Optional[torch.LongTensor] = None,\n    encoder_outputs: Optional[torch.FloatTensor] = None,\n    inputs_embeds: Optional[torch.FloatTensor] = None,\n    decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n    labels: Optional[List[dict]] = None,\n    output_attentions: Optional[bool] = None,\n    output_hidden_states: Optional[bool] = None,\n    return_dict: Optional[bool] = None,\n) -&gt; Union[Tuple[torch.FloatTensor], transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput]\nDocstring:\nThe [`ConditionalDetrForObjectDetection`] forward method, overrides the `__call__` special method.\n\n&lt;Tip&gt;\n\nAlthough the recipe for forward pass needs to be defined within this function, one should call the [`Module`]\ninstance afterwards instead of this since the former takes care of running the pre and post processing steps while\nthe latter silently ignores them.\n\n&lt;/Tip&gt;\n\nArgs:\n    pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)`):\n        Pixel values. Padding will be ignored by default should you provide it.\n\n        Pixel values can be obtained using [`AutoImageProcessor`]. See [`ConditionalDetrImageProcessor.__call__`]\n        for details.\n\n    pixel_mask (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*):\n        Mask to avoid performing attention on padding pixel values. Mask values selected in `[0, 1]`:\n\n        - 1 for pixels that are real (i.e. **not masked**),\n        - 0 for pixels that are padding (i.e. **masked**).\n\n        [What are attention masks?](../glossary#attention-mask)\n\n    decoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, num_queries)`, *optional*):\n        Not used by default. Can be used to mask object queries.\n    encoder_outputs (`tuple(tuple(torch.FloatTensor)`, *optional*):\n        Tuple consists of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)\n        `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) is a sequence of\n        hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.\n    inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you\n        can choose to directly pass a flattened representation of an image.\n    decoder_inputs_embeds (`torch.FloatTensor` of shape `(batch_size, num_queries, hidden_size)`, *optional*):\n        Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an\n        embedded representation.\n    output_attentions (`bool`, *optional*):\n        Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n        tensors for more detail.\n    output_hidden_states (`bool`, *optional*):\n        Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n        more detail.\n    return_dict (`bool`, *optional*):\n        Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\n    labels (`List[Dict]` of len `(batch_size,)`, *optional*):\n        Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the\n        following 2 keys: 'class_labels' and 'boxes' (the class labels and bounding boxes of an image in the batch\n        respectively). The class labels themselves should be a `torch.LongTensor` of len `(number of bounding boxes\n        in the image,)` and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image, 4)`.\n\n\n    Returns:\n        [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or `tuple(torch.FloatTensor)`: A [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or a tuple of\n        `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`) comprising various\n        elements depending on the configuration ([`ConditionalDetrConfig`]) and inputs.\n\n        - **loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` are provided)) -- Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a\n          bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized\n          scale-invariant IoU loss.\n        - **loss_dict** (`Dict`, *optional*) -- A dictionary containing the individual losses. Useful for logging.\n        - **logits** (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes + 1)`) -- Classification logits (including no-object) for all queries.\n        - **pred_boxes** (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`) -- Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These\n          values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding\n          possible padding). You can use [`~ConditionalDetrImageProcessor.post_process_object_detection`] to retrieve the\n          unnormalized bounding boxes.\n        - **auxiliary_outputs** (`list[Dict]`, *optional*) -- Optional, only returned when auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)\n          and labels are provided. It is a list of dictionaries containing the two above keys (`logits` and\n          `pred_boxes`) for each decoder layer.\n        - **last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the decoder of the model.\n        - **decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the decoder at the output of each\n          layer plus the initial embedding outputs.\n        - **decoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n        - **cross_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder's cross-attention layer, after the attention softmax,\n          used to compute the weighted average in the cross-attention heads.\n        - **encoder_last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the encoder of the model.\n        - **encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the encoder at the output of each\n          layer plus the initial embedding outputs.\n        - **encoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the encoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n  \n\n    Examples:\n\n    ```python\n    &gt;&gt;&gt; from transformers import AutoImageProcessor, AutoModelForObjectDetection\n    &gt;&gt;&gt; from PIL import Image\n    &gt;&gt;&gt; import requests\n\n    &gt;&gt;&gt; url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n    &gt;&gt;&gt; image = Image.open(requests.get(url, stream=True).raw)\n\n    &gt;&gt;&gt; image_processor = AutoImageProcessor.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n    &gt;&gt;&gt; model = AutoModelForObjectDetection.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n\n    &gt;&gt;&gt; inputs = image_processor(images=image, return_tensors=\"pt\")\n\n    &gt;&gt;&gt; outputs = model(**inputs)\n\n    &gt;&gt;&gt; # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n    &gt;&gt;&gt; target_sizes = torch.tensor([image.size[::-1]])\n    &gt;&gt;&gt; results = image_processor.post_process_object_detection(outputs, threshold=0.5, target_sizes=target_sizes)[\n    ...     0\n    ... ]\n    &gt;&gt;&gt; for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n    ...     box = [round(i, 2) for i in box.tolist()]\n    ...     print(\n    ...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n    ...         f\"{round(score.item(), 3)} at location {box}\"\n    ...     )\n    Detected remote with confidence 0.833 at location [38.31, 72.1, 177.63, 118.45]\n    Detected cat with confidence 0.831 at location [9.2, 51.38, 321.13, 469.0]\n    Detected cat with confidence 0.804 at location [340.3, 16.85, 642.93, 370.95]\n    Detected remote with confidence 0.683 at location [334.48, 73.49, 366.37, 190.01]\n    Detected couch with confidence 0.535 at location [0.52, 1.19, 640.35, 475.1]\n    ```\nFile:      ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py\nType:      method\n\nRunning model.forward? we can see that our model wants to take in pixel_values as well as a pixel_mask as arguments.\nWhat happens if we try to pass in a single image from our random_sample?\nLet‚Äôs try!\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs good practice to try and pass a single sample through your model as soon as possible to see what happens.\nIf we‚Äôre lucky, it‚Äôll work.\nIf we‚Äôre really lucky, we‚Äôll get an error message saying why it didn‚Äôt work (this is usually the case because rarely does raw data flow through a model without being preprocessed first).\n\n\nWe‚Äôll do so by setting pixel_values to our random_sample[\"image\"] and pixel_mask=None.\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample[\"image\"],\n                              pixel_mask=None)\nrandom_sample_outputs\n\n\n\nOutput of random_sample_outputs\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[34], line 2\n      1 # Do a single forward pass with the model\n----&gt; 2 random_sample_outputs = model(pixel_values=random_sample[\"image\"],\n      3                               pixel_mask=None)\n      4 random_sample_outputs\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1739, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1737     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1738 else:\n-&gt; 1739     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1750, in Module._call_impl(self, *args, **kwargs)\n   1745 # If we don't have any hooks, we want to skip the rest of the logic in\n   1746 # this function, and just call forward.\n   1747 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1748         or _global_backward_pre_hooks or _global_backward_hooks\n   1749         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1750     return forward_call(*args, **kwargs)\n   1752 result = None\n   1753 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py:1717, in ConditionalDetrForObjectDetection.forward(self, pixel_values, pixel_mask, decoder_attention_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, labels, output_attentions, output_hidden_states, return_dict)\n   1714 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n   1716 # First, sent images through CONDITIONAL_DETR base model to obtain encoder + decoder outputs\n-&gt; 1717 outputs = self.model(\n   1718     pixel_values,\n   1719     pixel_mask=pixel_mask,\n   1720     decoder_attention_mask=decoder_attention_mask,\n   1721     encoder_outputs=encoder_outputs,\n   1722     inputs_embeds=inputs_embeds,\n   1723     decoder_inputs_embeds=decoder_inputs_embeds,\n   1724     output_attentions=output_attentions,\n   1725     output_hidden_states=output_hidden_states,\n   1726     return_dict=return_dict,\n   1727 )\n   1729 sequence_output = outputs[0]\n   1731 # class logits + predicted bounding boxes\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1739, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1737     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1738 else:\n-&gt; 1739     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1750, in Module._call_impl(self, *args, **kwargs)\n   1745 # If we don't have any hooks, we want to skip the rest of the logic in\n   1746 # this function, and just call forward.\n   1747 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1748         or _global_backward_pre_hooks or _global_backward_hooks\n   1749         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1750     return forward_call(*args, **kwargs)\n   1752 result = None\n   1753 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py:1521, in ConditionalDetrModel.forward(self, pixel_values, pixel_mask, decoder_attention_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, output_attentions, output_hidden_states, return_dict)\n   1516 output_hidden_states = (\n   1517     output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n   1518 )\n   1519 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n-&gt; 1521 batch_size, num_channels, height, width = pixel_values.shape\n   1522 device = pixel_values.device\n   1524 if pixel_mask is None:\n\nAttributeError: 'Image' object has no attribute 'shape'\n\nOh no!‚Ä¶ I mean‚Ä¶ Oh, yes!\nWe get an error:\n\nAttributeError: ‚ÄòImage‚Äô object has no attribute ‚Äòshape‚Äô\n\nHmmm‚Ä¶ it seems we‚Äôve tried to pass a PIL.Image to our model rather than a torch.FloatTensor of shape (batch_size, num_channels, height, width).\nIt looks like our input data might require some preprocessing before we can pass it to our model."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#aside-processor-to-model-pattern",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#aside-processor-to-model-pattern",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "7 Aside: Processor to Model Pattern",
    "text": "7 Aside: Processor to Model Pattern\nMany Hugging Face data loading and modelling workflows as well as machine learning workflows in general follow the pattern of:\n\nData -&gt; Preprocessor -&gt; Model\n\nTK image - can we make data -&gt; preprocessor -&gt; model look better? potentially a flow chart?\nMeaning, the raw input data gets preprocessed or transformed in some way before being passed to a model.\nPreprocessors and models are often loaded with an Auto Class.\nAn Auto Class pairs a preprocessor and model based on their model name or key.\nFor example:\nfrom transformers import AutoProcessor, AutoModel\n\n# Load raw data\nraw_data = load_data()\n\n# Define target model name\nMODEL_NAME = \"...\"\n\n# Load preprocessor and model (these two are often paired)\npreprocessor = AutoProcessor.from_pretrained(MODEL_NAME)\nmodel = AutoModel.from_pretrained(MODEL_NAME)\n\n# Preprocess data\npreprocessed_data = preprocessor.preprocess(raw_data)\n\n# Pass preprocessed data to model\noutput = model(preprocessed_data)\nThis is the same for our Trashify üöÆ project.\nWe‚Äôve got our raw data (images and bounding boxes), however, they need to be preprocessed in order for our model to be able to handle them.\nPreviously we tried to pass a sample of raw data to our model and this errored.\nWe can fix this by first preprocessing our raw data with our model‚Äôs pair preprocessor and then passing to our model again."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#loading-our-models-processor",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#loading-our-models-processor",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "8 Loading our model‚Äôs processor",
    "text": "8 Loading our model‚Äôs processor\nTime to get our raw data ready for our model!\nTo begin, let‚Äôs load our model‚Äôs processor.\nWe‚Äôll use this to prepare our input images for the model.\nTo do so, we‚Äôll use transformers.AutoImageProcessor and pass our target model name to the from_pretrained method.\n\nfrom transformers import AutoImageProcessor\n\nMODEL_NAME = \"PekingU/rtdetr_v2_r50vd\"\n# MODEL_NAME = \"facebook/detr-resnet-50\" # Could also use this model as an another experiment\n\n# Load the image processor\nimage_processor = AutoImageProcessor.from_pretrained(pretrained_model_name_or_path=MODEL_NAME, \n                                                     use_fast=True)\n\n# Check out the image processor\nimage_processor\n\nRTDetrImageProcessorFast {\n  \"crop_size\": null,\n  \"data_format\": \"channels_first\",\n  \"default_to_square\": false,\n  \"device\": null,\n  \"do_center_crop\": null,\n  \"do_convert_annotations\": true,\n  \"do_convert_rgb\": null,\n  \"do_normalize\": false,\n  \"do_pad\": false,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"RTDetrImageProcessorFast\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"input_data_format\": null,\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"return_segmentation_masks\": null,\n  \"return_tensors\": null,\n  \"size\": {\n    \"height\": 640,\n    \"width\": 640\n  }\n}\n\n\nOk, a few things going on here.\nThese parameters will transform our input images before we pass them to our model.\nOne of the first things to see is the image_processor is expecting our bounding boxes to be in COCO (or coco_detection) format (this is the default).\nWe‚Äôll see what this looks like later on but our processor wants this format because that‚Äôs the format our model has been trained on (it‚Äôs generally best practice to input data to a model in the same way its been trained on, otherwise you might get poor results).\nAnother thing to notice is that our input images will be resized to the values of the size parameter.\nIn our case, it‚Äôs currently:\n\"size\": {\n    \"longest_edge\": 1333,\n    \"shortest_edge\": 800\n}\nWhich means that the longest edge will have size less or equal to 1333 and the shortest edge less or equal to 800.\nFor simplicity, we‚Äôll change this shortly to make both sides the same size.\nYou can read more about what each of these does in the transformers.ConditionalDetrImageProcessor documentation.\nLet‚Äôs update our instance of transformers.ConditionalDetrImageProcessor with a few custom parameters:\n\ndo_convert_annotations=True - This is the default and it will convert our boxes to the format CXCYWH or (center_x, center_y, width, height) (see Table¬†1) in the range [0, 1].\nsize - We‚Äôll update the size dictionary so all of our images have \"longest_edge\": 640 and \"shortest_edge: 640\". We‚Äôll use a value of 640 which is a common size in world of object detection. But there are also other sizes such as 300x300, 480x480, 512x512, 800x800 and more.\n\n\n\n\n\n\n\nNote\n\n\n\nDepending on what task you‚Äôre working on, you might want to tweak the image resolution you‚Äôre working with.\nFor example, I like this quote from Lucas Beyer, a former research scientist at DeepMind and engineer at OpenAI:\n\nMy conservative claim is that you can always stretch to a square, and for:\nnatural images, meaning most photos, 224px¬≤ is enough; text in photos, phone screens, diagrams and charts, 448px¬≤ is enough; desktop screens and single-page documents, 896px¬≤ is enough.\n\nTypically, in the case of object detection, you‚Äôll want to use a higher value.\nBut this is another thing that is open to experimentation.\n\n\n\n# # Set image size\n# IMAGE_SIZE = 640 # we could try other sizes here: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# # Create a new instance of the image processor with the desired image size\n# image_processor = AutoImageProcessor.from_pretrained(\n#     pretrained_model_name_or_path=MODEL_NAME,\n#     format=\"coco_detection\", # this is the default\n#     do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height) in range [0, 1]\n#     size={\"shortest_edge\": IMAGE_SIZE, \n#           \"longest_edge\": IMAGE_SIZE}\n# )\n\n# # Optional: View the docstring of our image_processor.preprocess function\n# # image_processor.preprocess?\n\n# # Check out our new image processor size\n# image_processor.size\n\nBeautiful!\nNow our images will be resized to a square of size 640x640 when we pass them to our model.\nHow about we try to preprocess our random_sample?\nTo do so, we can pass its \"image\" key and \"annotations\" key to our image_processor‚Äôs preprocess method.\nLet‚Äôs try!\n\n# Try to process a single image and annotation pair (spoiler: this will error)\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample[\"annotations\"])\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[23], line 2\n      1 # Try to process a single image and annotation pair (spoiler: this will error)\n----&gt; 2 random_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n      3                                                         annotations=random_sample[\"annotations\"])\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:405, in RTDetrImageProcessorFast.preprocess(self, images, annotations, masks_path, **kwargs)\n    380 @auto_docstring\n    381 def preprocess(\n    382     self,\n   (...)\n    386     **kwargs: Unpack[RTDetrFastImageProcessorKwargs],\n    387 ) -&gt; BatchFeature:\n    388     r\"\"\"\n    389     annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n    390         List of annotations associated with the image or batch of images. If annotation is for object\n   (...)\n    403         Path to the directory containing the segmentation masks.\n    404     \"\"\"\n--&gt; 405     return super().preprocess(images, annotations=annotations, masks_path=masks_path, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_processing_utils_fast.py:606, in BaseImageProcessorFast.preprocess(self, images, **kwargs)\n    603 kwargs.pop(\"default_to_square\")\n    604 kwargs.pop(\"data_format\")\n--&gt; 606 return self._preprocess(images=images, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:443, in RTDetrImageProcessorFast._preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, interpolation, do_center_crop, crop_size, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, pad_size, format, return_tensors)\n    441 format = AnnotationFormat(format)\n    442 if annotations is not None:\n--&gt; 443     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n    445 data = {}\n    446 processed_images = []\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:919, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    917 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    918     if not valid_coco_detection_annotations(annotations):\n--&gt; 919         raise ValueError(\n    920             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    921             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    922             \"being a list of annotations in the COCO format.\"\n    923         )\n    925 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    926     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nOh no!\nWe get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\n\n8.1 Preprocessing a single image\nOkay so it turns out that our annotations aren‚Äôt in the format that the preprocess method was expecting.\nSince our pre-trained model was trained on the COCO dataset, the preprocess method expects input data to be in line with the COCO format.\nWe can fix this later on by adjusting our annotations.\nHow about we try to preprocess just a single image instead?\n\n# Preprocess our target sample\nrandom_sample_preprocessed_image_only = image_processor.preprocess(images=random_sample[\"image\"],\n                                                                   annotations=None, # no annotations this time \n                                                                   return_tensors=\"pt\") # return as PyTorch tensors\n\n# Uncomment to see the full output\n# print(random_sample_preprocessed_image_only)\n\n# Print out the keys of the preprocessed image\nprint(random_sample_preprocessed_image_only.keys())\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\ndict_keys(['pixel_values'])\n\n\nNice! It looks like the preprocess method works on a single image.\nAnd it seems like we get a dictionary output with the following keys:\n\npixel_values - the processed pixel values of the input image.\npixel_mask - a mask multiplier for the pixel values as to whether they should be paid attention to or not (a value of 0 means the pixel value should be ignored by the model and a value of 1 means the pixel value should be paid attention to by the model).\n\nIn our case, all values of the pixel_mask are 1 since we‚Äôre not using any masks.\nLet‚Äôs check.\nPS Do you remember where we needed these keys? pixel_values and pixel_mask? Hint: it‚Äôs the reverse of drawrof.ledom.\n\n# Check all values of the pixel_mask are 1\ntorch.all(random_sample_preprocessed_image_only[\"pixel_mask\"][0]) == 1\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[25], line 2\n      1 # Check all values of the pixel_mask are 1\n----&gt; 2 torch.all(random_sample_preprocessed_image_only[\"pixel_mask\"][0]) == 1\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/feature_extraction_utils.py:86, in BatchFeature.__getitem__(self, item)\n     81 \"\"\"\n     82 If the key is a string, returns the value of the dict associated to `key` ('input_values', 'attention_mask',\n     83 etc.).\n     84 \"\"\"\n     85 if isinstance(item, str):\n---&gt; 86     return self.data[item]\n     87 else:\n     88     raise KeyError(\"Indexing with integers is not available when using Python based feature extractors\")\n\nKeyError: 'pixel_mask'\n\n\n\nBeautiful!\nNow how about we inspect our processed image‚Äôs shape?\n\n# Uncomment to inspect all preprocessed pixel values\n# print(random_sample_preprocessed_image_only[\"pixel_values\"][0])\n\nprint(f\"[INFO] Original image shape: {random_sample['image'].size} -&gt; [width, height]\")\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed_image_only['pixel_values'].shape} -&gt; [batch_size, colour_channles, height, width]\")\n\n[INFO] Original image shape: (960, 1280) -&gt; [width, height]\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 640]) -&gt; [batch_size, colour_channles, height, width]\n\n\nOk wonderful, it looks like our image has been downsized to [3, 640, 480] (1 item in the batch, 3 colour channels, 640 pixels high, 480 pixels wide).\nThis is down from its original size of [960, 1280] (1280 pixels high, 960 pixels wide).\n\n\n\n\n\n\nNote\n\n\n\nThe order of image dimensions can differ between libraries and frameworks.\nFor example, image tensors in PyTorch typically follow the format [colour_channels, height, width] whereas in TensorFlow they follow [height, width, colour_channels].\nAnd in PIL, the format is [width, height].\nAs you can imagine, this can get confusing.\nHowever, with some practice, you‚Äôll be able to decipher which is which.\nAnd if your images and bounding boxes start looking strange, perhaps checking the image dimension and format can help.\n\n\n\n\n8.2 Trying to pass a single sample through our model (part 2)\nThis is exciting!\nWe‚Äôve processed an image into the format our model is expecting.\nHow about we try another forward by calling model.forward(pixel_values, pixel_mask)?\nWhich is the same as calling model(pixel_values, pixel_mask).\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed_image_only[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    # pixel_mask=random_sample_preprocessed_image_only[\"pixel_mask\"],\n)\n\n# Inspect the outputs\nrandom_sample_outputs\n\nRTDetrV2ObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[-2.4808, -1.9839, -2.6859,  ..., -2.3710, -0.6434, -1.5456],\n         [-2.5438, -1.9607, -2.4266,  ..., -2.3371, -0.5836, -1.8141],\n         [-1.2159, -2.0146, -1.5368,  ..., -2.2041,  0.1075, -1.6805],\n         ...,\n         [-1.8375, -2.4441, -4.1244,  ..., -3.4607, -0.2893, -2.3342],\n         [-2.5429, -1.9134, -2.6032,  ..., -2.1326, -0.3898, -1.2272],\n         [-2.3772, -2.0002, -2.9506,  ..., -2.1709, -0.3079, -1.5689]]],\n       grad_fn=&lt;SelectBackward0&gt;), pred_boxes=tensor([[[0.2267, 0.9070, 0.3301, 0.1746],\n         [0.3250, 0.9362, 0.1505, 0.1254],\n         [0.3095, 0.1736, 0.0153, 0.0153],\n         ...,\n         [0.7813, 0.1108, 0.2238, 0.1103],\n         [0.1637, 0.8095, 0.0790, 0.0879],\n         [0.0660, 0.7184, 0.1315, 0.1596]]], grad_fn=&lt;SelectBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 0.1804,  0.5426, -0.0356,  ..., -0.1508, -0.1347, -0.4809],\n         [ 0.2967,  0.6202,  0.0462,  ..., -0.0078, -0.2418, -0.5740],\n         [ 0.5487,  0.8073, -0.4998,  ..., -0.4957, -0.8144, -0.1810],\n         ...,\n         [ 0.1637,  1.1240, -0.4079,  ..., -0.6746, -0.2884, -0.4576],\n         [ 0.2838,  0.9227, -0.1217,  ..., -0.0629, -0.1251, -0.4737],\n         [ 0.2107,  0.7223,  0.0599,  ..., -0.1344,  0.1152, -0.5314]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), intermediate_hidden_states=tensor([[[[ 0.4250, -0.0870, -0.6067,  ...,  0.2482, -0.0354,  1.2270],\n          [ 0.2643,  0.0672, -0.2180,  ...,  0.4393, -0.1094,  1.1031],\n          [-0.4189,  0.8518, -0.1191,  ...,  0.5495, -0.2687,  0.9302],\n          ...,\n          [-0.0184,  0.2496, -0.1611,  ...,  0.3969,  0.5417,  0.5926],\n          [ 0.0400,  0.5798, -0.0131,  ...,  0.7488, -0.0123,  1.3860],\n          [-0.3542,  0.1133, -0.2540,  ...,  0.3845,  0.2606,  1.2031]],\n\n         [[ 0.6557,  0.1397,  0.0796,  ...,  0.4660, -0.2637, -0.2132],\n          [ 0.8849,  0.8881, -0.1470,  ...,  0.1946,  0.1282,  0.0956],\n          [-0.2063,  0.0856,  0.0763,  ...,  0.2421, -0.3475, -0.6456],\n          ...,\n          [ 0.7577,  0.5463, -0.0432,  ...,  0.1355,  0.7412, -0.3015],\n          [ 0.2247,  1.2179, -0.0225,  ...,  0.4685, -0.2147,  0.0650],\n          [ 0.2578,  1.5720,  0.3914,  ...,  0.0795,  0.1964,  0.2116]],\n\n         [[ 0.9862,  0.7650, -0.2326,  ...,  0.3487, -1.1091,  0.6024],\n          [ 0.9484,  0.8628, -0.4213,  ...,  0.2231, -1.0356,  0.2851],\n          [-0.8224,  0.5125, -0.1187,  ...,  0.6527, -0.4511, -0.3387],\n          ...,\n          [ 0.1093,  0.9441,  0.2780,  ...,  0.0241,  0.0810,  0.2241],\n          [ 0.5958,  1.5931, -0.1514,  ...,  0.6485, -0.9677,  0.3494],\n          [ 0.4813,  1.9912, -0.0280,  ...,  0.1448, -0.5410,  0.2731]],\n\n         [[ 0.2554,  0.3558, -0.1029,  ...,  0.1228,  0.3049,  0.0044],\n          [ 0.3171,  0.1327, -0.2415,  ...,  0.0907,  0.3107, -0.0930],\n          [-0.8401,  1.0966,  0.0085,  ...,  0.8509,  0.0262,  0.2174],\n          ...,\n          [-0.2765,  0.5789,  0.1342,  ..., -0.0901,  0.7997, -0.0136],\n          [ 0.0523,  0.4034, -0.0526,  ...,  0.5079,  0.1884, -0.2807],\n          [-0.2048,  0.6685,  0.1692,  ...,  0.0039,  0.1569, -0.2969]],\n\n         [[ 0.0863,  0.3327,  0.0848,  ...,  0.1645,  0.7086,  0.1144],\n          [ 0.2623,  0.4636, -0.2270,  ...,  0.3070,  0.6101,  0.0083],\n          [-0.1493,  0.6033, -0.2515,  ...,  0.5332, -0.3984, -0.6543],\n          ...,\n          [-0.1182,  0.7730,  0.2814,  ..., -0.1304,  0.3510, -0.0864],\n          [ 0.3122,  0.5643, -0.1924,  ...,  0.4831,  0.3376, -0.1553],\n          [ 0.1379,  0.5980,  0.1750,  ...,  0.2886,  0.5242, -0.1629]],\n\n         [[ 0.1804,  0.5426, -0.0356,  ..., -0.1508, -0.1347, -0.4809],\n          [ 0.2967,  0.6202,  0.0462,  ..., -0.0078, -0.2418, -0.5740],\n          [ 0.5487,  0.8073, -0.4998,  ..., -0.4957, -0.8144, -0.1810],\n          ...,\n          [ 0.1637,  1.1240, -0.4079,  ..., -0.6746, -0.2884, -0.4576],\n          [ 0.2838,  0.9227, -0.1217,  ..., -0.0629, -0.1251, -0.4737],\n          [ 0.2107,  0.7223,  0.0599,  ..., -0.1344,  0.1152, -0.5314]]]],\n       grad_fn=&lt;StackBackward0&gt;), intermediate_logits=tensor([[[[-1.8387, -2.9815, -1.4155,  ..., -2.8243, -2.9686, -3.3134],\n          [-2.4386, -3.1196, -1.4091,  ..., -2.8269, -2.4444, -3.2350],\n          [-1.8285, -3.2117, -0.4353,  ..., -0.8113, -1.7869, -4.8038],\n          ...,\n          [-1.4895, -2.4815, -0.4617,  ..., -2.4536, -2.4635, -3.4901],\n          [-2.3137, -2.9209, -1.4608,  ..., -2.7053, -2.3968, -4.2384],\n          [-1.8311, -3.8120, -1.1116,  ..., -2.4588, -2.7502, -3.3693]],\n\n         [[-1.7029, -2.1294, -0.3227,  ..., -2.5543, -3.0292, -5.6448],\n          [-0.8053, -1.5780, -0.8043,  ..., -3.0848, -2.6088, -4.7046],\n          [-2.8795, -1.3774, -0.9694,  ...,  0.6387, -0.7336, -3.3516],\n          ...,\n          [-3.8653, -1.1169,  0.6613,  ...,  0.4363, -2.3821, -5.0166],\n          [-1.1625, -0.9443, -0.5633,  ..., -2.4534, -2.0051, -4.0600],\n          [-1.6588, -0.9121, -0.1820,  ..., -1.6762, -1.9945, -4.4676]],\n\n         [[-2.0206, -5.1647, -1.6032,  ...,  0.1912,  0.2041, -1.5845],\n          [-1.9430, -4.7698, -1.6457,  ...,  0.7732, -0.2692, -1.6396],\n          [-5.2677, -1.9246, -3.2672,  ...,  0.6246, -2.3452, -0.9045],\n          ...,\n          [-3.8556, -3.6565, -2.2495,  ..., -0.9607, -2.5953, -0.0470],\n          [-2.7223, -4.4621, -1.5161,  ...,  0.4653, -0.3632, -0.8275],\n          [-3.5187, -4.3455, -1.0175,  ..., -0.7098, -0.3617, -0.9147]],\n\n         [[-0.8017, -2.2756, -0.7888,  ..., -2.6862, -2.0021, -3.2572],\n          [-1.0891, -2.5761, -1.1089,  ..., -2.3393, -2.2799, -2.9147],\n          [-3.3172, -3.1343, -1.4265,  ..., -2.8717, -2.1913, -1.3617],\n          ...,\n          [-1.6087, -2.3465, -0.8037,  ..., -2.5110, -2.3137, -2.7846],\n          [-1.0856, -2.2073, -0.9009,  ..., -2.6812, -2.5987, -3.3019],\n          [-0.6236, -1.9540, -0.8627,  ..., -2.5371, -2.5302, -3.2496]],\n\n         [[-4.0807, -2.2942, -1.9426,  ..., -2.0171, -2.5107, -1.0422],\n          [-4.1421, -2.2957, -1.6303,  ..., -1.6058, -2.4667, -0.9572],\n          [-2.9950, -2.6195, -2.0556,  ..., -0.8529, -1.3936, -1.2601],\n          ...,\n          [-3.5122, -3.4476, -1.9501,  ..., -1.9300, -1.7004, -1.5442],\n          [-4.0874, -2.1212, -1.2348,  ..., -1.6055, -2.1146, -0.9975],\n          [-4.4407, -2.6424, -1.1681,  ..., -1.8304, -2.1912, -0.9511]],\n\n         [[-2.4808, -1.9839, -2.6859,  ..., -2.3710, -0.6434, -1.5456],\n          [-2.5438, -1.9607, -2.4266,  ..., -2.3371, -0.5836, -1.8141],\n          [-1.2159, -2.0146, -1.5368,  ..., -2.2041,  0.1075, -1.6805],\n          ...,\n          [-1.8375, -2.4441, -4.1244,  ..., -3.4607, -0.2893, -2.3342],\n          [-2.5429, -1.9134, -2.6032,  ..., -2.1326, -0.3898, -1.2272],\n          [-2.3772, -2.0002, -2.9506,  ..., -2.1709, -0.3079, -1.5689]]]],\n       grad_fn=&lt;StackBackward0&gt;), intermediate_reference_points=tensor([[[[0.2590, 0.9228, 0.3481, 0.2710],\n          [0.3396, 0.9291, 0.1656, 0.1382],\n          [0.3096, 0.1747, 0.0183, 0.0223],\n          ...,\n          [0.7727, 0.1171, 0.2514, 0.0910],\n          [0.1761, 0.8293, 0.0756, 0.0803],\n          [0.0608, 0.7409, 0.1407, 0.1491]],\n\n         [[0.2491, 0.9148, 0.3282, 0.2303],\n          [0.3258, 0.9273, 0.1694, 0.1415],\n          [0.3093, 0.1736, 0.0163, 0.0157],\n          ...,\n          [0.7804, 0.1136, 0.2413, 0.1032],\n          [0.1729, 0.8215, 0.0686, 0.0810],\n          [0.0680, 0.7374, 0.1284, 0.1669]],\n\n         [[0.2299, 0.9094, 0.3269, 0.2007],\n          [0.3175, 0.9312, 0.1448, 0.1212],\n          [0.3094, 0.1739, 0.0155, 0.0169],\n          ...,\n          [0.7775, 0.1133, 0.2299, 0.1039],\n          [0.1695, 0.8171, 0.0680, 0.0832],\n          [0.0651, 0.7282, 0.1284, 0.1655]],\n\n         [[0.2247, 0.9027, 0.3310, 0.1743],\n          [0.3224, 0.9367, 0.1462, 0.1188],\n          [0.3096, 0.1738, 0.0153, 0.0161],\n          ...,\n          [0.7811, 0.1114, 0.2260, 0.1093],\n          [0.1627, 0.8090, 0.0758, 0.0862],\n          [0.0644, 0.7207, 0.1281, 0.1616]],\n\n         [[0.2267, 0.9070, 0.3301, 0.1746],\n          [0.3250, 0.9362, 0.1505, 0.1254],\n          [0.3095, 0.1736, 0.0153, 0.0153],\n          ...,\n          [0.7813, 0.1108, 0.2238, 0.1103],\n          [0.1637, 0.8095, 0.0790, 0.0879],\n          [0.0660, 0.7184, 0.1315, 0.1596]],\n\n         [[0.2267, 0.9070, 0.3301, 0.1746],\n          [0.3250, 0.9362, 0.1505, 0.1254],\n          [0.3095, 0.1736, 0.0153, 0.0153],\n          ...,\n          [0.7813, 0.1108, 0.2238, 0.1103],\n          [0.1637, 0.8095, 0.0790, 0.0879],\n          [0.0660, 0.7184, 0.1315, 0.1596]]]], grad_fn=&lt;StackBackward0&gt;), intermediate_predicted_corners=None, initial_reference_points=None, decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=[tensor([[[[ 1.6525e+00,  3.4769e+00,  1.9412e+00,  ...,  1.0923e+00,\n            9.1354e-01,  1.4831e+00],\n          [ 8.5698e-01,  1.1822e+00,  1.9727e+00,  ...,  2.4097e-01,\n            8.3121e-02,  3.4440e-03],\n          [ 3.5119e-02, -2.3285e-01, -8.1542e-02,  ..., -3.8876e-01,\n           -5.1415e-01, -5.3655e-01],\n          ...,\n          [-2.8060e-01,  4.2474e-01,  9.1568e-02,  ..., -2.7378e-01,\n           -1.7744e-01,  2.2400e-01],\n          [-4.1140e-01,  2.7869e-01, -1.6807e-01,  ..., -3.6787e-01,\n            1.5946e-01,  1.4077e-01],\n          [-4.8519e-01, -4.1921e-01, -4.8073e-01,  ..., -4.8598e-01,\n           -4.5867e-01, -1.7955e-01]],\n\n         [[ 2.0868e+00,  5.7784e-01,  2.5291e+00,  ...,  3.4300e+00,\n            1.9576e+00,  4.7083e+00],\n          [ 7.7407e-01,  8.0851e-01,  1.9208e+00,  ...,  1.5841e+00,\n            8.4665e-01,  1.7242e+00],\n          [ 2.3151e+00,  1.8451e+00,  2.2622e+00,  ...,  1.5348e+00,\n            8.0669e-01,  1.6704e+00],\n          ...,\n          [ 2.7701e+00,  4.4222e-02,  7.3837e-01,  ...,  5.8677e-01,\n           -3.2312e-01,  3.1403e+00],\n          [-3.4463e-02, -4.2868e-01, -1.7038e-01,  ..., -4.2429e-01,\n           -3.7124e-01,  1.1248e-02],\n          [ 2.2786e+00,  3.2532e-01,  8.1953e-01,  ...,  9.1285e-01,\n           -4.1330e-01,  1.6371e+00]],\n\n         [[ 1.2478e+00,  6.7827e-01,  6.4261e-01,  ...,  7.9139e-01,\n           -1.4932e-01, -3.5519e-01],\n          [ 4.2739e-01,  4.6743e-01,  4.1824e-01,  ...,  7.3973e-01,\n            2.2459e-01, -5.2873e-01],\n          [ 1.5627e+00,  1.0240e+00,  1.0207e+00,  ..., -2.4663e-01,\n            2.4627e-01, -1.0706e-01],\n          ...,\n          [ 1.4594e+00,  9.9135e-01,  1.1494e-01,  ...,  5.4323e-01,\n            3.7827e-01, -3.7691e-01],\n          [-2.9499e-01, -3.3468e-01, -4.0150e-01,  ...,  3.0347e-01,\n           -4.4540e-02, -4.6821e-01],\n          [ 1.2909e+00,  4.0738e-01, -4.0285e-01,  ...,  1.8297e-01,\n           -1.4398e-01, -3.7316e-01]],\n\n         ...,\n\n         [[ 2.2459e+00,  2.0865e+00,  1.7485e+00,  ...,  6.0021e-01,\n            9.7519e-01,  2.3222e+00],\n          [ 2.1671e+00,  3.6837e+00,  3.2436e+00,  ...,  9.4890e-01,\n            5.5394e-01,  7.2476e-01],\n          [ 1.3375e+00,  1.2020e+00,  1.4432e+00,  ...,  6.1923e-01,\n            1.4420e-01,  3.5523e-01],\n          ...,\n          [ 1.3238e+00,  4.8592e-01, -3.0958e-01,  ...,  8.3651e-01,\n            1.4045e+00,  1.9290e+00],\n          [ 2.4837e+00,  1.8438e+00,  8.2204e-01,  ...,  5.6214e-01,\n            1.8766e+00,  2.3470e+00],\n          [ 3.3080e+00,  2.1699e+00,  9.6169e-01,  ...,  9.1537e-01,\n            2.5228e+00,  2.8274e+00]],\n\n         [[-1.8627e-01,  2.3966e-01, -3.0094e-01,  ..., -2.3296e-01,\n           -5.0964e-01, -5.1925e-01],\n          [ 8.2088e-02, -5.1460e-02, -3.7776e-01,  ..., -3.4817e-01,\n           -5.4077e-01, -5.0350e-01],\n          [-5.2177e-01, -5.2727e-01, -2.7153e-01,  ..., -3.5605e-01,\n           -4.8810e-01, -5.0004e-01],\n          ...,\n          [-3.8589e-01, -3.4829e-01, -2.5565e-01,  ..., -3.9612e-02,\n           -2.7368e-01, -4.5872e-01],\n          [ 3.0572e-01, -1.1648e-01, -4.0687e-01,  ..., -2.8925e-01,\n           -5.2984e-01, -4.8438e-01],\n          [-3.5774e-01, -1.9850e-01, -3.7341e-01,  ..., -4.2663e-01,\n           -4.4904e-01, -5.5484e-01]],\n\n         [[ 5.8431e+00,  2.6447e+00,  1.3779e+00,  ...,  8.4315e-01,\n            2.2070e+00,  2.8075e+00],\n          [ 5.7753e+00,  2.9821e+00,  1.3284e+00,  ...,  1.5067e+00,\n            2.3465e+00,  3.1782e+00],\n          [ 2.7880e+00,  9.2151e-01,  6.1838e-01,  ...,  1.7250e+00,\n            1.5619e+00,  3.9591e+00],\n          ...,\n          [ 4.0198e+00,  2.2329e+00,  8.4106e-01,  ...,  2.3757e-02,\n            1.3779e+00,  2.6001e+00],\n          [ 4.4620e+00,  2.8192e+00,  1.6239e+00,  ...,  7.0077e-01,\n            2.3884e+00,  3.3047e+00],\n          [ 4.6455e+00,  2.9359e+00,  1.7768e+00,  ...,  9.9532e-01,\n            1.9496e+00,  2.7149e+00]]]], grad_fn=&lt;AddBackward0&gt;), tensor([[[[ 3.5358e-01, -1.5686e-01, -2.8858e-01,  ..., -3.9179e-01,\n            4.0822e-02,  1.7662e-01],\n          [-3.4684e-01, -2.4906e-01, -4.3933e-01,  ..., -3.4661e-01,\n           -2.8818e-01, -2.6912e-01],\n          [-2.5939e-01, -3.6178e-01, -4.8252e-01,  ..., -1.5780e-01,\n            1.4566e-01,  3.1413e-01],\n          ...,\n          [-3.9376e-01,  3.5634e-02, -9.6071e-02,  ..., -1.8171e-01,\n            1.5508e-01, -3.0342e-01],\n          [ 8.8904e-02, -1.4374e-01, -2.1183e-01,  ...,  1.3008e-02,\n            4.2876e-01,  1.6247e-01],\n          [ 1.1363e-01, -1.4058e-01, -4.8614e-01,  ..., -2.2463e-01,\n           -5.1541e-02,  5.0111e-01]],\n\n         [[ 2.3392e+00, -6.1594e-03,  8.8971e-01,  ...,  4.4534e-01,\n            1.2133e+00,  1.3236e+00],\n          [-5.5240e-02,  1.5992e-01,  2.3551e-01,  ...,  3.4013e-01,\n            8.7167e-01,  4.3625e-01],\n          [ 6.9370e-01,  2.2318e-01, -1.2579e-01,  ...,  8.6899e-01,\n            1.1777e+00,  1.4569e-01],\n          ...,\n          [ 1.0539e-01, -1.6128e-01,  1.9336e-01,  ...,  4.8688e-02,\n            2.2929e-01,  8.0330e-02],\n          [ 3.5072e-01,  1.2652e-01,  1.6808e-01,  ...,  1.9866e-02,\n            5.1225e-01,  2.7177e-01],\n          [ 1.2741e+00, -2.5376e-01,  2.0289e-01,  ...,  4.6785e-01,\n            5.9539e-01,  1.2772e+00]],\n\n         [[ 4.4972e-02, -2.2063e-01,  5.2077e-01,  ..., -4.9380e-02,\n           -8.0590e-02, -8.5530e-02],\n          [ 2.0512e-01,  6.0434e-01,  6.6090e-01,  ..., -3.3479e-01,\n           -3.2178e-01, -4.3069e-01],\n          [-1.2258e-01,  2.3331e-01,  4.5134e-01,  ..., -3.6934e-01,\n           -2.2025e-01, -1.9829e-01],\n          ...,\n          [-2.3109e-01, -2.7550e-01, -2.0387e-01,  ..., -1.1344e-03,\n            5.1582e-01, -2.4375e-01],\n          [-3.7169e-01, -1.1041e-01, -2.7120e-01,  ..., -3.5519e-01,\n            3.9451e-02, -3.7209e-01],\n          [-3.5010e-01, -2.3678e-01, -3.4363e-01,  ..., -1.9776e-01,\n           -7.6347e-03, -2.3831e-01]],\n\n         ...,\n\n         [[-4.6569e-01,  1.1846e-01,  8.6751e-01,  ...,  1.1344e-01,\n            6.7618e-01, -5.4145e-01],\n          [-5.0910e-01, -4.1243e-01, -3.0485e-02,  ..., -4.9724e-01,\n           -3.0021e-01, -5.1518e-01],\n          [-4.8852e-01, -1.0909e-01,  3.0982e-01,  ..., -1.3584e-02,\n            4.3419e-01, -4.5338e-01],\n          ...,\n          [-3.8431e-01,  4.8119e-01,  3.7985e-01,  ..., -1.9139e-01,\n            1.7580e+00,  1.5376e-01],\n          [-4.9827e-01,  2.2502e-01,  5.4320e-01,  ..., -3.6402e-01,\n            2.0423e+00, -1.7875e-01],\n          [-5.1191e-01, -4.3140e-01, -4.0702e-01,  ..., -4.2671e-01,\n            2.9830e-01, -5.2204e-01]],\n\n         [[-2.3934e-01, -4.7810e-01, -3.6981e-02,  ..., -1.4958e-01,\n           -1.6952e-01, -1.9170e-01],\n          [ 1.0887e+00,  7.6227e-01,  1.2831e+00,  ...,  5.4611e-01,\n            3.1703e-01,  2.9431e-01],\n          [ 3.7038e-01, -2.0905e-01, -2.7403e-01,  ..., -3.6057e-01,\n           -5.0162e-01, -1.1839e-01],\n          ...,\n          [ 4.7087e-02, -2.4226e-01, -2.9024e-01,  ...,  4.8747e-01,\n            4.7069e-01,  5.4835e-01],\n          [ 1.7136e+00, -1.2026e-02,  1.1369e-01,  ...,  1.4357e+00,\n            1.1821e+00,  1.8384e+00],\n          [-2.0939e-01, -3.4133e-01, -3.3988e-01,  ...,  1.7739e-01,\n            3.3125e-01,  2.2459e-01]],\n\n         [[-4.9496e-01, -5.1439e-01, -4.6856e-01,  ..., -4.9245e-01,\n           -5.2784e-01, -1.0979e-01],\n          [ 5.2474e-02, -1.5404e-01,  1.6263e-01,  ...,  8.0806e-02,\n            1.1352e-01,  7.1858e-01],\n          [ 1.3344e-01,  1.0556e-02, -2.8268e-01,  ...,  1.0351e+00,\n            1.3858e+00,  1.2984e+00],\n          ...,\n          [ 1.0297e-01,  1.8911e-02,  8.8032e-02,  ..., -3.8896e-01,\n           -4.3677e-01,  7.3388e-01],\n          [ 1.0531e-01, -5.0569e-01,  2.2843e-01,  ..., -3.8605e-01,\n           -5.4145e-01,  2.5310e-01],\n          [-5.3713e-01, -5.2705e-01, -5.4767e-01,  ..., -3.9737e-01,\n           -4.8252e-01, -2.2119e-01]]]], grad_fn=&lt;AddBackward0&gt;), tensor([[[[ 0.7512, -0.0687,  0.2760,  ...,  0.0745, -0.2343,  0.5386],\n          [ 0.2900, -0.3563, -0.2901,  ..., -0.2548, -0.2104, -0.1247],\n          [ 0.6059, -0.2010, -0.1924,  ..., -0.0101,  0.0703,  0.0605],\n          ...,\n          [ 1.2674,  0.9593,  1.1286,  ...,  1.5502,  1.1544,  1.4047],\n          [ 1.2707,  1.2672,  1.1683,  ...,  1.2424,  1.4505,  1.5493],\n          [ 1.1894,  0.2537,  0.4435,  ...,  0.4789,  0.4582,  0.9889]],\n\n         [[-0.4735, -0.4454, -0.1482,  ..., -0.0477, -0.1426,  0.0386],\n          [-0.3046, -0.2118, -0.3743,  ..., -0.0291, -0.1543,  0.0790],\n          [-0.1491, -0.3347, -0.4057,  ...,  0.1983, -0.0234,  0.2549],\n          ...,\n          [ 0.6402,  1.2128,  0.7336,  ...,  1.1508,  1.9437,  2.0727],\n          [ 0.4403,  1.3570,  1.5051,  ...,  1.0186,  1.7827,  1.7146],\n          [ 0.4028,  0.0995,  0.1432,  ...,  0.9685,  1.7137,  0.9457]],\n\n         [[ 1.0166,  0.9394,  0.9225,  ...,  0.4884,  0.5059,  1.5653],\n          [ 0.6485,  0.7069,  0.5692,  ..., -0.0763, -0.0151,  0.5735],\n          [ 0.4463,  0.5538,  0.3587,  ..., -0.1321, -0.0785,  0.2995],\n          ...,\n          [-0.2270, -0.2600, -0.3211,  ...,  0.1834,  0.0708,  0.3423],\n          [-0.2293, -0.1970, -0.3791,  ..., -0.1552, -0.1288,  0.1067],\n          [-0.1367, -0.0070, -0.2542,  ...,  0.0101, -0.1975,  0.1046]],\n\n         ...,\n\n         [[-0.1280, -0.1079,  0.2618,  ...,  0.5711, -0.2617, -0.2953],\n          [-0.3992, -0.3506, -0.4530,  ...,  0.3580,  0.8996,  0.4932],\n          [ 0.1489, -0.1655,  0.1132,  ...,  0.1316,  0.6290,  0.2034],\n          ...,\n          [ 0.7549,  0.2886, -0.0197,  ..., -0.0042, -0.0883, -0.0258],\n          [-0.0830, -0.1305, -0.2133,  ..., -0.3250, -0.2043,  0.0684],\n          [-0.5148, -0.4661, -0.5471,  ..., -0.5260, -0.5243, -0.4290]],\n\n         [[ 0.3059, -0.2154, -0.2631,  ...,  0.2831,  0.1445,  0.5381],\n          [ 0.1066, -0.2155, -0.4465,  ..., -0.3429, -0.2937,  0.0464],\n          [ 0.5593, -0.1467, -0.2678,  ..., -0.2328, -0.2166,  0.0237],\n          ...,\n          [ 0.4065,  0.1588, -0.1803,  ...,  0.3514,  0.5994,  1.4373],\n          [ 0.4850,  0.0046, -0.3847,  ...,  0.3490,  0.4906,  0.9974],\n          [ 0.8268,  0.1526, -0.2131,  ...,  0.3666,  0.3247,  0.9742]],\n\n         [[-0.2320, -0.2112,  0.1545,  ..., -0.1980, -0.4370, -0.4382],\n          [-0.3309, -0.2067, -0.3634,  ..., -0.3449, -0.5081, -0.4142],\n          [-0.2288, -0.2928, -0.3201,  ..., -0.0977, -0.5082, -0.3949],\n          ...,\n          [ 0.1124,  0.1197,  0.3244,  ..., -0.4476, -0.4385, -0.3776],\n          [ 0.4021,  0.1597, -0.0421,  ..., -0.5257, -0.3962, -0.3828],\n          [ 0.2900, -0.1715, -0.2088,  ..., -0.5318, -0.5370, -0.3887]]]],\n       grad_fn=&lt;AddBackward0&gt;)], encoder_hidden_states=None, encoder_attentions=None, init_reference_points=tensor([[[-1.0260,  2.4594, -0.5129, -0.7613],\n         [-0.6047,  2.6281, -1.9554, -1.5598],\n         [-0.7962, -1.5672, -3.7679, -3.7100],\n         ...,\n         [ 1.1361, -1.9067, -1.2777, -1.8997],\n         [-1.5446,  1.5856, -2.6847, -2.3365],\n         [-2.9150,  1.0059, -1.6678, -1.8447]]]), enc_topk_logits=tensor([[[-1.2463,  1.7640, -1.8245,  ..., -1.0797, -2.5791, -1.4591],\n         [-0.5793,  1.7638, -1.9893,  ..., -1.1378, -3.2286, -2.8286],\n         [-1.7135,  1.6732, -4.0945,  ..., -1.9254, -3.0600, -3.1228],\n         ...,\n         [-0.8383,  0.9779, -3.5186,  ...,  0.0091, -3.5436, -4.4042],\n         [-1.3748,  0.9775, -3.1065,  ..., -1.9949, -2.9275, -1.5027],\n         [-0.6838,  0.9767, -2.2556,  ..., -0.5257, -2.3635, -2.8109]]],\n       grad_fn=&lt;GatherBackward0&gt;), enc_topk_bboxes=tensor([[[0.2639, 0.9212, 0.3745, 0.3184],\n         [0.3533, 0.9327, 0.1240, 0.1737],\n         [0.3108, 0.1726, 0.0226, 0.0239],\n         ...,\n         [0.7570, 0.1294, 0.2179, 0.1301],\n         [0.1759, 0.8300, 0.0639, 0.0881],\n         [0.0514, 0.7322, 0.1587, 0.1365]]], grad_fn=&lt;SigmoidBackward0&gt;), enc_outputs_class=tensor([[[-1.2309,  0.1099, -4.3117,  ..., -1.4206, -3.6686, -3.2499],\n         [-1.2309,  0.1099, -4.3117,  ..., -1.4206, -3.6686, -3.2499],\n         [-1.2309,  0.1099, -4.3117,  ..., -1.4206, -3.6686, -3.2499],\n         ...,\n         [-1.0838, -2.0291, -3.0409,  ..., -1.9511, -3.0555, -1.2634],\n         [-1.0293, -1.7285, -3.4223,  ..., -2.0961, -2.3322, -1.5527],\n         [ 0.1061, -1.9685, -3.6668,  ..., -1.2748, -2.8028, -1.6005]]],\n       grad_fn=&lt;ViewBackward0&gt;), enc_outputs_coord_logits=tensor([[[ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         [ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         [ 3.4028e+38,  3.4028e+38,  3.4028e+38,  3.4028e+38],\n         ...,\n         [ 1.0262e+00,  3.0155e+00, -2.3267e-01, -2.4358e+00],\n         [ 2.2580e+00,  3.1596e+00, -2.2338e+00, -2.5642e+00],\n         [ 3.9896e+00,  3.0976e+00, -3.3779e+00, -2.5916e+00]]],\n       grad_fn=&lt;AddBackward0&gt;), denoising_meta_values=None)\n\n\nNice!\nIt looks like it worked!\nOur model processed our random_sample_preprocessed_image_only[\"pixel_values\"] and returned a ConditionalDetrObjectDetectionOutput object as output.\nLet‚Äôs inspect the keys() method of this output and see what they are.\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'intermediate_hidden_states', 'intermediate_logits', 'intermediate_reference_points', 'encoder_last_hidden_state', 'init_reference_points', 'enc_topk_logits', 'enc_topk_bboxes', 'enc_outputs_class', 'enc_outputs_coord_logits'])\n\n\nBreaking these down:\n\nlogits - The raw outputs from the model, these are the classification logits we can later apply a softmax function/sigmoid function to to get prediction probabilties.\npred_boxes - Normalized box coordinates in CXCYWH ((center_x, center_y, width, height)) format.\nlast_hidden_state - Last hidden state of the last decoder layer of the model.\nencoder_last_hidden_state - Last hidden state of the last encoder layer of the model.\n\nHow about we inspect the shape attribute of the logits?\n\n# Inspect logits output shape\noutput_logits = random_sample_outputs.logits\nprint(f\"[INFO] Output logits shape: {output_logits.shape} -&gt; [1 image, 300 boxes, 7 classes]\")\n\n[INFO] Output logits shape: torch.Size([1, 300, 7]) -&gt; [1 image, 300 boxes, 7 classes]\n\n\nNice!\nWe get an output from our model that coincides with the shape of our data.\nThe final value of 7 in the output_logits tensor is equivalent to the number of classes we have.\nAnd the 300 is the number of boxes our model predicts for each image (this is defined by the num_queries parameter of the transformers.ConditionalDetrConfig, where num_queries=300 is the default).\n\n# Inspect predicted boxes output shape\noutput_pred_boxes = random_sample_outputs.pred_boxes\nprint(f\"[INFO] Output predicted boxes shape: {output_pred_boxes.shape} -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\")\n\n[INFO] Output predicted boxes shape: torch.Size([1, 300, 4]) -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\n\n\nReading the documentation for the forward method, we can determine the output format of our models predicted boxes:\n\nReturns:\npred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\nThis is good to know!\nIt means that the raw output boxes from our model come in normalized CXCYWH format (see Table¬†1 for more).\nHow about we inspect a single box?\n\n# Single example predicted bounding box coordinates\nprint(f\"[INFO] Example output box: {output_pred_boxes[:, 0, :][0].detach()} -&gt; (center_x, center_y, width, height)\")\n\n[INFO] Example output box: tensor([0.2267, 0.9070, 0.3301, 0.1746]) -&gt; (center_x, center_y, width, height)\n\n\nExcellent!\nWe can process these boxes and logits later on into different formats using the transformers.ConditionalDetrImageProcessor.post_process_object_detection method.\nFor now, let‚Äôs figure out how to preprocess our annotations."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#preprocessing-our-annotations",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#preprocessing-our-annotations",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 Preprocessing our annotations",
    "text": "9 Preprocessing our annotations\nOne of the most tricky parts of any machine learning problem is getting your data in the right format.\nWe‚Äôve done it for our images.\nNow let‚Äôs do it for our annotations.\n\n9.1 Trying to preprocess a single annotation\nRecall in a previous section we tried to preprocess a single image and its annotation.\nAnd we got an error.\nLet‚Äôs make sure we‚Äôre not crazy and this is still the case.\n\n# Preprocess a single image and annotation pair\nimage_processor.preprocess(\n    images=random_sample[\"image\"], \n    annotations=random_sample[\"annotations\"]\n)\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[32], line 2\n      1 # Preprocess a single image and annotation pair\n----&gt; 2 image_processor.preprocess(\n      3     images=random_sample[\"image\"], \n      4     annotations=random_sample[\"annotations\"]\n      5 )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:405, in RTDetrImageProcessorFast.preprocess(self, images, annotations, masks_path, **kwargs)\n    380 @auto_docstring\n    381 def preprocess(\n    382     self,\n   (...)\n    386     **kwargs: Unpack[RTDetrFastImageProcessorKwargs],\n    387 ) -&gt; BatchFeature:\n    388     r\"\"\"\n    389     annotations (`AnnotationType` or `List[AnnotationType]`, *optional*):\n    390         List of annotations associated with the image or batch of images. If annotation is for object\n   (...)\n    403         Path to the directory containing the segmentation masks.\n    404     \"\"\"\n--&gt; 405     return super().preprocess(images, annotations=annotations, masks_path=masks_path, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_processing_utils_fast.py:606, in BaseImageProcessorFast.preprocess(self, images, **kwargs)\n    603 kwargs.pop(\"default_to_square\")\n    604 kwargs.pop(\"data_format\")\n--&gt; 606 return self._preprocess(images=images, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/rt_detr/image_processing_rt_detr_fast.py:443, in RTDetrImageProcessorFast._preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, interpolation, do_center_crop, crop_size, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, pad_size, format, return_tensors)\n    441 format = AnnotationFormat(format)\n    442 if annotations is not None:\n--&gt; 443     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n    445 data = {}\n    446 processed_images = []\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:919, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    917 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    918     if not valid_coco_detection_annotations(annotations):\n--&gt; 919         raise ValueError(\n    920             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    921             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    922             \"being a list of annotations in the COCO format.\"\n    923         )\n    925 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    926     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nWonderful!\nWe‚Äôre not crazy‚Ä¶\nBut we still get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nIn this section, we‚Äôre going to fix it.\n\n\n9.2 Discussing the format our annotations need to be in\nAccording the error we got in the previous segment, the transformers.ConditionalDetrImageProcessor.preprocess method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n\n9.3 Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by transformers.ConditionalDetrImageProcessor.preprocess.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[35], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[33], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100]) # correct number of values\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.4 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face in the beginning).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on a new not so random_sample (we‚Äôll make a random_sample with a known index for reproducibility).\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Create a not so random sample and inspect it \nrandom_sample = dataset[\"train\"][77]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 558,\n 'annotations': {'file_name': ['13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg'],\n  'image_id': [558, 558, 558],\n  'category_id': [5, 0, 1],\n  'bbox': [[261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125]],\n  'iscrowd': [0, 0, 0],\n  'area': [39323.33984375, 500634.0, 187150.734375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 558,\n 'annotations': [{'image_id': 558,\n   'category_id': 5,\n   'bbox': [261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   'area': 39323.33984375,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 0,\n   'bbox': [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   'area': 500634.0,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 1,\n   'bbox': [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125],\n   'area': 187150.734375,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we may have just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.5 Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with transformers.ConditionalDetrImageProcessor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYWH format (the format we downloaded them in) and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() method of our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 640]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([ 13107.7803, 166878.0000,  62383.5781]),\n  'boxes': tensor([[0.3675, 0.6583, 0.1894, 0.1690],\n        [0.4842, 0.4360, 0.7604, 0.5358],\n        [0.1916, 0.7997, 0.3832, 0.3974]]),\n  'class_labels': tensor([5, 0, 1]),\n  'image_id': tensor([558]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 640])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\nWoohoo!\nWe‚Äôve done it!\nWe‚Äôve officially preprocessed a single sample of our own data, both the image and its annotation pair.\nWe‚Äôll write some code later on to scale this up to our whole dataset.\nFor now, let‚Äôs see what it looks like postprocessing a single output."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#postprocessing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#postprocessing-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "10 Postprocessing a single output",
    "text": "10 Postprocessing a single output\nWe‚Äôve got our inputs processed and successfully passed them through our model.\nHow about we postprocess the outputs of our model?\nDoing so will make our model‚Äôs outputs far more usable."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#going-end-to-end-on-a-single-sample",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#going-end-to-end-on-a-single-sample",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "11 Going end-to-end on a single sample",
    "text": "11 Going end-to-end on a single sample\nWhen working on a new problem or with a custom dataset and an existing model, it‚Äôs good practice to go end-to-end on a single sample.\nFor example, preprocess one of your samples, pass it through the model and then postprocess it (just like we‚Äôre in the middle of doing here).\nBeing able to go end-to-end on a single sample will help you see the overall process and discover any bugs that may hinder you later on."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "12 Aside: Bounding box formats in and out of our model",
    "text": "12 Aside: Bounding box formats in and out of our model\nWe‚Äôve done a fair bit of data transformation to get our data ready to go into our model and we‚Äôve also taken a fair few steps to postprocess it into a usable format.\nThis is often a standard practice in many machine learning workflows.\nMuch of the work before ever training a model is preparing the data for the model.\nAnd much of the work after training a model is preparing the data for your use case.\nThe following table highlights the different states our bounding boxes go in and out of.\nTK image - turn this into a nice image of the workflow\n\n\n\nStep\nBox format\nScale\nGoes into\n\n\n\n\nStarting data (default downloaded from Hugging Face)\nXYWH or [x1, y1, width, height]\nAbsolute\npreprocess() method\n\n\nOut of preprocess()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\nmodel.forward()\n\n\nOut of model.forward()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\npost_process_object_detection()\n\n\nOut of post_process_object_detection()\nXYXY or [x_top_left, y_top_left, x_bottom_right, y_bottom_right]\nAbsolute (in relation to the target_sizes parameter).\nPlotting or display function.\n\n\n\nKeeping track of these input and output formats is helpful for knowing the state of your data.\nBut remember, just because our current workflow is like this, doesn‚Äôt mean all future workflows you work on will have the same transformation steps."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---preparing-data-at-scale",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---preparing-data-at-scale",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "13 TK - Preparing data at scale",
    "text": "13 TK - Preparing data at scale\nWe‚Äôve performed preprocessing and postprocessing steps on a single data sample.\nHowever, in practice, we‚Äôll likely want to work with many more samples.\nOur model is hungry for more data.\nSo let‚Äôs step it up a notch and write some code that‚Äôs capable of preprocessing many samples to pass to our model.\nWe‚Äôll break it down into three subsections:\n\nSplitting the data into training, validation and test sets. We‚Äôll train our model on the training set and check its performance on the validation and test sets (our model won‚Äôt see any of these samples during training). We perform these splits before preprocessing the samples in them in case we‚Äôd like to perform different preprocessing steps depending on the split. For example, we may want to use data augmentation on the training set and not use it on the testing set.\nPreprocessing multiple samples at a time by iterating over groups of samples. Rather than preprocess a single sample at a time, we‚Äôll write code capable of processing lists of examples simultaneously.\nCollate samples into batches so our model can view multiple samples simultaneously. Rather than performing a forward pass on a single sample at a time, we‚Äôll pass batches of data to the model. For example, we may pass 32 samples (image and label pairs) at a time to our model for it to try and learn the patterns between them. We use batches of data rather than the whole dataset as it‚Äôs often much more memory efficient. If you have a really large dataset, all of your samples may not fit into memory at once, so in practice, you break it up into smaller batches of samples.\n\nLet‚Äôs start by splitting the data into different sets.\n\n13.1 Splitting the data into training and test sets\nRight now our data is all in one big group.\nHowever, it‚Äôs best practice to split our data into two (or three) different sets:\n\nTraining set (~70-80% of data) - This is the data the model will learn from, all samples in this set are seen by the model during training.\nValidation set (~5-20% of data) - This is the data we can fine-tune our model‚Äôs hyperparameters on, all samples in this set are not seen by the model during training.\nTest set (~5-20% of data) - This is the data we will evaluate what our model has learned after going through the training set, all samples in this set are not seen by the model during training.\n\nUsing the analogy of a student at univeristy, the training set would be the course materials throughout the semester, the validation set would be the practice exam and the test set would be the final exam.\nIf a student doesn‚Äôt perform well on the final exam, then we would usually say perhaps the course materials weren‚Äôt of the highest quality.\nThis is similar to our machine learning workflow.\nIn an ideal world, the samples in the training set are sufficiently representative of those in the test set and in turn, sufficiently representative of samples in the wild.\nBefore we split our dataset into different sets, let‚Äôs remind ourselves of what it looks like.\n\n# Original dataset (only a \"train\" split)\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nWonderful! Right now, we‚Äôve only got one split, \"train\".\nTo make our required splits, we can call the train_test_split() method on our dataset and pass in the size of the split we‚Äôd like via the test_size parameter.\nFor example, test_size=0.3 means 30% of the data will go to the test set and 70% will go to the training set.\nWe‚Äôll make the following splits:\n\n70% of data to training set.\n~10% of data to validation set.\n~20% of data to testing set.\n\nTo do so, we‚Äôll call train_test_split() twice with different amounts:\n\nFirst on dataset[\"train\"] with test_size=0.3 to make the 70/30 training/test split, we‚Äôll save this split to the variable dataset_split.\nNext on dataset_split[\"test\"] with test_size=0.66 to make the 66/33 test/validation split, we‚Äôll set this variable to dataset_test_val_split.\n\nOnce we‚Äôve done this, we‚Äôll reassign all of the splits back to our original dataset.\nWe‚Äôll also set seed=42 for reproducibility.\nLet‚Äôs do it!\nTK image - make an image of these workflows to make it easier to understand\n\n# 1. Split the data into \"train\" and \"test\" splits\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\n\n# 2. Split the test split into \"test\" and \"validation\" splits\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.66, seed=42) # split the test set into 40/60 validation/test\n\n# Create \"train\" split from 1.\ndataset[\"train\"] = dataset_split[\"train\"]\n\n# Create a \"validation\" and \"test\" split from 2.\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\n# View the dataset (now with splits)\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 115\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 224\n    })\n})\n\n\nPerfect!\nNow we‚Äôve got three splits of our dataset to work with.\nWe‚Äôll make sure our model never sees the validation and test splits during training, so when evaluate it we know that it‚Äôs only seeing new samples.\n\n\n13.2 TK - Writing a function for preprocessing multiple samples at a time\nUPTOHERE - preprocessing multiple samples at a time\nWe‚Äôve preprocessed and passed one sample through our model, new let‚Äôs do the same for multiple samples.\nWe‚Äôre going to work towards having a function that can go from a group or batch of samples (images and their annotations) and return them in preprocessed form (via transformers.ConditionalDetrImageProcessor.preprocess) ready to be used with our model.\nLet‚Äôs first remind ourselves of what a single unprocessed sample looks like.\n\n# Get one sample from the training dataset \none_sample = dataset[\"train\"][42]\none_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 663,\n 'annotations': {'file_name': ['1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg',\n   '1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg'],\n  'image_id': [663, 663],\n  'category_id': [1, 5],\n  'bbox': [[413.29998779296875,\n    529.7000122070312,\n    343.6000061035156,\n    687.0999755859375],\n   [435.8999938964844, 463.0, 77.19999694824219, 99.9000015258789]],\n  'iscrowd': [0, 0],\n  'area': [236087.5625, 7712.27978515625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nAwesome, we get an image in PIL.Image.Image form as well as a single dictionary of annotations.\nHow about if we were to inspect a group of three samples?\n\n# Get three samples from the training set\ngroup_of_samples = dataset[\"train\"][0:3]\n\n# Uncomment for full output (commented for brevity)\n# group_of_samples \n\n\n\nOutput of random_samples\n\nSignature:\n{'image': [&lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;],\n 'image_id': [69, 1027, 1092],\n 'annotations': [{'file_name': ['c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg'],\n   'image_id': [69, 69, 69, 69, 69, 69, 69, 69],\n   'category_id': [5, 0, 1, 4, 4, 4, 4, 4],\n   'bbox': [[360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n    [298.29998779296875,\n     495.1000061035156,\n     381.1000061035156,\n     505.70001220703125],\n    [81.5999984741211,\n     592.0999755859375,\n     358.79998779296875,\n     316.29998779296875],\n    [1.2999999523162842,\n     776.7000122070312,\n     193.8000030517578,\n     211.89999389648438],\n    [301.1000061035156, 60.79999923706055, 146.89999389648438, 115.0],\n    [501.0, 75.9000015258789, 24.200000762939453, 71.19999694824219],\n    [546.4000244140625,\n     54.70000076293945,\n     130.3000030517578,\n     115.0999984741211],\n    [862.9000244140625,\n     41.099998474121094,\n     75.69999694824219,\n     80.19999694824219]],\n   'iscrowd': [0, 0, 0, 0, 0, 0, 0, 0],\n   'area': [46390.9609375,\n    192722.265625,\n    113488.4375,\n    41066.21875,\n    16893.5,\n    1723.0400390625,\n    14997.5302734375,\n    6071.14013671875]},\n  {'file_name': ['b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg'],\n   'image_id': [1027, 1027, 1027, 1027, 1027],\n   'category_id': [5, 4, 1, 0, 0],\n   'bbox': [[378.29998779296875, 657.5, 139.8000030517578, 165.10000610351562],\n    [463.29998779296875, 754.5, 39.400001525878906, 30.299999237060547],\n    [451.20001220703125,\n     734.7999877929688,\n     109.19999694824219,\n     163.8000030517578],\n    [140.39999389648438, 400.29998779296875, 460.8999938964844, 491.5],\n    [2.299999952316284,\n     322.29998779296875,\n     201.6999969482422,\n     429.20001220703125]],\n   'iscrowd': [0, 0, 0, 0, 0],\n   'area': [23080.98046875,\n    1193.8199462890625,\n    17886.9609375,\n    226532.34375,\n    86569.640625]},\n  {'file_name': ['d822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg'],\n   'image_id': [1092, 1092, 1092, 1092],\n   'category_id': [2, 5, 1, 0],\n   'bbox': [[97.80000305175781, 93.30000305175781, 177.5, 101.5999984741211],\n    [342.20001220703125, 572.5999755859375, 350.0, 344.20001220703125],\n    [185.1999969482422, 803.0, 304.3999938964844, 371.6000061035156],\n    [219.39999389648438, 259.1000061035156, 598.7000122070312, 584.5]],\n   'iscrowd': [0, 0, 0, 0],\n   'area': [18034.0, 120470.0, 113115.0390625, 349940.15625]}],\n 'label_source': ['manual_prodigy_label',\n  'manual_prodigy_label',\n  'manual_prodigy_label'],\n 'image_source': ['manual_taken_photo',\n  'manual_taken_photo',\n  'manual_taken_photo']}\n\nOkay, now we get a list of image objects as well as a list of annotation dictionaries and more in the format:\n{\n    \"image\": [&lt;PIL.Image.Image&gt;, &lt;PIL.Image.Image&gt;, ...],\n    \"image_id\": [int, int, ...],\n    \"annotations\": [\n        {\n            \"file_name\": [str, str, ...],\n            \"image_id\": [int, int, ...],\n            \"category_id\": [int, int, ...],\n            \"bbox\": [[float, float, float, float], ...],\n            \"iscrowd\": [int, int, ...],\n            \"area\": [float, float, ...]\n        },\n        {...},\n        {...}\n    ],\n    \"label_source\": [str, str, ...],\n    \"image_source\": [str, str, ...]\n}\nKnowing this structure, we‚Äôll want to write a function capable of taking it as input and then preparing it for the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nOur data is in this structure (a dictionary of lists, rather than a list of dictionaries) because it is built on Hugging Face Datasets and Hugging Face Datasets is built on Apache Arrow.\nAnd Apache Arrow is column-orientated in nature.\nSo instead of our dataset being represented as many rows (list of dictionaries), it is represented as many columns (dictionary of lists).\n\n\nThe preprocess method expects a list of images as well as COCO formatted annotations as input.\nSo to create our preprocess_batch function we‚Äôll:\n\nTake in a list of examples (these will be in the format above), an image_processor and optional transforms (we don‚Äôt need to pass these in for now but it‚Äôs good to have the option).\nCreate empty lists of images and coco_annotations we‚Äôll fill throughout the rest of the function.\nExtract the image, image_id and annotations_dict from our list of input examples.\nCreate lists of annotations attributes such as bbox, category_id and area (these are required for our format_image_annotations_as_coco function.\nOptionally perform transforms/augmentations on the image and related boxes (because in object detection if you transform an image, should transform the related boxes as well).\nConvert the annotations into COCO format using the format_image_annotations_as_coco helper function we created earlier.\nAppend the images and COCO formatted annotations to the empty lists created in 2.\nPass the list of images and COCO formatted annotations to the image_processor.preprocess method to get the preprocessed batch.\nReturn the preprocessed batch.\n\nLet‚Äôs do it!\n\n# 1. Take in a list of examples, image processor and optional transforms\ndef preprocess_batch(examples, \n                     image_processor,\n                     transforms=None, # Note: Could optionally add transforms (e.g. data augmentation) here \n                     ):\n    \"\"\"\n    Preprocesses a batch of image data with annotations for object detection models.\n\n    This function takes a batch of examples in a custom dataset format, extracts images and\n    their corresponding annotations, and converts them into a format suitable for model training\n    or inference using the provided image processor.\n\n    Args:\n        examples (dict): A dictionary containing the batch data with the following structure:\n            - \"image\" (List[PIL.Image.Image]): List of PIL Image objects\n            - \"image_id\" (List[int]): List of unique image identifiers\n            - \"annotations\" (List[dict]): List of annotation dictionaries, where each contains:\n                - \"file_name\" (List[str]): List of image filenames\n                - \"image_id\" (List[int]): List of image identifiers\n                - \"category_id\" (List[int]): List of object category IDs\n                - \"bbox\" (List[List[float]]): List of bounding boxes as [x, y, width, height]\n                - \"iscrowd\" (List[int]): List of crowd indicators (0 or 1)\n                - \"area\" (List[float]): List of object areas\n            - \"label_source\" (List[str]): List of label sources\n            - \"image_source\" (List[str]): List of image sources\n\n        image_processor: An image processor object to preprocess images for model input.\n            For example, can be `transformers.ConditionalDetrImageProcessor`.\n\n        transforms (optional): Image and annotations transforms for data augmentation.\n            Defaults to None.\n\n    Returns:\n        dict: Preprocessed batch with images and annotations converted to tensors\n            in the format required for a `transformers.ConditionalDetrForObjectDetection` model.\n\n    Note:\n        The `format_image_annotations_as_coco` function converts the input annotation format to COCO\n        format before applying the image_processor. This is required as the image_processor is designed\n        to handle COCO format annotations. \n    \"\"\"\n    # 2. Create empty lists to store images and annotations\n    images = []\n    coco_annotations = [] \n\n    # 3. Extract the image, image_id and annotations from the examples\n    for image, image_id, annotations_dict in zip(examples[\"image\"], \n                                                 examples[\"image_id\"], \n                                                 examples[\"annotations\"]):\n\n        # 4. Create lists of annotation attributes\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n\n        ###\n        # 5. Note: Could optionally apply a transform/augmentation here.\n        if transforms:\n            # Perform transform on image/boxes\n            pass\n        ###\n\n        # 6. Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # 7. Add images/annotations to their respective lists\n        images.append(image) # Note: may need to open image if it is an image path rather than PIL.Image\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # 8. Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\")\n\n    # 9. Return the preprocessed batch\n    return preprocessed_batch\n\nNice!\nNow how about we test it out on our group_of_samples?\n\npreprocessed_samples = preprocess_batch(examples=group_of_samples,\n                                        image_processor=image_processor)\n\npreprocessed_samples.keys()\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\ndict_keys(['pixel_values', 'labels'])\n\n\nPerfect, we get the same keys() as with our single sample.\nExcept this time, we‚Äôve got multiple samples, let‚Äôs check the shape.\n\n# Check the shape of our preprocessed samples\nprint(f\"[INFO] Shape of preprocessed samples: {preprocessed_samples['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Shape of preprocessed samples: torch.Size([3, 3, 640, 640]) -&gt; [batch_size, colour_channels, height, width]\n\n\nWonderful, our batch of three samples have been preprocessed and are ready for input to our model.\n\n\n13.3 Applying our preprocessing function to each data split\nWe‚Äôve seen our preprocess_batch function in action on a small group of samples.\nNow let‚Äôs apply it to our different data splits.\nTo do so, we can call the with_transform() method on our target dataset split and pass it our desired transform.\nUsing with_transform() means our transformations will be applied on-the-fly when we call on our split datasets.\nBecause the with_transform() method expects a callable with a single argument (the input examples), we‚Äôll turn our preprocess_batch into a Python partial function.\nDoing this will mean we can prefill the image_processor and optionally the transforms parameter of our preprocess_batch function meaning it will only take examples as input, this is inline with the with_transform() method.\n\n# Create a partial function for preprocessing\nfrom functools import partial\n\n# Note: Could create separate preprocess functions with different inputs depending on the split \n# (e.g. use data augmentation on training but not on validation/test)\npreprocess_batch_partial = partial(preprocess_batch,\n                                   image_processor=image_processor,\n                                   transforms=None) # could use transforms here if wanted\n\n# Inspect the preprocess_batch_partial function\n# preprocess_batch_partial\n\nBeautiful, now let‚Äôs pass the preprocess_batch_partial function to the with_transform() method on each of our data splits.\n\n# Create a copy of the original dataset \n# (we don't need to do this, this is just so we can inspect the original dataset later on)\nprocessed_dataset = dataset.copy()\n\n# Apply the preprocessing function to the datasets (the preprocessing will happen on the fly, e.g. when the dataset is called rather than in-place)\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(transform=preprocess_batch_partial)\n\nNow when we get (via __getitem__) one of our samples from a processed_dataset split, it will be preprocessed on the fly.\n\n# Get an item from the dataset (in will be preprocessed as we get it)\nprocessed_dataset[\"train\"][42]\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n{'pixel_values': tensor([[[0.0824, 0.1373, 0.3137,  ..., 0.2431, 0.3765, 0.3725],\n          [0.2863, 0.1725, 0.1725,  ..., 0.4941, 0.4235, 0.4863],\n          [0.2667, 0.2745, 0.2471,  ..., 0.6941, 0.4627, 0.4392],\n          ...,\n          [0.5216, 0.3765, 0.2784,  ..., 0.2667, 0.1922, 0.1608],\n          [0.4314, 0.6078, 0.4588,  ..., 0.1176, 0.1725, 0.2275],\n          [0.2392, 0.5333, 0.4824,  ..., 0.1137, 0.1020, 0.1647]],\n \n         [[0.0941, 0.1451, 0.3255,  ..., 0.2275, 0.3647, 0.3686],\n          [0.3020, 0.1804, 0.1804,  ..., 0.4824, 0.4118, 0.4784],\n          [0.2745, 0.2824, 0.2510,  ..., 0.6863, 0.4510, 0.4314],\n          ...,\n          [0.4941, 0.3451, 0.2431,  ..., 0.2902, 0.2196, 0.1961],\n          [0.4000, 0.5725, 0.4196,  ..., 0.1490, 0.2118, 0.2745],\n          [0.2039, 0.5020, 0.4431,  ..., 0.1529, 0.1529, 0.2196]],\n \n         [[0.0275, 0.0941, 0.2431,  ..., 0.0784, 0.1961, 0.1647],\n          [0.2118, 0.1176, 0.1020,  ..., 0.3255, 0.2392, 0.2824],\n          [0.1843, 0.2000, 0.1608,  ..., 0.5137, 0.2706, 0.2431],\n          ...,\n          [0.3333, 0.2275, 0.1765,  ..., 0.1608, 0.1020, 0.0667],\n          [0.2314, 0.4314, 0.3216,  ..., 0.0353, 0.0784, 0.1255],\n          [0.0667, 0.3412, 0.3255,  ..., 0.0118, 0.0157, 0.0627]]]),\n 'labels': {'size': tensor([640, 640]), 'image_id': tensor([663]), 'class_labels': tensor([1, 5]), 'boxes': tensor([[0.6095, 0.6822, 0.3579, 0.5368],\n         [0.4943, 0.4007, 0.0804, 0.0780]]), 'area': tensor([78695.8594,  2570.7600]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\nAnd the same happens when we get multiple (a batch) samples!\n\n# Now when we call one or more of our samples, the preprocessing will take place\nbatch_size_to_get = 32\nprint(f\"[INFO] Shape of preprocessed images: {processed_dataset['train'][:batch_size_to_get]['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n[INFO] Shape of preprocessed images: torch.Size([32, 3, 640, 640]) -&gt; [batch_size, colour_channels, height, width]\n\n\n\n# We can pass these straight to our model! (note: may take a while if it's on CPU)\n# model(processed_dataset[\"train\"][:batch_size_to_get][\"pixel_values\"]) # uncomment to view output\n\n\n\n13.4 Creating a collation function\nWe now preprocess multiple samples at once.\nTime to create a collation function which will tell our model trainer how to stack these samples together into batches.\nWe do this because processing more samples at once (e.g.¬†32 samples in a batch) in a batch is generally more efficient than one sample at a time or trying to process all samples at once.\nOur collation function will be used for the data_collator parameter in our transformers.Trainer instance later on.\nThe input to our data collation function will be the output of image_processor.preprocess() (a preprocessed sample).\nAnd the output will be passed as a batch (we‚Äôll define the batch size later on) to our model‚Äôs forward() method.\n\n\n\n\n\n\nNote\n\n\n\nWhat batch size should I use?\nYou should generally use the batch size which uses the maximum amount of GPU memory you have.\nFor example, if you have 16GB of GPU memory and a batch size of 32 only uses 8GB of that memory, you should try doubling the batch size to 64.\nThe ideal batch size for a given dataset/model/hardware is often discovered in an iterative process.\n\n\n\nfrom typing import List, Dict, Any\n\ndef data_collate_function(preprocessed_batch: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    \"\"\"Stacks together groups of preprocessed samples into batches for our model.\n\n    Args:\n        preprocessed_batch: A list of dictionaries where each dictionary represnets a preprocessed sample.\n\n    Returns:\n        collated_data: A dictionary containing the batched data ready in the format our model\n            is expecting. The dictionary has the following keys: \n                - \"pixel_values\": A stacked tensor of preprocessed pixel values.\n                - \"labels\": A list of label dictionaries.\n                - \"pixel_mask\": (Optional) A stacked tensor of pixel masks (this will be present \n                    only if the input contains a \"pixel_mask\" key.\n    \"\"\"\n    # Create an empty dictionary (our model wants a dictionary input) \n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in preprocessed_batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in preprocessed_batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in preprocessed_batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in preprocessed_batch])\n\n    return collated_data\n\nExcellent! Now let‚Äôs try out our data collation function.\n\n%%time\n\n# Try data_collate_function \nexample_collated_data_batch = data_collate_function(processed_dataset[\"train\"].select(range(32)))\nexample_collated_data_batch.keys()\n\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\nCPU times: user 6.46 s, sys: 92.4 ms, total: 6.55 s\nWall time: 760 ms\n\n\ndict_keys(['pixel_values', 'labels'])\n\n\nPerfect! Looks like it worked. We‚Äôve now got a batch of preprocessed images and label pairs.\nLet‚Äôs check the shapes.\n\n# Check shapes of batched preprocessed samples\nprint(f\"[INFO] Batch of pixel value shapes: {example_collated_data_batch['pixel_values'].shape}\")\nprint(f\"[INFO] Batch of labels: {example_collated_data_batch['labels']}\")\nif \"pixel_mask\" in example_collated_data_batch:\n    print(f\"[INFO] Batch of pixel masks: {example_collated_data_batch['pixel_mask'].shape}\")\n\n[INFO] Batch of pixel value shapes: torch.Size([32, 3, 640, 640])\n[INFO] Batch of labels: [{'size': tensor([640, 640]), 'image_id': tensor([69]), 'class_labels': tensor([5, 0, 1, 4, 4, 4, 4, 4]), 'boxes': tensor([[0.4675, 0.5152, 0.1846, 0.2045],\n        [0.5092, 0.5843, 0.3970, 0.3951],\n        [0.2719, 0.5861, 0.3738, 0.2471],\n        [0.1023, 0.6896, 0.2019, 0.1655],\n        [0.3902, 0.0924, 0.1530, 0.0898],\n        [0.5345, 0.0871, 0.0252, 0.0556],\n        [0.6370, 0.0877, 0.1357, 0.0899],\n        [0.9383, 0.0634, 0.0789, 0.0627]]), 'area': tensor([15463.6543, 64240.7578, 37829.4805, 13688.7402,  5631.1670,   574.3467,\n         4999.1768,  2023.7134]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1027]), 'class_labels': tensor([5, 4, 1, 0, 0]), 'boxes': tensor([[0.4669, 0.5782, 0.1456, 0.1290],\n        [0.5031, 0.6013, 0.0410, 0.0237],\n        [0.5269, 0.6380, 0.1138, 0.1280],\n        [0.3863, 0.5047, 0.4801, 0.3840],\n        [0.1074, 0.4195, 0.2101, 0.3353]]), 'area': tensor([ 7693.6602,   397.9400,  5962.3203, 75510.7812, 28856.5469]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1092]), 'class_labels': tensor([2, 5, 1, 0]), 'boxes': tensor([[0.1943, 0.1126, 0.1849, 0.0794],\n        [0.5388, 0.5818, 0.3646, 0.2689],\n        [0.3515, 0.7725, 0.3171, 0.2903],\n        [0.5404, 0.4307, 0.6236, 0.4566]]), 'area': tensor([  6011.3335,  40156.6680,  37705.0156, 116646.7188]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([228]), 'class_labels': tensor([0]), 'boxes': tensor([[0.5187, 0.5418, 0.4982, 0.5698]]), 'area': tensor([116290.6797]), 'iscrowd': tensor([0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([511]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5284, 0.5886, 0.2903, 0.3347],\n        [0.7784, 0.7873, 0.4400, 0.4222]]), 'area': tensor([39798.3594, 76088.3203]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([338]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4990, 0.5424, 0.2227, 0.1716],\n        [0.5455, 0.5335, 0.3754, 0.3595],\n        [0.7111, 0.6979, 0.3313, 0.2838]]), 'area': tensor([15657.2871, 55273.3516, 38509.8008]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([405]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.4952, 0.6559, 0.6088, 0.4872],\n        [0.2074, 0.7760, 0.4117, 0.4459],\n        [0.4132, 0.5714, 0.0663, 0.0580]]), 'area': tensor([121477.2812,  75180.2188,   1573.0400]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([3]), 'class_labels': tensor([0, 5, 1, 4, 4, 4]), 'boxes': tensor([[0.5020, 0.4466, 0.6579, 0.5829],\n        [0.5148, 0.5684, 0.2288, 0.1367],\n        [0.7040, 0.7836, 0.4468, 0.4219],\n        [0.3160, 0.8416, 0.3991, 0.2993],\n        [0.4095, 0.0661, 0.0888, 0.0666],\n        [0.7489, 0.1356, 0.3843, 0.2637]]), 'area': tensor([157078.9219,  12810.0000,  77202.0000,  48921.8711,   2419.6802,\n         41501.2500]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([182]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.5786, 0.5016, 0.5992, 0.4539],\n        [0.6307, 0.7197, 0.4165, 0.3323],\n        [0.4415, 0.6429, 0.1546, 0.2070]]), 'area': tensor([111397.0625,  56678.3125,  13103.7207]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([640]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.5314, 0.6391, 0.2920, 0.4553],\n        [0.7088, 0.7733, 0.5596, 0.4422],\n        [0.5282, 0.5060, 0.5678, 0.4612]]), 'area': tensor([ 54452.9492, 101351.7344, 107257.5156]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1126]), 'class_labels': tensor([5, 1, 0, 0, 4]), 'boxes': tensor([[0.4897, 0.6114, 0.2720, 0.2612],\n        [0.6082, 0.7287, 0.2006, 0.2145],\n        [0.4549, 0.5349, 0.4550, 0.3859],\n        [0.1698, 0.4514, 0.3276, 0.2998],\n        [0.6611, 0.1925, 0.4202, 0.1516]]), 'area': tensor([29095.2422, 17622.9004, 71926.4062, 40224.5508, 26099.9805]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([902]), 'class_labels': tensor([5, 1, 0, 4]), 'boxes': tensor([[0.5237, 0.4816, 0.0443, 0.0498],\n        [0.6509, 0.3957, 0.2670, 0.1695],\n        [0.3200, 0.4485, 0.6094, 0.6062],\n        [0.6201, 0.1730, 0.1955, 0.0725]]), 'area': tensor([   902.4167,  18539.0352, 151320.0000,   5806.1870]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([166]), 'class_labels': tensor([5, 1, 0, 4, 0]), 'boxes': tensor([[0.4320, 0.5441, 0.2114, 0.1963],\n        [0.2735, 0.6612, 0.3580, 0.2412],\n        [0.5321, 0.5080, 0.3639, 0.3277],\n        [0.1142, 0.7866, 0.2067, 0.1561],\n        [0.7246, 0.4182, 0.2477, 0.2401]]), 'area': tensor([16989.4941, 35378.1875, 48832.1406, 13213.4404, 24358.6465]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([409]), 'class_labels': tensor([0, 4, 4, 5, 1]), 'boxes': tensor([[0.3715, 0.6465, 0.7429, 0.5014],\n        [0.5047, 0.6748, 0.2114, 0.1916],\n        [0.1167, 0.7180, 0.2303, 0.1904],\n        [0.4180, 0.6086, 0.0883, 0.0780],\n        [0.3020, 0.6926, 0.3045, 0.2649]]), 'area': tensor([152577.2500,  16583.6934,  17960.6914,   2823.8398,  33039.6445]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([504]), 'class_labels': tensor([1, 0]), 'boxes': tensor([[0.2105, 0.6075, 0.3550, 0.2591],\n        [0.4267, 0.5508, 0.5474, 0.3703]]), 'area': tensor([37681.1211, 83029.0000]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1012]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.4518, 0.4870, 0.5355, 0.5652],\n        [0.9084, 0.5812, 0.1724, 0.4217]]), 'area': tensor([123983.7812,  29778.9668]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([769]), 'class_labels': tensor([6, 5, 0, 2]), 'boxes': tensor([[0.7015, 0.4236, 0.5892, 0.0759],\n        [0.4368, 0.4307, 0.1043, 0.1327],\n        [0.2781, 0.5959, 0.3932, 0.4465],\n        [0.6999, 0.3721, 0.5797, 0.7238]]), 'area': tensor([ 18325.4414,   5665.6602,  71913.7500, 171865.7500]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([510]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.3557, 0.4248, 0.2382, 0.1798],\n        [0.6917, 0.7145, 0.6135, 0.5677]]), 'area': tensor([ 17541.2910, 142655.8125]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([429]), 'class_labels': tensor([4, 0, 1, 5]), 'boxes': tensor([[0.4661, 0.8003, 0.4432, 0.1715],\n        [0.4992, 0.6146, 0.9984, 0.6917],\n        [0.2310, 0.6193, 0.3613, 0.2520],\n        [0.4227, 0.5342, 0.0790, 0.0650]]), 'area': tensor([ 31132.4180, 282885.3125,  37292.5625,   2102.1868]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([714]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.3350, 0.6024, 0.2067, 0.2968],\n        [0.2292, 0.7662, 0.4445, 0.4472],\n        [0.5794, 0.6870, 0.6228, 0.5439]]), 'area': tensor([ 25124.0527,  81414.3594, 138752.6562]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([301]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4706, 0.5429, 0.0994, 0.0970],\n        [0.2963, 0.6009, 0.3128, 0.2155],\n        [0.4525, 0.4761, 0.8738, 0.6209]]), 'area': tensor([  3946.3799,  27617.5918, 222226.0938]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([816]), 'class_labels': tensor([6, 5, 0]), 'boxes': tensor([[0.7607, 0.7381, 0.4707, 0.3945],\n        [0.5418, 0.5427, 0.1593, 0.1055],\n        [0.4945, 0.5723, 0.5663, 0.4344]]), 'area': tensor([ 76069.8359,   6880.5000, 100747.2031]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([392]), 'class_labels': tensor([5, 1, 4, 4, 4]), 'boxes': tensor([[0.4599, 0.6063, 0.0836, 0.0493],\n        [0.2533, 0.7866, 0.5063, 0.4221],\n        [0.5349, 0.6495, 0.7540, 0.5713],\n        [0.8369, 0.9173, 0.3234, 0.1632],\n        [0.5333, 0.9232, 0.1924, 0.1514]]), 'area': tensor([  1688.9768,  87528.6094, 176414.1875,  21621.1504,  11931.6201]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([439]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4637, 0.6099, 0.2429, 0.3724],\n        [0.4283, 0.5034, 0.4528, 0.3891],\n        [0.7492, 0.6229, 0.4982, 0.4316]]), 'area': tensor([37055.4805, 72160.2031, 88070.9688]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([319]), 'class_labels': tensor([5, 1, 0, 4, 4]), 'boxes': tensor([[0.4927, 0.4708, 0.1688, 0.0946],\n        [0.7135, 0.5453, 0.3644, 0.2980],\n        [0.4998, 0.5359, 0.6276, 0.4492],\n        [0.5456, 0.8173, 0.1482, 0.1584],\n        [0.4667, 0.9237, 0.1009, 0.1277]]), 'area': tensor([  6539.3999,  44471.2422, 115479.1719,   9619.4805,   5281.0503]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1106]), 'class_labels': tensor([5, 1, 4, 0]), 'boxes': tensor([[0.4597, 0.4787, 0.1184, 0.0961],\n        [0.5932, 0.6244, 0.2401, 0.2405],\n        [0.6588, 0.7589, 0.2219, 0.1490],\n        [0.3902, 0.5373, 0.7309, 0.5996]]), 'area': tensor([  4661.7002,  23656.9844,  13539.7012, 179518.2500]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([763]), 'class_labels': tensor([0, 0, 0, 5, 1]), 'boxes': tensor([[0.4510, 0.5231, 0.5637, 0.4548],\n        [0.7868, 0.4366, 0.4092, 0.3365],\n        [0.2204, 0.4396, 0.3318, 0.3187],\n        [0.5497, 0.5397, 0.2101, 0.0714],\n        [0.6421, 0.6682, 0.3070, 0.2901]]), 'area': tensor([105010.8438,  56392.9844,  43305.3828,   6145.1270,  36474.0391]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([379]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5053, 0.5406, 0.5852, 0.7876],\n        [0.7293, 0.6370, 0.5284, 0.4556]]), 'area': tensor([188783.5312,  98619.1250]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([394]), 'class_labels': tensor([1, 5, 0]), 'boxes': tensor([[0.2053, 0.7470, 0.4101, 0.4966],\n        [0.4299, 0.5713, 0.1728, 0.0933],\n        [0.4994, 0.6560, 0.9984, 0.6693]]), 'area': tensor([ 83425.0312,   6602.8203, 273715.6562]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([665]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.5282, 0.6071, 0.4164, 0.3630],\n        [0.6520, 0.8419, 0.5095, 0.2905]]), 'area': tensor([61900.2109, 60615.7930]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([362]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4643, 0.5164, 0.3293, 0.3087],\n        [0.6197, 0.7712, 0.7412, 0.4446],\n        [0.4982, 0.5305, 0.9742, 0.8731]]), 'area': tensor([ 41630.3711, 134990.5312, 348393.1875]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 640]), 'image_id': tensor([1019]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4699, 0.5841, 0.2358, 0.3263],\n        [0.5916, 0.6374, 0.2653, 0.2050],\n        [0.4858, 0.5195, 0.6066, 0.5119]]), 'area': tensor([ 31522.4277,  22277.7617, 127174.3281]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}]\n\n\nNow let‚Äôs try to pass the \"pixel_values\" through our model.\n\n%%time \n\n# Try pass a batch through our model (note: this will be relatively slow if our model is on the CPU)\nmodel = create_model()\n\n# example_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\nexample_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\n# example_batch_outputs # uncomment for full output\nexample_batch_outputs.keys()\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nCPU times: user 2min 12s, sys: 1min 8s, total: 3min 20s\nWall time: 15.7 s\n\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'intermediate_hidden_states', 'intermediate_logits', 'intermediate_reference_points', 'encoder_last_hidden_state', 'init_reference_points', 'enc_topk_logits', 'enc_topk_bboxes', 'enc_outputs_class', 'enc_outputs_coord_logits'])\n\n\n\n# We get 300 predictions per image in our batch, each with a logit value for each of the classes in our dataset \nexample_batch_outputs.logits.shape\n\ntorch.Size([32, 300, 7])\n\n\nThis is what will happen during training, our model will continually go over batches (the size of these batches will be defined by us) over data and try to match its own predictions with the ground truth labels.\nIn summary, we‚Äôve created two major steps:\n\npreprocess_batch - Preprocesses single or groups of samples into the specific format required by our model.\ndata_collate_function - Stacks together groups/batches of samples to be passed to our model‚Äôs forward() method."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "14 TK - Setting up TrainingArguments and a Trainer instance to train our model",
    "text": "14 TK - Setting up TrainingArguments and a Trainer instance to train our model\nData ready and prepared, time to train a model!\nWe‚Äôll use transformers.TrainingArguments to set various hyperparameters for our model (many of these will be set by default, however, we can tweak them to our liking).\nWe‚Äôll also create an instance of transformers.Trainer which we can pass our preprocessed datasets for it to train/evaluate on.\nTo train a model, we‚Äôll go through the following steps:\n\nCreate a fresh instance of our model using the create_model() function.\nMake a directory for saving our trained models to.\nDefine our model‚Äôs hyperparameters using transformers.TrainingArguments, we‚Äôll take many of these settings from the assosciated research papers that introduced the models.\nCreate an instance of transformers.Trainer and pass it our training arguments from 2 as well as our preprocessed data.\nCall transformers.Trainer.train() to train the model from 1 on our own data.\n\nLet‚Äôs do it!\n\n# 1. Create a model instance \nmodel = create_model()\n\nSome weights of RTDetrV2ForObjectDetection were not initialized from the model checkpoint at PekingU/rtdetr_v2_r50vd and are newly initialized because the shapes did not match:\n- model.decoder.class_embed.0.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.0.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.1.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.1.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.2.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.2.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.3.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.3.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.4.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.4.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.decoder.class_embed.5.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.decoder.class_embed.5.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\n- model.denoising_class_embed.weight: found shape torch.Size([81, 256]) in the checkpoint and torch.Size([8, 256]) in the model instantiated\n- model.enc_score_head.bias: found shape torch.Size([80]) in the checkpoint and torch.Size([7]) in the model instantiated\n- model.enc_score_head.weight: found shape torch.Size([80, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nModel ready, let‚Äôs now create a folder where we can save our trained models to.\n\nfrom pathlib import Path\n\n# 2. Make a models directory for saving models\nmodels_dir = Path(\"models\")\nmodels_dir.mkdir(parents=True, exist_ok=True)\n\nPerfect! Time to setup our model‚Äôs hyperparameters with transformers.TrainingArguments.\n\n14.1 Setting up our TrainingArguments\nThe transformers.TrainingArguments class holds many of the hyperparameters/settings for training our model.\nMany of them are set by default in the transformers.ConditionalDetrConfig class.\nHowever, we can tweak any of them to our own liking.\nWhere do we get the settings from?\nThe original Conditional DETR for fast training convergence paper states that all hyperparameters are the same as the original DETR (End-to-End Object Detection with Transformers).\nWe can even dig into related papers such as DETRs Beat YOLOs on Real-time Object Detection and find the hyperaparameter settings as well.\nThe main hyperparameters we are going to set are:\n\n\n\nHyperparameter\nValue\nWhat does it do?\n\n\n\n\nper_device_train_batch_size, per_device_eval_batch_size\n16, 32 or larger (hardware dependent)\nDefines the number of samples passed to our model at one time. For example, if batch size is 16, our model will see 16 samples at a time. It‚Äôs usually best practice to set this value to the highest your hardware can handle.\n\n\nlearning_rate\n0.0001 (as per the listed papers)\nDefines the multiplier on the size of gradient updates during training. Too high and gradients will explode, too low and gradients won‚Äôt update, both lead to poor training results. The papers mention two different learning rates for the backbone and the detection head, I tried these and got poor results (likely because of our smaller dataset), a single learning rate for the whole network turned out to be better.\n\n\nweight_decay\n0.0001 (as per the listed papers)\nPrevents model weights from getting too large by applying a small decay penalty over time. This prevents a single weight providing too much information. In essence, the model is forced to learn smaller, simpler weights to represent the data. A form of regularization (overfitting prevention). See more at paperswithcode.com/method/weight-decay.\n\n\nmax_grad_norm\n0.1 (as per the listed papers)\nPrevents gradients from getting too large during training. This will help to ensure stable training. See more at paperswithcode.com/method/gradient-clipping.\n\n\nnum_train_epochs\n25 (depends on training data and available time)\nDefines how many laps of the data your model will do. For example, setting epochs to 25 means the model will do 25 laps of the training data to learn different patterns. In practice, I‚Äôve found this value to be a good starting point for our dataset and also because we are fine-tuning rather than training from scratch. However, if you had more data you might want to do more epochs (when training from scratch, the papers did 300 epochs).\n\n\nwarmup_ratio\n0.05\nPercentage of total training steps to take learning rate from 0 to to the set value (e.g.¬†0.0001). Can help with training stability in the early training steps of the model by not doing too large updates when first starting out. The papers state 2000 warmup steps, however, in practice I found this to be too many for our smaller dataset.\n\n\ndataloader_num_workers\n4 (hardware dependent)\nNumber of workers to load data from the CPU to the GPU. Higher is generally better if it is available, however, it can often cap out. Experimentally I‚Äôve found that 0.5 * os.cpu_count() generally works well.\n\n\n\nTK image - showcase different papers referencing the hyperparameters for the models\nIt‚Äôs important to note that all of these values can be experimented with.\nAnd just because a research paper mentions a specific value, doesn‚Äôt mean you have to use.\nFor example, all the mentioned research papers tend to focus on training a model from scratch on the COCO dataset (330k images, 80 classes).\nWhich is a much larger dataset with more classes than our dataset (1k images, 7 classes) which we are trying to fine-tune an existing model on rather than train from scratch.\nThere are many more possible arguments/settings we‚Äôve left out in the above table but if you‚Äôd like to explore these, I‚Äôd encourage you to check out the documentation for transformers.TrainingArguments.\n\nfrom transformers import TrainingArguments\n\n# Hardware dependent hyperparameters\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 \n# without running out of memory\nBATCH_SIZE = 16\nDATALOADER_NUM_WORKERS = 4 # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0 \n\n# Set number of epochs to how many laps you'd like to do over the data\nNUM_EPOCHS = 25\n\n# Setup hyperameters for training from the DETR paper(s)\nLEARNING_RATE = 1e-4\nWEIGHT_DECAY = 1e-4\nMAX_GRAD_NORM = 0.1 \nWARMUP_RATIO = 0.05 # learning rate warmup from 0 to learning_rate as a ratio of total steps (e.g. 0.05 = 5% of total steps)\n\n# Create directory to save models to \nOUTPUT_DIR = Path(models_dir, \"rt-detr_v2_finetuned_trashify_box_detector_v1\")\nprint(f\"[INFO] Saving model to: {OUTPUT_DIR}\")\n\n# Create TrainingArguments to pass to Trainer\ntraining_args = TrainingArguments(\n    output_dir=OUTPUT_DIR,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=LEARNING_RATE,\n    weight_decay=WEIGHT_DECAY,\n    max_grad_norm=MAX_GRAD_NORM,\n    num_train_epochs=NUM_EPOCHS,\n    lr_scheduler_type=\"linear\",\n    warmup_ratio=WARMUP_RATIO, \n    # warmup_steps=2000, # number of warmup steps from 0 to learning_rate (overrides warmup_ratio, found this to be too long for our dataset)\n    logging_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    fp16=True, # use mixed precision training\n    dataloader_num_workers=DATALOADER_NUM_WORKERS, # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0\n    eval_strategy=\"epoch\",\n    load_best_model_at_end=True, \n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False, # want to minimize eval_loss (e.g. lower is better)\n    report_to=\"none\", # don't save experiments to a third party service\n    push_to_hub=False,\n    eval_do_concat_batches=False,\n)\n\n[INFO] Saving model to: models/rt-detr_v2_finetuned_trashify_box_detector_v1\n\n\n\n\n14.2 TK - Optional: Setting up an optimizer for multiple learning rates\nIn the papers that mentioned the DETR model we‚Äôre using, they state that they used a different learning rate value for the backbone (learning_rate=1e-5) as well as the object detection head (learning_rate=1e-4).\nTo set this up ourselves, we can extract which parameters of our model belong to the backbone as well as which don‚Äôt.\nTo find the backbone parameters, we can loop through our model‚Äôs named_parameters() method and filter for any which contain the string \"backbone\" in their name.\nWe‚Äôll append these to a list called backbone_parameters and assume any that don‚Äôt have \"backbone\" in their name are not part of the model‚Äôs backbone.\nWe can use these two lists of parameters to pass to torch.optim.AdamW with different learning rate values for each.\n\n\n\n\n\n\nNote\n\n\n\nIn my experiments with our smaller dataset size (~1100 images), I found that setting two different learning rates for the backbone and the object detection head led to poorer performance than just setting a single learning rate for the whole model.\nThe code below is an example of how to create a custom optimizer with different learning rates for different parts of the model.\nHowever, in our actual training code, we‚Äôll use a single learning rate for the whole model.\n\n\nWe can then subclass transformers.Trainer and update the method create_optimizer() to use our custom optimizer.\n\nfrom transformers import Trainer\n\n# Create lists for different kinds of parameters\nbackbone_parameters = []\nother_parameters = []\n\n# Can loop through model parameters and extract different model sections\nfor name, param in model.model.named_parameters(): \n    if \"backbone\" in name:\n        # print(f\"Backbone parameter: {name}\")\n        backbone_parameters.append(param)\n    else:\n        # print(f\"Other parameter: {name}\")\n        other_parameters.append(param)\n\nprint(f\"[INFO] Number of backbone parameter modules: {len(backbone_parameters)}\")\nprint(f\"[INFO] Number of other parameter modules: {len(other_parameters)}\")\n\n# Setup a custom subclass of Trainer to use different learning rates for different parts of the model\nclass CustomTrainer(Trainer):\n    def create_optimizer(self):\n        self.optimizer = torch.optim.AdamW([\n            {\"params\": backbone_parameters, \"lr\": 1e-4},\n            {\"params\": other_parameters, \"lr\": 1e-4}\n        ], weight_decay=0.0001)\n        return self.optimizer\n\n[INFO] Number of backbone parameter modules: 55\n[INFO] Number of other parameter modules: 363\n\n\nAwesome!\nNow if we wanted to use our custom optimizer, we could use CustomTrainer instead of Trainer.\n\n\n14.3 TK - Training our model with Trainer\nUPTOHERE:\n\ntraining a model‚Ä¶ (e.g.¬†calling trainer.train())\nevaluating our model with an evaluation metric\nwe should make a simple mAP metric to evaluate our model (can also evaluate during training)\nI should read up on the mAP metric and take the long road to evaluate our model so I can learn how to do it‚Ä¶\nNext: read up on mAP metric and implement a small example in Google Colab with a demo box?\n\nEvaluation function is comprised of the following:\n\nSee the code on GitHub: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160\nMean Average Precision metric from TorchMetrics: https://lightning.ai/docs/torchmetrics/stable/detection/mean_average_precision.html\n\nSee a blog post for mAP: https://jonathan-hui.medium.com/map-mean-average-precision-for-object-detection-45c121a31173\n\ntransformersEvalPrediction (these come out of the Trainer.evaluate method) - https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction\n\nSee Trainer.evaluate - https://huggingface.co/docs/transformers/en/main_classes/trainer#transformers.Trainer.evaluate\n\n\n\nimport numpy as np\n\nfrom typing import Optional, Mapping\n\nfrom transformers import EvalPrediction\n\nfrom torchvision.ops import box_convert\n\nfrom torchmetrics.detection.mean_ap import MeanAveragePrecision\n\ndef convert_bbox_cxcywh_to_xyxy_absolute(boxes, image_size_target):\n    # Convert normalized CXCYWH (output of model) -&gt; absolute XYXY format (required for evaluation)\n    boxes = box_convert(boxes=boxes, in_fmt=\"cxcywh\", out_fmt=\"xyxy\")\n\n    # Convert normalized box coordinates to absolute pixel values based on the target size \n    image_size_target_height = image_size_target[0]\n    image_size_target_width = image_size_target[1]\n    boxes = boxes * torch.tensor([image_size_target_width, image_size_target_height, image_size_target_width, image_size_target_height])\n\n    return boxes\n\n@dataclass\nclass ModelOutput:\n    logits: torch.Tensor\n    pred_boxes: torch.Tensor\n\n# Source is slightly modified version of: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160  \n@torch.no_grad()\ndef compute_metrics(\n    evaluation_results: EvalPrediction, # these come out of the Trainer.evaluate method, see: https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction \n    image_processor: AutoImageProcessor,\n    threshold: float = 0.0,\n    id2label: Optional[Mapping[int, str]] = None,\n) -&gt; Mapping[str, float]:\n    \"\"\"\n    Compute mean average mAP, mAR and their variants for the object detection task.\n\n    Args:\n        evaluation_results (EvalPrediction): Predictions and targets from evaluation.\n        threshold (float, optional): Threshold to filter predicted boxes by confidence. Defaults to 0.0.\n        id2label (Optional[dict], optional): Mapping from class id to class name. Defaults to None.\n\n    Returns:\n        Mapping[str, float]: Metrics in a form of dictionary {&lt;metric_name&gt;: &lt;metric_value&gt;}\n    \"\"\"\n\n    predictions, targets = evaluation_results.predictions, evaluation_results.label_ids\n\n    # For metric computation we need to provide:\n    #  - targets in a form of list of dictionaries with keys \"boxes\", \"labels\"\n    #  - predictions in a form of list of dictionaries with keys \"boxes\", \"scores\", \"labels\"\n\n    image_sizes = []\n    post_processed_targets = []\n    post_processed_predictions = []\n\n    # Collect targets in the required format for metric computation\n    for batch in targets:\n        # collect image sizes, we will need them for predictions post processing\n        batch_image_sizes = torch.tensor(np.array([x[\"orig_size\"] for x in batch])) # turn into a list of numpy arrays first, then tensors\n        image_sizes.append(batch_image_sizes)\n        # collect targets in the required format for metric computation\n        # boxes were converted to YOLO format needed for model training\n        # here we will convert them to Pascal VOC format (x_min, y_min, x_max, y_max)\n        for image_target in batch:\n            boxes = torch.tensor(image_target[\"boxes\"])\n            boxes = convert_bbox_cxcywh_to_xyxy_absolute(boxes, image_target[\"orig_size\"])\n            labels = torch.tensor(image_target[\"class_labels\"])\n            post_processed_targets.append({\"boxes\": boxes, \"labels\": labels})\n\n    # Collect predictions in the required format for metric computation,\n    # model produce boxes in YOLO format, then image_processor convert them to Pascal VOC format\n    for batch, target_sizes in zip(predictions, image_sizes):\n        batch_logits, batch_boxes = batch[1], batch[2]\n        output = ModelOutput(logits=torch.tensor(batch_logits), pred_boxes=torch.tensor(batch_boxes))\n        post_processed_output = image_processor.post_process_object_detection(\n            output, threshold=threshold, target_sizes=target_sizes\n        )\n        post_processed_predictions.extend(post_processed_output)\n\n    # Compute metrics\n    metric = MeanAveragePrecision(box_format=\"xyxy\", class_metrics=True)\n    metric.update(post_processed_predictions, post_processed_targets)\n    metrics = metric.compute()\n\n    # Replace list of per class metrics with separate metric for each class\n    classes = metrics.pop(\"classes\")\n    map_per_class = metrics.pop(\"map_per_class\")\n    # Optional: mAR@100 per class\n    mar_100_per_class = metrics.pop(\"mar_100_per_class\")\n    # for class_id, class_map, class_mar in zip(classes, map_per_class, mar_100_per_class):\n    for class_id, class_map in zip(classes, map_per_class):\n        class_name = id2label[class_id.item()] if id2label is not None else class_id.item()\n        metrics[f\"map_{class_name}\"] = class_map\n        # Optional: mAR@100 per class\n        # metrics[f\"mar_100_{class_name}\"] = class_mar\n\n    metrics = {k: round(v.item(), 4) for k, v in metrics.items()}\n\n    return metrics\n\n# Create a partial function for our compute_metrics function (we'll pass this to compute_metrics in Trainer)\neval_compute_metrics_fn = partial(\n        compute_metrics, image_processor=image_processor, id2label=id2label, threshold=0.0\n)\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\nfrom transformers import Trainer\n\nmodel_v1_trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    # data_collator=DefaultDataCollator(),\n    # tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: TK - can add a metrics function, just see if model trains first, see here for an example: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160 \n    compute_metrics=eval_compute_metrics_fn\n)\n\nmodel_v1_results = model_v1_trainer.train()\n\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n\n    \n      \n      \n      [1250/1250 10:21, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\nMap\nMap 50\nMap 75\nMap Small\nMap Medium\nMap Large\nMar 1\nMar 10\nMar 100\nMar Small\nMar Medium\nMar Large\nMap Bin\nMap Hand\nMap Not Bin\nMap Not Hand\nMap Not Trash\nMap Trash\nMap Trash Arm\n\n\n\n\n1\n94.271400\n22.388069\n0.162600\n0.238700\n0.171700\n0.000000\n0.006500\n0.166800\n0.225700\n0.361600\n0.439800\n0.000000\n0.123900\n0.462100\n0.389100\n0.411000\n0.000100\n-1.000000\n0.002600\n0.172700\n0.000000\n\n\n2\n26.659600\n13.538839\n0.319100\n0.441800\n0.354600\n0.016700\n0.108700\n0.334500\n0.330200\n0.535500\n0.580400\n0.050000\n0.280700\n0.621200\n0.677600\n0.522400\n0.004500\n-1.000000\n0.126600\n0.583700\n0.000000\n\n\n3\n19.569300\n11.153448\n0.432100\n0.582500\n0.492800\n0.000000\n0.199100\n0.452500\n0.485900\n0.664400\n0.718900\n0.000000\n0.335800\n0.768000\n0.664800\n0.606100\n0.084800\n-1.000000\n0.155600\n0.618100\n0.463500\n\n\n4\n16.692000\n10.025383\n0.488400\n0.666900\n0.586500\n0.000000\n0.220500\n0.508400\n0.531400\n0.686200\n0.744800\n0.000000\n0.350600\n0.793200\n0.719900\n0.615200\n0.051400\n-1.000000\n0.216800\n0.651900\n0.674900\n\n\n5\n15.291500\n9.948028\n0.493500\n0.679500\n0.570400\n0.000000\n0.123900\n0.515300\n0.541100\n0.683500\n0.746100\n0.000000\n0.263100\n0.795600\n0.744300\n0.574000\n0.066300\n-1.000000\n0.203200\n0.611500\n0.761800\n\n\n6\n14.430200\n9.800064\n0.514700\n0.708600\n0.610100\n0.450000\n0.278500\n0.545300\n0.538500\n0.705000\n0.757900\n0.450000\n0.464800\n0.801600\n0.745700\n0.597900\n0.231300\n-1.000000\n0.213900\n0.631700\n0.667600\n\n\n7\n13.600400\n9.477771\n0.512400\n0.706700\n0.594700\n0.350000\n0.230800\n0.537500\n0.535800\n0.681700\n0.745700\n0.350000\n0.435200\n0.794800\n0.770600\n0.584600\n0.133000\n-1.000000\n0.230500\n0.643700\n0.712200\n\n\n8\n12.861100\n9.490835\n0.494900\n0.690200\n0.566400\n0.400000\n0.369700\n0.518200\n0.563600\n0.703700\n0.736200\n0.400000\n0.517000\n0.768500\n0.768500\n0.575900\n0.155100\n-1.000000\n0.230100\n0.644300\n0.595700\n\n\n9\n12.231500\n9.397106\n0.535400\n0.736700\n0.630500\n0.400000\n0.309100\n0.565500\n0.574100\n0.697600\n0.735700\n0.400000\n0.494300\n0.774400\n0.789500\n0.558800\n0.262200\n-1.000000\n0.220600\n0.658900\n0.722400\n\n\n10\n11.796800\n9.421609\n0.524000\n0.730600\n0.605700\n0.400000\n0.260400\n0.550300\n0.548600\n0.707000\n0.731400\n0.400000\n0.555100\n0.762300\n0.780800\n0.522000\n0.226100\n-1.000000\n0.246000\n0.657000\n0.712400\n\n\n11\n11.433900\n9.919123\n0.492800\n0.690100\n0.571300\n0.450000\n0.252100\n0.521700\n0.557700\n0.700600\n0.741600\n0.450000\n0.467600\n0.786200\n0.731700\n0.564800\n0.265900\n-1.000000\n0.215800\n0.603000\n0.575700\n\n\n12\n10.978000\n9.415312\n0.523200\n0.740600\n0.604800\n0.450000\n0.358600\n0.550400\n0.569400\n0.703900\n0.748100\n0.450000\n0.505100\n0.794700\n0.772800\n0.587000\n0.203300\n-1.000000\n0.244400\n0.654000\n0.677600\n\n\n13\n10.580400\n9.315342\n0.554600\n0.741800\n0.615900\n0.400000\n0.360700\n0.587200\n0.586600\n0.737700\n0.772900\n0.400000\n0.511900\n0.818400\n0.783500\n0.575800\n0.237400\n-1.000000\n0.285200\n0.644400\n0.801600\n\n\n14\n10.379200\n9.563961\n0.538300\n0.732000\n0.600900\n0.350000\n0.229900\n0.566500\n0.573700\n0.691200\n0.750700\n0.350000\n0.477800\n0.795000\n0.777400\n0.568600\n0.179700\n-1.000000\n0.260200\n0.632300\n0.811600\n\n\n15\n10.034200\n9.719327\n0.513200\n0.707800\n0.592500\n0.000000\n0.263200\n0.539300\n0.555700\n0.708000\n0.746600\n0.000000\n0.500000\n0.789200\n0.766100\n0.546400\n0.173800\n-1.000000\n0.245900\n0.654800\n0.692400\n\n\n16\n9.834700\n10.211451\n0.485700\n0.657100\n0.544000\n0.000000\n0.304800\n0.509800\n0.541600\n0.696000\n0.722400\n0.000000\n0.446000\n0.763000\n0.771800\n0.448000\n0.150500\n-1.000000\n0.198800\n0.644600\n0.700500\n\n\n17\n9.613700\n9.587269\n0.524600\n0.721200\n0.597500\n0.200000\n0.222500\n0.551300\n0.553100\n0.703600\n0.752900\n0.400000\n0.466500\n0.798800\n0.790200\n0.570800\n0.159500\n-1.000000\n0.228500\n0.640400\n0.758300\n\n\n18\n9.560700\n9.524826\n0.517300\n0.712300\n0.585400\n0.400000\n0.329500\n0.542300\n0.549600\n0.703700\n0.755700\n0.400000\n0.483500\n0.798000\n0.792900\n0.579000\n0.159100\n-1.000000\n0.219800\n0.668200\n0.685000\n\n\n19\n9.260400\n9.823427\n0.526600\n0.737700\n0.596000\n0.400000\n0.229700\n0.551800\n0.571000\n0.707400\n0.748900\n0.400000\n0.460800\n0.792600\n0.760000\n0.563800\n0.190100\n-1.000000\n0.241000\n0.645200\n0.759200\n\n\n20\n9.095100\n9.583308\n0.535600\n0.731400\n0.606100\n0.175000\n0.215300\n0.565400\n0.581600\n0.706100\n0.752000\n0.350000\n0.444900\n0.796000\n0.773600\n0.567400\n0.168100\n-1.000000\n0.254600\n0.653900\n0.795800\n\n\n21\n8.832100\n9.559412\n0.534200\n0.738800\n0.615800\n0.400000\n0.230900\n0.560800\n0.565500\n0.703900\n0.753200\n0.400000\n0.508000\n0.789000\n0.765000\n0.584200\n0.188300\n-1.000000\n0.246000\n0.665100\n0.756700\n\n\n22\n8.656900\n9.645277\n0.516400\n0.718600\n0.593200\n0.350000\n0.224200\n0.542800\n0.563200\n0.698100\n0.737200\n0.350000\n0.458000\n0.778400\n0.764700\n0.577600\n0.181100\n-1.000000\n0.232000\n0.658600\n0.684400\n\n\n23\n8.468600\n9.522078\n0.533100\n0.735000\n0.620500\n0.175000\n0.234500\n0.560200\n0.571800\n0.692000\n0.739200\n0.350000\n0.473300\n0.776600\n0.778900\n0.585500\n0.180900\n-1.000000\n0.236200\n0.659800\n0.757000\n\n\n24\n8.255800\n9.598605\n0.530500\n0.743700\n0.609200\n0.175000\n0.321800\n0.559200\n0.559800\n0.672500\n0.727500\n0.350000\n0.467000\n0.768100\n0.778700\n0.573500\n0.204500\n-1.000000\n0.232600\n0.648300\n0.745300\n\n\n25\n8.133300\n9.596221\n0.519700\n0.727600\n0.593000\n0.150000\n0.216400\n0.548900\n0.565200\n0.683700\n0.718500\n0.300000\n0.457400\n0.759800\n0.775300\n0.579700\n0.201700\n-1.000000\n0.235300\n0.643600\n0.682700\n\n\n\n\n\n\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\nThere were missing keys in the checkpoint model loaded: ['class_embed.0.weight', 'class_embed.0.bias', 'class_embed.1.weight', 'class_embed.1.bias', 'class_embed.2.weight', 'class_embed.2.bias', 'class_embed.3.weight', 'class_embed.3.bias', 'class_embed.4.weight', 'class_embed.4.bias', 'class_embed.5.weight', 'class_embed.5.bias', 'bbox_embed.0.layers.0.weight', 'bbox_embed.0.layers.0.bias', 'bbox_embed.0.layers.1.weight', 'bbox_embed.0.layers.1.bias', 'bbox_embed.0.layers.2.weight', 'bbox_embed.0.layers.2.bias', 'bbox_embed.1.layers.0.weight', 'bbox_embed.1.layers.0.bias', 'bbox_embed.1.layers.1.weight', 'bbox_embed.1.layers.1.bias', 'bbox_embed.1.layers.2.weight', 'bbox_embed.1.layers.2.bias', 'bbox_embed.2.layers.0.weight', 'bbox_embed.2.layers.0.bias', 'bbox_embed.2.layers.1.weight', 'bbox_embed.2.layers.1.bias', 'bbox_embed.2.layers.2.weight', 'bbox_embed.2.layers.2.bias', 'bbox_embed.3.layers.0.weight', 'bbox_embed.3.layers.0.bias', 'bbox_embed.3.layers.1.weight', 'bbox_embed.3.layers.1.bias', 'bbox_embed.3.layers.2.weight', 'bbox_embed.3.layers.2.bias', 'bbox_embed.4.layers.0.weight', 'bbox_embed.4.layers.0.bias', 'bbox_embed.4.layers.1.weight', 'bbox_embed.4.layers.1.bias', 'bbox_embed.4.layers.2.weight', 'bbox_embed.4.layers.2.bias', 'bbox_embed.5.layers.0.weight', 'bbox_embed.5.layers.0.bias', 'bbox_embed.5.layers.1.weight', 'bbox_embed.5.layers.1.bias', 'bbox_embed.5.layers.2.weight', 'bbox_embed.5.layers.2.bias'].\n\n\nUPTOHERE:\n\ngoing through training steps and making sure we end with a model training\nPlot the loss curves + mAP curves (make sure the loss going down, mAP going up)\nTK - if your loss values aren‚Äôt the exact same, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar (e.g.¬†loss going down)\nnotes on training:\n\n25 epochs gets good baseline results\n50 epochs (longer training) gets better results but takes 2x the time (this is a good extension for someone to try)\n\n\n\n# D-FINE - 25 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 91.107000   2.508270    0.103700    0.152200    0.116300    0.000000    0.017100    0.112400    0.175300    0.424200    0.522700    0.000000    0.250000    0.563800    0.354300    0.031800    0.009000    -1.000000   0.004300    0.220600    0.002100\n# 2 41.941000   1.805323    0.244400    0.332400    0.266400    0.000000    0.073300    0.253800    0.312400    0.553300    0.661700    0.000000    0.389800    0.691600    0.663600    0.250200    0.003600    -1.000000   0.025700    0.522100    0.001000\n# 3 34.306800   1.536374    0.370700    0.505300    0.434400    0.000000    0.094200    0.384900    0.459700    0.690300    0.756400    0.000000    0.433000    0.792500    0.701900    0.539200    0.009100    -1.000000   0.085600    0.586000    0.302700\n# 4 30.737200   1.455746    0.373800    0.503300    0.427200    0.003800    0.215600    0.384300    0.489600    0.686500    0.742000    0.050000    0.498900    0.772000    0.773500    0.594400    0.027300    -1.000000   0.059200    0.618400    0.170100\n# 5 29.118000   1.442959    0.446000    0.593300    0.514500    0.070000    0.299600    0.462100    0.514400    0.694200    0.758000    0.350000    0.477800    0.791300    0.730400    0.539900    0.063100    -1.000000   0.116500    0.621700    0.604300\n# 6 27.793200   1.370794    0.445700    0.582800    0.515300    0.045000    0.268000    0.465100    0.490000    0.726400    0.761500    0.200000    0.528400    0.790800    0.774000    0.524300    0.114900    -1.000000   0.094300    0.636100    0.530800\n# 7 27.115600   1.440070    0.422900    0.571800    0.497900    0.000000    0.161800    0.441200    0.484200    0.711400    0.761500    0.000000    0.517000    0.796900    0.740900    0.587900    0.134400    -1.000000   0.083200    0.607300    0.383500\n# 8 26.240500   1.406024    0.444800    0.592000    0.508700    0.175000    0.308000    0.463200    0.483600    0.729100    0.763800    0.350000    0.483000    0.800200    0.771200    0.548000    0.156000    -1.000000   0.060500    0.623500    0.509700\n# 9 25.293300   1.340921    0.525000    0.671600    0.597100    0.000000    0.333900    0.543600    0.532400    0.747200    0.761200    0.000000    0.536400    0.792100    0.795600    0.615800    0.163500    -1.000000   0.074100    0.633700    0.867100\n# 10    24.884900   1.352285    0.503800    0.659700    0.583300    0.075000    0.321200    0.520800    0.516200    0.728100    0.774500    0.300000    0.537500    0.808600    0.784200    0.610600    0.135700    -1.000000   0.065600    0.626700    0.800100\n# 11    24.270800   1.379699    0.525900    0.669000    0.590800    0.100000    0.304100    0.545200    0.531900    0.756500    0.778200    0.300000    0.531800    0.811600    0.757800    0.598700    0.182300    -1.000000   0.067300    0.638400    0.910900\n# 12    23.853900   1.395023    0.492200    0.659300    0.566600    0.000000    0.302800    0.512700    0.504700    0.689900    0.714800    0.000000    0.414800    0.762900    0.756600    0.550500    0.163000    -1.000000   0.068900    0.614400    0.800000\n# 13    23.363000   1.316223    0.509700    0.659000    0.568900    0.000000    0.315300    0.524400    0.526700    0.737300    0.775400    0.000000    0.517000    0.810800    0.787900    0.580600    0.116800    -1.000000   0.065200    0.624500    0.883200\n# 14    22.764800   1.371426    0.500600    0.657400    0.573700    0.000000    0.274800    0.519700    0.521600    0.708400    0.739100    0.000000    0.442600    0.780900    0.771900    0.590000    0.126600    -1.000000   0.087500    0.615800    0.811500\n# 15    22.156500   1.347376    0.506400    0.665200    0.582600    0.000000    0.323600    0.521600    0.548500    0.724500    0.761100    0.000000    0.517000    0.797800    0.765900    0.595800    0.104600    -1.000000   0.080600    0.636000    0.855500\n# 16    21.956600   1.380194    0.492400    0.649200    0.570100    0.000000    0.298700    0.509800    0.524800    0.713100    0.736100    0.000000    0.462500    0.770900    0.763800    0.506800    0.126300    -1.000000   0.098200    0.625500    0.833700\n# 17    21.674800   1.351492    0.485500    0.638800    0.548000    0.066700    0.324500    0.502000    0.540700    0.722700    0.739200    0.200000    0.488600    0.777000    0.770700    0.575300    0.130600    -1.000000   0.100100    0.619100    0.717300\n# 18    21.228200   1.360245    0.508300    0.665300    0.588700    0.000000    0.302100    0.525300    0.559000    0.724900    0.741600    0.000000    0.457400    0.780400    0.757900    0.568100    0.129800    -1.000000   0.096900    0.641400    0.855400\n# 19    20.928200   1.324188    0.516700    0.674800    0.595100    0.000000    0.295100    0.537300    0.554100    0.733500    0.759000    0.000000    0.492600    0.795900    0.766600    0.575700    0.155300    -1.000000   0.115400    0.631800    0.855500\n# 20    20.769900   1.324795    0.497800    0.646500    0.559500    0.000000    0.301900    0.516000    0.564000    0.720600    0.747900    0.000000    0.467000    0.785300    0.780900    0.585100    0.133300    -1.000000   0.108100    0.628800    0.750800\n# 21    20.510100   1.348304    0.519800    0.672100    0.589500    0.000000    0.288800    0.539100    0.559700    0.710400    0.729300    0.000000    0.444300    0.765900    0.767800    0.571400    0.133200    -1.000000   0.108800    0.648600    0.889100\n# 22    20.335800   1.354123    0.507300    0.668300    0.579400    0.000000    0.300700    0.524300    0.557100    0.704400    0.732000    0.000000    0.482400    0.765500    0.769800    0.559100    0.108300    -1.000000   0.108500    0.642800    0.855400\n# 23    20.156100   1.350379    0.531300    0.687900    0.603100    0.000000    0.306600    0.552600    0.562600    0.712900    0.738900    0.000000    0.474400    0.774500    0.763900    0.584200    0.182000    -1.000000   0.116100    0.641800    0.900000\n# 24    19.999300   1.356307    0.503600    0.654700    0.571500    0.000000    0.302700    0.523400    0.565400    0.720400    0.739500    0.000000    0.471000    0.775000    0.761000    0.565100    0.159900    -1.000000   0.116100    0.640600    0.778800\n# 25    19.940100   1.354687    0.503900    0.659300    0.578200    0.000000    0.302900    0.524600    0.565100    0.714500    0.736000    0.000000    0.466500    0.773000    0.761700    0.557500    0.159200    -1.000000   0.121400    0.644500    0.778800\n\n# RT_DETRv2 - 25 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 106.522700  27.522213   0.181500    0.276200    0.198000    0.000000    0.007800    0.187000    0.222000    0.346300    0.401900    0.000000    0.136400    0.421200    0.451700    0.395400    0.000100    -1.000000   0.000900    0.241100    0.000000\n# 2 27.989500   14.414159   0.315500    0.431800    0.354400    0.000000    0.107900    0.325600    0.338700    0.638400    0.723500    0.000000    0.471000    0.758100    0.706500    0.510700    0.008700    -1.000000   0.040800    0.617800    0.008400\n# 3 19.334300   11.301381   0.430100    0.582200    0.489600    0.066700    0.309900    0.442000    0.509200    0.686800    0.756700    0.200000    0.530100    0.796700    0.767400    0.590200    0.019200    -1.000000   0.090300    0.602600    0.511000\n# 4 16.752200   10.458241   0.486800    0.656700    0.567200    0.114300    0.272500    0.503200    0.537900    0.709100    0.760400    0.350000    0.476700    0.794900    0.742800    0.606200    0.035600    -1.000000   0.189100    0.636800    0.710500\n# 5 15.439000   10.241963   0.464600    0.635600    0.531100    0.155000    0.247900    0.485100    0.519800    0.690500    0.743400    0.400000    0.424400    0.780200    0.763400    0.560100    0.075500    -1.000000   0.239700    0.647100    0.502100\n# 6 14.307100   9.926408    0.475500    0.646200    0.526800    0.050000    0.381200    0.504500    0.546200    0.708400    0.751700    0.200000    0.572700    0.784200    0.760500    0.548600    0.151000    -1.000000   0.205300    0.654200    0.533300\n# 7 13.387400   9.970204    0.499900    0.675600    0.570400    0.125000    0.354300    0.523200    0.568100    0.694700    0.736400    0.250000    0.538100    0.778700    0.777000    0.574800    0.107300    -1.000000   0.202000    0.631100    0.707500\n# 8 12.787900   9.690248    0.472400    0.632500    0.555200    0.041700    0.356600    0.495800    0.549800    0.710800    0.748000    0.250000    0.566500    0.781700    0.787500    0.504100    0.131800    -1.000000   0.192000    0.670200    0.548700\n# 9 12.136400   9.937552    0.471300    0.659700    0.513200    0.050000    0.175500    0.498900    0.511100    0.690700    0.714600    0.400000    0.535200    0.740200    0.768400    0.462300    0.156100    -1.000000   0.234400    0.643500    0.563100\n# 10    11.785400   9.650146    0.476500    0.689700    0.517800    0.018900    0.352800    0.505200    0.528100    0.699800    0.735100    0.350000    0.594900    0.760100    0.763700    0.574300    0.206100    -1.000000   0.224600    0.653100    0.437400\n# 11    11.577100   10.183405   0.497800    0.684600    0.591200    0.025000    0.329800    0.525700    0.520900    0.696100    0.725000    0.300000    0.551100    0.753200    0.738200    0.479800    0.160800    -1.000000   0.234600    0.656000    0.717200\n# 12    11.119900   9.595840    0.510200    0.699900    0.573000    0.025000    0.297700    0.545200    0.539100    0.713700    0.753900    0.250000    0.558500    0.781700    0.791500    0.553600    0.230600    -1.000000   0.232600    0.663700    0.589200\n# 13    10.731800   9.746691    0.474300    0.699000    0.493700    0.031600    0.349800    0.500400    0.536300    0.670100    0.704200    0.400000    0.568200    0.726600    0.766100    0.530300    0.159700    -1.000000   0.188500    0.651200    0.549900\n# 14    10.406400   9.911798    0.464100    0.666800    0.511900    0.020500    0.332400    0.486400    0.495500    0.694000    0.738900    0.450000    0.595500    0.764500    0.774000    0.485700    0.080200    -1.000000   0.179600    0.649000    0.616400\n# 15    10.135500   9.764801    0.474300    0.665800    0.537000    0.027300    0.331100    0.503100    0.538800    0.678800    0.719400    0.300000    0.529500    0.751700    0.776700    0.572500    0.146300    -1.000000   0.220600    0.644000    0.485700\n# 16    9.881300    9.829190    0.502800    0.688900    0.581700    0.011100    0.356900    0.530400    0.538700    0.703700    0.736100    0.300000    0.568200    0.762000    0.779700    0.513400    0.178400    -1.000000   0.224900    0.644900    0.675300\n# 17    9.575700    9.957942    0.475500    0.651500    0.554900    0.050000    0.328700    0.505600    0.546200    0.689900    0.727100    0.250000    0.573900    0.751000    0.763300    0.502900    0.174600    -1.000000   0.222100    0.656600    0.533800\n# 18    9.357600    9.972997    0.480500    0.661700    0.563000    0.017100    0.341000    0.510100    0.547000    0.680300    0.708500    0.400000    0.512500    0.742700    0.777500    0.502000    0.166900    -1.000000   0.253400    0.650000    0.533400\n# 19    9.122300    10.006319   0.469600    0.686000    0.495000    0.020800    0.346200    0.498000    0.523600    0.662500    0.711300    0.300000    0.561900    0.737600    0.787700    0.480100    0.174700    -1.000000   0.244500    0.662500    0.468000\n# 20    8.904600    9.944053    0.470700    0.680900    0.501200    0.013600    0.379200    0.501600    0.539200    0.677300    0.712500    0.300000    0.604000    0.733900    0.771300    0.519400    0.175900    -1.000000   0.245400    0.665800    0.446500\n# 21    8.691000    10.012321   0.475400    0.687800    0.498000    0.007400    0.351500    0.504600    0.544200    0.666900    0.715400    0.300000    0.584100    0.743000    0.777300    0.524200    0.179700    -1.000000   0.209200    0.661000    0.501000\n# 22    8.483400    9.927339    0.476200    0.689600    0.488500    0.013800    0.355400    0.506000    0.534400    0.671500    0.727900    0.400000    0.583500    0.753700    0.782400    0.523100    0.178300    -1.000000   0.224700    0.646700    0.501800\n# 23    8.238000    10.017809   0.478900    0.698600    0.488800    0.016700    0.373100    0.506900    0.533100    0.671300    0.715500    0.400000    0.590300    0.743400    0.779100    0.521600    0.177700    -1.000000   0.237600    0.657600    0.500000\n# 24    8.074300    9.924691    0.488100    0.701000    0.523400    0.014800    0.365700    0.517300    0.535800    0.677100    0.720600    0.400000    0.593800    0.748300    0.782300    0.531300    0.167600    -1.000000   0.238600    0.653700    0.554800\n# 25    7.963100    10.016549   0.486500    0.696200    0.514400    0.013300    0.350200    0.514300    0.537400    0.672200    0.708200    0.400000    0.566500    0.733400    0.782600    0.516800    0.168600    -1.000000   0.230000    0.653400    0.567500\n\n# ConditionalDETR - 25 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 12.257200   4.579205    0.000700    0.003100    0.000300    0.000000    0.001100    0.000700    0.005600    0.011000    0.044300    0.000000    0.014800    0.043800    0.003100    0.000000    0.000000    -1.000000   0.000000    0.001000    0.000100\n# 2 3.214800    2.093854    0.012600    0.027700    0.009400    0.000000    0.002300    0.012900    0.027500    0.091400    0.136600    0.000000    0.056800    0.142000    0.066100    0.001500    0.000000    -1.000000   0.001600    0.006700    0.000000\n# 3 2.031300    1.615478    0.022200    0.054700    0.017600    0.000000    0.005100    0.022500    0.051500    0.157800    0.202400    0.000000    0.052300    0.204500    0.107500    0.007300    0.000000    -1.000000   0.000300    0.018000    0.000000\n# 4 1.750000    1.561830    0.060300    0.118400    0.057600    0.000000    0.007500    0.063100    0.097500    0.253500    0.302300    0.000000    0.237500    0.306400    0.228100    0.055700    0.000000    -1.000000   0.001500    0.076500    0.000000\n# 5 1.617800    1.382881    0.064500    0.121800    0.061400    0.000000    0.006800    0.066900    0.130900    0.292900    0.348300    0.000000    0.105700    0.360300    0.209900    0.087600    0.000000    No Log  0.002600    0.086600    0.000000\n# 6 1.510300    1.307172    0.072900    0.132500    0.068500    0.000000    0.009700    0.075700    0.151900    0.299400    0.352800    0.000000    0.112500    0.361600    0.199800    0.117100    0.000000    -1.000000   0.002400    0.118200    0.000000\n# 7 1.405600    1.251348    0.079900    0.130500    0.078700    0.000000    0.017500    0.083700    0.175700    0.310100    0.365800    0.000000    0.056800    0.383100    0.223800    0.048100    0.000000    No Log  0.002600    0.204600    0.000000\n# 8 1.331100    1.159470    0.113300    0.180400    0.120800    0.000000    0.028400    0.116000    0.210500    0.345200    0.392100    0.000000    0.130700    0.403300    0.313500    0.154200    0.000000    No Log  0.006600    0.205600    0.000000\n# 9 1.221300    1.101122    0.144700    0.227600    0.156400    0.025200    0.019500    0.148800    0.232200    0.385000    0.416300    0.025000    0.134100    0.433900    0.377000    0.264400    0.000000    No Log  0.012300    0.214600    0.000000\n# 10    1.179900    1.075704    0.163600    0.247600    0.181500    0.000000    0.038200    0.168100    0.231600    0.387100    0.434300    0.000000    0.164800    0.455400    0.457000    0.255800    0.000000    -1.000000   0.017300    0.251400    0.000000\n# 11    1.145600    1.023341    0.204600    0.295000    0.230600    0.050500    0.039500    0.211200    0.257700    0.425600    0.457900    0.050000    0.142000    0.487100    0.557100    0.334300    0.000600    -1.000000   0.026500    0.309000    0.000000\n# 12    1.136500    1.016237    0.217600    0.319900    0.244700    0.000000    0.035900    0.225000    0.253500    0.431300    0.457300    0.000000    0.202300    0.487200    0.585900    0.347900    0.000700    -1.000000   0.027600    0.343800    0.000000\n# 13    1.117300    0.968450    0.238400    0.348400    0.265800    0.000000    0.046200    0.247500    0.274400    0.443500    0.471100    0.000000    0.294300    0.504300    0.583500    0.394100    0.000400    -1.000000   0.036700    0.415800    0.000000\n# 14    1.022700    0.964383    0.259700    0.384800    0.289100    0.000000    0.067500    0.269300    0.274300    0.475400    0.498700    0.000000    0.267000    0.544700    0.637500    0.454800    0.002400    -1.000000   0.039700    0.424200    0.000000\n# 15    1.039000    0.985401    0.260200    0.394400    0.283300    0.000000    0.049100    0.269700    0.286400    0.515200    0.536000    0.000000    0.185200    0.590000    0.621600    0.450200    0.005300    -1.000000   0.042100    0.441800    0.000500\n# 16    1.012600    0.940276    0.269900    0.411300    0.311300    0.000000    0.073900    0.279600    0.289500    0.504500    0.526500    0.000000    0.272700    0.576900    0.634600    0.460400    0.004900    -1.000000   0.053900    0.465300    0.000000\n# 17    0.928400    0.934266    0.276900    0.413600    0.309300    0.000000    0.070100    0.290400    0.297700    0.590600    0.609800    0.000000    0.308500    0.659700    0.661100    0.472700    0.006000    -1.000000   0.066200    0.452900    0.002500\n# 18    0.939700    0.919036    0.277800    0.417400    0.313000    0.000000    0.082100    0.288300    0.290600    0.634400    0.652700    0.000000    0.318700    0.697400    0.638400    0.485200    0.005000    -1.000000   0.061900    0.470600    0.006000\n# 19    0.860800    0.921640    0.279500    0.424300    0.308700    0.000000    0.068900    0.291900    0.306400    0.627100    0.648800    0.000000    0.263100    0.700300    0.646300    0.490200    0.007300    -1.000000   0.069300    0.459000    0.004700\n# 20    0.888200    0.908211    0.290500    0.435600    0.329600    0.025200    0.066200    0.303200    0.309100    0.641300    0.660500    0.025000    0.282400    0.711400    0.660700    0.519400    0.006700    -1.000000   0.079200    0.471500    0.005800\n# 21    0.865500    0.907514    0.289400    0.429000    0.333000    0.000000    0.080400    0.302600    0.303400    0.650900    0.669600    0.000000    0.304000    0.720300    0.667100    0.504400    0.006100    -1.000000   0.071600    0.480000    0.007100\n# 22    0.841000    0.897333    0.296700    0.437500    0.335400    0.000000    0.087800    0.311200    0.307200    0.651100    0.664800    0.000000    0.281800    0.718600    0.671300    0.534000    0.005100    -1.000000   0.073900    0.488800    0.006800\n# 23    0.821500    0.895820    0.299100    0.441800    0.339100    0.000000    0.087100    0.313200    0.314600    0.651800    0.670400    0.000000    0.336900    0.718500    0.670900    0.548300    0.005400    -1.000000   0.074900    0.488800    0.006400\n# 24    0.798200    0.892997    0.296100    0.441700    0.335200    0.000000    0.075000    0.310400    0.310500    0.638100    0.656000    0.000000    0.306800    0.705000    0.670700    0.534100    0.005300    -1.000000   0.076800    0.483200    0.006700\n# 25    0.786300    0.894873    0.296400    0.442700    0.335400    0.000000    0.075000    0.311800    0.309700    0.635700    0.655900    0.000000    0.293700    0.707600    0.671900    0.535700    0.005100    -1.000000   0.076700    0.482500    0.006400\n\n# # 50 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 61.998300   29.889622   0.000300    0.001000    0.000100    0.000000    0.000000    0.000500    0.002800    0.011600    0.029300    0.000000    0.000000    0.030400    0.000500    0.000400    0.000000    -1.000000   0.000000    0.000600    0.000000\n# 2 11.920100   3.913074    0.000000    0.000100    0.000000    0.000000    0.000000    0.000000    0.000000    0.000700    0.000700    0.000000    0.000000    0.000800    0.000000    0.000000    0.000000    No Log  0.000000    0.000100    0.000000\n# 3 2.872600    1.999650    0.017200    0.042100    0.012400    0.000000    0.004700    0.017500    0.029800    0.148200    0.201100    0.000000    0.036400    0.206600    0.081900    0.005500    0.000000    -1.000000   0.000300    0.015400    0.000000\n# 4 2.044500    1.702604    0.019800    0.050300    0.013200    0.000000    0.004700    0.020800    0.051700    0.157200    0.222200    0.000000    0.033000    0.228900    0.038300    0.044200    0.000000    -1.000000   0.000100    0.036300    0.000000\n# 5 1.773500    1.489281    0.033800    0.075200    0.028200    0.000000    0.010100    0.035100    0.081800    0.210300    0.265600    0.000000    0.064800    0.272200    0.106600    0.047500    0.000000    No Log  0.000700    0.047800    0.000000\n# 6 1.651000    1.427438    0.055900    0.104200    0.057300    0.000000    0.012600    0.056700    0.117200    0.257700    0.323200    0.000000    0.072700    0.330300    0.178000    0.098700    0.000000    No Log  0.000000    0.058800    0.000000\n# 7 1.555300    1.418692    0.062700    0.115600    0.059800    0.000000    0.018700    0.063600    0.124000    0.273100    0.320400    0.000000    0.044300    0.328100    0.158000    0.141500    0.000000    -1.000000   0.000100    0.076300    0.000000\n# 8 1.488100    1.246883    0.067600    0.117500    0.065600    0.000000    0.021800    0.068800    0.155800    0.306300    0.359700    0.000000    0.088600    0.375000    0.198000    0.094800    0.000000    No Log  0.001500    0.111000    0.000000\n# 9 1.410900    1.337418    0.068200    0.128300    0.065800    0.000000    0.019200    0.068700    0.161000    0.282400    0.334600    0.000000    0.108000    0.340400    0.197300    0.139100    0.000000    No Log  0.000700    0.072200    0.000000\n# 10    1.405900    1.198891    0.097000    0.160900    0.100100    0.000000    0.020400    0.099000    0.201600    0.327300    0.374400    0.000000    0.127300    0.384000    0.243500    0.221500    0.000000    No Log  0.001900    0.115300    0.000000\n# 11    1.339600    1.184751    0.093200    0.147700    0.100400    0.000000    0.023500    0.095200    0.199100    0.342100    0.393800    0.000000    0.089800    0.412500    0.233400    0.193300    0.000000    No Log  0.005000    0.127800    0.000000\n# 12    1.322600    1.155094    0.129100    0.203800    0.138700    0.000000    0.013500    0.131800    0.229300    0.355500    0.403500    0.000000    0.109100    0.422200    0.378100    0.266500    0.000000    -1.000000   0.006700    0.123400    0.000000\n# 13    1.328200    1.137684    0.124100    0.190000    0.129300    0.000000    0.013200    0.127800    0.224100    0.372900    0.419500    0.000000    0.106800    0.442500    0.330900    0.229900    0.000000    No Log  0.010100    0.173800    0.000000\n# 14    1.207300    1.071396    0.163700    0.243600    0.174900    0.000000    0.036600    0.167900    0.241100    0.390200    0.431400    0.000000    0.125000    0.457400    0.425600    0.336300    0.000000    No Log  0.013100    0.207000    0.000000\n# 15    1.230200    1.066224    0.176400    0.271200    0.190900    0.000000    0.044600    0.180000    0.242400    0.379000    0.424400    0.000000    0.119300    0.446900    0.477700    0.363600    0.000000    No Log  0.010100    0.207200    0.000000\n# 16    1.216300    1.033326    0.212500    0.331700    0.217800    0.000000    0.050400    0.217400    0.256500    0.406400    0.438000    0.000000    0.331800    0.461300    0.539800    0.450800    0.000000    -1.000000   0.018300    0.265900    0.000000\n# 17    1.102900    0.971974    0.242100    0.366900    0.271200    0.000000    0.061100    0.249300    0.283700    0.445900    0.472900    0.000000    0.286400    0.505500    0.601400    0.480600    0.000800    -1.000000   0.046000    0.324100    0.000000\n# 18    1.118400    0.970455    0.259500    0.387200    0.285700    0.000000    0.092200    0.266500    0.292000    0.451300    0.478300    0.000000    0.301100    0.511800    0.607900    0.504600    0.000700    -1.000000   0.043900    0.399800    0.000000\n# 19    1.042000    0.967601    0.259800    0.395300    0.279900    0.000000    0.076400    0.267100    0.287500    0.507200    0.530000    0.000000    0.220500    0.569900    0.596500    0.509700    0.002400    -1.000000   0.048600    0.400700    0.001000\n# 20    1.064600    0.944465    0.273800    0.412100    0.298800    0.025200    0.087900    0.282700    0.291900    0.532800    0.558100    0.025000    0.266500    0.595900    0.630500    0.485800    0.002400    -1.000000   0.078400    0.443900    0.002100\n# 21    1.028700    0.944142    0.281000    0.419900    0.313000    0.000000    0.085900    0.291500    0.334500    0.611100    0.634500    0.000000    0.323900    0.672900    0.650000    0.486900    0.004900    -1.000000   0.064900    0.473900    0.005300\n# 22    0.997400    0.932104    0.284800    0.432100    0.309500    0.075700    0.082800    0.294500    0.307500    0.623800    0.642300    0.075000    0.280100    0.680400    0.662000    0.490000    0.005500    -1.000000   0.070900    0.474300    0.006200\n# 23    0.976200    0.916920    0.296600    0.447800    0.331300    0.050500    0.106500    0.307100    0.440900    0.608600    0.625300    0.050000    0.296000    0.661600    0.652400    0.522800    0.005000    -1.000000   0.086600    0.506100    0.006700\n# 24    0.910200    0.926796    0.302600    0.454600    0.333800    0.000000    0.100200    0.312900    0.394900    0.614900    0.632800    0.000000    0.296600    0.673000    0.676300    0.529700    0.004300    -1.000000   0.093100    0.507500    0.005100\n# 25    0.856500    0.927848    0.298400    0.452700    0.333100    0.025200    0.102300    0.309900    0.305100    0.596100    0.628000    0.025000    0.294900    0.665000    0.659500    0.518100    0.004400    -1.000000   0.094800    0.508600    0.005200\n# 26    0.775300    0.911072    0.299500    0.458800    0.331300    0.025200    0.104800    0.311200    0.309600    0.596300    0.625900    0.025000    0.329000    0.663900    0.669500    0.537500    0.004000    -1.000000   0.077300    0.503100    0.005500\n# 27    0.750800    0.904915    0.304500    0.449700    0.336000    0.041700    0.116300    0.314500    0.365000    0.611300    0.642400    0.050000    0.311900    0.677100    0.681200    0.524300    0.004000    -1.000000   0.077200    0.532100    0.007900\n# 28    0.719000    0.896321    0.302000    0.445200    0.328900    0.050500    0.105400    0.313600    0.402800    0.601200    0.632200    0.050000    0.341500    0.670200    0.690700    0.518200    0.005000    -1.000000   0.089500    0.500900    0.007500\n# 29    0.696800    0.876628    0.312700    0.465100    0.339100    0.025200    0.110800    0.325400    0.324300    0.636000    0.651200    0.025000    0.314200    0.687500    0.702100    0.528600    0.004600    -1.000000   0.107600    0.524600    0.008700\n# 30    0.673600    0.893076    0.306200    0.459600    0.340800    0.000000    0.105400    0.319800    0.397700    0.622300    0.637500    0.000000    0.248300    0.686800    0.684300    0.527800    0.005400    -1.000000   0.104100    0.507100    0.008400\n# 31    0.656000    0.880665    0.317400    0.466100    0.355800    0.101000    0.127100    0.331400    0.407000    0.640700    0.653900    0.100000    0.283000    0.699900    0.715900    0.525300    0.007600    -1.000000   0.107800    0.540300    0.007500\n# 32    0.641600    0.881308    0.319100    0.469200    0.351600    0.050500    0.116600    0.335300    0.419000    0.631700    0.646500    0.050000    0.302300    0.687800    0.694800    0.541000    0.008700    -1.000000   0.115100    0.538300    0.016900\n# 33    0.630900    0.872384    0.321800    0.483500    0.348600    0.025200    0.118400    0.337300    0.375800    0.631200    0.642800    0.025000    0.321000    0.686500    0.713900    0.543200    0.006600    -1.000000   0.125400    0.534800    0.006800\n# 34    0.601500    0.867039    0.322600    0.474200    0.365000    0.025200    0.122200    0.338900    0.374300    0.636800    0.654000    0.025000    0.390900    0.689400    0.714800    0.531500    0.006300    -1.000000   0.127600    0.548800    0.006700\n# 35    0.589100    0.865702    0.325600    0.477700    0.359800    0.012600    0.124500    0.340300    0.419100    0.631200    0.640800    0.025000    0.342000    0.679900    0.713000    0.555900    0.008400    -1.000000   0.127000    0.537900    0.011500\n# 36    0.570200    0.863400    0.329900    0.487600    0.367800    0.000000    0.120900    0.344800    0.413700    0.626100    0.635300    0.000000    0.330700    0.676700    0.732300    0.562100    0.008200    -1.000000   0.135800    0.531900    0.009000\n# 37    0.572800    0.867819    0.334600    0.490000    0.375500    0.000000    0.124800    0.350600    0.406900    0.620100    0.634700    0.000000    0.353400    0.679100    0.724500    0.571400    0.011300    -1.000000   0.144700    0.547700    0.007600\n# 38    0.551600    0.878277    0.328400    0.489500    0.356200    0.025200    0.115700    0.344700    0.419600    0.624900    0.637700    0.025000    0.373900    0.678300    0.715600    0.558400    0.006800    -1.000000   0.154000    0.527100    0.008400\n# 39    0.544900    0.875394    0.327500    0.482600    0.367100    0.075700    0.130200    0.344400    0.379400    0.629200    0.641100    0.075000    0.383000    0.676000    0.723600    0.541600    0.008400    -1.000000   0.146200    0.536900    0.008500\n# 40    0.526600    0.868821    0.330400    0.486800    0.360500    0.050000    0.143700    0.346700    0.380400    0.628400    0.638700    0.050000    0.355700    0.676300    0.723500    0.542100    0.011400    -1.000000   0.160700    0.534000    0.010600\n# 41    0.517000    0.870999    0.335300    0.491700    0.364400    0.025200    0.114200    0.352700    0.433600    0.626100    0.634300    0.025000    0.331800    0.669300    0.731000    0.554100    0.012400    -1.000000   0.160300    0.541300    0.012600\n# 42    0.495300    0.876202    0.334900    0.492200    0.367800    0.012600    0.123700    0.352400    0.455700    0.621900    0.637400    0.025000    0.359100    0.677800    0.728100    0.557000    0.018100    -1.000000   0.155300    0.536000    0.015200\n# 43    0.494200    0.860925    0.337400    0.497000    0.368300    0.050000    0.122900    0.354100    0.426900    0.619600    0.634000    0.050000    0.375600    0.667600    0.736100    0.546500    0.015700    -1.000000   0.163500    0.551300    0.011600\n# 44    0.490000    0.880336    0.336900    0.498100    0.373100    0.000000    0.118500    0.355300    0.449600    0.625400    0.633400    0.000000    0.312500    0.673300    0.728800    0.546800    0.027900    -1.000000   0.160900    0.539500    0.017500\n# 45    0.476800    0.873949    0.338300    0.497100    0.370800    0.000000    0.122000    0.357300    0.448100    0.621400    0.632500    0.000000    0.343200    0.672700    0.724400    0.557100    0.022300    -1.000000   0.168200    0.541900    0.015900\n# 46    0.476600    0.881447    0.335800    0.494500    0.368600    0.000000    0.119000    0.353900    0.455400    0.621800    0.637500    0.000000    0.305700    0.681400    0.729700    0.550700    0.020600    -1.000000   0.163800    0.533800    0.016400\n# 47    0.468400    0.881990    0.334900    0.498200    0.366200    0.000000    0.119200    0.354700    0.449900    0.616500    0.630500    0.000000    0.325600    0.674500    0.723700    0.545300    0.022100    -1.000000   0.173100    0.530000    0.015300\n# 48    0.463700    0.880277    0.337800    0.497900    0.371900    0.000000    0.122900    0.356800    0.460000    0.625600    0.633100    0.000000    0.322200    0.674500    0.724000    0.555300    0.021900    -1.000000   0.175600    0.533600    0.016500\n# 49    0.458200    0.878279    0.338000    0.495400    0.369900    0.000000    0.123000    0.356500    0.461000    0.629700    0.637300    0.000000    0.336400    0.677500    0.727100    0.553400    0.018100    -1.000000   0.174100    0.538700    0.016400\n# 50    0.453200    0.873663    0.340100    0.499100    0.372300    0.000000    0.122000    0.359300    0.462100    0.630300    0.639900    0.000000    0.373300    0.678000    0.729100    0.553300    0.028000    -1.000000   0.173400    0.538800    0.017700\n\n\nTK - Plot loss curves\nTK - Note: May get an error at the beginning where a box is predicted a negative output. This will break training as boxes are expected to be positive floats."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---making-predictions-on-the-test-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---making-predictions-on-the-test-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "15 TK - Making predictions on the test dataset",
    "text": "15 TK - Making predictions on the test dataset\nNotes: - Predicting on the whole test dataset only returns a single batch - e.g.¬†test_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"]) - Can just predict on samples individually?\n\nprocessed_dataset[\"test\"][0]\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n{'pixel_values': tensor([[[0.2471, 0.3059, 0.3255,  ..., 0.0471, 0.0863, 0.2196],\n          [0.1882, 0.2078, 0.3294,  ..., 0.0471, 0.1608, 0.4157],\n          [0.1490, 0.1569, 0.2980,  ..., 0.0745, 0.3216, 0.3490],\n          ...,\n          [0.7843, 0.7922, 0.7804,  ..., 0.4784, 0.3137, 0.2745],\n          [0.7765, 0.8000, 0.7922,  ..., 0.4980, 0.4392, 0.3765],\n          [0.7725, 0.7804, 0.8039,  ..., 0.5098, 0.4902, 0.4549]],\n \n         [[0.3176, 0.3725, 0.3843,  ..., 0.0745, 0.1137, 0.2471],\n          [0.2627, 0.2745, 0.3882,  ..., 0.0784, 0.1843, 0.4431],\n          [0.2196, 0.2235, 0.3569,  ..., 0.1020, 0.3490, 0.3765],\n          ...,\n          [0.0706, 0.0784, 0.0667,  ..., 0.5216, 0.3569, 0.3059],\n          [0.0627, 0.0863, 0.0784,  ..., 0.5412, 0.4863, 0.4157],\n          [0.0588, 0.0667, 0.0902,  ..., 0.5529, 0.5412, 0.5020]],\n \n         [[0.1529, 0.2235, 0.2627,  ..., 0.0275, 0.0745, 0.2157],\n          [0.0902, 0.1216, 0.2588,  ..., 0.0314, 0.1529, 0.4039],\n          [0.0314, 0.0588, 0.2157,  ..., 0.0627, 0.3020, 0.3294],\n          ...,\n          [0.1176, 0.1255, 0.1137,  ..., 0.2784, 0.1412, 0.1451],\n          [0.1098, 0.1333, 0.1255,  ..., 0.3020, 0.2314, 0.1882],\n          [0.1059, 0.1137, 0.1373,  ..., 0.2941, 0.2471, 0.2157]]]),\n 'labels': {'size': tensor([640, 640]), 'image_id': tensor([61]), 'class_labels': tensor([4, 5, 1, 0]), 'boxes': tensor([[0.2104, 0.8563, 0.2855, 0.2720],\n         [0.4194, 0.4927, 0.2398, 0.1785],\n         [0.3610, 0.6227, 0.2706, 0.2330],\n         [0.4974, 0.4785, 0.3829, 0.3820]]), 'area': tensor([31813.8730, 17533.5664, 25824.1211, 59906.5469]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\n\n# Make predictions with trainer containing trained model\ntest_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"])\n# test_dataset_preds\n\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n\n\n\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\nUnused or unrecognized kwargs: masks_path, annotations.\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/torchmetrics/utilities/prints.py:43: UserWarning: Encountered more than 100 detections in a single image. This means that certain detections with the lowest scores will be ignored, that may have an undesirable impact on performance. Please consider adjusting the `max_detection_threshold` to suit your use case. To disable this warning, set attribute class `warn_on_many_detections=False`, after initializing the metric.\n  warnings.warn(*args, **kwargs)  # noqa: B028\n\n\n\nprocessed_dataset[\"test\"]\n\nDataset({\n    features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n    num_rows: 224\n})\n\n\n\ntest_dataset_preds.predictions[0]\n\n({'loss_vfl': array(0.53962564, dtype=float32),\n  'loss_bbox': array(0.2898195, dtype=float32),\n  'loss_giou': array(0.2661645, dtype=float32),\n  'loss_vfl_aux_0': array(0.55760366, dtype=float32),\n  'loss_bbox_aux_0': array(0.3426614, dtype=float32),\n  'loss_giou_aux_0': array(0.30130014, dtype=float32),\n  'loss_vfl_aux_1': array(0.60980296, dtype=float32),\n  'loss_bbox_aux_1': array(0.32243854, dtype=float32),\n  'loss_giou_aux_1': array(0.2596088, dtype=float32),\n  'loss_vfl_aux_2': array(0.7438437, dtype=float32),\n  'loss_bbox_aux_2': array(0.30804002, dtype=float32),\n  'loss_giou_aux_2': array(0.28803477, dtype=float32),\n  'loss_vfl_aux_3': array(0.5660429, dtype=float32),\n  'loss_bbox_aux_3': array(0.2987954, dtype=float32),\n  'loss_giou_aux_3': array(0.27542514, dtype=float32),\n  'loss_vfl_aux_4': array(0.5469786, dtype=float32),\n  'loss_bbox_aux_4': array(0.2801609, dtype=float32),\n  'loss_giou_aux_4': array(0.2757868, dtype=float32),\n  'loss_vfl_aux_5': array(0.65376776, dtype=float32),\n  'loss_bbox_aux_5': array(0.3891983, dtype=float32),\n  'loss_giou_aux_5': array(0.3351359, dtype=float32)},\n array([[[-3.3652344 ,  0.2734375 , -3.625     , ..., -2.4316406 ,\n          -3.7617188 , -4.9609375 ],\n         [-3.4042969 , -3.0488281 , -3.8515625 , ..., -3.8242188 ,\n           1.9501953 , -3.2402344 ],\n         [ 1.625     , -3.5371094 , -3.5332031 , ..., -3.9765625 ,\n          -2.6191406 , -3.8105469 ],\n         ...,\n         [-3.5605469 , -4.390625  , -4.40625   , ..., -3.7988281 ,\n          -4.1445312 , -4.5078125 ],\n         [-3.1269531 , -3.9296875 , -4.5273438 , ..., -3.7597656 ,\n          -3.6933594 , -4.2773438 ],\n         [-4.1445312 , -3.625     , -4.8671875 , ..., -3.1347656 ,\n          -3.8867188 , -4.515625  ]],\n \n        [[ 1.9306641 , -3.328125  , -2.8964844 , ..., -3.1933594 ,\n          -2.4296875 , -3.4824219 ],\n         [-2.9707031 , -3.4726562 , -3.2773438 , ...,  1.4472656 ,\n          -2.2734375 , -3.5605469 ],\n         [-2.8242188 , -3.4960938 , -3.0273438 , ...,  0.12194824,\n          -2.7148438 , -3.8066406 ],\n         ...,\n         [-2.484375  , -3.75      , -3.5546875 , ..., -3.5195312 ,\n          -3.6601562 , -4.1601562 ],\n         [-3.0996094 , -4.0429688 , -3.7050781 , ..., -3.46875   ,\n          -3.8984375 , -4.078125  ],\n         [-3.7285156 , -4.2695312 , -3.3144531 , ..., -3.0058594 ,\n          -4.0507812 , -4.1289062 ]],\n \n        [[ 2.4082031 , -3.9960938 , -3.4882812 , ..., -4.3007812 ,\n          -2.1757812 , -3.265625  ],\n         [-3.0644531 , -2.796875  , -3.6191406 , ..., -2.8984375 ,\n           0.59765625, -3.1640625 ],\n         [-2.3808594 , -2.140625  , -2.0253906 , ..., -1.3955078 ,\n          -1.84375   ,  0.4321289 ],\n         ...,\n         [-3.6132812 , -4.0585938 , -4.3085938 , ..., -3.1757812 ,\n          -4.1445312 , -4.46875   ],\n         [-4.1523438 , -3.9882812 , -4.265625  , ..., -3.4101562 ,\n          -4.4414062 , -4.453125  ],\n         [-3.8378906 , -4.1757812 , -4.1640625 , ..., -3.25      ,\n          -4.0976562 , -4.328125  ]],\n \n        ...,\n \n        [[ 2.0507812 , -3.3808594 , -3.3378906 , ..., -4.171875  ,\n          -3.1015625 , -3.5371094 ],\n         [-1.7998047 , -3.203125  ,  0.55810547, ..., -2.1660156 ,\n          -2.890625  , -3.9257812 ],\n         [-3.2929688 , -3.3183594 , -2.4492188 , ..., -2.3085938 ,\n          -3.3125    , -4.1679688 ],\n         ...,\n         [-2.6953125 , -3.5429688 , -4.0117188 , ..., -3.6113281 ,\n          -3.3359375 , -4.0859375 ],\n         [-3.5136719 , -3.9726562 , -3.5976562 , ..., -2.1855469 ,\n          -4.28125   , -4.0859375 ],\n         [-4.0273438 , -4.359375  , -3.7929688 , ..., -2.6933594 ,\n          -4.2226562 , -4.375     ]],\n \n        [[-2.9882812 ,  0.39794922, -3.7792969 , ..., -2.9980469 ,\n          -3.4160156 , -4.8242188 ],\n         [-3.921875  , -3.6738281 , -3.6777344 , ..., -3.8183594 ,\n           1.2431641 , -3.6289062 ],\n         [ 0.48754883, -3.6191406 , -3.9082031 , ..., -4.28125   ,\n          -2.171875  , -3.8828125 ],\n         ...,\n         [-3.5957031 , -4.0195312 , -4.1796875 , ..., -3.5273438 ,\n          -3.6308594 , -4.4257812 ],\n         [-4.7148438 , -3.625     , -4.359375  , ..., -2.8261719 ,\n          -4.1757812 , -4.5703125 ],\n         [-2.9316406 , -4.1992188 , -3.9882812 , ..., -3.8378906 ,\n          -3.8164062 , -4.2382812 ]],\n \n        [[ 2.015625  , -3.6347656 , -3.5878906 , ..., -4.5625    ,\n          -2.625     , -3.8789062 ],\n         [-3.0351562 ,  0.5053711 , -3.2402344 , ..., -2.4980469 ,\n          -2.890625  , -4.6328125 ],\n         [-2.8300781 , -3.2441406 , -2.5410156 , ..., -2.5859375 ,\n           1.3857422 , -3.0488281 ],\n         ...,\n         [-3.515625  , -3.9628906 , -4.4453125 , ..., -3.8164062 ,\n          -3.7929688 , -4.75      ],\n         [-4.1484375 , -4.484375  , -4.3398438 , ..., -3.4726562 ,\n          -4.1875    , -4.2226562 ],\n         [-3.0449219 , -3.9257812 , -4.1328125 , ..., -3.8417969 ,\n          -3.9082031 , -4.3242188 ]]], shape=(16, 300, 7), dtype=float32),\n array([[[0.3545475 , 0.6253657 , 0.25127468, 0.23716289],\n         [0.4160637 , 0.49009413, 0.24149577, 0.18616608],\n         [0.49561295, 0.4797956 , 0.391653  , 0.3629966 ],\n         ...,\n         [0.6576055 , 0.41758588, 0.20133723, 0.17660202],\n         [0.38170066, 0.44475606, 0.34929216, 0.271252  ],\n         [0.22298029, 0.70357454, 0.14896782, 0.10731769]],\n \n        [[0.39710423, 0.56077254, 0.6234018 , 0.6999533 ],\n         [0.48153946, 0.59262854, 0.24078272, 0.23451613],\n         [0.8485856 , 0.5149935 , 0.18214302, 0.19277552],\n         ...,\n         [0.7383459 , 0.29240757, 0.4858959 , 0.17331816],\n         [0.7720869 , 0.24256663, 0.39806706, 0.13905016],\n         [0.76454854, 0.16357112, 0.41482377, 0.13746136]],\n \n        [[0.41320205, 0.66023844, 0.63216954, 0.4803571 ],\n         [0.48092586, 0.6089334 , 0.1747844 , 0.09317635],\n         [0.6986897 , 0.78145844, 0.56723946, 0.42123163],\n         ...,\n         [0.15165944, 0.81609786, 0.19057494, 0.1905519 ],\n         [0.25633803, 0.9524929 , 0.159324  , 0.0882031 ],\n         [0.30785477, 0.969274  , 0.09572977, 0.05685391]],\n \n        ...,\n \n        [[0.5101083 , 0.58759135, 0.35915744, 0.33912703],\n         [0.73180944, 0.7158503 , 0.33845183, 0.3209919 ],\n         [0.0978565 , 0.38979974, 0.17788754, 0.16291249],\n         ...,\n         [0.50885767, 0.5680078 , 0.33947423, 0.2970531 ],\n         [0.906145  , 0.24651359, 0.20719016, 0.22557288],\n         [0.918638  , 0.34398437, 0.15143642, 0.39561248]],\n \n        [[0.76701415, 0.71106637, 0.45227653, 0.5534628 ],\n         [0.5370797 , 0.48441383, 0.46039551, 0.32781777],\n         [0.50024784, 0.5172603 , 0.98656   , 0.9414268 ],\n         ...,\n         [0.38655308, 0.79725903, 0.21526985, 0.09715201],\n         [0.793008  , 0.9207939 , 0.10165431, 0.08658209],\n         [0.76987356, 0.5296136 , 0.44592062, 0.9004081 ]],\n \n        [[0.6413262 , 0.54934305, 0.639204  , 0.50524354],\n         [0.3788263 , 0.65705764, 0.21500516, 0.22098213],\n         [0.49143267, 0.55775386, 0.16916612, 0.13498281],\n         ...,\n         [0.77371395, 0.4534409 , 0.30730808, 0.18640053],\n         [0.08963876, 0.32454035, 0.11323468, 0.16299354],\n         [0.6150743 , 0.32994288, 0.45205468, 0.10275634]]],\n       shape=(16, 300, 4), dtype=float32),\n [{'logits': array([[[-1.9853516 ,  2.3222656 , -2.8046875 , ..., -1.9326172 ,\n            -2.1894531 , -3.3828125 ],\n           [-1.0009766 , -2.1386719 , -2.2480469 , ..., -2.6171875 ,\n             2.7695312 , -2.0097656 ],\n           [ 2.8417969 , -1.5478516 , -1.5859375 , ..., -2.6503906 ,\n            -1.6826172 , -2.0800781 ],\n           ...,\n           [-4.53125   , -5.6914062 , -4.8945312 , ..., -4.703125  ,\n            -4.09375   , -4.484375  ],\n           [-4.3710938 , -4.3515625 , -4.0546875 , ..., -4.3515625 ,\n            -3.9121094 , -3.6660156 ],\n           [-4.8046875 , -4.65625   , -4.5703125 , ..., -3.5253906 ,\n            -4.6757812 , -4.8867188 ]],\n   \n          [[ 2.984375  , -2.0664062 , -1.8496094 , ..., -2.515625  ,\n            -2.9628906 , -1.8642578 ],\n           [-1.9082031 , -1.4833984 , -3.0351562 , ...,  2.1015625 ,\n            -1.8486328 , -2.9804688 ],\n           [-2.0390625 , -2.6816406 , -2.1875    , ...,  1.3564453 ,\n            -2.2460938 , -3.0800781 ],\n           ...,\n           [-3.7539062 , -4.3476562 , -4.2773438 , ..., -4.2109375 ,\n            -3.9804688 , -4.3710938 ],\n           [-4.0429688 , -5.6757812 , -4.71875   , ..., -4.1835938 ,\n            -4.53125   , -4.359375  ],\n           [-4.921875  , -5.8984375 , -4.0585938 , ..., -3.8671875 ,\n            -4.65625   , -4.1796875 ]],\n   \n          [[ 2.8398438 , -1.7851562 , -2.4257812 , ..., -3.2011719 ,\n            -2.4492188 , -2.0214844 ],\n           [-1.8515625 , -2.1933594 , -2.7949219 , ..., -2.6835938 ,\n             1.9335938 , -2.34375   ],\n           [-1.8447266 , -0.8730469 , -2.1679688 , ..., -0.67529297,\n            -0.84277344,  0.46411133],\n           ...,\n           [-4.5820312 , -5.265625  , -4.3476562 , ..., -3.7519531 ,\n            -4.3710938 , -4.4335938 ],\n           [-5.0039062 , -4.3320312 , -4.0898438 , ..., -3.6269531 ,\n            -4.3789062 , -5.0078125 ],\n           [-5.1640625 , -5.2460938 , -4.5664062 , ..., -3.6894531 ,\n            -4.6640625 , -5.1953125 ]],\n   \n          ...,\n   \n          [[ 3.1464844 , -1.7158203 , -1.8457031 , ..., -2.7675781 ,\n            -1.8535156 , -3.0175781 ],\n           [-1.3066406 , -3.4472656 ,  1.1699219 , ..., -0.44604492,\n            -1.3583984 , -1.8076172 ],\n           [-3.7207031 , -4.1015625 , -1.1660156 , ..., -1.1445312 ,\n            -3.5234375 , -2.8886719 ],\n           ...,\n           [-3.7734375 , -4.7226562 , -4.1484375 , ..., -4.6367188 ,\n            -4.5390625 , -4.1914062 ],\n           [-3.7714844 , -5.1132812 , -3.2714844 , ..., -4.4023438 ,\n            -4.7695312 , -3.6855469 ],\n           [-4.0507812 , -5.7421875 , -3.8085938 , ..., -3.0722656 ,\n            -4.9375    , -3.640625  ]],\n   \n          [[-1.7978516 ,  2.703125  , -3.2324219 , ..., -1.5966797 ,\n            -2.7070312 , -3.1367188 ],\n           [-1.0488281 , -3.4042969 , -3.7089844 , ..., -3.2910156 ,\n             1.9013672 , -2.1230469 ],\n           [-0.36010742, -4.1953125 , -3.0039062 , ..., -4.2148438 ,\n            -3.8789062 , -3.6464844 ],\n           ...,\n           [-5.5546875 , -5.0742188 , -4.7265625 , ..., -3.9824219 ,\n            -4.0546875 , -4.7304688 ],\n           [-5.4609375 , -4.46875   , -3.8789062 , ..., -2.8945312 ,\n            -4.53125   , -5.2382812 ],\n           [-4.015625  , -4.2265625 , -3.3964844 , ..., -4.4179688 ,\n            -4.1796875 , -4.0820312 ]],\n   \n          [[ 2.8847656 , -1.3378906 , -2.7949219 , ..., -3.0234375 ,\n            -2.8496094 , -2.0214844 ],\n           [-2.6855469 ,  1.9462891 , -3.1191406 , ..., -2.3398438 ,\n            -1.9228516 , -3.5859375 ],\n           [-1.1845703 , -2.5683594 , -2.1113281 , ..., -2.0488281 ,\n             2.2324219 , -2.375     ],\n           ...,\n           [-5.140625  , -5.3554688 , -5.3007812 , ..., -4.1523438 ,\n            -4.453125  , -4.5507812 ],\n           [-4.5429688 , -5.8984375 , -4.2695312 , ..., -3.9785156 ,\n            -4.8828125 , -4.3398438 ],\n           [-4.59375   , -6.0625    , -4.546875  , ..., -4.6875    ,\n            -4.5       , -4.1953125 ]]], shape=(16, 300, 7), dtype=float32),\n   'pred_boxes': array([[[0.35435694, 0.6249514 , 0.2502482 , 0.22993702],\n           [0.41518235, 0.49140674, 0.24059838, 0.19183773],\n           [0.49236196, 0.48192343, 0.3943533 , 0.36140347],\n           ...,\n           [0.7029912 , 0.45585653, 0.12930864, 0.12858197],\n           [0.30672416, 0.40149206, 0.22743365, 0.20048599],\n           [0.2067063 , 0.6912856 , 0.10688079, 0.06481856]],\n   \n          [[0.40096813, 0.5627922 , 0.6260663 , 0.6918157 ],\n           [0.4820535 , 0.5931357 , 0.24593523, 0.23686035],\n           [0.85052127, 0.5142892 , 0.18308258, 0.19400206],\n           ...,\n           [0.7147072 , 0.2978133 , 0.39918128, 0.17735137],\n           [0.83049697, 0.24309783, 0.21883954, 0.14256218],\n           [0.7947366 , 0.13399993, 0.356222  , 0.08794962]],\n   \n          [[0.4112225 , 0.66011614, 0.6170794 , 0.47285017],\n           [0.47842214, 0.6069545 , 0.15949911, 0.08073469],\n           [0.7106705 , 0.7862102 , 0.5538515 , 0.41154987],\n           ...,\n           [0.12758456, 0.79524916, 0.11638255, 0.12013083],\n           [0.2798237 , 0.97028965, 0.09284862, 0.05122883],\n           [0.3101231 , 0.9783015 , 0.07054484, 0.04451005]],\n   \n          ...,\n   \n          [[0.508921  , 0.58653677, 0.352997  , 0.33114237],\n           [0.7322475 , 0.7164805 , 0.33215404, 0.31287438],\n           [0.07893868, 0.36260542, 0.13680252, 0.10080089],\n           ...,\n           [0.50598633, 0.58239317, 0.40299335, 0.3753909 ],\n           [0.9406507 , 0.14238751, 0.07488545, 0.06838301],\n           [0.9446275 , 0.3119812 , 0.08387016, 0.0708335 ]],\n   \n          [[0.76625806, 0.70756906, 0.44934663, 0.543529  ],\n           [0.53240186, 0.48399127, 0.4502681 , 0.33114615],\n           [0.5013264 , 0.52332973, 0.96531373, 0.92953223],\n           ...,\n           [0.36039677, 0.7765907 , 0.07933805, 0.0521001 ],\n           [0.7974086 , 0.9179306 , 0.06918192, 0.05013458],\n           [0.8719752 , 0.5150167 , 0.24078524, 0.98613715]],\n   \n          [[0.6386672 , 0.5525099 , 0.6372983 , 0.50154036],\n           [0.38273135, 0.65822804, 0.21824557, 0.21998452],\n           [0.4907412 , 0.5584563 , 0.16500847, 0.13350841],\n           ...,\n           [0.72620344, 0.454682  , 0.14298318, 0.04960247],\n           [0.06502511, 0.27700457, 0.07676298, 0.05720395],\n           [0.5339039 , 0.30390868, 0.36466882, 0.0688687 ]]],\n         shape=(16, 300, 4), dtype=float32)},\n  {'logits': array([[[-2.6621094 , -0.88134766, -3.2949219 , ..., -1.6445312 ,\n            -2.0644531 , -4.3242188 ],\n           [-2.7890625 , -4.4257812 , -2.9296875 , ..., -2.2285156 ,\n             1.8417969 , -3.6269531 ],\n           [ 1.9511719 , -2.6035156 , -2.3457031 , ..., -2.7324219 ,\n            -1.4257812 , -3.7910156 ],\n           ...,\n           [-3.6386719 , -4.7851562 , -4.9492188 , ..., -4.1289062 ,\n            -5.25      , -5.15625   ],\n           [-4.0898438 , -4.3320312 , -5.1835938 , ..., -4.7070312 ,\n            -4.734375  , -5.3945312 ],\n           [-4.4960938 , -5.1171875 , -5.8984375 , ..., -3.5117188 ,\n            -4.1523438 , -4.6953125 ]],\n   \n          [[ 2.140625  , -2.5527344 , -2.1074219 , ..., -2.4785156 ,\n            -1.9638672 , -3.7460938 ],\n           [-2.8496094 , -4.5625    , -2.7578125 , ...,  0.9423828 ,\n            -1.4941406 , -3.6347656 ],\n           [-2.7285156 , -4.3085938 , -2.5390625 , ...,  0.7578125 ,\n            -2.0117188 , -4.1054688 ],\n           ...,\n           [-3.9589844 , -5.0820312 , -4.6289062 , ..., -3.8554688 ,\n            -4.796875  , -5.0703125 ],\n           [-4.3320312 , -5.0898438 , -5.2578125 , ..., -4.8046875 ,\n            -5.4609375 , -5.7695312 ],\n           [-4.640625  , -5.5195312 , -5.3320312 , ..., -4.7304688 ,\n            -5.8828125 , -5.2460938 ]],\n   \n          [[ 2.7050781 , -2.7128906 , -2.1640625 , ..., -3.2265625 ,\n            -2.6738281 , -4.3125    ],\n           [-3.2949219 , -4.5390625 , -3.4960938 , ..., -2.8867188 ,\n             0.6660156 , -3.75      ],\n           [-2.8007812 , -1.4912109 , -2.8632812 , ..., -1.9863281 ,\n            -2.0058594 ,  0.7451172 ],\n           ...,\n           [-3.8261719 , -4.4453125 , -5.6992188 , ..., -4.2773438 ,\n            -5.4414062 , -5.3203125 ],\n           [-4.4101562 , -5.6445312 , -5.2148438 , ..., -3.8515625 ,\n            -4.7773438 , -4.6445312 ],\n           [-4.4960938 , -5.0429688 , -5.6757812 , ..., -3.8105469 ,\n            -4.7304688 , -4.9570312 ]],\n   \n          ...,\n   \n          [[ 2.1289062 , -2.8261719 , -1.7861328 , ..., -2.7851562 ,\n            -1.6259766 , -3.4667969 ],\n           [-2.2636719 , -4.4492188 ,  1.2695312 , ..., -2.4609375 ,\n            -2.0585938 , -2.5800781 ],\n           [-3.9570312 , -5.15625   , -2.9648438 , ..., -2.1777344 ,\n            -3.7675781 , -3.828125  ],\n           ...,\n           [-3.3730469 , -4.671875  , -4.4804688 , ..., -4.2460938 ,\n            -4.0234375 , -5.5390625 ],\n           [-4.5898438 , -4.8632812 , -4.8867188 , ..., -3.96875   ,\n            -5.6640625 , -6.0664062 ],\n           [-4.2890625 , -5.46875   , -4.921875  , ..., -3.3144531 ,\n            -4.7734375 , -4.8867188 ]],\n   \n          [[-1.5615234 ,  0.03308105, -3.1640625 , ..., -2.3730469 ,\n            -3.0273438 , -3.3339844 ],\n           [-1.9638672 , -3.6875    , -3.4746094 , ..., -3.5546875 ,\n             1.5117188 , -4.2773438 ],\n           [ 0.2697754 , -3.8144531 , -3.4785156 , ..., -3.578125  ,\n            -4.484375  , -6.5429688 ],\n           ...,\n           [-4.4921875 , -4.8007812 , -4.9335938 , ..., -3.6289062 ,\n            -4.7539062 , -4.2421875 ],\n           [-5.578125  , -4.8085938 , -5.4257812 , ..., -2.4199219 ,\n            -4.9023438 , -3.7304688 ],\n           [-3.4863281 , -5.4179688 , -4.6523438 , ..., -3.3457031 ,\n            -5.21875   , -5.7851562 ]],\n   \n          [[ 2.65625   , -2.1582031 , -2.46875   , ..., -3.0214844 ,\n            -1.9794922 , -3.5859375 ],\n           [-3.0332031 , -0.6845703 , -3.0214844 , ..., -1.7900391 ,\n            -1.4794922 , -4.1328125 ],\n           [-2.1953125 , -4.9492188 , -2.1894531 , ..., -2.0273438 ,\n             1.1679688 , -3.4667969 ],\n           ...,\n           [-4.2070312 , -4.8046875 , -4.8398438 , ..., -4.1835938 ,\n            -4.796875  , -5.0625    ],\n           [-4.3515625 , -4.953125  , -5.8242188 , ..., -4.2148438 ,\n            -5.4921875 , -5.3320312 ],\n           [-4.046875  , -4.890625  , -5.6445312 , ..., -4.8125    ,\n            -4.8320312 , -5.9414062 ]]], shape=(16, 300, 7), dtype=float32),\n   'pred_boxes': array([[[0.35409278, 0.6288808 , 0.2539103 , 0.24199513],\n           [0.41497433, 0.4910273 , 0.23924464, 0.18890971],\n           [0.49501082, 0.4795409 , 0.38998497, 0.3643368 ],\n           ...,\n           [0.6927286 , 0.42978027, 0.14381269, 0.17255767],\n           [0.31997994, 0.40223387, 0.2170021 , 0.20602581],\n           [0.2210799 , 0.69610345, 0.13998811, 0.09092031]],\n   \n          [[0.39676803, 0.55934256, 0.6260324 , 0.69656765],\n           [0.48230636, 0.5931594 , 0.24272357, 0.23770814],\n           [0.84998894, 0.51515675, 0.18088605, 0.19472663],\n           ...,\n           [0.7344692 , 0.2843637 , 0.45875707, 0.187174  ],\n           [0.83257675, 0.23206034, 0.2629165 , 0.16493899],\n           [0.7966133 , 0.12631094, 0.39027178, 0.10651013]],\n   \n          [[0.41238028, 0.6604888 , 0.6301865 , 0.48034853],\n           [0.47795406, 0.6081478 , 0.1623423 , 0.08958122],\n           [0.7068025 , 0.785935  , 0.55443865, 0.4176567 ],\n           ...,\n           [0.13688928, 0.805066  , 0.15300508, 0.18631992],\n           [0.2824387 , 0.9633477 , 0.11045503, 0.06366881],\n           [0.30679986, 0.97368175, 0.07192889, 0.04793111]],\n   \n          ...,\n   \n          [[0.5098462 , 0.58721566, 0.35686088, 0.3371957 ],\n           [0.7320382 , 0.7158078 , 0.33891356, 0.31958845],\n           [0.09386931, 0.36608276, 0.17338398, 0.11994799],\n           ...,\n           [0.49136195, 0.5628585 , 0.4177532 , 0.3775687 ],\n           [0.9379436 , 0.15174833, 0.11543187, 0.15630044],\n           [0.93897456, 0.3151637 , 0.10562316, 0.11907679]],\n   \n          [[0.7655118 , 0.7115595 , 0.45519793, 0.55066335],\n           [0.5345627 , 0.48433498, 0.45411968, 0.33178854],\n           [0.50035125, 0.5147136 , 0.99240017, 0.94579804],\n           ...,\n           [0.36001894, 0.7785936 , 0.09440952, 0.06408253],\n           [0.7932407 , 0.9130443 , 0.07199252, 0.06320234],\n           [0.8299517 , 0.498679  , 0.32094038, 0.94891405]],\n   \n          [[0.64177424, 0.5493388 , 0.64565015, 0.50453097],\n           [0.37969708, 0.6583797 , 0.21761587, 0.22336747],\n           [0.4903899 , 0.5581233 , 0.16721296, 0.13561586],\n           ...,\n           [0.72294515, 0.44931886, 0.16858876, 0.08786016],\n           [0.07101492, 0.26531142, 0.08472586, 0.07023332],\n           [0.5485502 , 0.3115473 , 0.35426983, 0.07882306]]],\n         shape=(16, 300, 4), dtype=float32)},\n  {'logits': array([[[-3.2109375 , -0.7368164 , -5.3671875 , ..., -2.40625   ,\n            -3.734375  , -4.1953125 ],\n           [-2.8789062 , -2.9082031 , -3.5273438 , ..., -2.9160156 ,\n             1.4111328 , -3.5644531 ],\n           [ 0.11334229, -4.1210938 , -4.3203125 , ..., -3.5410156 ,\n            -3.1132812 , -4.2734375 ],\n           ...,\n           [-4.2617188 , -5.4726562 , -3.7480469 , ..., -4.7890625 ,\n            -4.6015625 , -3.7617188 ],\n           [-4.46875   , -5.078125  , -3.9707031 , ..., -5.1992188 ,\n            -3.6894531 , -3.1328125 ],\n           [-4.6601562 , -4.8203125 , -4.5351562 , ..., -4.0078125 ,\n            -4.65625   , -3.7226562 ]],\n   \n          [[ 0.08538818, -4.3359375 , -3.4492188 , ..., -3.8320312 ,\n            -3.890625  , -3.9394531 ],\n           [-2.6621094 , -2.9941406 , -4.0664062 , ...,  0.36035156,\n            -3.8925781 , -4.34375   ],\n           [-2.9570312 , -3.3359375 , -3.6914062 , ...,  0.18652344,\n            -4.2226562 , -4.40625   ],\n           ...,\n           [-4.3164062 , -4.9023438 , -4.1953125 , ..., -4.296875  ,\n            -4.171875  , -3.9550781 ],\n           [-4.6914062 , -5.484375  , -4.1289062 , ..., -4.78125   ,\n            -4.4453125 , -3.5195312 ],\n           [-5.3203125 , -4.90625   , -4.328125  , ..., -4.46875   ,\n            -4.4804688 , -3.8105469 ]],\n   \n          [[ 1.3291016 , -4.7734375 , -3.4550781 , ..., -3.5019531 ,\n            -3.1699219 , -3.9746094 ],\n           [-3.5488281 , -3.2832031 , -4.3515625 , ..., -3.6386719 ,\n            -0.1619873 , -4.8007812 ],\n           [-4.4101562 , -1.6220703 , -2.4550781 , ..., -1.9951172 ,\n            -3.65625   ,  1.0205078 ],\n           ...,\n           [-4.2890625 , -4.6640625 , -3.7363281 , ..., -4.2695312 ,\n            -4.9804688 , -3.265625  ],\n           [-4.9179688 , -5.5195312 , -3.7949219 , ..., -4.4179688 ,\n            -5.4257812 , -3.2382812 ],\n           [-4.65625   , -5.671875  , -4.0078125 , ..., -4.3359375 ,\n            -4.96875   , -3.1621094 ]],\n   \n          ...,\n   \n          [[ 1.8330078 , -4.0625    , -3.6582031 , ..., -2.9140625 ,\n            -2.5859375 , -4.1523438 ],\n           [-3.2265625 , -1.9775391 ,  0.33520508, ..., -2.8164062 ,\n            -2.5136719 , -3.5761719 ],\n           [-4.78125   , -4.21875   , -3.2070312 , ..., -2.6835938 ,\n            -3.8984375 , -3.6699219 ],\n           ...,\n           [-4.2773438 , -5.5429688 , -3.9199219 , ..., -4.9335938 ,\n            -4.0351562 , -3.6621094 ],\n           [-4.28125   , -5.8554688 , -3.3164062 , ..., -4.90625   ,\n            -5.2109375 , -3.2265625 ],\n           [-4.2226562 , -5.296875  , -3.9472656 , ..., -3.9609375 ,\n            -5.5429688 , -4.2304688 ]],\n   \n          [[-3.3710938 , -0.20654297, -5.0546875 , ..., -3.15625   ,\n            -5.0195312 , -4.0703125 ],\n           [-2.8203125 , -3.4570312 , -3.2421875 , ..., -3.1660156 ,\n             0.70947266, -4.203125  ],\n           [-1.1884766 , -4.5234375 , -4.3554688 , ..., -4.0820312 ,\n            -3.609375  , -3.7949219 ],\n           ...,\n           [-4.5078125 , -4.8476562 , -4.3164062 , ..., -4.2929688 ,\n            -5.046875  , -2.6113281 ],\n           [-4.8554688 , -4.4140625 , -4.7890625 , ..., -3.3203125 ,\n            -6.25      , -4.4765625 ],\n           [-4.4726562 , -5.4179688 , -3.6289062 , ..., -5.8164062 ,\n            -4.6601562 , -3.2460938 ]],\n   \n          [[ 0.8618164 , -4.1328125 , -3.9238281 , ..., -3.6074219 ,\n            -3.6328125 , -4.34375   ],\n           [-3.2695312 , -0.03308105, -5.3554688 , ..., -2.6035156 ,\n            -4.25      , -4.1796875 ],\n           [-2.7421875 , -3.4511719 , -3.375     , ..., -2.546875  ,\n             0.93310547, -5.1601562 ],\n           ...,\n           [-4.1484375 , -4.9335938 , -3.8710938 , ..., -4.5898438 ,\n            -4.6601562 , -3.1171875 ],\n           [-5.1132812 , -5.2890625 , -3.9609375 , ..., -4.0390625 ,\n            -4.8710938 , -3.8300781 ],\n           [-4.3164062 , -5.140625  , -4.25      , ..., -4.3789062 ,\n            -4.0078125 , -3.3203125 ]]], shape=(16, 300, 7), dtype=float32),\n   'pred_boxes': array([[[0.35735902, 0.62883127, 0.25197417, 0.24013728],\n           [0.4162566 , 0.49022794, 0.23958485, 0.18657586],\n           [0.49617997, 0.47917083, 0.3895474 , 0.3631273 ],\n           ...,\n           [0.66356903, 0.425918  , 0.18256496, 0.16008797],\n           [0.35034767, 0.43399972, 0.32809433, 0.26408753],\n           [0.22249019, 0.69730693, 0.13675186, 0.10758197]],\n   \n          [[0.39603236, 0.5601223 , 0.6228172 , 0.69915116],\n           [0.4814825 , 0.59257513, 0.23822826, 0.23483637],\n           [0.8491812 , 0.51460457, 0.1807291 , 0.19307503],\n           ...,\n           [0.7535501 , 0.28805137, 0.47487393, 0.18838766],\n           [0.79617304, 0.24093686, 0.3391476 , 0.14654706],\n           [0.7693015 , 0.14934291, 0.39522463, 0.15003623]],\n   \n          [[0.41211984, 0.6608292 , 0.63054585, 0.48115036],\n           [0.4807512 , 0.6086413 , 0.17370352, 0.093215  ],\n           [0.70392305, 0.78448874, 0.5556813 , 0.41913915],\n           ...,\n           [0.14574483, 0.8040066 , 0.1687055 , 0.19277017],\n           [0.26693743, 0.95488006, 0.12574358, 0.07751466],\n           [0.30833045, 0.9676283 , 0.07898385, 0.05690187]],\n   \n          ...,\n   \n          [[0.509876  , 0.58774954, 0.35809454, 0.33840826],\n           [0.7318938 , 0.716173  , 0.33885694, 0.32016107],\n           [0.10024862, 0.38313943, 0.1846292 , 0.15915166],\n           ...,\n           [0.51360506, 0.5667479 , 0.35951102, 0.29403698],\n           [0.91025233, 0.24224922, 0.19871753, 0.40981567],\n           [0.91876143, 0.34326717, 0.14819881, 0.38024545]],\n   \n          [[0.7655443 , 0.713569  , 0.454489  , 0.55451316],\n           [0.5365155 , 0.48465273, 0.45739356, 0.32989514],\n           [0.50074273, 0.51896596, 0.9909922 , 0.93372214],\n           ...,\n           [0.37482762, 0.788748  , 0.15213197, 0.09047733],\n           [0.79829943, 0.9116668 , 0.08495029, 0.07915991],\n           [0.7908264 , 0.5323253 , 0.413965  , 0.9497376 ]],\n   \n          [[0.6429915 , 0.5490335 , 0.63956666, 0.5059327 ],\n           [0.38125443, 0.65992665, 0.21607667, 0.22720233],\n           [0.4915683 , 0.5580777 , 0.16721179, 0.13475199],\n           ...,\n           [0.7471917 , 0.4520406 , 0.24248213, 0.14143455],\n           [0.08263909, 0.30438018, 0.10916632, 0.14516316],\n           [0.6101028 , 0.32050487, 0.42979297, 0.10590673]]],\n         shape=(16, 300, 4), dtype=float32)},\n  {'logits': array([[[-2.7402344 ,  0.26757812, -3.8515625 , ..., -1.8623047 ,\n            -4.3046875 , -4.3867188 ],\n           [-3.1855469 , -3.0917969 , -3.6699219 , ..., -2.0253906 ,\n             2.3515625 , -3.2617188 ],\n           [ 0.77490234, -2.921875  , -3.390625  , ..., -2.3222656 ,\n            -3.265625  , -4.78125   ],\n           ...,\n           [-3.7695312 , -4.0898438 , -4.5117188 , ..., -3.9726562 ,\n            -4.46875   , -4.0820312 ],\n           [-3.9257812 , -4.140625  , -4.6171875 , ..., -3.9648438 ,\n            -4.2226562 , -4.5273438 ],\n           [-4.2421875 , -4.0625    , -4.7539062 , ..., -3.8164062 ,\n            -4.6679688 , -4.3710938 ]],\n   \n          [[ 1.5205078 , -3.7558594 , -1.8320312 , ..., -2.0957031 ,\n            -3.0078125 , -5.1367188 ],\n           [-2.9335938 , -4.0625    , -2.4726562 , ...,  1.5966797 ,\n            -4.1523438 , -4.6875    ],\n           [-3.3164062 , -4.21875   , -2.3183594 , ...,  0.38305664,\n            -4.1835938 , -4.375     ],\n           ...,\n           [-3.5273438 , -4.2734375 , -3.8925781 , ..., -3.9746094 ,\n            -4.5625    , -4.3554688 ],\n           [-3.9453125 , -4.7070312 , -4.1679688 , ..., -3.8867188 ,\n            -5.        , -4.3242188 ],\n           [-4.4296875 , -5.1367188 , -3.9296875 , ..., -3.75      ,\n            -4.9804688 , -4.6289062 ]],\n   \n          [[ 1.5019531 , -3.2109375 , -2.9472656 , ..., -2.2382812 ,\n            -2.4453125 , -4.7734375 ],\n           [-3.2792969 , -2.8691406 , -4.078125  , ..., -2.9589844 ,\n             0.39770508, -3.9394531 ],\n           [-3.578125  , -2.0429688 , -2.9746094 , ..., -1.3808594 ,\n            -2.125     ,  2.5683594 ],\n           ...,\n           [-4.4726562 , -4.2421875 , -4.0898438 , ..., -3.8789062 ,\n            -4.6601562 , -3.9238281 ],\n           [-4.3242188 , -3.9179688 , -4.515625  , ..., -3.921875  ,\n            -4.7539062 , -4.0390625 ],\n           [-4.4609375 , -3.9238281 , -4.3359375 , ..., -3.9179688 ,\n            -4.4882812 , -4.21875   ]],\n   \n          ...,\n   \n          [[ 1.8398438 , -2.5253906 , -1.9599609 , ..., -2.3769531 ,\n            -3.2402344 , -4.6445312 ],\n           [-2.5273438 , -4.1289062 ,  1.2880859 , ..., -1.9472656 ,\n            -2.5761719 , -2.3105469 ],\n           [-4.3515625 , -4.3203125 , -2.6601562 , ..., -3.4960938 ,\n            -4.9179688 , -3.890625  ],\n           ...,\n           [-3.609375  , -4.1679688 , -3.7890625 , ..., -4.1523438 ,\n            -4.3789062 , -4.4296875 ],\n           [-3.84375   , -4.7070312 , -3.8027344 , ..., -3.1445312 ,\n            -5.1640625 , -4.8046875 ],\n           [-4.4414062 , -5.2773438 , -3.7578125 , ..., -2.9980469 ,\n            -5.5625    , -4.6132812 ]],\n   \n          [[-2.0585938 ,  0.38476562, -3.3183594 , ..., -2.0449219 ,\n            -3.0644531 , -4.0507812 ],\n           [-2.8730469 , -3.3925781 , -3.5917969 , ..., -2.2539062 ,\n             2.5976562 , -3.0605469 ],\n           [-0.54541016, -3.2695312 , -4.0039062 , ..., -3.7050781 ,\n            -3.1582031 , -3.9921875 ],\n           ...,\n           [-4.0429688 , -4.0195312 , -4.5898438 , ..., -3.8007812 ,\n            -3.7910156 , -4.3164062 ],\n           [-4.2734375 , -4.28125   , -4.3671875 , ..., -3.8476562 ,\n            -4.7265625 , -3.8789062 ],\n           [-3.5605469 , -3.7285156 , -4.6523438 , ..., -4.3359375 ,\n            -4.3125    , -3.8417969 ]],\n   \n          [[ 1.4404297 , -2.8359375 , -2.875     , ..., -2.7988281 ,\n            -2.8945312 , -4.9257812 ],\n           [-2.5761719 ,  0.70214844, -2.8867188 , ..., -1.5273438 ,\n            -3.1113281 , -4.3828125 ],\n           [-3.2167969 , -2.8632812 , -3.5039062 , ..., -2.2675781 ,\n             1.2978516 , -2.8730469 ],\n           ...,\n           [-3.9082031 , -4.25      , -4.8125    , ..., -4.2734375 ,\n            -4.1679688 , -4.3984375 ],\n           [-4.7578125 , -4.75      , -4.171875  , ..., -3.7929688 ,\n            -4.5195312 , -4.0898438 ],\n           [-3.640625  , -3.8515625 , -4.40625   , ..., -4.1953125 ,\n            -4.359375  , -4.6640625 ]]], shape=(16, 300, 7), dtype=float32),\n   'pred_boxes': array([[[0.3546566 , 0.62562746, 0.25144857, 0.23702171],\n           [0.41619316, 0.48994574, 0.24128608, 0.18640035],\n           [0.4957253 , 0.47982535, 0.39145038, 0.36285827],\n           ...,\n           [0.66185343, 0.41476488, 0.19875641, 0.16770211],\n           [0.37428588, 0.43536267, 0.35860115, 0.25412324],\n           [0.22311671, 0.6984177 , 0.15019174, 0.10855562]],\n   \n          [[0.39672098, 0.5605983 , 0.62328   , 0.7000819 ],\n           [0.48149988, 0.5926368 , 0.2406541 , 0.23446196],\n           [0.84864634, 0.5147237 , 0.1820182 , 0.1927104 ],\n           ...,\n           [0.7481955 , 0.28986973, 0.45388126, 0.17028216],\n           [0.7798456 , 0.24014454, 0.3728236 , 0.1347141 ],\n           [0.76607955, 0.16023898, 0.40937868, 0.13865085]],\n   \n          [[0.4131156 , 0.6605857 , 0.6320899 , 0.48021907],\n           [0.48107043, 0.6088711 , 0.17462969, 0.09322181],\n           [0.6997145 , 0.782619  , 0.5640884 , 0.41993016],\n           ...,\n           [0.15105113, 0.80625457, 0.19134949, 0.19206297],\n           [0.25787145, 0.95281273, 0.15531303, 0.08641166],\n           [0.30803886, 0.9678987 , 0.09550256, 0.05947194]],\n   \n          ...,\n   \n          [[0.51011777, 0.5877482 , 0.35902193, 0.33899438],\n           [0.73199546, 0.71625817, 0.3378731 , 0.31960958],\n           [0.0980571 , 0.3872915 , 0.17796217, 0.1618594 ],\n           ...,\n           [0.50698566, 0.5570873 , 0.33346865, 0.2756529 ],\n           [0.9064004 , 0.24240631, 0.209928  , 0.21502404],\n           [0.91876376, 0.33963707, 0.15113299, 0.39398682]],\n   \n          [[0.76707315, 0.7125285 , 0.4525962 , 0.55315584],\n           [0.5370576 , 0.4844835 , 0.4600437 , 0.3293759 ],\n           [0.5007505 , 0.5191046 , 0.98464847, 0.93237245],\n           ...,\n           [0.38678634, 0.7953374 , 0.20730169, 0.09385002],\n           [0.79305047, 0.91935724, 0.1016712 , 0.08588005],\n           [0.76822615, 0.5166783 , 0.447022  , 0.909904  ]],\n   \n          [[0.6417269 , 0.54925144, 0.6400572 , 0.50523657],\n           [0.378887  , 0.657869  , 0.21556148, 0.22053745],\n           [0.49139196, 0.55791456, 0.16906963, 0.13510196],\n           ...,\n           [0.7716842 , 0.44990793, 0.29386872, 0.18268667],\n           [0.0899151 , 0.31452015, 0.11635118, 0.16108349],\n           [0.62130886, 0.32216954, 0.45238942, 0.10195944]]],\n         shape=(16, 300, 4), dtype=float32)},\n  {'logits': array([[[-2.3613281 ,  1.2070312 , -3.7695312 , ..., -1.8300781 ,\n            -4.1445312 , -3.8769531 ],\n           [-2.9316406 , -2.5332031 , -4.1484375 , ..., -3.4472656 ,\n             2.125     , -2.9199219 ],\n           [ 0.87597656, -3.2558594 , -4.203125  , ..., -3.6289062 ,\n            -2.8613281 , -3.5605469 ],\n           ...,\n           [-2.9882812 , -3.890625  , -3.8378906 , ..., -3.0117188 ,\n            -3.9355469 , -4.2890625 ],\n           [-2.7226562 , -3.6503906 , -4.3671875 , ..., -3.1914062 ,\n            -3.4121094 , -4.4804688 ],\n           [-3.5195312 , -3.4609375 , -4.2617188 , ..., -2.4414062 ,\n            -3.6132812 , -3.9160156 ]],\n   \n          [[ 2.0722656 , -3.2949219 , -3.953125  , ..., -3.7597656 ,\n            -3.4628906 , -2.84375   ],\n           [-3.2246094 , -3.125     , -3.6210938 , ...,  1.2929688 ,\n            -2.6269531 , -3.09375   ],\n           [-2.3144531 , -3.9042969 , -2.921875  , ...,  0.7451172 ,\n            -2.765625  , -3.7695312 ],\n           ...,\n           [-2.375     , -4.1328125 , -3.796875  , ..., -3.1367188 ,\n            -3.6171875 , -3.6621094 ],\n           [-2.8496094 , -4.1289062 , -3.9570312 , ..., -2.9199219 ,\n            -3.7324219 , -3.5097656 ],\n           [-3.2792969 , -4.2382812 , -3.4179688 , ..., -2.7675781 ,\n            -3.6875    , -3.3808594 ]],\n   \n          [[ 1.4628906 , -3.9414062 , -4.28125   , ..., -3.5605469 ,\n            -2.9785156 , -3.2871094 ],\n           [-3.2011719 , -2.6347656 , -4.5390625 , ..., -2.515625  ,\n             1.0917969 , -3.4550781 ],\n           [-3.1914062 , -1.03125   , -2.5       , ..., -3.3515625 ,\n            -1.2978516 ,  0.7294922 ],\n           ...,\n           [-3.2832031 , -3.7695312 , -3.7988281 , ..., -2.7851562 ,\n            -3.6816406 , -4.3203125 ],\n           [-3.5742188 , -3.5097656 , -3.4980469 , ..., -2.7832031 ,\n            -4.0390625 , -3.9433594 ],\n           [-3.3945312 , -3.640625  , -3.5039062 , ..., -2.5820312 ,\n            -3.7246094 , -3.7226562 ]],\n   \n          ...,\n   \n          [[ 1.4208984 , -3.5234375 , -3.8691406 , ..., -3.1679688 ,\n            -3.3515625 , -3.6152344 ],\n           [-1.5615234 , -2.5527344 ,  0.703125  , ..., -1.8388672 ,\n            -2.1542969 , -3.6113281 ],\n           [-3.015625  , -3.8027344 , -3.2050781 , ..., -2.0605469 ,\n            -3.2285156 , -4.4101562 ],\n           ...,\n           [-2.5488281 , -3.5957031 , -4.0976562 , ..., -3.5996094 ,\n            -3.3789062 , -4.296875  ],\n           [-3.2539062 , -4.2929688 , -3.3710938 , ..., -2.2460938 ,\n            -4.0117188 , -3.4472656 ],\n           [-3.6542969 , -4.0195312 , -3.3066406 , ..., -2.3808594 ,\n            -3.6152344 , -3.7519531 ]],\n   \n          [[-2.2226562 ,  2.1855469 , -4.5820312 , ..., -2.0683594 ,\n            -3.5957031 , -3.8710938 ],\n           [-2.8828125 , -2.546875  , -4.0546875 , ..., -3.5273438 ,\n             3.0429688 , -2.890625  ],\n           [ 0.23352051, -2.7167969 , -4.1328125 , ..., -4.4648438 ,\n            -1.9414062 , -4.2226562 ],\n           ...,\n           [-2.9277344 , -3.4199219 , -3.9707031 , ..., -2.578125  ,\n            -3.2402344 , -4.        ],\n           [-3.9492188 , -2.953125  , -3.9179688 , ..., -2.2832031 ,\n            -4.0039062 , -4.1132812 ],\n           [-2.8984375 , -3.2695312 , -3.8730469 , ..., -3.4082031 ,\n            -3.2109375 , -3.90625   ]],\n   \n          [[ 1.5195312 , -3.265625  , -4.484375  , ..., -3.6054688 ,\n            -3.3671875 , -3.6933594 ],\n           [-2.6210938 ,  1.6943359 , -3.5566406 , ..., -1.8339844 ,\n            -3.3691406 , -3.8769531 ],\n           [-2.8261719 , -3.1035156 , -3.3945312 , ..., -3.2773438 ,\n             2.2421875 , -3.1425781 ],\n           ...,\n           [-3.2109375 , -3.5449219 , -4.1601562 , ..., -3.2988281 ,\n            -3.7910156 , -3.8691406 ],\n           [-3.2421875 , -3.90625   , -3.7519531 , ..., -2.7578125 ,\n            -3.3164062 , -4.0742188 ],\n           [-2.7304688 , -3.96875   , -4.2734375 , ..., -3.140625  ,\n            -3.6796875 , -4.1992188 ]]], shape=(16, 300, 7), dtype=float32),\n   'pred_boxes': array([[[0.3545445 , 0.62537855, 0.25108543, 0.23723632],\n           [0.41606048, 0.49010792, 0.24131152, 0.18622757],\n           [0.4956096 , 0.4798093 , 0.3914133 , 0.36309046],\n           ...,\n           [0.65760255, 0.41759926, 0.2011755 , 0.17666104],\n           [0.38169757, 0.44476965, 0.3490635 , 0.27133223],\n           [0.22297798, 0.703586  , 0.14884031, 0.10735657]],\n   \n          [[0.39710107, 0.5607861 , 0.6231656 , 0.70003855],\n           [0.48153615, 0.5926418 , 0.24059886, 0.234589  ],\n           [0.84858394, 0.5150072 , 0.18199319, 0.19283868],\n           ...,\n           [0.73834336, 0.29241893, 0.48564458, 0.1733763 ],\n           [0.7720846 , 0.2425767 , 0.39782602, 0.13909873],\n           [0.76454616, 0.16357866, 0.41457957, 0.1375095 ]],\n   \n          [[0.41319886, 0.6602508 , 0.63193554, 0.4804584 ],\n           [0.48092255, 0.6089465 , 0.17463934, 0.09321065],\n           [0.69864017, 0.7814206 , 0.567436  , 0.42099077],\n           ...,\n           [0.15165775, 0.81610614, 0.1904198 , 0.19061452],\n           [0.25633553, 0.9524954 , 0.1591893 , 0.08823574],\n           [0.30785197, 0.9692756 , 0.09564269, 0.05687567]],\n   \n          ...,\n   \n          [[0.51010495, 0.5876047 , 0.3589259 , 0.33921796],\n           [0.7318722 , 0.7160619 , 0.33779278, 0.31990868],\n           [0.09785535, 0.38981283, 0.17774045, 0.16296785],\n           ...,\n           [0.5088544 , 0.56802136, 0.33924866, 0.29713783],\n           [0.9061439 , 0.24652381, 0.20702492, 0.22564375],\n           [0.918637  , 0.3439968 , 0.15130718, 0.39570954]],\n   \n          [[0.76701176, 0.7110777 , 0.45202726, 0.5535631 ],\n           [0.5370764 , 0.4844276 , 0.4601456 , 0.3279072 ],\n           [0.50024456, 0.5172741 , 0.98654664, 0.9414492 ],\n           ...,\n           [0.38654998, 0.7972679 , 0.21509995, 0.0971876 ],\n           [0.7930059 , 0.9207979 , 0.10156247, 0.08661418],\n           [0.76987123, 0.5296273 , 0.44567207, 0.90044445]],\n   \n          [[0.64132315, 0.5493567 , 0.638972  , 0.505345  ],\n           [0.37882313, 0.65707004, 0.21483539, 0.22105199],\n           [0.49142936, 0.55776745, 0.16902475, 0.13503021],\n           ...,\n           [0.7737116 , 0.45345455, 0.30709395, 0.18646209],\n           [0.08963767, 0.32455242, 0.11313369, 0.1630489 ],\n           [0.6150711 , 0.32995504, 0.45180547, 0.10279375]]],\n         shape=(16, 300, 4), dtype=float32)},\n  {'logits': array([[[-2.5332031 ,  2.4726562 , -1.3320312 , ..., -1.2294922 ,\n            -2.3769531 , -2.3496094 ],\n           [-1.0371094 , -1.6806641 , -1.4648438 , ..., -1.1708984 ,\n             2.4453125 , -2.8476562 ],\n           [ 2.1835938 , -0.22460938, -1.2802734 , ..., -2.375     ,\n            -0.7504883 , -1.828125  ],\n           ...,\n           [-2.8300781 , -3.5332031 , -3.0410156 , ..., -3.7929688 ,\n            -3.75      , -2.8945312 ],\n           [-3.1621094 , -3.7207031 , -2.6640625 , ..., -3.8691406 ,\n            -3.2324219 , -3.9980469 ],\n           [-2.6640625 , -3.859375  , -2.8925781 , ..., -3.1191406 ,\n            -3.1914062 , -3.3847656 ]],\n   \n          [[ 2.2753906 , -1.5878906 , -2.1289062 , ..., -1.1767578 ,\n            -2.1777344 , -2.3945312 ],\n           [-1.6640625 , -2.3691406 , -1.7783203 , ...,  1.5800781 ,\n            -2.5703125 , -2.3125    ],\n           [-2.3886719 , -2.6289062 , -1.6328125 , ...,  0.71191406,\n            -2.6210938 , -3.3554688 ],\n           ...,\n           [-2.65625   , -3.7226562 , -3.1640625 , ..., -3.8964844 ,\n            -4.140625  , -3.7578125 ],\n           [-2.6582031 , -3.8300781 , -3.        , ..., -4.609375  ,\n            -3.9765625 , -3.21875   ],\n           [-3.7597656 , -4.2421875 , -2.6582031 , ..., -3.5957031 ,\n            -4.859375  , -3.9726562 ]],\n   \n          [[ 2.1269531 , -1.2539062 , -2.3046875 , ..., -3.4003906 ,\n            -2.6132812 , -2.2832031 ],\n           [-1.7568359 , -2.0839844 , -1.4296875 , ..., -1.8496094 ,\n             1.5722656 , -2.7070312 ],\n           [-1.1972656 , -1.1826172 , -1.9707031 , ..., -1.0957031 ,\n            -2.5644531 ,  1.2832031 ],\n           ...,\n           [-2.6347656 , -3.3886719 , -2.8671875 , ..., -3.171875  ,\n            -3.1445312 , -3.2636719 ],\n           [-2.6347656 , -5.453125  , -3.7871094 , ..., -3.0410156 ,\n            -3.4726562 , -3.8730469 ],\n           [-3.6582031 , -3.9804688 , -3.9316406 , ..., -2.6347656 ,\n            -3.2792969 , -3.1933594 ]],\n   \n          ...,\n   \n          [[ 2.7675781 , -1.2626953 , -1.484375  , ..., -1.8925781 ,\n            -2.0546875 , -2.0429688 ],\n           [-1.6533203 , -2.0214844 ,  0.9277344 , ..., -1.6445312 ,\n            -1.7568359 , -3.6464844 ],\n           [-3.6542969 , -3.0253906 , -0.90185547, ..., -1.8564453 ,\n            -2.8066406 , -3.8046875 ],\n           ...,\n           [-3.1347656 , -4.4179688 , -3.2304688 , ..., -4.2109375 ,\n            -4.7109375 , -4.2109375 ],\n           [-2.6347656 , -4.078125  , -3.4316406 , ..., -3.4355469 ,\n            -4.2617188 , -3.5       ],\n           [-3.5039062 , -3.40625   , -3.2265625 , ..., -2.6347656 ,\n            -4.03125   , -4.1796875 ]],\n   \n          [[-1.0195312 ,  1.9882812 , -2.4589844 , ..., -1.5917969 ,\n            -2.6542969 , -1.8603516 ],\n           [-2.0644531 , -3.6269531 , -2.6445312 , ..., -3.3476562 ,\n             1.515625  , -3.6582031 ],\n           [ 0.515625  , -3.6933594 , -4.171875  , ..., -2.9316406 ,\n            -2.3808594 , -3.4433594 ],\n           ...,\n           [-2.9414062 , -2.6484375 , -2.9804688 , ..., -3.3320312 ,\n            -2.8300781 , -3.4277344 ],\n           [-3.0292969 , -3.5527344 , -3.4082031 , ..., -3.1699219 ,\n            -3.1386719 , -3.3847656 ],\n           [-2.7246094 , -3.8554688 , -3.6484375 , ..., -3.0136719 ,\n            -3.5605469 , -3.1855469 ]],\n   \n          [[ 3.0976562 , -2.1972656 , -2.5058594 , ..., -3.0722656 ,\n            -2.9707031 , -1.7929688 ],\n           [-2.9433594 ,  1.9511719 , -1.1621094 , ..., -1.3125    ,\n            -2.0625    , -2.2597656 ],\n           [-1.3251953 , -1.9238281 , -1.1787109 , ..., -1.3095703 ,\n             1.5839844 , -3.1074219 ],\n           ...,\n           [-3.15625   , -2.8457031 , -2.6738281 , ..., -3.0253906 ,\n            -3.1855469 , -2.7832031 ],\n           [-3.3828125 , -3.9511719 , -2.9472656 , ..., -3.8398438 ,\n            -3.8457031 , -2.6601562 ],\n           [-3.0917969 , -4.1757812 , -2.6601562 , ..., -4.0625    ,\n            -3.8066406 , -3.3535156 ]]], shape=(16, 300, 7), dtype=float32),\n   'pred_boxes': array([[[0.35418588, 0.62567717, 0.24897851, 0.22765122],\n           [0.41484594, 0.4919821 , 0.24363066, 0.18795997],\n           [0.49042374, 0.48172042, 0.38327986, 0.35508904],\n           ...,\n           [0.71627027, 0.4970316 , 0.11095376, 0.09986626],\n           [0.31008935, 0.40562025, 0.17671308, 0.16202067],\n           [0.19897944, 0.6993987 , 0.06910336, 0.05682448]],\n   \n          [[0.41383135, 0.5577473 , 0.6501196 , 0.6801216 ],\n           [0.4824647 , 0.59454155, 0.25140586, 0.2402055 ],\n           [0.8520743 , 0.5121182 , 0.18254347, 0.18917401],\n           ...,\n           [0.73377824, 0.31376016, 0.35878757, 0.17944923],\n           [0.86542815, 0.27023393, 0.10994633, 0.09330718],\n           [0.7851624 , 0.13325445, 0.3400324 , 0.05677962]],\n   \n          [[0.4097732 , 0.6633898 , 0.59582996, 0.45869657],\n           [0.48061952, 0.60589474, 0.16075088, 0.07733869],\n           [0.7019157 , 0.78897464, 0.5206022 , 0.40790752],\n           ...,\n           [0.13062283, 0.81925094, 0.10687871, 0.08772154],\n           [0.27278197, 0.96917087, 0.0837044 , 0.05687567],\n           [0.30106363, 0.9813037 , 0.05442542, 0.04172092]],\n   \n          ...,\n   \n          [[0.5103186 , 0.58801067, 0.3507403 , 0.33186302],\n           [0.7320649 , 0.71754247, 0.32454243, 0.30692878],\n           [0.07954655, 0.362924  , 0.13287246, 0.09521767],\n           ...,\n           [0.4827239 , 0.5739382 , 0.43937072, 0.3632932 ],\n           [0.9425337 , 0.12582129, 0.08177747, 0.1214271 ],\n           [0.9446272 , 0.31166276, 0.08355473, 0.06444824]],\n   \n          [[0.76617837, 0.70009464, 0.44009256, 0.5313151 ],\n           [0.53527063, 0.48297003, 0.46938276, 0.34453928],\n           [0.50945055, 0.51563966, 0.98174334, 0.94602287],\n           ...,\n           [0.35402384, 0.78128326, 0.02952952, 0.03645231],\n           [0.80133855, 0.92483675, 0.03863965, 0.03119668],\n           [0.9023158 , 0.472903  , 0.1705853 , 0.9743479 ]],\n   \n          [[0.6401237 , 0.55316347, 0.6321474 , 0.49253824],\n           [0.3853356 , 0.65650016, 0.21923253, 0.21996471],\n           [0.49042374, 0.56056607, 0.16382094, 0.1321428 ],\n           ...,\n           [0.72259045, 0.468895  , 0.04209923, 0.03307948],\n           [0.06939345, 0.2920612 , 0.06604137, 0.03996614],\n           [0.58429104, 0.2983949 , 0.2055384 , 0.04832958]]],\n         shape=(16, 300, 4), dtype=float32)}],\n array([[[-0.0669008 ,  0.14881441,  0.09422611, ...,  0.26958615,\n          -0.00606374,  0.4747531 ],\n         [-0.34916106,  0.8287428 , -0.51455253, ..., -0.18630481,\n           0.39801034, -0.5144929 ],\n         [-0.49297804,  0.9393418 ,  0.12384672, ..., -0.34552127,\n           0.74031615, -0.8203392 ],\n         ...,\n         [ 0.08935175, -0.006718  ,  0.0588861 , ..., -0.10074316,\n           0.5505489 , -0.271548  ],\n         [ 0.09829531,  0.00868214,  0.17161572, ..., -0.13318583,\n           0.6898697 , -0.10819449],\n         [-0.01492409, -0.22457023,  0.31187022, ...,  0.03861043,\n           0.397503  , -0.15757029]],\n \n        [[-0.6512396 ,  0.16907647, -0.270117  , ..., -0.00566327,\n           0.3011526 , -0.9531422 ],\n         [-0.4741848 , -0.8083728 , -1.2990266 , ..., -0.18786928,\n          -1.2719598 , -0.14755888],\n         [ 0.09267776, -0.56200725, -0.7846303 , ..., -0.44135022,\n          -0.46936545, -0.09179039],\n         ...,\n         [-0.02974401,  0.22877102,  0.20673987, ..., -0.25029776,\n          -0.14037117, -0.5240314 ],\n         [ 0.01477349,  0.05138044,  0.37818205, ..., -0.19837928,\n          -0.07520453, -0.5700925 ],\n         [ 0.17552574, -0.09258848,  0.3736081 , ..., -0.4494442 ,\n          -0.18102083, -0.41483492]],\n \n        [[-0.45123968,  0.8625161 ,  0.28801936, ..., -0.47999942,\n           0.94285184, -0.75327945],\n         [-0.00822428,  0.6272453 , -0.1306773 , ...,  0.2057684 ,\n           0.11245604, -0.0733353 ],\n         [-0.33722585,  0.76075315,  0.31818587, ...,  1.4098319 ,\n          -0.74274397, -1.0044696 ],\n         ...,\n         [ 0.29009208,  0.25977173,  0.29431328, ..., -0.05114772,\n           0.3733045 , -0.32909432],\n         [ 0.28993127,  0.20546629,  0.2714306 , ...,  0.06172678,\n           0.2983022 , -0.41452104],\n         [ 0.48478472,  0.29403993,  0.32958126, ...,  0.10378876,\n           0.20847139, -0.53093445]],\n \n        ...,\n \n        [[-0.5019355 ,  1.0657085 , -0.19052598, ..., -0.64838016,\n           0.79811454, -0.8298663 ],\n         [ 0.20322958,  0.68102235,  0.08826254, ..., -0.01202017,\n          -1.486012  , -0.07209942],\n         [ 0.32554504,  0.54680765, -0.00624384, ..., -0.25692207,\n          -0.33721167, -0.45802987],\n         ...,\n         [ 0.08336566,  0.08954856,  0.18284732, ..., -0.16805762,\n           0.31091806, -0.39341098],\n         [ 0.1306607 , -0.21240959, -0.12022175, ..., -0.44558805,\n          -0.16903667, -0.38973188],\n         [ 0.24702114, -0.0977886 ,  0.05846895, ..., -0.6091501 ,\n          -0.02354381, -0.5958175 ]],\n \n        [[-0.09149503,  0.08025353,  0.100323  , ...,  0.6556245 ,\n           0.20086005,  0.54085845],\n         [-0.20383756,  0.7799794 , -1.0738599 , ..., -0.07596207,\n           0.24376078, -0.4484858 ],\n         [-0.00964792,  0.18676296,  0.3414758 , ..., -0.30737707,\n           0.8457982 , -0.14958137],\n         ...,\n         [ 0.2632199 ,  0.16244555,  0.3411292 , ...,  0.05758594,\n           0.49605602, -0.3178833 ],\n         [ 0.20968483, -0.37013656,  0.37118682, ..., -0.30639926,\n           0.5130826 , -0.17727946],\n         [-0.07666307,  0.17988655,  0.1835092 , ..., -0.18680423,\n           0.51961905, -0.11607999]],\n \n        [[-0.29451182,  0.7446919 ,  0.13395809, ..., -0.42343318,\n           0.6345207 , -0.38977873],\n         [-0.33580709,  0.189631  , -0.00656362, ...,  0.41712797,\n           0.01309955,  0.5568436 ],\n         [-0.4493635 ,  0.8125724 , -0.5262432 , ..., -0.12600128,\n          -0.08626028, -0.2678317 ],\n         ...,\n         [-0.01389019,  0.02834593,  0.20046477, ..., -0.10884982,\n           0.42690206, -0.28888074],\n         [ 0.20492549,  0.06977265,  0.36786267, ..., -0.14375116,\n           0.3280242 , -0.37627253],\n         [ 0.08409074,  0.04320697,  0.30471   , ...,  0.00842549,\n           0.20212589, -0.4035524 ]]], shape=(16, 300, 256), dtype=float32),\n array([[[[-4.39609170e-01,  9.61639643e-01,  7.93434501e-01, ...,\n           -3.18944782e-01, -8.34697247e-01,  1.57751977e-01],\n          [ 3.83531868e-01,  6.28611505e-01,  1.26933634e+00, ...,\n           -1.68678209e-01,  9.32841420e-01, -6.75514758e-01],\n          [ 7.42640853e-01,  4.62959528e-01,  5.44742107e-01, ...,\n           -2.80437529e-01,  3.89003277e-01, -8.73044133e-01],\n          ...,\n          [-2.77071834e-01,  4.44855541e-01,  2.88006842e-01, ...,\n            8.51592720e-01, -2.37388492e-01,  7.98963130e-01],\n          [-7.74624407e-01,  2.80102313e-01,  3.01263064e-01, ...,\n            2.75779665e-01, -4.00673330e-01,  7.95107424e-01],\n          [-1.21918666e+00,  9.33880270e-01,  4.85519975e-01, ...,\n            7.72008598e-01, -7.51813412e-01,  1.15139747e+00]],\n \n         [[-7.05031276e-01,  4.97671813e-01, -1.86697662e-01, ...,\n           -3.15233320e-01,  6.66591704e-01, -4.27367957e-03],\n          [ 6.30730808e-01,  6.74717486e-01, -7.62427747e-02, ...,\n            7.27255225e-01,  1.56934381e+00, -3.47435474e-01],\n          [ 5.40868044e-01, -3.95197660e-01, -1.79413521e+00, ...,\n            1.43228799e-01,  9.30176914e-01, -1.00596547e+00],\n          ...,\n          [-1.16593562e-01,  8.55302095e-01, -2.95578897e-01, ...,\n           -1.39762402e-01,  6.19936466e-01, -4.17494237e-01],\n          [-3.97493601e-01, -7.41596520e-02, -3.02625913e-02, ...,\n           -5.42319752e-02,  3.87964904e-01, -2.80100882e-01],\n          [-7.93676674e-01,  8.46044183e-01,  2.97362834e-01, ...,\n            1.24958418e-01,  7.98488140e-01, -6.06633306e-01]],\n \n         [[-3.08459491e-01, -8.20719972e-02,  7.25344777e-01, ...,\n            2.01581493e-01,  2.92824984e-01,  1.18970117e-02],\n          [-6.79220259e-01,  8.87568370e-02,  4.97174323e-01, ...,\n            6.82081223e-01,  1.99860051e-01, -1.67726576e+00],\n          [ 3.93993348e-01, -5.56673765e-01, -1.06555116e+00, ...,\n            2.26158455e-01,  3.37771565e-01, -1.14546090e-01],\n          ...,\n          [ 2.17061013e-01,  4.16420698e-02, -2.31747210e-01, ...,\n            1.83987752e-01, -4.61009175e-01,  1.22204661e+00],\n          [ 3.73128690e-02, -4.21546638e-01,  1.97685719e-01, ...,\n            6.47340417e-01, -5.38946271e-01,  1.34911048e+00],\n          [-1.84230641e-01,  7.48908892e-02,  9.01498646e-02, ...,\n            6.40802085e-01, -1.62880704e-01,  3.86656642e-01]],\n \n         [[ 3.43772471e-01,  1.04051483e+00,  4.50753838e-01, ...,\n            5.19744217e-01, -2.69747019e-01, -1.93234384e-01],\n          [ 1.50050551e-01,  1.32684410e+00,  5.35892904e-01, ...,\n            1.18836474e+00, -6.80315614e-01, -2.92872310e+00],\n          [ 5.52503467e-01,  5.88255450e-02,  9.70856309e-01, ...,\n            5.70571005e-01,  2.73052961e-01, -1.32678676e+00],\n          ...,\n          [ 4.16350931e-01,  4.08235312e-01,  1.58735871e-01, ...,\n            3.00635099e-01,  1.38279781e-01,  6.75884485e-02],\n          [ 5.02100766e-01,  1.89107731e-01,  3.32687944e-01, ...,\n            7.29194999e-01, -1.37773290e-01,  9.97810289e-02],\n          [ 4.90115464e-01,  1.33333743e-01, -8.10332075e-02, ...,\n            5.88372529e-01,  6.73979847e-03, -5.10984398e-02]],\n \n         [[ 3.58888090e-01,  8.92615259e-01, -3.98239613e-01, ...,\n            2.59231716e-01, -5.18052280e-01,  3.20765615e-01],\n          [-2.14478984e-01,  1.07120824e+00,  7.03028619e-01, ...,\n            6.95826411e-01, -3.33548814e-01, -1.23228967e+00],\n          [ 2.85715550e-01,  7.81859577e-01,  9.05630410e-01, ...,\n            1.74439982e-01,  1.47495210e-01, -4.31995600e-01],\n          ...,\n          [ 4.59051162e-01,  1.41084656e-01,  2.07872897e-01, ...,\n            8.48156363e-02,  3.74162108e-01,  6.39126420e-01],\n          [ 7.06433415e-01, -1.03901036e-01,  4.58595127e-01, ...,\n            3.16295385e-01,  6.56077623e-01,  7.32724845e-01],\n          [ 4.38292056e-01,  5.63082956e-02,  3.31573784e-01, ...,\n            2.83391505e-01,  2.55057871e-01,  6.39778018e-01]],\n \n         [[-6.69007972e-02,  1.48814410e-01,  9.42261145e-02, ...,\n            2.69586146e-01, -6.06374443e-03,  4.74753112e-01],\n          [-3.49161059e-01,  8.28742802e-01, -5.14552534e-01, ...,\n           -1.86304808e-01,  3.98010343e-01, -5.14492929e-01],\n          [-4.92978036e-01,  9.39341784e-01,  1.23846717e-01, ...,\n           -3.45521271e-01,  7.40316153e-01, -8.20339203e-01],\n          ...,\n          [ 8.93517509e-02, -6.71799853e-03,  5.88861033e-02, ...,\n           -1.00743160e-01,  5.50548911e-01, -2.71548003e-01],\n          [ 9.82953086e-02,  8.68213642e-03,  1.71615720e-01, ...,\n           -1.33185834e-01,  6.89869702e-01, -1.08194493e-01],\n          [-1.49240931e-02, -2.24570230e-01,  3.11870217e-01, ...,\n            3.86104286e-02,  3.97502989e-01, -1.57570288e-01]]],\n \n \n        [[[ 4.91729200e-01, -7.95254931e-02,  7.48483539e-01, ...,\n            1.19855488e-02,  4.67949480e-01, -1.00900829e+00],\n          [-1.50256908e+00,  8.86320591e-01, -6.01969242e-01, ...,\n            4.69510943e-01,  5.28086066e-01, -4.09476489e-01],\n          [-1.75250661e+00,  9.49858785e-01, -4.88686889e-01, ...,\n            2.96155930e-01,  6.84039831e-01,  5.53229684e-03],\n          ...,\n          [-4.29380447e-01,  4.95725960e-01,  8.07039559e-01, ...,\n           -8.96140411e-02,  6.14107877e-04,  1.04184590e-01],\n          [-6.72593176e-01,  3.64473164e-01,  2.10499674e-01, ...,\n            6.11674607e-01, -1.51608840e-01,  8.03101957e-01],\n          [-4.12250608e-01,  1.31910339e-01,  1.26542136e-01, ...,\n            3.38210352e-02,  1.15873225e-01,  4.80506629e-01]],\n \n         [[ 2.60667115e-01, -5.66669106e-01, -2.00414658e+00, ...,\n            1.01131432e-01,  6.91619396e-01, -5.43609798e-01],\n          [-1.00090063e+00,  6.67903796e-02, -8.11394572e-01, ...,\n            7.50023663e-01,  8.30209792e-01, -2.05238998e-01],\n          [-1.77058733e+00,  6.03319928e-02, -7.70091236e-01, ...,\n           -2.43403465e-01,  1.18819618e+00, -1.51937202e-01],\n          ...,\n          [-4.14336979e-01,  6.95664823e-01,  1.36909541e-02, ...,\n           -2.64898181e-01,  2.74938166e-01, -9.29536343e-01],\n          [-3.81712735e-01,  4.98421222e-01, -1.08425371e-01, ...,\n            1.36938915e-01,  2.03953758e-01, -4.42400724e-01],\n          [-1.45277783e-01,  1.99963719e-01,  1.60779983e-01, ...,\n            1.32713512e-01,  2.25643530e-01, -5.82434058e-01]],\n \n         [[ 7.48466998e-02, -9.52746093e-01, -2.04229522e+00, ...,\n            6.48558378e-01, -3.48424315e-01,  3.21485341e-01],\n          [-7.39772916e-01, -9.08566296e-01, -3.09769273e-01, ...,\n            5.51495075e-01,  6.55681267e-02, -3.32854271e-01],\n          [-7.11515605e-01, -2.89710671e-01, -3.03929687e-01, ...,\n           -3.82665932e-01,  9.17471647e-01, -5.97443104e-01],\n          ...,\n          [ 1.92171603e-01,  2.18204662e-01, -1.02576047e-01, ...,\n           -7.82509968e-02, -6.82717741e-01,  7.26721957e-02],\n          [ 2.71240592e-01,  3.92499231e-02, -1.52302429e-01, ...,\n            3.19798559e-01, -8.61344159e-01,  8.62956583e-01],\n          [ 4.26670223e-01, -3.78560245e-01, -6.47090673e-02, ...,\n            3.54465097e-01, -2.36210704e-01,  6.32466853e-01]],\n \n         [[ 7.55312204e-01, -3.69657993e-01,  1.38204619e-01, ...,\n            1.00517762e+00,  2.40495786e-01, -4.73524123e-01],\n          [ 3.28844070e-01,  4.81201857e-01, -2.87530899e-01, ...,\n            4.80865449e-01, -8.05479065e-02, -1.22066057e+00],\n          [ 2.72980422e-01,  4.80663717e-01, -1.93953231e-01, ...,\n            1.62771106e-01,  3.69896173e-01, -9.64976370e-01],\n          ...,\n          [ 3.28386128e-01,  8.03652406e-02, -4.45947163e-02, ...,\n            3.99233580e-01,  5.03020138e-02, -6.29399344e-02],\n          [ 4.82656538e-01,  6.62458465e-02, -3.84251289e-02, ...,\n            6.08461201e-01, -3.98852676e-02,  2.17996955e-01],\n          [ 6.66484118e-01, -1.92596495e-01,  1.38933867e-01, ...,\n            5.79705298e-01,  9.98308212e-02,  2.40523249e-01]],\n \n         [[ 3.10861498e-01, -1.16300009e-01,  5.75585887e-02, ...,\n            3.68513048e-01,  4.89822716e-01, -3.93864602e-01],\n          [-8.82223099e-02, -2.64163017e-01, -1.49789238e+00, ...,\n           -8.88350755e-02, -3.59447524e-02, -8.06732178e-01],\n          [-3.14115845e-02, -2.96326637e-01, -6.74438000e-01, ...,\n           -9.04925615e-02,  1.48784250e-01, -4.88910377e-01],\n          ...,\n          [-9.10908356e-03,  3.18710864e-01,  5.32205284e-01, ...,\n           -2.98066083e-02,  1.83809459e-01,  4.11273330e-01],\n          [-1.98459346e-02,  1.93837032e-01,  4.20336545e-01, ...,\n            1.51630908e-01,  1.53929159e-01,  4.88595992e-01],\n          [ 5.84754199e-02,  1.76529977e-02,  6.34577096e-01, ...,\n           -2.80764811e-02,  6.52341694e-02,  5.26259422e-01]],\n \n         [[-6.51239574e-01,  1.69076473e-01, -2.70117015e-01, ...,\n           -5.66327432e-03,  3.01152587e-01, -9.53142226e-01],\n          [-4.74184811e-01, -8.08372796e-01, -1.29902661e+00, ...,\n           -1.87869281e-01, -1.27195978e+00, -1.47558883e-01],\n          [ 9.26777571e-02, -5.62007248e-01, -7.84630299e-01, ...,\n           -4.41350222e-01, -4.69365448e-01, -9.17903930e-02],\n          ...,\n          [-2.97440141e-02,  2.28771016e-01,  2.06739873e-01, ...,\n           -2.50297755e-01, -1.40371174e-01, -5.24031401e-01],\n          [ 1.47734862e-02,  5.13804443e-02,  3.78182054e-01, ...,\n           -1.98379278e-01, -7.52045289e-02, -5.70092499e-01],\n          [ 1.75525740e-01, -9.25884768e-02,  3.73608112e-01, ...,\n           -4.49444205e-01, -1.81020826e-01, -4.14834917e-01]]],\n \n \n        [[[ 4.07623827e-01,  4.16158348e-01,  8.76921058e-01, ...,\n           -4.67917234e-01,  4.66669589e-01, -4.55430478e-01],\n          [-4.12159711e-01,  7.75497139e-01,  9.46900427e-01, ...,\n           -3.77115130e-01,  6.82319999e-01, -5.73476493e-01],\n          [-8.93861830e-01, -2.65303582e-01,  8.05658817e-01, ...,\n           -5.66360019e-02,  7.91308165e-01,  2.25637689e-01],\n          ...,\n          [-6.73445880e-01,  3.83128136e-01,  4.83105779e-01, ...,\n            5.20005286e-01, -5.13967395e-01,  1.42270517e+00],\n          [ 1.60727724e-01,  1.13863073e-01,  5.75561643e-01, ...,\n            1.03204884e-01, -7.57855535e-01,  1.48464692e+00],\n          [-2.78602302e-01, -1.00655697e-01,  2.08589613e-01, ...,\n            3.66008669e-01, -6.63084865e-01,  1.28958237e+00]],\n \n         [[ 5.74149415e-02, -8.00285116e-02, -1.84271467e+00, ...,\n           -2.08549812e-01,  7.14268386e-01, -4.93679225e-01],\n          [-3.87945950e-01,  9.85267758e-01,  2.84188837e-01, ...,\n            3.47786933e-01,  9.19646025e-01, -3.93480182e-01],\n          [-4.88657296e-01, -5.44949949e-01,  2.92747557e-01, ...,\n            5.00594139e-01,  3.00515354e-01,  3.67002428e-01],\n          ...,\n          [-9.74448681e-01,  7.31617212e-01,  2.90820956e-01, ...,\n           -7.78980181e-02,  9.88474965e-01, -4.61455226e-01],\n          [ 6.73174560e-02,  1.10690999e+00,  3.48630905e-01, ...,\n           -1.11992463e-01,  4.91362512e-01,  9.80939865e-02],\n          [ 1.34650320e-02,  9.60274220e-01,  1.44529074e-01, ...,\n           -2.92598382e-02,  4.07737285e-01, -1.32896438e-01]],\n \n         [[ 2.39626244e-01, -7.00919747e-01, -1.22955406e+00, ...,\n            3.05904150e-01,  2.27135018e-01, -3.16871516e-02],\n          [-3.91372114e-01, -6.85962677e-01,  7.33590364e-01, ...,\n           -1.27871245e-01,  7.31867790e-01, -1.51131320e+00],\n          [-7.18588769e-01, -9.48704183e-01,  4.27977353e-01, ...,\n            1.18524992e+00, -6.94378197e-01,  6.76830351e-01],\n          ...,\n          [-2.11579800e-01,  5.55379510e-01,  1.31609906e-02, ...,\n           -8.83311257e-02, -4.77415323e-02,  5.05702257e-01],\n          [ 7.13175654e-01, -2.73930341e-01, -2.68649966e-01, ...,\n            2.15473831e-01, -2.69915968e-01,  3.05076629e-01],\n          [ 3.95501584e-01, -3.21663082e-01, -3.79048288e-01, ...,\n            5.24159133e-01, -3.15718532e-01,  2.68078208e-01]],\n \n         [[ 2.54868537e-01, -9.00675952e-02,  6.66811407e-01, ...,\n            7.22966731e-01, -5.38966917e-02, -1.11181355e+00],\n          [ 1.22854047e-01,  5.86999357e-01,  9.57300961e-01, ...,\n            6.87807202e-01, -3.38147432e-01, -2.80769038e+00],\n          [ 5.08156955e-01,  4.00815547e-01, -1.13931760e-01, ...,\n            2.41432309e-01, -1.60112095e+00, -8.18101406e-01],\n          ...,\n          [ 4.45082068e-01,  3.36575747e-01, -1.00704111e-01, ...,\n            2.99677014e-01,  2.72550136e-01,  5.03570512e-02],\n          [ 4.49813038e-01,  2.77006775e-01,  1.39462680e-01, ...,\n            3.87996465e-01,  4.77425940e-02,  2.22614497e-01],\n          [ 5.63337803e-01,  1.91454757e-02,  3.10325734e-02, ...,\n            5.89400828e-01,  1.83442742e-01,  3.32304500e-02]],\n \n         [[ 1.37800902e-01,  2.27817567e-03,  3.64618212e-01, ...,\n            9.91482958e-02,  3.58582467e-01, -7.19743446e-02],\n          [-4.28270623e-02,  4.57681715e-01,  6.83641315e-01, ...,\n            1.66789949e-01, -4.18181688e-01, -1.08445740e+00],\n          [-6.66140676e-01,  8.63392293e-01, -2.03218982e-01, ...,\n            4.26713675e-01, -1.05736542e+00,  6.04004599e-02],\n          ...,\n          [ 3.96560282e-01,  3.19948196e-01,  2.17385814e-01, ...,\n           -3.70792598e-02,  4.86106485e-01,  5.83664000e-01],\n          [ 3.69588792e-01,  2.93957919e-01,  9.76835787e-02, ...,\n           -3.48777957e-02,  4.73175913e-01,  6.67917967e-01],\n          [ 3.92455816e-01,  2.48140857e-01,  2.45767057e-01, ...,\n            7.02687129e-02,  3.10345978e-01,  6.11264348e-01]],\n \n         [[-4.51239675e-01,  8.62516105e-01,  2.88019359e-01, ...,\n           -4.79999423e-01,  9.42851841e-01, -7.53279448e-01],\n          [-8.22428055e-03,  6.27245307e-01, -1.30677298e-01, ...,\n            2.05768406e-01,  1.12456039e-01, -7.33352974e-02],\n          [-3.37225854e-01,  7.60753155e-01,  3.18185866e-01, ...,\n            1.40983188e+00, -7.42743969e-01, -1.00446963e+00],\n          ...,\n          [ 2.90092081e-01,  2.59771734e-01,  2.94313282e-01, ...,\n           -5.11477180e-02,  3.73304486e-01, -3.29094321e-01],\n          [ 2.89931267e-01,  2.05466285e-01,  2.71430612e-01, ...,\n            6.17267750e-02,  2.98302203e-01, -4.14521039e-01],\n          [ 4.84784722e-01,  2.94039935e-01,  3.29581261e-01, ...,\n            1.03788763e-01,  2.08471388e-01, -5.30934453e-01]]],\n \n \n        ...,\n \n \n        [[[ 2.68821269e-01,  7.25201130e-01,  3.65327805e-01, ...,\n           -1.79534748e-01,  4.55760092e-01, -5.04916847e-01],\n          [-6.03936553e-01,  6.19188905e-01,  8.29701841e-01, ...,\n            4.40537006e-01,  1.72349196e-02,  1.52378023e-01],\n          [-1.33697748e+00,  1.35541618e-01,  9.17636603e-02, ...,\n           -3.29536974e-01, -8.90899748e-02,  5.08804798e-01],\n          ...,\n          [-2.69142538e-01,  4.38511878e-01,  5.73094666e-01, ...,\n            2.40084469e-01, -5.84712565e-01,  2.76938736e-01],\n          [-5.39904237e-01, -5.13691418e-02, -3.19743335e-01, ...,\n            2.58775890e-01, -6.05519831e-01, -2.48945519e-01],\n          [-7.14142084e-01,  5.01588643e-01,  5.04094183e-01, ...,\n            3.44819129e-01,  2.76981294e-01,  9.36927140e-01]],\n \n         [[ 3.09670001e-01, -2.42911950e-01, -2.06631947e+00, ...,\n            1.22098498e-01,  1.13774693e+00, -3.34404767e-01],\n          [-5.47154248e-01,  7.92603076e-01, -3.08233500e-01, ...,\n           -6.56948030e-01, -1.94691733e-01, -9.31238949e-01],\n          [-1.05888474e+00,  1.01750982e+00,  2.10122973e-01, ...,\n           -4.98329848e-01,  5.83853900e-01, -6.21545434e-01],\n          ...,\n          [ 1.74680948e-02, -1.65316030e-01,  3.35973531e-01, ...,\n           -9.22369137e-02,  4.57558393e-01, -5.02337277e-01],\n          [ 3.69183384e-02,  6.42829120e-01,  3.80087435e-01, ...,\n           -4.13415700e-01,  1.25101566e+00, -1.55055630e+00],\n          [-6.39457524e-01,  1.19900334e+00,  2.67706960e-01, ...,\n           -8.42820585e-01,  1.13012755e+00, -9.28323567e-01]],\n \n         [[ 6.44707680e-01, -1.28754169e-01, -1.45081592e+00, ...,\n            2.10226595e-01,  7.17582941e-01, -1.00041533e+00],\n          [-1.14008343e+00,  8.06669414e-01, -1.93464220e-01, ...,\n            4.53718007e-02, -3.50182086e-01, -1.39590764e+00],\n          [-3.97031963e-01,  6.90766051e-02,  2.91643590e-01, ...,\n           -7.92025179e-02,  2.72768945e-01,  8.70614275e-02],\n          ...,\n          [ 1.15906984e-01, -6.48421347e-01, -9.62717608e-02, ...,\n            7.64739752e-01, -7.18452990e-01,  4.43990380e-01],\n          [ 5.73937297e-01,  1.32130831e-01, -1.48921371e-01, ...,\n            1.06918943e+00,  1.40239010e-02,  1.24136269e-01],\n          [ 6.90204024e-01, -2.27345765e-01, -1.53080644e-02, ...,\n           -4.55017775e-01,  1.34480619e+00, -4.77416873e-01]],\n \n         [[ 3.56969953e-01,  3.84308308e-01,  7.07999825e-01, ...,\n           -8.54624137e-02,  5.84738553e-01, -1.03379631e+00],\n          [-7.50964403e-01,  9.00896013e-01, -2.41662562e-02, ...,\n           -6.49195969e-01, -8.61596018e-02, -8.77560154e-02],\n          [ 2.40460619e-01,  3.95603895e-01,  5.09407781e-02, ...,\n            1.46338359e-01, -3.68776023e-02, -1.71882585e-01],\n          ...,\n          [ 2.59519219e-01,  3.53807598e-01,  2.09166721e-01, ...,\n            6.12637103e-01,  5.30471392e-02,  1.73379168e-01],\n          [ 5.80887616e-01,  1.81416914e-01,  2.67522670e-02, ...,\n            8.70826185e-01, -6.27973974e-01,  2.11745501e-01],\n          [ 3.77090871e-01,  2.04475626e-01,  4.31537330e-02, ...,\n           -1.93339922e-02,  3.08103055e-01,  1.05044268e-01]],\n \n         [[ 1.83057204e-01,  6.47873640e-01,  5.83711028e-01, ...,\n           -1.71212628e-01,  3.86746496e-01, -3.60260278e-01],\n          [-8.52877319e-01,  3.63130420e-01, -6.03844583e-01, ...,\n           -1.85261264e-01, -1.15766180e+00,  2.23713741e-01],\n          [ 7.66395554e-02,  3.80182594e-01,  2.80584037e-01, ...,\n           -5.66075230e-03, -2.98884436e-02, -2.41344292e-02],\n          ...,\n          [ 3.84200275e-01,  6.58641476e-03,  3.85238022e-01, ...,\n            3.23433697e-01,  7.10387528e-01,  2.27052763e-01],\n          [ 1.89766616e-01, -1.88159868e-01,  1.70784622e-01, ...,\n            3.45102437e-02,  1.64190847e-02,  2.44765908e-01],\n          [ 8.80224705e-02,  1.28114477e-01,  1.91347748e-01, ...,\n           -2.96746284e-01,  2.19978601e-01,  2.68099487e-01]],\n \n         [[-5.01935482e-01,  1.06570852e+00, -1.90525979e-01, ...,\n           -6.48380160e-01,  7.98114538e-01, -8.29866290e-01],\n          [ 2.03229576e-01,  6.81022346e-01,  8.82625431e-02, ...,\n           -1.20201698e-02, -1.48601198e+00, -7.20994249e-02],\n          [ 3.25545043e-01,  5.46807647e-01, -6.24384265e-03, ...,\n           -2.56922066e-01, -3.37211668e-01, -4.58029866e-01],\n          ...,\n          [ 8.33656639e-02,  8.95485580e-02,  1.82847321e-01, ...,\n           -1.68057621e-01,  3.10918063e-01, -3.93410981e-01],\n          [ 1.30660698e-01, -2.12409586e-01, -1.20221749e-01, ...,\n           -4.45588052e-01, -1.69036672e-01, -3.89731884e-01],\n          [ 2.47021139e-01, -9.77886021e-02,  5.84689453e-02, ...,\n           -6.09150112e-01, -2.35438067e-02, -5.95817506e-01]]],\n \n \n        [[[-6.15492724e-02,  6.75985813e-01,  7.13382065e-01, ...,\n           -3.86523865e-02, -5.78950405e-01,  2.29451638e-02],\n          [ 3.07128936e-01,  8.93660247e-01,  1.09869361e+00, ...,\n            3.33003819e-01,  4.78902429e-01, -5.83954155e-01],\n          [-6.32162869e-01,  1.08079307e-01,  2.67345458e-01, ...,\n           -2.46136621e-01, -5.69938540e-01, -4.51331377e-01],\n          ...,\n          [-9.72131789e-01,  7.99744070e-01,  5.11714399e-01, ...,\n            7.00636685e-01, -5.71034551e-01,  9.58903015e-01],\n          [-8.26687694e-01,  5.65545440e-01,  6.58677965e-02, ...,\n            4.78644848e-01, -5.16798854e-01,  8.01487207e-01],\n          [-4.82313819e-02,  9.11731571e-02,  1.25845522e-01, ...,\n            1.50638714e-01, -8.49173844e-01,  3.22355777e-01]],\n \n         [[-1.25901978e-02,  1.40278116e-01, -6.70149267e-01, ...,\n            1.06207363e-01,  5.23258209e-01,  2.01330781e-01],\n          [ 7.38125890e-02,  8.80894065e-01, -3.08405101e-01, ...,\n            7.49687612e-01,  1.33121002e+00, -6.51229322e-02],\n          [-6.26119971e-01,  2.73921847e-01, -6.53803766e-01, ...,\n           -4.72066142e-02,  1.35058388e-01, -8.08869004e-01],\n          ...,\n          [-1.07253349e+00,  1.26046836e+00,  2.63644308e-01, ...,\n            1.53737636e-02,  7.15744615e-01, -9.64836538e-01],\n          [-5.74049175e-01,  1.43109524e+00, -2.85063028e-01, ...,\n           -4.01228428e-01,  6.04828000e-01, -5.36516249e-01],\n          [-1.37246132e-01,  2.57326633e-01, -8.22053313e-01, ...,\n            4.72073406e-02,  4.08590972e-01, -8.19859445e-01]],\n \n         [[ 4.05341446e-01,  3.20407778e-01,  2.75850326e-01, ...,\n            7.62508273e-01, -3.58162403e-01,  7.06265211e-01],\n          [-9.49732542e-01,  8.97443295e-03,  8.79038751e-01, ...,\n            8.01310956e-01,  2.22228691e-01, -1.13478005e+00],\n          [ 9.29710791e-02, -7.69408584e-01, -7.67731011e-01, ...,\n            6.94165707e-01, -3.69669199e-01,  4.43784654e-01],\n          ...,\n          [-1.69311643e-01,  2.29611352e-01,  4.01401341e-01, ...,\n           -1.03533983e-01,  2.01216072e-01,  2.04309553e-01],\n          [-4.14230786e-02, -4.36960340e-01, -3.74945790e-01, ...,\n           -4.30960894e-01,  5.42076707e-01, -2.94642180e-01],\n          [ 5.20811915e-01, -1.14919400e+00, -6.91430926e-01, ...,\n            4.91126418e-01, -1.06992090e+00,  1.13270116e+00]],\n \n         [[ 1.32451153e+00,  8.94288957e-01,  4.60445464e-01, ...,\n            8.46447408e-01, -8.95780548e-02,  4.10422832e-01],\n          [-2.88840178e-02,  1.41622376e+00,  8.83715451e-01, ...,\n            1.40709579e+00, -6.71724021e-01, -2.81661916e+00],\n          [ 5.51327288e-01, -1.53632611e-01,  6.30061686e-01, ...,\n            6.81445718e-01,  6.07341826e-01, -2.80452758e-01],\n          ...,\n          [ 4.41180348e-01,  3.73322457e-01,  6.12147376e-02, ...,\n            3.36824507e-01,  1.16245784e-01, -2.59523034e-01],\n          [ 3.72271061e-01,  1.79337978e-01, -6.90628961e-02, ...,\n            1.16557807e-01,  2.30993345e-01, -2.87768245e-01],\n          [ 4.52940702e-01,  2.46919230e-01,  3.29825372e-01, ...,\n            2.67781258e-01,  6.81272075e-02,  2.58170128e-01]],\n \n         [[ 3.60459954e-01,  7.71466970e-01, -4.69354391e-01, ...,\n            6.04424775e-01, -5.74853122e-01,  8.91211808e-01],\n          [-6.93075120e-01,  1.27240622e+00,  6.05183780e-01, ...,\n            6.47810400e-01, -4.09509242e-01, -9.81015980e-01],\n          [ 3.40127498e-01,  2.27463499e-01,  6.10883832e-01, ...,\n            3.92545998e-01,  5.18154025e-01,  4.30931628e-01],\n          ...,\n          [ 5.94101489e-01,  2.78509349e-01,  9.63957533e-02, ...,\n            1.67581350e-01,  4.79202360e-01,  6.28613532e-01],\n          [ 4.91277575e-01, -2.53376812e-01, -1.72414854e-02, ...,\n           -2.41336226e-02,  3.87212396e-01,  5.23232877e-01],\n          [ 2.50949323e-01,  5.72749861e-02,  4.15786058e-01, ...,\n            1.13197990e-01,  2.59533316e-01,  7.41779625e-01]],\n \n         [[-9.14950296e-02,  8.02535340e-02,  1.00322999e-01, ...,\n            6.55624509e-01,  2.00860053e-01,  5.40858448e-01],\n          [-2.03837559e-01,  7.79979408e-01, -1.07385993e+00, ...,\n           -7.59620741e-02,  2.43760780e-01, -4.48485792e-01],\n          [-9.64792259e-03,  1.86762959e-01,  3.41475815e-01, ...,\n           -3.07377070e-01,  8.45798194e-01, -1.49581373e-01],\n          ...,\n          [ 2.63219893e-01,  1.62445545e-01,  3.41129214e-01, ...,\n            5.75859435e-02,  4.96056020e-01, -3.17883313e-01],\n          [ 2.09684834e-01, -3.70136559e-01,  3.71186823e-01, ...,\n           -3.06399256e-01,  5.13082623e-01, -1.77279457e-01],\n          [-7.66630694e-02,  1.79886550e-01,  1.83509201e-01, ...,\n           -1.86804235e-01,  5.19619048e-01, -1.16079994e-01]]],\n \n \n        [[[ 6.37408733e-01,  8.08299631e-02,  5.10890245e-01, ...,\n           -1.10155359e-01,  5.11713862e-01, -5.18486857e-01],\n          [-3.33420694e-01,  1.07798791e+00,  8.10619295e-01, ...,\n           -5.39437413e-01, -9.01475430e-01,  9.85531658e-02],\n          [-9.25898775e-02,  1.23706400e+00,  1.07844675e+00, ...,\n           -3.47047180e-01,  1.01003397e+00, -6.03442490e-01],\n          ...,\n          [-9.60760713e-01,  7.59405077e-01,  2.97208369e-01, ...,\n            1.00195980e+00, -1.69528738e-01,  9.51667905e-01],\n          [-5.06394446e-01, -7.71797895e-02,  1.56698734e-01, ...,\n            3.88124168e-01, -2.21790761e-01,  1.32365394e+00],\n          [-6.78483486e-01,  4.05527443e-01,  3.43310446e-01, ...,\n            4.72486377e-01, -5.12353256e-02,  8.17081094e-01]],\n \n         [[ 4.62754726e-01, -4.99916464e-01, -1.94686651e+00, ...,\n            2.62508005e-01,  8.03583980e-01, -1.81491971e-02],\n          [-6.62658632e-01,  4.87358809e-01, -1.73381642e-01, ...,\n           -3.51226300e-01,  4.75250632e-01,  6.81829453e-02],\n          [ 1.60609797e-01,  8.30267966e-01, -4.74868417e-01, ...,\n            5.74524343e-01,  1.21569836e+00, -3.54284436e-01],\n          ...,\n          [-7.25672185e-01,  1.09783185e+00,  1.39605001e-01, ...,\n            2.59465754e-01,  9.42421257e-01, -5.67724049e-01],\n          [-5.92989028e-01,  5.93581259e-01,  1.75656125e-01, ...,\n           -2.40021020e-01,  7.28014708e-01, -2.91227281e-01],\n          [-3.76205713e-01,  4.43248421e-01,  4.32878792e-01, ...,\n            4.26999420e-01,  9.47104692e-01, -8.31835568e-01]],\n \n         [[ 5.69302201e-01, -7.57002950e-01, -1.37910426e+00, ...,\n            3.11129361e-01,  1.10756636e-01,  5.29935062e-01],\n          [-3.62461269e-01,  2.33571827e-01,  6.32879972e-01, ...,\n            3.09396476e-01,  2.49398172e-01, -1.10051319e-01],\n          [-5.69051981e-01,  9.10873190e-02,  3.02148789e-01, ...,\n            4.50615555e-01,  6.31938219e-01, -1.08787811e+00],\n          ...,\n          [ 4.07048553e-01,  1.32256761e-01,  1.66693792e-01, ...,\n            2.69248039e-01, -4.35230374e-01,  5.88230908e-01],\n          [ 1.80464953e-01, -1.78918600e-01,  3.27186525e-01, ...,\n            3.44259977e-01,  2.41778761e-01,  9.90955770e-01],\n          [-7.63700455e-02,  3.90146114e-02,  2.42713481e-01, ...,\n            8.61545682e-01, -4.33662325e-01,  6.77528501e-01]],\n \n         [[ 9.24532831e-01, -2.68633157e-01,  8.48833561e-01, ...,\n            1.00527501e+00,  1.01698652e-01, -7.87663281e-01],\n          [ 4.73831207e-01,  1.29323268e+00,  2.24642977e-01, ...,\n            8.56273174e-01, -8.10665607e-01, -8.86618197e-02],\n          [ 2.96493948e-01,  9.75206852e-01,  9.84683216e-01, ...,\n            5.90212524e-01, -1.07939817e-01, -2.71313453e+00],\n          ...,\n          [ 2.83754855e-01,  2.88692206e-01,  1.35779241e-02, ...,\n            5.45573175e-01, -6.53382912e-02,  6.74247965e-02],\n          [ 5.65241575e-01, -6.49237335e-02, -1.24223940e-01, ...,\n            5.10043085e-01,  2.77152091e-01, -3.35486643e-02],\n          [ 4.42841738e-01,  1.58640444e-01, -6.36927187e-02, ...,\n            7.10413814e-01,  1.42784826e-02,  1.42532689e-02]],\n \n         [[ 5.81800938e-01,  2.77643889e-01,  8.33756208e-01, ...,\n            3.40037733e-01,  2.10871041e-01,  5.13671339e-02],\n          [ 3.29131216e-01,  9.55624163e-01, -5.81969976e-01, ...,\n            3.26702774e-01, -6.79469645e-01,  2.81237751e-01],\n          [-4.82283592e-01,  1.04589009e+00,  7.22809136e-01, ...,\n            5.92110932e-01, -2.96956390e-01, -1.38078940e+00],\n          ...,\n          [ 2.63661325e-01,  3.32494467e-01,  2.31035516e-01, ...,\n            1.92582741e-01,  5.83220124e-01,  7.33121514e-01],\n          [ 3.59875500e-01,  2.13019654e-01,  2.29176268e-01, ...,\n           -5.56171173e-03,  2.24044412e-01,  5.93930423e-01],\n          [ 2.11061195e-01,  6.61085248e-02,  6.02024734e-01, ...,\n            1.78850532e-01,  4.16037999e-02,  4.58037674e-01]],\n \n         [[-2.94511825e-01,  7.44691908e-01,  1.33958086e-01, ...,\n           -4.23433185e-01,  6.34520710e-01, -3.89778733e-01],\n          [-3.35807085e-01,  1.89631000e-01, -6.56362111e-03, ...,\n            4.17127967e-01,  1.30995512e-02,  5.56843579e-01],\n          [-4.49363500e-01,  8.12572420e-01, -5.26243210e-01, ...,\n           -1.26001284e-01, -8.62602815e-02, -2.67831713e-01],\n          ...,\n          [-1.38901863e-02,  2.83459295e-02,  2.00464770e-01, ...,\n           -1.08849823e-01,  4.26902056e-01, -2.88880736e-01],\n          [ 2.04925492e-01,  6.97726533e-02,  3.67862672e-01, ...,\n           -1.43751159e-01,  3.28024209e-01, -3.76272529e-01],\n          [ 8.40907395e-02,  4.32069674e-02,  3.04710001e-01, ...,\n            8.42548721e-03,  2.02125892e-01, -4.03552413e-01]]]],\n       shape=(16, 6, 300, 256), dtype=float32),\n array([[[[-1.9853516 ,  2.3222656 , -2.8046875 , ..., -1.9326172 ,\n           -2.1894531 , -3.3828125 ],\n          [-1.0009766 , -2.1386719 , -2.2480469 , ..., -2.6171875 ,\n            2.7695312 , -2.0097656 ],\n          [ 2.8417969 , -1.5478516 , -1.5859375 , ..., -2.6503906 ,\n           -1.6826172 , -2.0800781 ],\n          ...,\n          [-4.53125   , -5.6914062 , -4.8945312 , ..., -4.703125  ,\n           -4.09375   , -4.484375  ],\n          [-4.3710938 , -4.3515625 , -4.0546875 , ..., -4.3515625 ,\n           -3.9121094 , -3.6660156 ],\n          [-4.8046875 , -4.65625   , -4.5703125 , ..., -3.5253906 ,\n           -4.6757812 , -4.8867188 ]],\n \n         [[-2.6621094 , -0.88134766, -3.2949219 , ..., -1.6445312 ,\n           -2.0644531 , -4.3242188 ],\n          [-2.7890625 , -4.4257812 , -2.9296875 , ..., -2.2285156 ,\n            1.8417969 , -3.6269531 ],\n          [ 1.9511719 , -2.6035156 , -2.3457031 , ..., -2.7324219 ,\n           -1.4257812 , -3.7910156 ],\n          ...,\n          [-3.6386719 , -4.7851562 , -4.9492188 , ..., -4.1289062 ,\n           -5.25      , -5.15625   ],\n          [-4.0898438 , -4.3320312 , -5.1835938 , ..., -4.7070312 ,\n           -4.734375  , -5.3945312 ],\n          [-4.4960938 , -5.1171875 , -5.8984375 , ..., -3.5117188 ,\n           -4.1523438 , -4.6953125 ]],\n \n         [[-3.2109375 , -0.7368164 , -5.3671875 , ..., -2.40625   ,\n           -3.734375  , -4.1953125 ],\n          [-2.8789062 , -2.9082031 , -3.5273438 , ..., -2.9160156 ,\n            1.4111328 , -3.5644531 ],\n          [ 0.11334229, -4.1210938 , -4.3203125 , ..., -3.5410156 ,\n           -3.1132812 , -4.2734375 ],\n          ...,\n          [-4.2617188 , -5.4726562 , -3.7480469 , ..., -4.7890625 ,\n           -4.6015625 , -3.7617188 ],\n          [-4.46875   , -5.078125  , -3.9707031 , ..., -5.1992188 ,\n           -3.6894531 , -3.1328125 ],\n          [-4.6601562 , -4.8203125 , -4.5351562 , ..., -4.0078125 ,\n           -4.65625   , -3.7226562 ]],\n \n         [[-2.7402344 ,  0.26757812, -3.8515625 , ..., -1.8623047 ,\n           -4.3046875 , -4.3867188 ],\n          [-3.1855469 , -3.0917969 , -3.6699219 , ..., -2.0253906 ,\n            2.3515625 , -3.2617188 ],\n          [ 0.77490234, -2.921875  , -3.390625  , ..., -2.3222656 ,\n           -3.265625  , -4.78125   ],\n          ...,\n          [-3.7695312 , -4.0898438 , -4.5117188 , ..., -3.9726562 ,\n           -4.46875   , -4.0820312 ],\n          [-3.9257812 , -4.140625  , -4.6171875 , ..., -3.9648438 ,\n           -4.2226562 , -4.5273438 ],\n          [-4.2421875 , -4.0625    , -4.7539062 , ..., -3.8164062 ,\n           -4.6679688 , -4.3710938 ]],\n \n         [[-2.3613281 ,  1.2070312 , -3.7695312 , ..., -1.8300781 ,\n           -4.1445312 , -3.8769531 ],\n          [-2.9316406 , -2.5332031 , -4.1484375 , ..., -3.4472656 ,\n            2.125     , -2.9199219 ],\n          [ 0.87597656, -3.2558594 , -4.203125  , ..., -3.6289062 ,\n           -2.8613281 , -3.5605469 ],\n          ...,\n          [-2.9882812 , -3.890625  , -3.8378906 , ..., -3.0117188 ,\n           -3.9355469 , -4.2890625 ],\n          [-2.7226562 , -3.6503906 , -4.3671875 , ..., -3.1914062 ,\n           -3.4121094 , -4.4804688 ],\n          [-3.5195312 , -3.4609375 , -4.2617188 , ..., -2.4414062 ,\n           -3.6132812 , -3.9160156 ]],\n \n         [[-3.3652344 ,  0.2734375 , -3.625     , ..., -2.4316406 ,\n           -3.7617188 , -4.9609375 ],\n          [-3.4042969 , -3.0488281 , -3.8515625 , ..., -3.8242188 ,\n            1.9501953 , -3.2402344 ],\n          [ 1.625     , -3.5371094 , -3.5332031 , ..., -3.9765625 ,\n           -2.6191406 , -3.8105469 ],\n          ...,\n          [-3.5605469 , -4.390625  , -4.40625   , ..., -3.7988281 ,\n           -4.1445312 , -4.5078125 ],\n          [-3.1269531 , -3.9296875 , -4.5273438 , ..., -3.7597656 ,\n           -3.6933594 , -4.2773438 ],\n          [-4.1445312 , -3.625     , -4.8671875 , ..., -3.1347656 ,\n           -3.8867188 , -4.515625  ]]],\n \n \n        [[[ 2.984375  , -2.0664062 , -1.8496094 , ..., -2.515625  ,\n           -2.9628906 , -1.8642578 ],\n          [-1.9082031 , -1.4833984 , -3.0351562 , ...,  2.1015625 ,\n           -1.8486328 , -2.9804688 ],\n          [-2.0390625 , -2.6816406 , -2.1875    , ...,  1.3564453 ,\n           -2.2460938 , -3.0800781 ],\n          ...,\n          [-3.7539062 , -4.3476562 , -4.2773438 , ..., -4.2109375 ,\n           -3.9804688 , -4.3710938 ],\n          [-4.0429688 , -5.6757812 , -4.71875   , ..., -4.1835938 ,\n           -4.53125   , -4.359375  ],\n          [-4.921875  , -5.8984375 , -4.0585938 , ..., -3.8671875 ,\n           -4.65625   , -4.1796875 ]],\n \n         [[ 2.140625  , -2.5527344 , -2.1074219 , ..., -2.4785156 ,\n           -1.9638672 , -3.7460938 ],\n          [-2.8496094 , -4.5625    , -2.7578125 , ...,  0.9423828 ,\n           -1.4941406 , -3.6347656 ],\n          [-2.7285156 , -4.3085938 , -2.5390625 , ...,  0.7578125 ,\n           -2.0117188 , -4.1054688 ],\n          ...,\n          [-3.9589844 , -5.0820312 , -4.6289062 , ..., -3.8554688 ,\n           -4.796875  , -5.0703125 ],\n          [-4.3320312 , -5.0898438 , -5.2578125 , ..., -4.8046875 ,\n           -5.4609375 , -5.7695312 ],\n          [-4.640625  , -5.5195312 , -5.3320312 , ..., -4.7304688 ,\n           -5.8828125 , -5.2460938 ]],\n \n         [[ 0.08538818, -4.3359375 , -3.4492188 , ..., -3.8320312 ,\n           -3.890625  , -3.9394531 ],\n          [-2.6621094 , -2.9941406 , -4.0664062 , ...,  0.36035156,\n           -3.8925781 , -4.34375   ],\n          [-2.9570312 , -3.3359375 , -3.6914062 , ...,  0.18652344,\n           -4.2226562 , -4.40625   ],\n          ...,\n          [-4.3164062 , -4.9023438 , -4.1953125 , ..., -4.296875  ,\n           -4.171875  , -3.9550781 ],\n          [-4.6914062 , -5.484375  , -4.1289062 , ..., -4.78125   ,\n           -4.4453125 , -3.5195312 ],\n          [-5.3203125 , -4.90625   , -4.328125  , ..., -4.46875   ,\n           -4.4804688 , -3.8105469 ]],\n \n         [[ 1.5205078 , -3.7558594 , -1.8320312 , ..., -2.0957031 ,\n           -3.0078125 , -5.1367188 ],\n          [-2.9335938 , -4.0625    , -2.4726562 , ...,  1.5966797 ,\n           -4.1523438 , -4.6875    ],\n          [-3.3164062 , -4.21875   , -2.3183594 , ...,  0.38305664,\n           -4.1835938 , -4.375     ],\n          ...,\n          [-3.5273438 , -4.2734375 , -3.8925781 , ..., -3.9746094 ,\n           -4.5625    , -4.3554688 ],\n          [-3.9453125 , -4.7070312 , -4.1679688 , ..., -3.8867188 ,\n           -5.        , -4.3242188 ],\n          [-4.4296875 , -5.1367188 , -3.9296875 , ..., -3.75      ,\n           -4.9804688 , -4.6289062 ]],\n \n         [[ 2.0722656 , -3.2949219 , -3.953125  , ..., -3.7597656 ,\n           -3.4628906 , -2.84375   ],\n          [-3.2246094 , -3.125     , -3.6210938 , ...,  1.2929688 ,\n           -2.6269531 , -3.09375   ],\n          [-2.3144531 , -3.9042969 , -2.921875  , ...,  0.7451172 ,\n           -2.765625  , -3.7695312 ],\n          ...,\n          [-2.375     , -4.1328125 , -3.796875  , ..., -3.1367188 ,\n           -3.6171875 , -3.6621094 ],\n          [-2.8496094 , -4.1289062 , -3.9570312 , ..., -2.9199219 ,\n           -3.7324219 , -3.5097656 ],\n          [-3.2792969 , -4.2382812 , -3.4179688 , ..., -2.7675781 ,\n           -3.6875    , -3.3808594 ]],\n \n         [[ 1.9306641 , -3.328125  , -2.8964844 , ..., -3.1933594 ,\n           -2.4296875 , -3.4824219 ],\n          [-2.9707031 , -3.4726562 , -3.2773438 , ...,  1.4472656 ,\n           -2.2734375 , -3.5605469 ],\n          [-2.8242188 , -3.4960938 , -3.0273438 , ...,  0.12194824,\n           -2.7148438 , -3.8066406 ],\n          ...,\n          [-2.484375  , -3.75      , -3.5546875 , ..., -3.5195312 ,\n           -3.6601562 , -4.1601562 ],\n          [-3.0996094 , -4.0429688 , -3.7050781 , ..., -3.46875   ,\n           -3.8984375 , -4.078125  ],\n          [-3.7285156 , -4.2695312 , -3.3144531 , ..., -3.0058594 ,\n           -4.0507812 , -4.1289062 ]]],\n \n \n        [[[ 2.8398438 , -1.7851562 , -2.4257812 , ..., -3.2011719 ,\n           -2.4492188 , -2.0214844 ],\n          [-1.8515625 , -2.1933594 , -2.7949219 , ..., -2.6835938 ,\n            1.9335938 , -2.34375   ],\n          [-1.8447266 , -0.8730469 , -2.1679688 , ..., -0.67529297,\n           -0.84277344,  0.46411133],\n          ...,\n          [-4.5820312 , -5.265625  , -4.3476562 , ..., -3.7519531 ,\n           -4.3710938 , -4.4335938 ],\n          [-5.0039062 , -4.3320312 , -4.0898438 , ..., -3.6269531 ,\n           -4.3789062 , -5.0078125 ],\n          [-5.1640625 , -5.2460938 , -4.5664062 , ..., -3.6894531 ,\n           -4.6640625 , -5.1953125 ]],\n \n         [[ 2.7050781 , -2.7128906 , -2.1640625 , ..., -3.2265625 ,\n           -2.6738281 , -4.3125    ],\n          [-3.2949219 , -4.5390625 , -3.4960938 , ..., -2.8867188 ,\n            0.6660156 , -3.75      ],\n          [-2.8007812 , -1.4912109 , -2.8632812 , ..., -1.9863281 ,\n           -2.0058594 ,  0.7451172 ],\n          ...,\n          [-3.8261719 , -4.4453125 , -5.6992188 , ..., -4.2773438 ,\n           -5.4414062 , -5.3203125 ],\n          [-4.4101562 , -5.6445312 , -5.2148438 , ..., -3.8515625 ,\n           -4.7773438 , -4.6445312 ],\n          [-4.4960938 , -5.0429688 , -5.6757812 , ..., -3.8105469 ,\n           -4.7304688 , -4.9570312 ]],\n \n         [[ 1.3291016 , -4.7734375 , -3.4550781 , ..., -3.5019531 ,\n           -3.1699219 , -3.9746094 ],\n          [-3.5488281 , -3.2832031 , -4.3515625 , ..., -3.6386719 ,\n           -0.1619873 , -4.8007812 ],\n          [-4.4101562 , -1.6220703 , -2.4550781 , ..., -1.9951172 ,\n           -3.65625   ,  1.0205078 ],\n          ...,\n          [-4.2890625 , -4.6640625 , -3.7363281 , ..., -4.2695312 ,\n           -4.9804688 , -3.265625  ],\n          [-4.9179688 , -5.5195312 , -3.7949219 , ..., -4.4179688 ,\n           -5.4257812 , -3.2382812 ],\n          [-4.65625   , -5.671875  , -4.0078125 , ..., -4.3359375 ,\n           -4.96875   , -3.1621094 ]],\n \n         [[ 1.5019531 , -3.2109375 , -2.9472656 , ..., -2.2382812 ,\n           -2.4453125 , -4.7734375 ],\n          [-3.2792969 , -2.8691406 , -4.078125  , ..., -2.9589844 ,\n            0.39770508, -3.9394531 ],\n          [-3.578125  , -2.0429688 , -2.9746094 , ..., -1.3808594 ,\n           -2.125     ,  2.5683594 ],\n          ...,\n          [-4.4726562 , -4.2421875 , -4.0898438 , ..., -3.8789062 ,\n           -4.6601562 , -3.9238281 ],\n          [-4.3242188 , -3.9179688 , -4.515625  , ..., -3.921875  ,\n           -4.7539062 , -4.0390625 ],\n          [-4.4609375 , -3.9238281 , -4.3359375 , ..., -3.9179688 ,\n           -4.4882812 , -4.21875   ]],\n \n         [[ 1.4628906 , -3.9414062 , -4.28125   , ..., -3.5605469 ,\n           -2.9785156 , -3.2871094 ],\n          [-3.2011719 , -2.6347656 , -4.5390625 , ..., -2.515625  ,\n            1.0917969 , -3.4550781 ],\n          [-3.1914062 , -1.03125   , -2.5       , ..., -3.3515625 ,\n           -1.2978516 ,  0.7294922 ],\n          ...,\n          [-3.2832031 , -3.7695312 , -3.7988281 , ..., -2.7851562 ,\n           -3.6816406 , -4.3203125 ],\n          [-3.5742188 , -3.5097656 , -3.4980469 , ..., -2.7832031 ,\n           -4.0390625 , -3.9433594 ],\n          [-3.3945312 , -3.640625  , -3.5039062 , ..., -2.5820312 ,\n           -3.7246094 , -3.7226562 ]],\n \n         [[ 2.4082031 , -3.9960938 , -3.4882812 , ..., -4.3007812 ,\n           -2.1757812 , -3.265625  ],\n          [-3.0644531 , -2.796875  , -3.6191406 , ..., -2.8984375 ,\n            0.59765625, -3.1640625 ],\n          [-2.3808594 , -2.140625  , -2.0253906 , ..., -1.3955078 ,\n           -1.84375   ,  0.4321289 ],\n          ...,\n          [-3.6132812 , -4.0585938 , -4.3085938 , ..., -3.1757812 ,\n           -4.1445312 , -4.46875   ],\n          [-4.1523438 , -3.9882812 , -4.265625  , ..., -3.4101562 ,\n           -4.4414062 , -4.453125  ],\n          [-3.8378906 , -4.1757812 , -4.1640625 , ..., -3.25      ,\n           -4.0976562 , -4.328125  ]]],\n \n \n        ...,\n \n \n        [[[ 3.1464844 , -1.7158203 , -1.8457031 , ..., -2.7675781 ,\n           -1.8535156 , -3.0175781 ],\n          [-1.3066406 , -3.4472656 ,  1.1699219 , ..., -0.44604492,\n           -1.3583984 , -1.8076172 ],\n          [-3.7207031 , -4.1015625 , -1.1660156 , ..., -1.1445312 ,\n           -3.5234375 , -2.8886719 ],\n          ...,\n          [-3.7734375 , -4.7226562 , -4.1484375 , ..., -4.6367188 ,\n           -4.5390625 , -4.1914062 ],\n          [-3.7714844 , -5.1132812 , -3.2714844 , ..., -4.4023438 ,\n           -4.7695312 , -3.6855469 ],\n          [-4.0507812 , -5.7421875 , -3.8085938 , ..., -3.0722656 ,\n           -4.9375    , -3.640625  ]],\n \n         [[ 2.1289062 , -2.8261719 , -1.7861328 , ..., -2.7851562 ,\n           -1.6259766 , -3.4667969 ],\n          [-2.2636719 , -4.4492188 ,  1.2695312 , ..., -2.4609375 ,\n           -2.0585938 , -2.5800781 ],\n          [-3.9570312 , -5.15625   , -2.9648438 , ..., -2.1777344 ,\n           -3.7675781 , -3.828125  ],\n          ...,\n          [-3.3730469 , -4.671875  , -4.4804688 , ..., -4.2460938 ,\n           -4.0234375 , -5.5390625 ],\n          [-4.5898438 , -4.8632812 , -4.8867188 , ..., -3.96875   ,\n           -5.6640625 , -6.0664062 ],\n          [-4.2890625 , -5.46875   , -4.921875  , ..., -3.3144531 ,\n           -4.7734375 , -4.8867188 ]],\n \n         [[ 1.8330078 , -4.0625    , -3.6582031 , ..., -2.9140625 ,\n           -2.5859375 , -4.1523438 ],\n          [-3.2265625 , -1.9775391 ,  0.33520508, ..., -2.8164062 ,\n           -2.5136719 , -3.5761719 ],\n          [-4.78125   , -4.21875   , -3.2070312 , ..., -2.6835938 ,\n           -3.8984375 , -3.6699219 ],\n          ...,\n          [-4.2773438 , -5.5429688 , -3.9199219 , ..., -4.9335938 ,\n           -4.0351562 , -3.6621094 ],\n          [-4.28125   , -5.8554688 , -3.3164062 , ..., -4.90625   ,\n           -5.2109375 , -3.2265625 ],\n          [-4.2226562 , -5.296875  , -3.9472656 , ..., -3.9609375 ,\n           -5.5429688 , -4.2304688 ]],\n \n         [[ 1.8398438 , -2.5253906 , -1.9599609 , ..., -2.3769531 ,\n           -3.2402344 , -4.6445312 ],\n          [-2.5273438 , -4.1289062 ,  1.2880859 , ..., -1.9472656 ,\n           -2.5761719 , -2.3105469 ],\n          [-4.3515625 , -4.3203125 , -2.6601562 , ..., -3.4960938 ,\n           -4.9179688 , -3.890625  ],\n          ...,\n          [-3.609375  , -4.1679688 , -3.7890625 , ..., -4.1523438 ,\n           -4.3789062 , -4.4296875 ],\n          [-3.84375   , -4.7070312 , -3.8027344 , ..., -3.1445312 ,\n           -5.1640625 , -4.8046875 ],\n          [-4.4414062 , -5.2773438 , -3.7578125 , ..., -2.9980469 ,\n           -5.5625    , -4.6132812 ]],\n \n         [[ 1.4208984 , -3.5234375 , -3.8691406 , ..., -3.1679688 ,\n           -3.3515625 , -3.6152344 ],\n          [-1.5615234 , -2.5527344 ,  0.703125  , ..., -1.8388672 ,\n           -2.1542969 , -3.6113281 ],\n          [-3.015625  , -3.8027344 , -3.2050781 , ..., -2.0605469 ,\n           -3.2285156 , -4.4101562 ],\n          ...,\n          [-2.5488281 , -3.5957031 , -4.0976562 , ..., -3.5996094 ,\n           -3.3789062 , -4.296875  ],\n          [-3.2539062 , -4.2929688 , -3.3710938 , ..., -2.2460938 ,\n           -4.0117188 , -3.4472656 ],\n          [-3.6542969 , -4.0195312 , -3.3066406 , ..., -2.3808594 ,\n           -3.6152344 , -3.7519531 ]],\n \n         [[ 2.0507812 , -3.3808594 , -3.3378906 , ..., -4.171875  ,\n           -3.1015625 , -3.5371094 ],\n          [-1.7998047 , -3.203125  ,  0.55810547, ..., -2.1660156 ,\n           -2.890625  , -3.9257812 ],\n          [-3.2929688 , -3.3183594 , -2.4492188 , ..., -2.3085938 ,\n           -3.3125    , -4.1679688 ],\n          ...,\n          [-2.6953125 , -3.5429688 , -4.0117188 , ..., -3.6113281 ,\n           -3.3359375 , -4.0859375 ],\n          [-3.5136719 , -3.9726562 , -3.5976562 , ..., -2.1855469 ,\n           -4.28125   , -4.0859375 ],\n          [-4.0273438 , -4.359375  , -3.7929688 , ..., -2.6933594 ,\n           -4.2226562 , -4.375     ]]],\n \n \n        [[[-1.7978516 ,  2.703125  , -3.2324219 , ..., -1.5966797 ,\n           -2.7070312 , -3.1367188 ],\n          [-1.0488281 , -3.4042969 , -3.7089844 , ..., -3.2910156 ,\n            1.9013672 , -2.1230469 ],\n          [-0.36010742, -4.1953125 , -3.0039062 , ..., -4.2148438 ,\n           -3.8789062 , -3.6464844 ],\n          ...,\n          [-5.5546875 , -5.0742188 , -4.7265625 , ..., -3.9824219 ,\n           -4.0546875 , -4.7304688 ],\n          [-5.4609375 , -4.46875   , -3.8789062 , ..., -2.8945312 ,\n           -4.53125   , -5.2382812 ],\n          [-4.015625  , -4.2265625 , -3.3964844 , ..., -4.4179688 ,\n           -4.1796875 , -4.0820312 ]],\n \n         [[-1.5615234 ,  0.03308105, -3.1640625 , ..., -2.3730469 ,\n           -3.0273438 , -3.3339844 ],\n          [-1.9638672 , -3.6875    , -3.4746094 , ..., -3.5546875 ,\n            1.5117188 , -4.2773438 ],\n          [ 0.2697754 , -3.8144531 , -3.4785156 , ..., -3.578125  ,\n           -4.484375  , -6.5429688 ],\n          ...,\n          [-4.4921875 , -4.8007812 , -4.9335938 , ..., -3.6289062 ,\n           -4.7539062 , -4.2421875 ],\n          [-5.578125  , -4.8085938 , -5.4257812 , ..., -2.4199219 ,\n           -4.9023438 , -3.7304688 ],\n          [-3.4863281 , -5.4179688 , -4.6523438 , ..., -3.3457031 ,\n           -5.21875   , -5.7851562 ]],\n \n         [[-3.3710938 , -0.20654297, -5.0546875 , ..., -3.15625   ,\n           -5.0195312 , -4.0703125 ],\n          [-2.8203125 , -3.4570312 , -3.2421875 , ..., -3.1660156 ,\n            0.70947266, -4.203125  ],\n          [-1.1884766 , -4.5234375 , -4.3554688 , ..., -4.0820312 ,\n           -3.609375  , -3.7949219 ],\n          ...,\n          [-4.5078125 , -4.8476562 , -4.3164062 , ..., -4.2929688 ,\n           -5.046875  , -2.6113281 ],\n          [-4.8554688 , -4.4140625 , -4.7890625 , ..., -3.3203125 ,\n           -6.25      , -4.4765625 ],\n          [-4.4726562 , -5.4179688 , -3.6289062 , ..., -5.8164062 ,\n           -4.6601562 , -3.2460938 ]],\n \n         [[-2.0585938 ,  0.38476562, -3.3183594 , ..., -2.0449219 ,\n           -3.0644531 , -4.0507812 ],\n          [-2.8730469 , -3.3925781 , -3.5917969 , ..., -2.2539062 ,\n            2.5976562 , -3.0605469 ],\n          [-0.54541016, -3.2695312 , -4.0039062 , ..., -3.7050781 ,\n           -3.1582031 , -3.9921875 ],\n          ...,\n          [-4.0429688 , -4.0195312 , -4.5898438 , ..., -3.8007812 ,\n           -3.7910156 , -4.3164062 ],\n          [-4.2734375 , -4.28125   , -4.3671875 , ..., -3.8476562 ,\n           -4.7265625 , -3.8789062 ],\n          [-3.5605469 , -3.7285156 , -4.6523438 , ..., -4.3359375 ,\n           -4.3125    , -3.8417969 ]],\n \n         [[-2.2226562 ,  2.1855469 , -4.5820312 , ..., -2.0683594 ,\n           -3.5957031 , -3.8710938 ],\n          [-2.8828125 , -2.546875  , -4.0546875 , ..., -3.5273438 ,\n            3.0429688 , -2.890625  ],\n          [ 0.23352051, -2.7167969 , -4.1328125 , ..., -4.4648438 ,\n           -1.9414062 , -4.2226562 ],\n          ...,\n          [-2.9277344 , -3.4199219 , -3.9707031 , ..., -2.578125  ,\n           -3.2402344 , -4.        ],\n          [-3.9492188 , -2.953125  , -3.9179688 , ..., -2.2832031 ,\n           -4.0039062 , -4.1132812 ],\n          [-2.8984375 , -3.2695312 , -3.8730469 , ..., -3.4082031 ,\n           -3.2109375 , -3.90625   ]],\n \n         [[-2.9882812 ,  0.39794922, -3.7792969 , ..., -2.9980469 ,\n           -3.4160156 , -4.8242188 ],\n          [-3.921875  , -3.6738281 , -3.6777344 , ..., -3.8183594 ,\n            1.2431641 , -3.6289062 ],\n          [ 0.48754883, -3.6191406 , -3.9082031 , ..., -4.28125   ,\n           -2.171875  , -3.8828125 ],\n          ...,\n          [-3.5957031 , -4.0195312 , -4.1796875 , ..., -3.5273438 ,\n           -3.6308594 , -4.4257812 ],\n          [-4.7148438 , -3.625     , -4.359375  , ..., -2.8261719 ,\n           -4.1757812 , -4.5703125 ],\n          [-2.9316406 , -4.1992188 , -3.9882812 , ..., -3.8378906 ,\n           -3.8164062 , -4.2382812 ]]],\n \n \n        [[[ 2.8847656 , -1.3378906 , -2.7949219 , ..., -3.0234375 ,\n           -2.8496094 , -2.0214844 ],\n          [-2.6855469 ,  1.9462891 , -3.1191406 , ..., -2.3398438 ,\n           -1.9228516 , -3.5859375 ],\n          [-1.1845703 , -2.5683594 , -2.1113281 , ..., -2.0488281 ,\n            2.2324219 , -2.375     ],\n          ...,\n          [-5.140625  , -5.3554688 , -5.3007812 , ..., -4.1523438 ,\n           -4.453125  , -4.5507812 ],\n          [-4.5429688 , -5.8984375 , -4.2695312 , ..., -3.9785156 ,\n           -4.8828125 , -4.3398438 ],\n          [-4.59375   , -6.0625    , -4.546875  , ..., -4.6875    ,\n           -4.5       , -4.1953125 ]],\n \n         [[ 2.65625   , -2.1582031 , -2.46875   , ..., -3.0214844 ,\n           -1.9794922 , -3.5859375 ],\n          [-3.0332031 , -0.6845703 , -3.0214844 , ..., -1.7900391 ,\n           -1.4794922 , -4.1328125 ],\n          [-2.1953125 , -4.9492188 , -2.1894531 , ..., -2.0273438 ,\n            1.1679688 , -3.4667969 ],\n          ...,\n          [-4.2070312 , -4.8046875 , -4.8398438 , ..., -4.1835938 ,\n           -4.796875  , -5.0625    ],\n          [-4.3515625 , -4.953125  , -5.8242188 , ..., -4.2148438 ,\n           -5.4921875 , -5.3320312 ],\n          [-4.046875  , -4.890625  , -5.6445312 , ..., -4.8125    ,\n           -4.8320312 , -5.9414062 ]],\n \n         [[ 0.8618164 , -4.1328125 , -3.9238281 , ..., -3.6074219 ,\n           -3.6328125 , -4.34375   ],\n          [-3.2695312 , -0.03308105, -5.3554688 , ..., -2.6035156 ,\n           -4.25      , -4.1796875 ],\n          [-2.7421875 , -3.4511719 , -3.375     , ..., -2.546875  ,\n            0.93310547, -5.1601562 ],\n          ...,\n          [-4.1484375 , -4.9335938 , -3.8710938 , ..., -4.5898438 ,\n           -4.6601562 , -3.1171875 ],\n          [-5.1132812 , -5.2890625 , -3.9609375 , ..., -4.0390625 ,\n           -4.8710938 , -3.8300781 ],\n          [-4.3164062 , -5.140625  , -4.25      , ..., -4.3789062 ,\n           -4.0078125 , -3.3203125 ]],\n \n         [[ 1.4404297 , -2.8359375 , -2.875     , ..., -2.7988281 ,\n           -2.8945312 , -4.9257812 ],\n          [-2.5761719 ,  0.70214844, -2.8867188 , ..., -1.5273438 ,\n           -3.1113281 , -4.3828125 ],\n          [-3.2167969 , -2.8632812 , -3.5039062 , ..., -2.2675781 ,\n            1.2978516 , -2.8730469 ],\n          ...,\n          [-3.9082031 , -4.25      , -4.8125    , ..., -4.2734375 ,\n           -4.1679688 , -4.3984375 ],\n          [-4.7578125 , -4.75      , -4.171875  , ..., -3.7929688 ,\n           -4.5195312 , -4.0898438 ],\n          [-3.640625  , -3.8515625 , -4.40625   , ..., -4.1953125 ,\n           -4.359375  , -4.6640625 ]],\n \n         [[ 1.5195312 , -3.265625  , -4.484375  , ..., -3.6054688 ,\n           -3.3671875 , -3.6933594 ],\n          [-2.6210938 ,  1.6943359 , -3.5566406 , ..., -1.8339844 ,\n           -3.3691406 , -3.8769531 ],\n          [-2.8261719 , -3.1035156 , -3.3945312 , ..., -3.2773438 ,\n            2.2421875 , -3.1425781 ],\n          ...,\n          [-3.2109375 , -3.5449219 , -4.1601562 , ..., -3.2988281 ,\n           -3.7910156 , -3.8691406 ],\n          [-3.2421875 , -3.90625   , -3.7519531 , ..., -2.7578125 ,\n           -3.3164062 , -4.0742188 ],\n          [-2.7304688 , -3.96875   , -4.2734375 , ..., -3.140625  ,\n           -3.6796875 , -4.1992188 ]],\n \n         [[ 2.015625  , -3.6347656 , -3.5878906 , ..., -4.5625    ,\n           -2.625     , -3.8789062 ],\n          [-3.0351562 ,  0.5053711 , -3.2402344 , ..., -2.4980469 ,\n           -2.890625  , -4.6328125 ],\n          [-2.8300781 , -3.2441406 , -2.5410156 , ..., -2.5859375 ,\n            1.3857422 , -3.0488281 ],\n          ...,\n          [-3.515625  , -3.9628906 , -4.4453125 , ..., -3.8164062 ,\n           -3.7929688 , -4.75      ],\n          [-4.1484375 , -4.484375  , -4.3398438 , ..., -3.4726562 ,\n           -4.1875    , -4.2226562 ],\n          [-3.0449219 , -3.9257812 , -4.1328125 , ..., -3.8417969 ,\n           -3.9082031 , -4.3242188 ]]]],\n       shape=(16, 6, 300, 7), dtype=float32),\n array([[[[0.35435694, 0.6249514 , 0.2502482 , 0.22993702],\n          [0.41518235, 0.49140674, 0.24059838, 0.19183773],\n          [0.49236196, 0.48192343, 0.3943533 , 0.36140347],\n          ...,\n          [0.7029912 , 0.45585653, 0.12930864, 0.12858197],\n          [0.30672416, 0.40149206, 0.22743365, 0.20048599],\n          [0.2067063 , 0.6912856 , 0.10688079, 0.06481856]],\n \n         [[0.35409278, 0.6288808 , 0.2539103 , 0.24199513],\n          [0.41497433, 0.4910273 , 0.23924464, 0.18890971],\n          [0.49501082, 0.4795409 , 0.38998497, 0.3643368 ],\n          ...,\n          [0.6927286 , 0.42978027, 0.14381269, 0.17255767],\n          [0.31997994, 0.40223387, 0.2170021 , 0.20602581],\n          [0.2210799 , 0.69610345, 0.13998811, 0.09092031]],\n \n         [[0.35735902, 0.62883127, 0.25197417, 0.24013728],\n          [0.4162566 , 0.49022794, 0.23958485, 0.18657586],\n          [0.49617997, 0.47917083, 0.3895474 , 0.3631273 ],\n          ...,\n          [0.66356903, 0.425918  , 0.18256496, 0.16008797],\n          [0.35034767, 0.43399972, 0.32809433, 0.26408753],\n          [0.22249019, 0.69730693, 0.13675186, 0.10758197]],\n \n         [[0.3546566 , 0.62562746, 0.25144857, 0.23702171],\n          [0.41619316, 0.48994574, 0.24128608, 0.18640035],\n          [0.4957253 , 0.47982535, 0.39145038, 0.36285827],\n          ...,\n          [0.66185343, 0.41476488, 0.19875641, 0.16770211],\n          [0.37428588, 0.43536267, 0.35860115, 0.25412324],\n          [0.22311671, 0.6984177 , 0.15019174, 0.10855562]],\n \n         [[0.3545445 , 0.62537855, 0.25108543, 0.23723632],\n          [0.41606048, 0.49010792, 0.24131152, 0.18622757],\n          [0.4956096 , 0.4798093 , 0.3914133 , 0.36309046],\n          ...,\n          [0.65760255, 0.41759926, 0.2011755 , 0.17666104],\n          [0.38169757, 0.44476965, 0.3490635 , 0.27133223],\n          [0.22297798, 0.703586  , 0.14884031, 0.10735657]],\n \n         [[0.3545475 , 0.6253657 , 0.25127468, 0.23716289],\n          [0.4160637 , 0.49009413, 0.24149577, 0.18616608],\n          [0.49561295, 0.4797956 , 0.391653  , 0.3629966 ],\n          ...,\n          [0.6576055 , 0.41758588, 0.20133723, 0.17660202],\n          [0.38170066, 0.44475606, 0.34929216, 0.271252  ],\n          [0.22298029, 0.70357454, 0.14896782, 0.10731769]]],\n \n \n        [[[0.40096813, 0.5627922 , 0.6260663 , 0.6918157 ],\n          [0.4820535 , 0.5931357 , 0.24593523, 0.23686035],\n          [0.85052127, 0.5142892 , 0.18308258, 0.19400206],\n          ...,\n          [0.7147072 , 0.2978133 , 0.39918128, 0.17735137],\n          [0.83049697, 0.24309783, 0.21883954, 0.14256218],\n          [0.7947366 , 0.13399993, 0.356222  , 0.08794962]],\n \n         [[0.39676803, 0.55934256, 0.6260324 , 0.69656765],\n          [0.48230636, 0.5931594 , 0.24272357, 0.23770814],\n          [0.84998894, 0.51515675, 0.18088605, 0.19472663],\n          ...,\n          [0.7344692 , 0.2843637 , 0.45875707, 0.187174  ],\n          [0.83257675, 0.23206034, 0.2629165 , 0.16493899],\n          [0.7966133 , 0.12631094, 0.39027178, 0.10651013]],\n \n         [[0.39603236, 0.5601223 , 0.6228172 , 0.69915116],\n          [0.4814825 , 0.59257513, 0.23822826, 0.23483637],\n          [0.8491812 , 0.51460457, 0.1807291 , 0.19307503],\n          ...,\n          [0.7535501 , 0.28805137, 0.47487393, 0.18838766],\n          [0.79617304, 0.24093686, 0.3391476 , 0.14654706],\n          [0.7693015 , 0.14934291, 0.39522463, 0.15003623]],\n \n         [[0.39672098, 0.5605983 , 0.62328   , 0.7000819 ],\n          [0.48149988, 0.5926368 , 0.2406541 , 0.23446196],\n          [0.84864634, 0.5147237 , 0.1820182 , 0.1927104 ],\n          ...,\n          [0.7481955 , 0.28986973, 0.45388126, 0.17028216],\n          [0.7798456 , 0.24014454, 0.3728236 , 0.1347141 ],\n          [0.76607955, 0.16023898, 0.40937868, 0.13865085]],\n \n         [[0.39710107, 0.5607861 , 0.6231656 , 0.70003855],\n          [0.48153615, 0.5926418 , 0.24059886, 0.234589  ],\n          [0.84858394, 0.5150072 , 0.18199319, 0.19283868],\n          ...,\n          [0.73834336, 0.29241893, 0.48564458, 0.1733763 ],\n          [0.7720846 , 0.2425767 , 0.39782602, 0.13909873],\n          [0.76454616, 0.16357866, 0.41457957, 0.1375095 ]],\n \n         [[0.39710423, 0.56077254, 0.6234018 , 0.6999533 ],\n          [0.48153946, 0.59262854, 0.24078272, 0.23451613],\n          [0.8485856 , 0.5149935 , 0.18214302, 0.19277552],\n          ...,\n          [0.7383459 , 0.29240757, 0.4858959 , 0.17331816],\n          [0.7720869 , 0.24256663, 0.39806706, 0.13905016],\n          [0.76454854, 0.16357112, 0.41482377, 0.13746136]]],\n \n \n        [[[0.4112225 , 0.66011614, 0.6170794 , 0.47285017],\n          [0.47842214, 0.6069545 , 0.15949911, 0.08073469],\n          [0.7106705 , 0.7862102 , 0.5538515 , 0.41154987],\n          ...,\n          [0.12758456, 0.79524916, 0.11638255, 0.12013083],\n          [0.2798237 , 0.97028965, 0.09284862, 0.05122883],\n          [0.3101231 , 0.9783015 , 0.07054484, 0.04451005]],\n \n         [[0.41238028, 0.6604888 , 0.6301865 , 0.48034853],\n          [0.47795406, 0.6081478 , 0.1623423 , 0.08958122],\n          [0.7068025 , 0.785935  , 0.55443865, 0.4176567 ],\n          ...,\n          [0.13688928, 0.805066  , 0.15300508, 0.18631992],\n          [0.2824387 , 0.9633477 , 0.11045503, 0.06366881],\n          [0.30679986, 0.97368175, 0.07192889, 0.04793111]],\n \n         [[0.41211984, 0.6608292 , 0.63054585, 0.48115036],\n          [0.4807512 , 0.6086413 , 0.17370352, 0.093215  ],\n          [0.70392305, 0.78448874, 0.5556813 , 0.41913915],\n          ...,\n          [0.14574483, 0.8040066 , 0.1687055 , 0.19277017],\n          [0.26693743, 0.95488006, 0.12574358, 0.07751466],\n          [0.30833045, 0.9676283 , 0.07898385, 0.05690187]],\n \n         [[0.4131156 , 0.6605857 , 0.6320899 , 0.48021907],\n          [0.48107043, 0.6088711 , 0.17462969, 0.09322181],\n          [0.6997145 , 0.782619  , 0.5640884 , 0.41993016],\n          ...,\n          [0.15105113, 0.80625457, 0.19134949, 0.19206297],\n          [0.25787145, 0.95281273, 0.15531303, 0.08641166],\n          [0.30803886, 0.9678987 , 0.09550256, 0.05947194]],\n \n         [[0.41319886, 0.6602508 , 0.63193554, 0.4804584 ],\n          [0.48092255, 0.6089465 , 0.17463934, 0.09321065],\n          [0.69864017, 0.7814206 , 0.567436  , 0.42099077],\n          ...,\n          [0.15165775, 0.81610614, 0.1904198 , 0.19061452],\n          [0.25633553, 0.9524954 , 0.1591893 , 0.08823574],\n          [0.30785197, 0.9692756 , 0.09564269, 0.05687567]],\n \n         [[0.41320205, 0.66023844, 0.63216954, 0.4803571 ],\n          [0.48092586, 0.6089334 , 0.1747844 , 0.09317635],\n          [0.6986897 , 0.78145844, 0.56723946, 0.42123163],\n          ...,\n          [0.15165944, 0.81609786, 0.19057494, 0.1905519 ],\n          [0.25633803, 0.9524929 , 0.159324  , 0.0882031 ],\n          [0.30785477, 0.969274  , 0.09572977, 0.05685391]]],\n \n \n        ...,\n \n \n        [[[0.508921  , 0.58653677, 0.352997  , 0.33114237],\n          [0.7322475 , 0.7164805 , 0.33215404, 0.31287438],\n          [0.07893868, 0.36260542, 0.13680252, 0.10080089],\n          ...,\n          [0.50598633, 0.58239317, 0.40299335, 0.3753909 ],\n          [0.9406507 , 0.14238751, 0.07488545, 0.06838301],\n          [0.9446275 , 0.3119812 , 0.08387016, 0.0708335 ]],\n \n         [[0.5098462 , 0.58721566, 0.35686088, 0.3371957 ],\n          [0.7320382 , 0.7158078 , 0.33891356, 0.31958845],\n          [0.09386931, 0.36608276, 0.17338398, 0.11994799],\n          ...,\n          [0.49136195, 0.5628585 , 0.4177532 , 0.3775687 ],\n          [0.9379436 , 0.15174833, 0.11543187, 0.15630044],\n          [0.93897456, 0.3151637 , 0.10562316, 0.11907679]],\n \n         [[0.509876  , 0.58774954, 0.35809454, 0.33840826],\n          [0.7318938 , 0.716173  , 0.33885694, 0.32016107],\n          [0.10024862, 0.38313943, 0.1846292 , 0.15915166],\n          ...,\n          [0.51360506, 0.5667479 , 0.35951102, 0.29403698],\n          [0.91025233, 0.24224922, 0.19871753, 0.40981567],\n          [0.91876143, 0.34326717, 0.14819881, 0.38024545]],\n \n         [[0.51011777, 0.5877482 , 0.35902193, 0.33899438],\n          [0.73199546, 0.71625817, 0.3378731 , 0.31960958],\n          [0.0980571 , 0.3872915 , 0.17796217, 0.1618594 ],\n          ...,\n          [0.50698566, 0.5570873 , 0.33346865, 0.2756529 ],\n          [0.9064004 , 0.24240631, 0.209928  , 0.21502404],\n          [0.91876376, 0.33963707, 0.15113299, 0.39398682]],\n \n         [[0.51010495, 0.5876047 , 0.3589259 , 0.33921796],\n          [0.7318722 , 0.7160619 , 0.33779278, 0.31990868],\n          [0.09785535, 0.38981283, 0.17774045, 0.16296785],\n          ...,\n          [0.5088544 , 0.56802136, 0.33924866, 0.29713783],\n          [0.9061439 , 0.24652381, 0.20702492, 0.22564375],\n          [0.918637  , 0.3439968 , 0.15130718, 0.39570954]],\n \n         [[0.5101083 , 0.58759135, 0.35915744, 0.33912703],\n          [0.73180944, 0.7158503 , 0.33845183, 0.3209919 ],\n          [0.0978565 , 0.38979974, 0.17788754, 0.16291249],\n          ...,\n          [0.50885767, 0.5680078 , 0.33947423, 0.2970531 ],\n          [0.906145  , 0.24651359, 0.20719016, 0.22557288],\n          [0.918638  , 0.34398437, 0.15143642, 0.39561248]]],\n \n \n        [[[0.76625806, 0.70756906, 0.44934663, 0.543529  ],\n          [0.53240186, 0.48399127, 0.4502681 , 0.33114615],\n          [0.5013264 , 0.52332973, 0.96531373, 0.92953223],\n          ...,\n          [0.36039677, 0.7765907 , 0.07933805, 0.0521001 ],\n          [0.7974086 , 0.9179306 , 0.06918192, 0.05013458],\n          [0.8719752 , 0.5150167 , 0.24078524, 0.98613715]],\n \n         [[0.7655118 , 0.7115595 , 0.45519793, 0.55066335],\n          [0.5345627 , 0.48433498, 0.45411968, 0.33178854],\n          [0.50035125, 0.5147136 , 0.99240017, 0.94579804],\n          ...,\n          [0.36001894, 0.7785936 , 0.09440952, 0.06408253],\n          [0.7932407 , 0.9130443 , 0.07199252, 0.06320234],\n          [0.8299517 , 0.498679  , 0.32094038, 0.94891405]],\n \n         [[0.7655443 , 0.713569  , 0.454489  , 0.55451316],\n          [0.5365155 , 0.48465273, 0.45739356, 0.32989514],\n          [0.50074273, 0.51896596, 0.9909922 , 0.93372214],\n          ...,\n          [0.37482762, 0.788748  , 0.15213197, 0.09047733],\n          [0.79829943, 0.9116668 , 0.08495029, 0.07915991],\n          [0.7908264 , 0.5323253 , 0.413965  , 0.9497376 ]],\n \n         [[0.76707315, 0.7125285 , 0.4525962 , 0.55315584],\n          [0.5370576 , 0.4844835 , 0.4600437 , 0.3293759 ],\n          [0.5007505 , 0.5191046 , 0.98464847, 0.93237245],\n          ...,\n          [0.38678634, 0.7953374 , 0.20730169, 0.09385002],\n          [0.79305047, 0.91935724, 0.1016712 , 0.08588005],\n          [0.76822615, 0.5166783 , 0.447022  , 0.909904  ]],\n \n         [[0.76701176, 0.7110777 , 0.45202726, 0.5535631 ],\n          [0.5370764 , 0.4844276 , 0.4601456 , 0.3279072 ],\n          [0.50024456, 0.5172741 , 0.98654664, 0.9414492 ],\n          ...,\n          [0.38654998, 0.7972679 , 0.21509995, 0.0971876 ],\n          [0.7930059 , 0.9207979 , 0.10156247, 0.08661418],\n          [0.76987123, 0.5296273 , 0.44567207, 0.90044445]],\n \n         [[0.76701415, 0.71106637, 0.45227653, 0.5534628 ],\n          [0.5370797 , 0.48441383, 0.46039551, 0.32781777],\n          [0.50024784, 0.5172603 , 0.98656   , 0.9414268 ],\n          ...,\n          [0.38655308, 0.79725903, 0.21526985, 0.09715201],\n          [0.793008  , 0.9207939 , 0.10165431, 0.08658209],\n          [0.76987356, 0.5296136 , 0.44592062, 0.9004081 ]]],\n \n \n        [[[0.6386672 , 0.5525099 , 0.6372983 , 0.50154036],\n          [0.38273135, 0.65822804, 0.21824557, 0.21998452],\n          [0.4907412 , 0.5584563 , 0.16500847, 0.13350841],\n          ...,\n          [0.72620344, 0.454682  , 0.14298318, 0.04960247],\n          [0.06502511, 0.27700457, 0.07676298, 0.05720395],\n          [0.5339039 , 0.30390868, 0.36466882, 0.0688687 ]],\n \n         [[0.64177424, 0.5493388 , 0.64565015, 0.50453097],\n          [0.37969708, 0.6583797 , 0.21761587, 0.22336747],\n          [0.4903899 , 0.5581233 , 0.16721296, 0.13561586],\n          ...,\n          [0.72294515, 0.44931886, 0.16858876, 0.08786016],\n          [0.07101492, 0.26531142, 0.08472586, 0.07023332],\n          [0.5485502 , 0.3115473 , 0.35426983, 0.07882306]],\n \n         [[0.6429915 , 0.5490335 , 0.63956666, 0.5059327 ],\n          [0.38125443, 0.65992665, 0.21607667, 0.22720233],\n          [0.4915683 , 0.5580777 , 0.16721179, 0.13475199],\n          ...,\n          [0.7471917 , 0.4520406 , 0.24248213, 0.14143455],\n          [0.08263909, 0.30438018, 0.10916632, 0.14516316],\n          [0.6101028 , 0.32050487, 0.42979297, 0.10590673]],\n \n         [[0.6417269 , 0.54925144, 0.6400572 , 0.50523657],\n          [0.378887  , 0.657869  , 0.21556148, 0.22053745],\n          [0.49139196, 0.55791456, 0.16906963, 0.13510196],\n          ...,\n          [0.7716842 , 0.44990793, 0.29386872, 0.18268667],\n          [0.0899151 , 0.31452015, 0.11635118, 0.16108349],\n          [0.62130886, 0.32216954, 0.45238942, 0.10195944]],\n \n         [[0.64132315, 0.5493567 , 0.638972  , 0.505345  ],\n          [0.37882313, 0.65707004, 0.21483539, 0.22105199],\n          [0.49142936, 0.55776745, 0.16902475, 0.13503021],\n          ...,\n          [0.7737116 , 0.45345455, 0.30709395, 0.18646209],\n          [0.08963767, 0.32455242, 0.11313369, 0.1630489 ],\n          [0.6150711 , 0.32995504, 0.45180547, 0.10279375]],\n \n         [[0.6413262 , 0.54934305, 0.639204  , 0.50524354],\n          [0.3788263 , 0.65705764, 0.21500516, 0.22098213],\n          [0.49143267, 0.55775386, 0.16916612, 0.13498281],\n          ...,\n          [0.77371395, 0.4534409 , 0.30730808, 0.18640053],\n          [0.08963876, 0.32454035, 0.11323468, 0.16299354],\n          [0.6150743 , 0.32994288, 0.45205468, 0.10275634]]]],\n       shape=(16, 6, 300, 4), dtype=float32),\n [array([[[[ 1.10781250e+01,  1.17343750e+01,  1.56738281e+00, ...,\n             1.96582031e+00,  2.17578125e+00,  9.80468750e-01],\n           [ 1.11875000e+01,  1.11328125e+01,  1.01953125e+00, ...,\n             1.81933594e+00,  2.55078125e+00,  2.05859375e+00],\n           [ 6.55517578e-02,  5.12695312e-01,  4.47021484e-01, ...,\n             1.40429688e+00,  2.80761719e-01, -3.72802734e-01],\n           ...,\n           [ 3.90625000e-02,  1.18359375e+00,  2.01562500e+00, ...,\n             5.13916016e-02,  5.86425781e-01, -1.83715820e-01],\n           [-2.74902344e-01,  7.02636719e-01,  2.52441406e-01, ...,\n            -2.70019531e-01,  5.96679688e-01,  4.95605469e-02],\n           [-3.93066406e-01, -2.93457031e-01, -2.67822266e-01, ...,\n            -3.64746094e-01,  1.57470703e-01, -3.93066406e-01]],\n  \n          [[-3.34472656e-02, -1.29318237e-02,  2.58593750e+00, ...,\n             7.44140625e-01,  2.31201172e-01,  2.97070312e+00],\n           [-5.00869751e-03, -1.21057034e-04,  2.10571289e-02, ...,\n            -2.67578125e-01, -2.78076172e-01,  9.27734375e-01],\n           [ 2.67578125e-01,  5.36718750e+00, -3.69140625e-01, ...,\n            -2.40722656e-01, -1.86401367e-01,  1.63964844e+00],\n           ...,\n           [ 1.85351562e+00, -2.08740234e-01, -3.25927734e-01, ...,\n             6.15234375e-01, -3.52050781e-01,  2.36718750e+00],\n           [ 2.86621094e-01, -3.41552734e-01, -3.47412109e-01, ...,\n            -9.06982422e-02, -2.96386719e-01,  1.11328125e+00],\n           [ 3.96679688e+00,  2.27539062e-01,  6.52343750e-01, ...,\n             2.31640625e+00,  1.38867188e+00,  4.49609375e+00]],\n  \n          [[ 1.04531250e+01,  1.07734375e+01,  4.23046875e+00, ...,\n             7.32910156e-01,  1.44335938e+00,  1.49218750e+00],\n           [ 1.88593750e+01,  9.08593750e+00,  8.69531250e+00, ...,\n             1.06835938e+00,  1.43359375e+00,  9.15527344e-01],\n           [ 2.52148438e+00,  1.83398438e+00,  2.60009766e-01, ...,\n             5.39550781e-01,  1.08203125e+00,  3.03955078e-01],\n           ...,\n           [ 3.55224609e-01,  3.61328125e-01, -2.30468750e-01, ...,\n             7.27539062e-01,  1.33984375e+00,  1.40039062e+00],\n           [-4.65087891e-02, -4.21386719e-01, -3.45947266e-01, ...,\n            -2.62939453e-01,  2.11547852e-01,  1.91650391e-01],\n           [ 7.72460938e-01, -1.79077148e-01, -2.21435547e-01, ...,\n             3.95019531e-01,  6.51367188e-01,  5.57861328e-02]],\n  \n          ...,\n  \n          [[ 1.16406250e+01,  1.06015625e+01,  2.39624023e-01, ...,\n             6.69433594e-01, -9.70458984e-02,  1.52343750e-01],\n           [ 1.08984375e+01,  2.16562500e+01,  1.36132812e+00, ...,\n             2.23999023e-01, -2.59277344e-01, -4.42871094e-01],\n           [-2.56347656e-01,  5.01171875e+00,  2.83007812e+00, ...,\n            -5.54199219e-01, -4.17480469e-01,  9.74609375e-01],\n           ...,\n           [ 1.07910156e+00,  4.97314453e-01,  3.49365234e-01, ...,\n            -2.10693359e-01, -1.18164062e-01,  5.51269531e-01],\n           [ 2.14453125e+00,  1.45117188e+00,  6.35253906e-01, ...,\n            -9.45434570e-02,  5.39062500e-01,  6.28906250e-01],\n           [ 3.56640625e+00,  2.00000000e+00,  1.27539062e+00, ...,\n             7.32421875e-01,  9.62890625e-01,  1.60839844e+00]],\n  \n          [[ 3.06250000e+01,  2.35312500e+01,  1.17265625e+01, ...,\n             1.56171875e+01,  1.72343750e+01,  1.36406250e+01],\n           [ 1.53125000e+01,  1.63125000e+01,  1.20859375e+01, ...,\n             2.12812500e+01,  2.19375000e+01,  1.31406250e+01],\n           [ 1.05957031e+00,  1.51660156e+00,  8.03906250e+00, ...,\n             2.20312500e+01,  1.53593750e+01,  7.68359375e+00],\n           ...,\n           [ 1.59301758e-01, -2.06054688e-01,  7.73925781e-02, ...,\n             6.37207031e-02,  2.38281250e-01,  5.67871094e-01],\n           [ 6.57226562e-01,  8.86718750e-01, -1.61132812e-02, ...,\n            -5.77392578e-02,  2.06250000e+00,  1.52734375e+00],\n           [ 1.05273438e+00,  8.10546875e-01, -1.22314453e-01, ...,\n            -3.84521484e-01,  1.78808594e+00,  1.64355469e+00]],\n  \n          [[ 3.64375000e+01,  2.39375000e+01,  2.37500000e+00, ...,\n             2.95898438e+00,  4.84375000e+00,  5.57812500e+00],\n           [ 3.52500000e+01,  2.02812500e+01,  1.96386719e+00, ...,\n             4.47656250e+00,  7.07812500e+00,  6.89453125e+00],\n           [ 7.53906250e+00,  1.38671875e+00,  1.84277344e+00, ...,\n             4.25000000e+00,  3.35546875e+00,  4.00000000e+00],\n           ...,\n           [ 2.61718750e+00,  1.35937500e+00,  8.46679688e-01, ...,\n             9.72656250e-01,  1.81054688e+00,  2.28515625e+00],\n           [ 3.40625000e+00,  1.94824219e+00,  7.14843750e-01, ...,\n             6.16210938e-01,  3.10156250e+00,  3.74609375e+00],\n           [ 4.42968750e+00,  2.33984375e+00,  1.06835938e+00, ...,\n             1.27539062e+00,  2.57812500e+00,  3.71289062e+00]]],\n  \n  \n         [[[ 1.39062500e+01,  1.44296875e+01,  9.50195312e-01, ...,\n             5.40527344e-01,  1.68847656e+00,  1.18750000e+00],\n           [ 1.33203125e+01,  1.42968750e+01,  1.41308594e+00, ...,\n             9.59472656e-01,  2.21875000e+00,  1.63769531e+00],\n           [-1.41967773e-01,  1.30371094e-01,  1.89843750e+00, ...,\n             3.30322266e-01,  1.08691406e+00,  1.94091797e-02],\n           ...,\n           [ 9.23919678e-03,  6.68945312e-01,  3.51562500e-02, ...,\n             2.33764648e-01,  5.94238281e-01,  7.65380859e-02],\n           [ 4.38232422e-01,  8.33984375e-01, -2.54638672e-01, ...,\n            -7.55615234e-02,  8.98925781e-01,  1.18896484e-01],\n           [ 4.92187500e-01,  9.20898438e-01, -2.43652344e-01, ...,\n            -1.19934082e-01,  4.24316406e-01, -3.48632812e-01]],\n  \n          [[-1.33972168e-02, -7.12585449e-03,  2.07226562e+00, ...,\n             1.32128906e+00,  7.19238281e-01,  3.07812500e+00],\n           [-4.25338745e-03, -3.47495079e-05,  9.13574219e-01, ...,\n            -1.16821289e-01, -1.04675293e-01,  2.62207031e-01],\n           [ 1.28710938e+00,  5.62890625e+00,  3.73046875e-01, ...,\n            -1.86889648e-01,  4.39453125e-03,  9.94140625e-01],\n           ...,\n           [ 1.55371094e+00, -1.69067383e-01,  6.40625000e-01, ...,\n            -2.71240234e-01, -1.07360840e-01,  1.71191406e+00],\n           [ 5.37109375e-01, -3.01757812e-01, -2.56591797e-01, ...,\n            -1.64184570e-01, -3.75000000e-01,  8.95507812e-01],\n           [ 3.58398438e+00,  5.59082031e-01,  1.05371094e+00, ...,\n             1.80371094e+00,  9.88281250e-01,  4.08984375e+00]],\n  \n          [[ 1.35234375e+01,  1.36562500e+01,  5.92578125e+00, ...,\n             8.94531250e-01,  1.11523438e+00,  1.24414062e+00],\n           [ 2.54062500e+01,  1.27968750e+01,  1.02421875e+01, ...,\n             3.51318359e-01,  1.08984375e+00,  7.99804688e-01],\n           [ 1.91113281e+00,  2.16796875e+00,  6.03515625e-01, ...,\n             5.80444336e-02,  9.75097656e-01,  6.64062500e-01],\n           ...,\n           [ 1.54980469e+00,  1.64843750e+00,  4.62890625e-01, ...,\n             3.61328125e+00,  2.05859375e+00,  2.47851562e+00],\n           [ 1.30078125e+00,  1.31347656e+00, -1.07666016e-01, ...,\n             3.75000000e-01,  1.41406250e+00,  1.16113281e+00],\n           [ 2.59570312e+00,  2.88281250e+00,  1.05175781e+00, ...,\n             1.01074219e+00,  2.83593750e+00,  1.89257812e+00]],\n  \n          ...,\n  \n          [[ 1.35625000e+01,  1.33750000e+01,  6.21093750e-01, ...,\n             5.46386719e-01,  6.53686523e-02,  4.73632812e-01],\n           [ 1.25468750e+01,  2.81875000e+01,  5.15625000e+00, ...,\n            -3.21044922e-01, -2.94677734e-01, -4.59960938e-01],\n           [-3.70605469e-01,  6.10937500e+00,  3.04101562e+00, ...,\n            -4.90966797e-01, -5.19531250e-01,  4.22363281e-01],\n           ...,\n           [ 5.54199219e-01,  8.05664062e-03,  3.95507812e-02, ...,\n            -2.86865234e-01,  2.71240234e-01,  5.43457031e-01],\n           [ 1.50976562e+00,  1.23046875e+00,  2.49267578e-01, ...,\n            -1.38549805e-01,  1.02832031e+00,  1.40429688e+00],\n           [ 2.57812500e+00,  1.84960938e+00,  1.08105469e+00, ...,\n            -1.38916016e-01,  1.11132812e+00,  2.10546875e+00]],\n  \n          [[ 3.69062500e+01,  2.45156250e+01,  1.11093750e+01, ...,\n             9.76562500e+00,  1.39453125e+01,  1.00781250e+01],\n           [ 1.62812500e+01,  1.82968750e+01,  1.22421875e+01, ...,\n             1.31640625e+01,  1.51093750e+01,  1.07421875e+01],\n           [ 8.83789062e-01,  9.03320312e-01,  7.64453125e+00, ...,\n             1.34062500e+01,  1.04921875e+01,  5.45703125e+00],\n           ...,\n           [ 3.79882812e-01, -9.11865234e-02,  2.79296875e-01, ...,\n             3.05419922e-01,  4.33105469e-01,  2.05322266e-01],\n           [ 1.82910156e+00,  3.80371094e-01, -1.57348633e-01, ...,\n             2.95654297e-01,  1.83984375e+00,  1.11523438e+00],\n           [ 2.14648438e+00,  2.07812500e+00, -2.48657227e-01, ...,\n             1.66748047e-01,  1.74023438e+00,  1.71093750e+00]],\n  \n          [[ 4.43125000e+01,  3.19062500e+01,  2.57617188e+00, ...,\n             1.96484375e+00,  4.06250000e+00,  4.37109375e+00],\n           [ 4.23125000e+01,  2.55000000e+01,  1.94335938e+00, ...,\n             3.38867188e+00,  5.57421875e+00,  5.81640625e+00],\n           [ 7.78125000e+00,  1.79882812e+00,  2.46875000e+00, ...,\n             3.15820312e+00,  2.68554688e+00,  3.56445312e+00],\n           ...,\n           [ 4.21093750e+00,  1.27929688e+00,  1.38183594e+00, ...,\n             5.51269531e-01,  1.45117188e+00,  3.26562500e+00],\n           [ 6.65625000e+00,  3.10742188e+00,  1.01367188e+00, ...,\n             7.56835938e-01,  3.11328125e+00,  4.55468750e+00],\n           [ 6.48437500e+00,  3.37304688e+00,  1.77343750e+00, ...,\n             1.22949219e+00,  2.79101562e+00,  4.73046875e+00]]],\n  \n  \n         [[[ 4.44531250e+00,  5.24609375e+00,  1.65722656e+00, ...,\n             1.73535156e+00,  2.87695312e+00,  2.36132812e+00],\n           [ 3.78710938e+00,  4.39843750e+00,  2.01367188e+00, ...,\n             1.76562500e+00,  3.41406250e+00,  2.47656250e+00],\n           [-3.48388672e-01,  8.38378906e-01,  3.05859375e+00, ...,\n             1.12890625e+00,  1.19628906e+00, -2.28637695e-01],\n           ...,\n           [ 2.41577148e-01,  2.46093750e-01, -9.43603516e-02, ...,\n             1.68750000e+00,  1.22460938e+00,  9.51660156e-01],\n           [ 8.25683594e-01,  1.12988281e+00, -3.86962891e-02, ...,\n             2.13378906e-01,  1.02734375e+00,  5.10742188e-01],\n           [-3.21960449e-02,  6.09375000e-01, -1.23901367e-01, ...,\n            -4.16015625e-01,  4.68261719e-01, -1.50268555e-01]],\n  \n          [[ 1.14843750e+00, -3.42041016e-01,  1.43066406e+00, ...,\n             3.74023438e-01, -2.77343750e-01,  1.46582031e+00],\n           [-4.88281250e-01, -5.78613281e-02, -2.68554688e-01, ...,\n            -2.72460938e-01, -1.72119141e-01, -2.38037109e-01],\n           [ 1.84667969e+00,  2.13671875e+00,  1.66015625e+00, ...,\n            -2.58789062e-01, -2.66357422e-01,  3.28369141e-02],\n           ...,\n           [ 1.26074219e+00, -2.09106445e-01, -4.37744141e-01, ...,\n             1.70776367e-01,  2.51464844e-01,  2.43359375e+00],\n           [ 9.60449219e-01, -3.46191406e-01, -3.84521484e-01, ...,\n            -3.60839844e-01, -3.97460938e-01,  1.18652344e+00],\n           [ 3.17382812e+00,  2.24609375e-01,  6.45507812e-01, ...,\n             1.65527344e-01,  4.43359375e-01,  2.16406250e+00]],\n  \n          [[ 5.41406250e+00,  3.89843750e+00,  2.18750000e+00, ...,\n             1.68701172e-01,  2.05273438e+00,  2.17968750e+00],\n           [ 7.73828125e+00,  6.62500000e+00,  4.05078125e+00, ...,\n             4.22363281e-01,  2.46289062e+00,  2.16796875e+00],\n           [ 1.19042969e+00,  2.93359375e+00,  2.42187500e+00, ...,\n            -2.30957031e-01,  1.18261719e+00,  2.29296875e+00],\n           ...,\n           [ 1.98144531e+00,  1.65917969e+00,  2.39746094e-01, ...,\n             9.87304688e-01, -7.40966797e-02,  1.34887695e-01],\n           [ 9.51660156e-01,  1.05859375e+00,  4.27978516e-01, ...,\n             9.19433594e-01,  1.08032227e-01, -3.20556641e-01],\n           [ 1.99316406e+00,  2.97656250e+00,  1.34179688e+00, ...,\n             2.50976562e-01,  5.94726562e-01,  3.89892578e-01]],\n  \n          ...,\n  \n          [[ 4.49218750e+00,  2.76367188e+00, -1.79931641e-01, ...,\n             2.05810547e-01, -1.19506836e-01,  3.12500000e-01],\n           [ 2.99218750e+00,  6.57812500e+00,  1.13964844e+00, ...,\n            -2.22167969e-01, -2.37304688e-01, -4.64843750e-01],\n           [ 2.00073242e-01,  2.47851562e+00,  2.09375000e+00, ...,\n            -3.32031250e-01, -3.70117188e-01,  1.55468750e+00],\n           ...,\n           [ 7.34375000e-01,  1.90429688e-01, -1.29882812e-01, ...,\n            -4.12597656e-02,  1.43554688e-01,  1.32128906e+00],\n           [ 1.19531250e+00,  5.47851562e-01,  6.80175781e-01, ...,\n            -8.49609375e-02,  1.74316406e+00,  2.75976562e+00],\n           [ 2.20312500e+00,  1.28417969e+00,  1.14062500e+00, ...,\n             1.96484375e+00,  3.02343750e+00,  3.50000000e+00]],\n  \n          [[ 1.62500000e+01,  1.11718750e+01,  3.80859375e+00, ...,\n             2.42500000e+01,  2.62343750e+01,  1.98437500e+01],\n           [ 6.41406250e+00,  1.03750000e+01,  3.13281250e+00, ...,\n             3.75312500e+01,  3.51875000e+01,  2.36562500e+01],\n           [-4.17724609e-01,  4.88037109e-01,  2.92968750e-01, ...,\n             4.79375000e+01,  3.55000000e+01,  2.02656250e+01],\n           ...,\n           [ 7.92968750e-01,  2.74658203e-01,  6.72851562e-01, ...,\n            -3.26171875e-01, -4.10644531e-01, -4.90234375e-01],\n           [ 1.74023438e+00,  2.26757812e+00,  1.20361328e-01, ...,\n            -4.40917969e-01, -5.10253906e-01, -3.62548828e-01],\n           [ 1.61132812e+00,  1.24804688e+00, -2.15576172e-01, ...,\n            -3.94531250e-01, -5.49804688e-01, -4.00878906e-01]],\n  \n          [[ 1.72500000e+01,  8.33593750e+00,  1.00292969e+00, ...,\n             2.94335938e+00,  8.67968750e+00,  7.73437500e+00],\n           [ 1.58281250e+01,  6.71093750e+00,  9.44824219e-01, ...,\n             3.48242188e+00,  1.04375000e+01,  8.28125000e+00],\n           [ 5.12500000e+00,  1.00781250e+00,  8.89648438e-01, ...,\n             3.49218750e+00,  3.98437500e+00,  5.85937500e+00],\n           ...,\n           [ 3.74218750e+00,  9.76562500e-01,  7.61230469e-01, ...,\n             1.32226562e+00,  1.16992188e+00,  1.58886719e+00],\n           [ 5.64843750e+00,  1.98730469e+00,  9.13085938e-01, ...,\n             1.05468750e+00,  1.27246094e+00,  1.70410156e+00],\n           [ 5.33593750e+00,  2.44921875e+00,  1.35937500e+00, ...,\n             9.96582031e-01,  1.87890625e+00,  1.72070312e+00]]],\n  \n  \n         ...,\n  \n  \n         [[[ 2.40625000e+01,  2.44843750e+01, -1.41723633e-01, ...,\n             2.27734375e+00,  2.50976562e+00,  1.59960938e+00],\n           [ 2.36093750e+01,  2.31718750e+01, -2.25097656e-01, ...,\n             2.43359375e+00,  3.16796875e+00,  2.05273438e+00],\n           [-2.42797852e-01, -3.06152344e-01,  6.82812500e+00, ...,\n             7.50976562e-01,  1.34863281e+00,  3.47167969e-01],\n           ...,\n           [ 5.02014160e-02,  5.33691406e-01, -2.86376953e-01, ...,\n            -2.10937500e-01,  4.07226562e-01,  1.58935547e-01],\n           [ 4.18212891e-01,  8.24707031e-01, -7.53173828e-02, ...,\n            -1.07238770e-01,  6.75781250e-01,  5.50292969e-01],\n           [ 2.04711914e-01,  7.04101562e-01, -1.64794922e-01, ...,\n            -3.18115234e-01,  1.46484375e-03,  1.62109375e-01]],\n  \n          [[-1.08528137e-03, -1.33132935e-03,  3.04687500e+00, ...,\n             1.18261719e+00,  4.13208008e-02,  2.20117188e+00],\n           [-4.84585762e-05, -0.00000000e+00, -1.32934570e-01, ...,\n            -2.60498047e-01, -2.61718750e-01, -1.34155273e-01],\n           [ 2.92773438e+00,  1.09921875e+01, -3.55468750e-01, ...,\n            -2.65869141e-01, -2.36694336e-01,  7.98339844e-01],\n           ...,\n           [ 1.54687500e+00, -2.85400391e-01,  4.08203125e-01, ...,\n            -1.66992188e-01, -4.00390625e-02,  1.67285156e+00],\n           [ 5.14648438e-01, -2.84179688e-01, -2.40112305e-01, ...,\n            -3.29101562e-01, -3.43017578e-01,  9.63378906e-01],\n           [ 2.95507812e+00,  5.86547852e-02,  1.12695312e+00, ...,\n             9.95605469e-01,  6.37207031e-01,  4.12109375e+00]],\n  \n          [[ 2.34843750e+01,  2.15312500e+01,  1.33984375e+01, ...,\n             1.57714844e+00,  2.33593750e+00,  2.69531250e+00],\n           [ 4.20625000e+01,  1.99062500e+01,  1.46875000e+01, ...,\n             9.17480469e-01,  2.47070312e+00,  2.29101562e+00],\n           [ 2.76562500e+00,  1.85937500e+00,  3.51074219e-01, ...,\n            -2.36450195e-01,  1.12011719e+00,  8.54980469e-01],\n           ...,\n           [ 1.47949219e+00,  1.70410156e+00,  2.37548828e-01, ...,\n             1.96289062e+00,  2.31250000e+00,  2.40625000e+00],\n           [ 1.05468750e+00,  1.01660156e+00,  1.45263672e-01, ...,\n            -7.61718750e-02,  1.26953125e-01,  7.31445312e-01],\n           [ 2.22851562e+00,  1.60839844e+00,  7.30957031e-01, ...,\n             4.28466797e-01,  1.35131836e-01,  1.47460938e+00]],\n  \n          ...,\n  \n          [[ 2.19375000e+01,  2.14062500e+01, -4.51904297e-01, ...,\n             3.03955078e-01, -2.46826172e-01, -2.17041016e-01],\n           [ 2.07031250e+01,  4.58125000e+01,  7.50390625e+00, ...,\n            -2.42919922e-01, -2.80273438e-01, -5.44433594e-01],\n           [-2.64404297e-01,  1.26328125e+01,  7.00000000e+00, ...,\n            -2.95654297e-01, -2.79541016e-01,  4.07470703e-01],\n           ...,\n           [ 1.11914062e+00,  2.35351562e-01, -1.10595703e-01, ...,\n            -4.02832031e-02,  2.00317383e-01,  2.01171875e+00],\n           [ 1.14355469e+00,  6.76269531e-01,  3.38134766e-01, ...,\n             4.63867188e-03,  1.01855469e+00,  1.46386719e+00],\n           [ 2.07812500e+00,  1.09375000e+00,  8.47656250e-01, ...,\n             4.31640625e-01,  1.58886719e+00,  1.81054688e+00]],\n  \n          [[ 5.98125000e+01,  3.86250000e+01,  1.36250000e+01, ...,\n             2.41250000e+01,  2.82187500e+01,  2.10781250e+01],\n           [ 2.65000000e+01,  2.91875000e+01,  1.51250000e+01, ...,\n             3.40312500e+01,  3.73750000e+01,  2.59218750e+01],\n           [ 2.68310547e-01,  5.06835938e-01,  6.67968750e+00, ...,\n             3.87500000e+01,  3.49375000e+01,  2.33437500e+01],\n           ...,\n           [ 5.95214844e-01,  3.60351562e-01,  6.56738281e-02, ...,\n             5.41992188e-01,  4.37011719e-01, -1.15844727e-01],\n           [ 2.37109375e+00,  1.07031250e+00, -3.40332031e-01, ...,\n             7.45117188e-01,  2.60742188e+00,  9.48242188e-01],\n           [ 1.97265625e+00,  1.62011719e+00, -1.50146484e-01, ...,\n             3.18847656e-01,  2.29296875e+00,  8.87207031e-01]],\n  \n          [[ 7.48125000e+01,  5.33750000e+01,  1.35644531e+00, ...,\n             3.48632812e+00,  6.32812500e+00,  7.37890625e+00],\n           [ 6.95625000e+01,  4.15000000e+01,  9.56542969e-01, ...,\n             4.26171875e+00,  8.23437500e+00,  7.92187500e+00],\n           [ 1.03984375e+01,  3.16601562e+00,  3.31445312e+00, ...,\n             2.73632812e+00,  4.33593750e+00,  4.60156250e+00],\n           ...,\n           [ 5.14843750e+00,  1.55859375e+00,  1.44042969e+00, ...,\n             3.10302734e-01,  1.98925781e+00,  2.24609375e+00],\n           [ 6.65625000e+00,  2.71093750e+00,  1.25781250e+00, ...,\n             3.95507812e-01,  3.07421875e+00,  3.58007812e+00],\n           [ 6.29687500e+00,  2.79882812e+00,  1.64941406e+00, ...,\n             6.52343750e-01,  2.36718750e+00,  3.62500000e+00]]],\n  \n  \n         [[[ 1.15390625e+01,  1.21875000e+01,  1.90917969e+00, ...,\n             6.85546875e-01,  1.61328125e+00,  9.79492188e-01],\n           [ 1.03750000e+01,  1.06562500e+01,  1.12792969e+00, ...,\n             9.00390625e-01,  1.18750000e+00, -3.79394531e-01],\n           [ 1.52148438e+00,  1.02343750e+00,  5.17578125e+00, ...,\n             8.09082031e-01,  3.98193359e-01, -1.32080078e-01],\n           ...,\n           [ 1.47460938e-01,  2.56347656e-01,  4.90112305e-02, ...,\n            -6.90917969e-02,  3.02490234e-01,  4.45556641e-02],\n           [ 3.01513672e-01,  1.92871094e-02, -3.36181641e-01, ...,\n            -5.18066406e-01,  4.02832031e-03, -2.48901367e-01],\n           [-4.11987305e-02,  5.35644531e-01, -5.24414062e-01, ...,\n            -2.66601562e-01, -1.28906250e-01, -4.58496094e-01]],\n  \n          [[-2.54394531e-01, -5.79223633e-02,  3.11523438e+00, ...,\n             3.80664062e+00,  2.52929688e+00,  6.57812500e+00],\n           [-4.51049805e-02, -2.98309326e-03,  1.08300781e+00, ...,\n             1.13281250e-01,  8.30078125e-02,  2.59179688e+00],\n           [ 2.95507812e+00,  5.20312500e+00,  8.73535156e-01, ...,\n             8.19335938e-01,  6.94580078e-02,  3.83593750e+00],\n           ...,\n           [ 2.31250000e+00, -5.09033203e-02, -3.72314453e-02, ...,\n            -1.12304688e-02, -1.13525391e-01,  2.95312500e+00],\n           [ 7.65136719e-01, -2.91015625e-01, -3.02978516e-01, ...,\n            -4.28710938e-01, -3.90625000e-01,  2.64648438e-01],\n           [ 5.25390625e+00,  1.86523438e-01,  6.35742188e-01, ...,\n            -7.31201172e-02, -3.92089844e-01,  3.49023438e+00]],\n  \n          [[ 1.08046875e+01,  9.48437500e+00,  5.83203125e+00, ...,\n            -3.37890625e-01, -3.19824219e-01,  1.06811523e-02],\n           [ 1.80937500e+01,  8.18750000e+00,  9.33593750e+00, ...,\n             3.68652344e-02, -3.53759766e-01, -3.47167969e-01],\n           [ 3.03710938e+00,  2.91796875e+00,  1.92675781e+00, ...,\n             1.60278320e-01, -1.01867676e-01, -2.87841797e-01],\n           ...,\n           [ 1.42382812e+00,  7.62695312e-01, -1.19262695e-01, ...,\n             3.04931641e-01,  8.76953125e-01,  6.44531250e-01],\n           [ 1.74316406e+00,  1.22363281e+00, -4.67529297e-02, ...,\n            -1.90307617e-01, -2.71484375e-01, -2.02392578e-01],\n           [ 3.75000000e+00,  2.37109375e+00,  7.54394531e-01, ...,\n             1.02783203e-01,  5.29785156e-02,  5.61523438e-01]],\n  \n          ...,\n  \n          [[ 9.45312500e+00,  9.10937500e+00,  7.06054688e-01, ...,\n             1.08007812e+00,  1.77832031e+00,  3.03906250e+00],\n           [ 8.78125000e+00,  2.23437500e+01,  3.06835938e+00, ...,\n             1.43652344e+00,  9.46289062e-01,  2.44726562e+00],\n           [-4.43359375e-01,  6.67968750e+00,  4.25000000e+00, ...,\n             1.00000000e+00,  4.62890625e-01,  1.18554688e+00],\n           ...,\n           [ 1.41406250e+00,  9.85351562e-01,  5.59570312e-01, ...,\n             5.78613281e-02,  4.15527344e-01,  7.41210938e-01],\n           [ 3.38671875e+00,  2.89453125e+00,  1.30566406e+00, ...,\n             1.24511719e+00,  1.66894531e+00,  1.99414062e+00],\n           [ 4.17968750e+00,  2.96679688e+00,  1.69433594e+00, ...,\n             1.47265625e+00,  2.50781250e+00,  2.55468750e+00]],\n  \n          [[ 2.73437500e+01,  1.73750000e+01,  5.52343750e+00, ...,\n            -3.30078125e-01, -5.28320312e-01, -5.28320312e-01],\n           [ 1.02656250e+01,  1.08203125e+01,  5.53125000e+00, ...,\n             1.43066406e-01, -1.28417969e-01, -5.04394531e-01],\n           [ 5.56640625e-01,  6.49414062e-01,  2.82812500e+00, ...,\n            -4.79003906e-01, -2.70263672e-01, -4.58496094e-01],\n           ...,\n           [ 2.57812500e-01,  1.54174805e-01,  3.00781250e-01, ...,\n            -1.31835938e-01, -3.24707031e-02, -2.20947266e-01],\n           [ 8.49609375e-01, -1.06445312e-01, -3.62792969e-01, ...,\n            -2.51464844e-02,  7.64160156e-01,  1.79443359e-02],\n           [ 4.44824219e-01,  1.54296875e+00, -3.71582031e-01, ...,\n            -1.59057617e-01,  7.06054688e-01,  4.28222656e-01]],\n  \n          [[ 3.43125000e+01,  2.02968750e+01,  1.45800781e+00, ...,\n             1.44921875e+00,  1.73242188e+00,  3.04687500e+00],\n           [ 3.29375000e+01,  1.56171875e+01,  1.20996094e+00, ...,\n             5.32226562e-01,  1.66210938e+00,  1.80371094e+00],\n           [ 7.39453125e+00,  1.21777344e+00,  1.70410156e+00, ...,\n             8.57421875e-01,  1.76855469e+00,  1.42773438e+00],\n           ...,\n           [ 3.96679688e+00,  1.78613281e+00,  1.45019531e+00, ...,\n             8.34472656e-01,  1.13769531e+00,  1.17382812e+00],\n           [ 4.90625000e+00,  3.39843750e+00,  1.02734375e+00, ...,\n             3.00537109e-01,  1.68164062e+00,  1.42773438e+00],\n           [ 6.32031250e+00,  3.46875000e+00,  1.72558594e+00, ...,\n             7.77343750e-01,  1.42675781e+00,  2.58593750e+00]]],\n  \n  \n         [[[ 7.95312500e+00,  8.07031250e+00,  2.89843750e+00, ...,\n             1.50488281e+00,  2.41992188e+00,  1.77148438e+00],\n           [ 7.95703125e+00,  7.89062500e+00,  6.41406250e+00, ...,\n             1.23828125e+00,  2.45312500e+00,  2.18945312e+00],\n           [ 4.74609375e-01,  5.35156250e-01,  4.37890625e+00, ...,\n             1.20996094e+00,  1.75585938e+00,  5.79101562e-01],\n           ...,\n           [ 4.40673828e-01,  4.75585938e-01, -1.77734375e-01, ...,\n            -3.96972656e-01,  3.88183594e-01, -2.64434814e-02],\n           [ 1.02832031e+00,  7.52929688e-01, -3.51562500e-01, ...,\n            -3.25927734e-01,  1.94580078e-01, -2.19116211e-01],\n           [ 6.74804688e-01,  1.27441406e+00, -3.93310547e-01, ...,\n            -4.64355469e-01, -4.00878906e-01, -3.22509766e-01]],\n  \n          [[-3.25927734e-01, -1.53320312e-01,  2.61914062e+00, ...,\n             7.02514648e-02,  2.01904297e-01,  2.92773438e+00],\n           [-7.63549805e-02, -5.82122803e-03,  3.08593750e-01, ...,\n            -2.70019531e-01, -2.62451172e-01, -1.99096680e-01],\n           [ 7.53906250e-01,  4.03515625e+00,  1.36816406e+00, ...,\n            -2.59521484e-01,  7.06787109e-02,  7.71484375e-01],\n           ...,\n           [ 2.16601562e+00, -2.51464844e-01,  5.49316406e-03, ...,\n             2.39135742e-01, -2.57324219e-01,  1.44042969e+00],\n           [ 9.97070312e-01, -2.58544922e-01, -2.84179688e-01, ...,\n            -4.01123047e-01, -4.00878906e-01,  6.02539062e-01],\n           [ 5.47265625e+00,  7.48046875e-01,  1.21679688e+00, ...,\n             1.03417969e+00,  1.87792969e+00,  3.01953125e+00]],\n  \n          [[ 8.03906250e+00,  6.92187500e+00,  5.66015625e+00, ...,\n             3.42529297e-01,  4.83886719e-01,  8.09082031e-01],\n           [ 1.43203125e+01,  6.96484375e+00,  9.96875000e+00, ...,\n             3.19824219e-01,  3.17871094e-01,  5.36132812e-01],\n           [ 1.74414062e+00,  1.19531250e+00,  3.28515625e+00, ...,\n            -2.64892578e-01,  7.12402344e-01,  6.92871094e-01],\n           ...,\n           [ 1.66796875e+00,  1.48046875e+00,  1.02539062e-02, ...,\n             2.46093750e-01,  1.31054688e+00,  1.18554688e+00],\n           [ 2.42382812e+00,  1.69140625e+00, -2.05200195e-01, ...,\n            -4.90234375e-01,  6.01562500e-01,  6.84570312e-01],\n           [ 4.02343750e+00,  2.36328125e+00,  3.93310547e-01, ...,\n             1.44775391e-01,  2.13085938e+00,  9.71679688e-01]],\n  \n          ...,\n  \n          [[ 8.19531250e+00,  6.61718750e+00,  1.25097656e+00, ...,\n             3.65234375e-01,  2.59277344e-01,  9.20898438e-01],\n           [ 7.13671875e+00,  1.72031250e+01,  2.60351562e+00, ...,\n            -1.54907227e-01, -2.13623047e-01, -2.18750000e-01],\n           [-3.08105469e-01,  5.75000000e+00,  3.66992188e+00, ...,\n            -3.59375000e-01, -2.73925781e-01,  2.22045898e-01],\n           ...,\n           [ 1.36328125e+00,  1.13769531e+00, -1.22070312e-02, ...,\n            -4.70703125e-01, -3.83300781e-02,  5.51757812e-01],\n           [ 3.05468750e+00,  2.86523438e+00,  1.13378906e+00, ...,\n             1.88720703e-01,  6.09863281e-01,  1.18554688e+00],\n           [ 3.81445312e+00,  2.66796875e+00,  9.93652344e-01, ...,\n             1.46679688e+00,  8.24218750e-01,  1.66113281e+00]],\n  \n          [[ 2.11875000e+01,  1.46406250e+01,  2.73437500e+00, ...,\n             1.32343750e+01,  1.34921875e+01,  1.07500000e+01],\n           [ 9.04687500e+00,  9.01562500e+00,  2.04296875e+00, ...,\n             2.25468750e+01,  1.93125000e+01,  1.25312500e+01],\n           [ 4.53369141e-01,  6.97753906e-01,  7.60742188e-01, ...,\n             2.71250000e+01,  2.06250000e+01,  1.15312500e+01],\n           ...,\n           [ 7.28515625e-01, -6.94580078e-02,  4.88525391e-01, ...,\n            -1.07421875e-02,  6.20117188e-01,  5.54199219e-01],\n           [ 1.95410156e+00,  3.71093750e-02, -1.33911133e-01, ...,\n             2.27294922e-01,  1.72656250e+00,  1.38476562e+00],\n           [ 1.52832031e+00,  2.21484375e+00,  1.30493164e-01, ...,\n            -3.91357422e-01,  6.24023438e-01,  1.09667969e+00]],\n  \n          [[ 2.57812500e+01,  1.44375000e+01,  1.54980469e+00, ...,\n             2.74804688e+00,  5.39453125e+00,  6.03515625e+00],\n           [ 2.38437500e+01,  1.20468750e+01,  2.04492188e+00, ...,\n             2.34960938e+00,  5.64843750e+00,  5.39843750e+00],\n           [ 5.90234375e+00,  1.20410156e+00,  1.95507812e+00, ...,\n             1.96093750e+00,  3.12695312e+00,  2.94726562e+00],\n           ...,\n           [ 4.88281250e+00,  1.12304688e+00,  1.07031250e+00, ...,\n            -4.69970703e-02,  1.19824219e+00,  2.08398438e+00],\n           [ 7.05859375e+00,  3.32421875e+00,  5.61523438e-01, ...,\n             1.33056641e-01,  2.09765625e+00,  2.35156250e+00],\n           [ 6.55468750e+00,  3.34375000e+00,  1.16992188e+00, ...,\n             7.55371094e-01,  2.39453125e+00,  2.67773438e+00]]]],\n        shape=(16, 256, 80, 80), dtype=float32),\n  array([[[[ 4.66250000e+01,  2.51562500e+00,  7.49023438e-01, ...,\n             1.48632812e+00,  3.16601562e+00,  4.57031250e+00],\n           [-1.37451172e-01,  1.48437500e-01, -2.12158203e-01, ...,\n             1.17089844e+00,  4.03125000e+00,  2.91796875e+00],\n           [ 3.02734375e-02, -3.70361328e-01, -4.62890625e-01, ...,\n             7.66601562e-01,  2.04492188e+00,  1.43847656e+00],\n           ...,\n           [-3.17382812e-01, -3.91113281e-01, -4.62646484e-01, ...,\n             8.22753906e-02,  1.89453125e-01, -2.16308594e-01],\n           [-1.60156250e-01, -2.94677734e-01, -3.85253906e-01, ...,\n             6.47460938e-01,  1.15429688e+00,  5.92041016e-02],\n           [-8.08105469e-02, -4.26757812e-01, -4.73144531e-01, ...,\n             1.07617188e+00,  4.70703125e-01,  2.88818359e-01]],\n  \n          [[ 5.20625000e+01, -3.44970703e-01,  2.51953125e+00, ...,\n             1.49414062e+00,  7.00683594e-01,  2.61328125e+00],\n           [-5.49316406e-01, -6.10351562e-03, -3.59863281e-01, ...,\n            -3.45703125e-01,  2.79541016e-02, -5.11718750e-01],\n           [-1.66015625e-02, -5.14648438e-01, -2.78808594e-01, ...,\n            -4.40917969e-01, -4.60449219e-01, -2.44018555e-01],\n           ...,\n           [ 1.06445312e-01,  5.19042969e-01,  4.04541016e-01, ...,\n             9.61914062e-01,  1.61425781e+00,  1.44042969e+00],\n           [ 2.33154297e-01,  1.78466797e-01,  2.89062500e-01, ...,\n             9.89257812e-01,  2.52929688e+00,  1.43945312e+00],\n           [ 1.18457031e+00, -1.70288086e-02,  3.27636719e-01, ...,\n            -2.45727539e-01, -2.87109375e-01,  4.07714844e-01]],\n  \n          [[ 1.54296875e+00,  6.10351562e-03,  1.50756836e-01, ...,\n             2.85156250e-01,  2.61523438e+00,  2.20117188e+00],\n           [ 2.97851562e-01, -3.76464844e-01, -2.98828125e-01, ...,\n             6.70410156e-01,  5.51562500e+00,  4.83984375e+00],\n           [-5.57861328e-02, -4.41406250e-01,  9.95605469e-01, ...,\n             1.95922852e-01,  3.35546875e+00,  3.02148438e+00],\n           ...,\n           [-3.38134766e-01, -4.57031250e-01, -3.49853516e-01, ...,\n            -1.94824219e-01, -4.03808594e-01, -3.84277344e-01],\n           [-3.34472656e-01, -3.72802734e-01, -1.06140137e-01, ...,\n            -2.00927734e-01, -4.42626953e-01, -1.90429688e-01],\n           [-5.41992188e-01, -1.66503906e-01, -6.97021484e-02, ...,\n             2.08862305e-01, -8.19091797e-02, -1.76391602e-02]],\n  \n          ...,\n  \n          [[-1.41429901e-03, -2.72216797e-01, -4.56542969e-01, ...,\n             1.17480469e+00, -2.75390625e-01, -1.52832031e-01],\n           [-5.08789062e-01,  1.97558594e+00, -4.25048828e-01, ...,\n            -5.37109375e-01, -4.51171875e-01, -3.65234375e-01],\n           [-3.58398438e-01, -4.04052734e-02,  8.33007812e-01, ...,\n            -2.12524414e-01, -5.30273438e-01, -4.36767578e-01],\n           ...,\n           [-3.86962891e-01,  1.07910156e-01,  1.49658203e-01, ...,\n             1.21704102e-01,  5.03417969e-01, -2.40478516e-01],\n           [-1.41723633e-01, -1.50146484e-01,  3.99414062e-01, ...,\n            -8.67919922e-02, -1.19995117e-01,  1.68457031e-02],\n           [-4.78515625e-01, -4.63378906e-01, -4.70214844e-01, ...,\n            -4.58007812e-01, -4.58740234e-01, -3.52539062e-01]],\n  \n          [[-4.03747559e-02, -3.20556641e-01, -3.48632812e-01, ...,\n            -4.03808594e-01, -2.74169922e-01, -3.80859375e-01],\n           [-4.35546875e-01, -2.22656250e-01, -1.56127930e-01, ...,\n            -2.82714844e-01, -3.97460938e-01, -1.83715820e-01],\n           [-2.16064453e-01,  1.86157227e-01,  2.32910156e-01, ...,\n             1.79931641e-01, -2.84423828e-02, -2.14721680e-01],\n           ...,\n           [ 2.54150391e-01, -3.55957031e-01, -2.26684570e-01, ...,\n             7.52929688e-01,  2.78320312e-02,  1.08789062e+00],\n           [ 8.33496094e-01, -2.94433594e-01, -1.66137695e-01, ...,\n            -4.88281250e-03, -5.19042969e-01,  2.38085938e+00],\n           [-4.44335938e-01, -4.91455078e-01, -2.33520508e-01, ...,\n            -4.74121094e-01, -3.55712891e-01,  1.50634766e-01]],\n  \n          [[-1.23367310e-02, -3.65234375e-01, -3.09082031e-01, ...,\n            -4.74853516e-01, -4.35546875e-01, -3.97705078e-01],\n           [ 2.09765625e+00, -2.76367188e-01, -3.24951172e-01, ...,\n            -3.62792969e-01, -2.70263672e-01, -3.78173828e-01],\n           [-2.74414062e-01, -4.34082031e-01, -5.27832031e-01, ...,\n            -4.70214844e-01, -4.51904297e-01, -3.01269531e-01],\n           ...,\n           [ 4.46289062e-01, -3.05419922e-01, -1.84326172e-01, ...,\n            -5.31250000e-01, -2.11181641e-01,  1.39062500e+00],\n           [ 1.70654297e-01, -4.69970703e-01,  9.08203125e-02, ...,\n            -3.47900391e-01,  1.51489258e-01,  1.56542969e+00],\n           [-5.28808594e-01, -4.74609375e-01, -5.35156250e-01, ...,\n            -1.15051270e-01,  4.05273438e-02, -4.40429688e-01]]],\n  \n  \n         [[[ 6.01250000e+01,  2.33203125e+00,  1.63085938e-01, ...,\n             1.19921875e+00,  1.25878906e+00,  1.98046875e+00],\n           [-2.11181641e-01, -4.37744141e-01, -3.84765625e-01, ...,\n             9.32006836e-02,  7.85156250e-01,  6.32812500e-01],\n           [ 2.04589844e-01, -3.35693359e-01, -1.95190430e-01, ...,\n            -3.11279297e-02,  4.29199219e-01,  1.31591797e-01],\n           ...,\n           [ 7.49511719e-02,  2.03247070e-01, -2.05078125e-01, ...,\n            -1.22070312e-03,  5.32714844e-01,  1.12609863e-01],\n           [ 5.92773438e-01,  3.81591797e-01,  9.58251953e-02, ...,\n             6.46484375e-01,  2.33398438e+00,  9.45312500e-01],\n           [ 1.97558594e+00, -1.79687500e-01,  1.06445312e-01, ...,\n             1.27832031e+00,  1.40820312e+00,  1.02929688e+00]],\n  \n          [[ 6.70625000e+01, -4.85107422e-01,  3.17578125e+00, ...,\n             1.85546875e+00,  1.01171875e+00,  2.40625000e+00],\n           [-5.36132812e-01,  8.17871094e-02, -4.56054688e-01, ...,\n            -2.78808594e-01,  1.04101562e+00, -4.36035156e-01],\n           [-4.45312500e-01, -4.64355469e-01, -1.57958984e-01, ...,\n            -4.65820312e-01, -8.66088867e-02, -3.16406250e-01],\n           ...,\n           [-3.43994141e-01,  3.28613281e-01,  4.07226562e-01, ...,\n             1.51367188e+00,  2.35351562e+00,  1.02832031e+00],\n           [ 3.78417969e-01,  4.47998047e-01,  1.03320312e+00, ...,\n             7.00195312e-01,  2.04296875e+00,  1.00976562e+00],\n           [ 5.73242188e-01, -1.02661133e-01, -1.76513672e-01, ...,\n            -2.31689453e-01, -5.30273438e-01,  1.28173828e-01]],\n  \n          [[ 1.83886719e+00, -3.91113281e-01,  1.46484375e-01, ...,\n             9.46289062e-01,  1.35644531e+00,  1.61132812e+00],\n           [ 6.47460938e-01, -5.41015625e-01, -3.79882812e-01, ...,\n             4.42626953e-01,  2.06445312e+00,  1.45214844e+00],\n           [-1.79199219e-01, -3.53027344e-01,  5.23437500e-01, ...,\n            -3.05175781e-03,  3.70361328e-01,  2.91992188e-01],\n           ...,\n           [-1.91162109e-01, -2.59521484e-01, -4.82177734e-02, ...,\n            -4.17236328e-01, -4.60449219e-01, -4.68017578e-01],\n           [-2.09594727e-01, -2.29858398e-01,  1.03027344e-01, ...,\n            -3.16162109e-01, -5.22460938e-01, -2.43041992e-01],\n           [ 4.22363281e-02, -2.91259766e-01,  2.50488281e-01, ...,\n             2.03857422e-02, -3.95507812e-02, -8.02612305e-02]],\n  \n          ...,\n  \n          [[-2.79426575e-04, -2.07519531e-01, -5.30273438e-01, ...,\n             9.56054688e-01, -5.10742188e-01, -2.88574219e-01],\n           [-3.64746094e-01,  3.63281250e+00, -3.77441406e-01, ...,\n            -3.85009766e-01, -5.20507812e-01, -3.16894531e-01],\n           [-2.38037109e-01, -2.07031250e-01, -2.42797852e-01, ...,\n            -1.15173340e-01, -1.99462891e-01, -3.56933594e-01],\n           ...,\n           [-2.13500977e-01, -1.99951172e-01, -2.76611328e-01, ...,\n             1.54785156e-01,  9.35058594e-02,  1.18408203e-02],\n           [-4.02832031e-01, -4.84863281e-01, -3.46191406e-01, ...,\n             2.28637695e-01, -4.57031250e-01, -6.13403320e-02],\n           [-4.20898438e-01, -5.52734375e-01, -5.48828125e-01, ...,\n            -5.01953125e-01, -4.59472656e-01, -3.68652344e-01]],\n  \n          [[-2.74963379e-02, -2.23388672e-01, -5.02929688e-01, ...,\n            -5.49316406e-01, -4.55078125e-01, -3.94775391e-01],\n           [-4.36035156e-01, -3.03466797e-01,  4.78759766e-01, ...,\n            -2.61718750e-01, -4.72167969e-01, -3.64746094e-01],\n           [-3.28369141e-02,  5.51757812e-01,  1.07714844e+00, ...,\n             2.27050781e-01, -3.81347656e-01,  3.85009766e-01],\n           ...,\n           [ 6.19140625e-01,  2.31079102e-01,  6.39648438e-01, ...,\n             6.49414062e-02, -3.41064453e-01, -2.03247070e-01],\n           [ 1.36035156e+00, -2.07519531e-03,  5.10742188e-01, ...,\n            -1.75903320e-01, -5.23437500e-01,  1.33398438e+00],\n           [ 1.87866211e-01, -4.46289062e-01, -2.25952148e-01, ...,\n            -4.90966797e-01, -4.85351562e-01,  4.89501953e-01]],\n  \n          [[-3.78036499e-03, -3.35449219e-01, -4.55566406e-01, ...,\n            -5.24414062e-01, -5.06835938e-01, -4.52148438e-01],\n           [ 1.70800781e+00, -1.80297852e-01, -5.10742188e-01, ...,\n            -4.08691406e-01, -3.13232422e-01, -4.68750000e-01],\n           [ 3.21289062e-01, -2.82226562e-01,  8.54492188e-02, ...,\n            -2.94921875e-01, -5.36132812e-01, -3.79638672e-01],\n           ...,\n           [ 2.74414062e-01, -4.23828125e-01,  4.13818359e-01, ...,\n            -3.53027344e-01,  1.50146484e-01,  1.22753906e+00],\n           [ 7.49511719e-02, -5.42968750e-01,  1.17614746e-01, ...,\n             1.42822266e-01, -1.42578125e-01,  1.32617188e+00],\n           [-4.57031250e-01, -5.38085938e-01,  2.47558594e-01, ...,\n            -4.52880859e-02,  5.43823242e-02, -4.91943359e-01]]],\n  \n  \n         [[[ 1.26562500e+01,  1.64916992e-01, -2.13989258e-01, ...,\n             1.34062500e+01,  1.87656250e+01,  1.52343750e+01],\n           [-3.66455078e-01,  3.73535156e-01, -1.87988281e-01, ...,\n             1.89375000e+01,  2.95625000e+01,  2.29531250e+01],\n           [-3.13476562e-01, -2.75634766e-01, -3.65234375e-01, ...,\n             1.48750000e+01,  2.46562500e+01,  2.02500000e+01],\n           ...,\n           [ 2.66601562e-01,  6.54907227e-02, -3.28979492e-02, ...,\n            -2.01049805e-01, -5.20019531e-02, -8.85009766e-02],\n           [ 6.18652344e-01,  2.11669922e-01,  2.95654297e-01, ...,\n             3.54003906e-02,  9.59472656e-02,  4.14550781e-01],\n           [ 1.33593750e+00, -1.63330078e-01,  1.12060547e-01, ...,\n            -2.49755859e-01, -3.32519531e-01,  3.59863281e-01]],\n  \n          [[ 1.70312500e+01, -4.46472168e-02,  1.05761719e+00, ...,\n             6.67480469e-01, -7.04345703e-02,  2.96484375e+00],\n           [ 3.39111328e-01,  6.50390625e-01,  1.19628906e+00, ...,\n            -5.46875000e-01, -3.99658203e-01, -3.50097656e-01],\n           [ 2.19238281e-01,  7.38281250e-01,  9.56054688e-01, ...,\n            -5.17578125e-01, -4.39941406e-01, -5.05859375e-01],\n           ...,\n           [ 2.53906250e-02,  8.75244141e-02,  1.11328125e+00, ...,\n             6.48193359e-02,  1.75878906e+00, -8.89282227e-02],\n           [ 4.67285156e-01,  4.78515625e-01,  8.25195312e-01, ...,\n             1.26464844e+00,  2.65234375e+00,  5.89843750e-01],\n           [ 9.93652344e-01, -9.28955078e-02,  4.39941406e-01, ...,\n             1.62500000e+00,  1.75390625e+00,  1.29101562e+00]],\n  \n          [[ 4.60937500e-01,  1.13281250e-01,  3.11523438e-01, ...,\n             5.30859375e+00,  6.53906250e+00,  5.06640625e+00],\n           [-1.53442383e-01, -4.34082031e-01, -1.23718262e-01, ...,\n             1.37031250e+01,  1.58437500e+01,  1.27109375e+01],\n           [ 2.83203125e-02, -8.03222656e-02,  6.05468750e-01, ...,\n             1.11875000e+01,  1.40859375e+01,  1.20312500e+01],\n           ...,\n           [-4.22851562e-01, -2.22656250e-01, -2.14599609e-01, ...,\n            -3.63281250e-01, -4.59716797e-01, -1.90185547e-01],\n           [-2.00439453e-01, -3.23242188e-01, -3.17626953e-01, ...,\n            -4.23583984e-01, -4.49707031e-01, -4.27978516e-01],\n           [-1.85302734e-01, -3.86230469e-01, -1.97265625e-01, ...,\n            -4.41406250e-01, -4.06738281e-01, -5.54687500e-01]],\n  \n          ...,\n  \n          [[-7.06787109e-02, -4.97558594e-01, -2.95410156e-01, ...,\n            -1.68945312e-01, -1.90063477e-01, -1.50756836e-01],\n           [-3.35693359e-01, -5.93261719e-02, -4.90722656e-02, ...,\n            -1.83410645e-02, -9.36889648e-03, -5.01403809e-02],\n           [-3.67431641e-01, -2.29614258e-01,  1.67236328e-01, ...,\n            -1.42578125e-01, -9.39941406e-03, -2.10113525e-02],\n           ...,\n           [-5.32226562e-01, -3.08593750e-01, -2.58300781e-01, ...,\n             3.69262695e-02, -8.30078125e-03, -3.75976562e-01],\n           [-4.60937500e-01, -3.34960938e-01, -1.50878906e-01, ...,\n             3.54003906e-01,  2.41577148e-01, -3.50097656e-01],\n           [-4.16503906e-01, -5.26367188e-01, -5.54199219e-01, ...,\n            -3.98925781e-01, -2.92480469e-01, -3.76464844e-01]],\n  \n          [[-3.26660156e-01, -1.09252930e-01,  1.05468750e+00, ...,\n            -2.97851562e-01, -6.10961914e-02, -1.05651855e-01],\n           [ 2.36816406e-02, -4.94628906e-01, -1.77978516e-01, ...,\n            -5.13183594e-01, -2.21435547e-01, -3.77685547e-01],\n           [-8.88671875e-02, -3.92822266e-01, -3.06152344e-01, ...,\n            -4.30664062e-01, -5.39062500e-01, -5.06347656e-01],\n           ...,\n           [ 4.61181641e-01,  1.61621094e-01,  4.83886719e-01, ...,\n             5.02929688e-01,  9.20410156e-02,  1.35253906e+00],\n           [ 1.07617188e+00, -5.43945312e-01,  1.39160156e-02, ...,\n             1.73339844e+00,  1.10253906e+00,  2.06054688e+00],\n           [-2.37060547e-01, -4.16503906e-01, -1.26220703e-01, ...,\n            -3.27392578e-01, -5.36621094e-01, -7.47070312e-02]],\n  \n          [[-2.04589844e-01, -4.23828125e-01, -4.82910156e-01, ...,\n            -2.10815430e-01, -1.48681641e-01, -1.81396484e-01],\n           [ 2.30957031e-01,  2.13134766e-01, -1.04858398e-01, ...,\n            -1.23352051e-01, -1.03637695e-01, -1.89453125e-01],\n           [-4.09667969e-01, -8.34960938e-02, -3.59375000e-01, ...,\n            -2.44506836e-01, -2.04833984e-01, -1.57836914e-01],\n           ...,\n           [ 2.51708984e-01, -3.33007812e-01,  1.00402832e-01, ...,\n            -5.25390625e-01, -3.96484375e-01,  1.09570312e+00],\n           [ 1.02172852e-01, -3.22021484e-01,  1.11083984e-01, ...,\n             7.08007812e-02, -1.56005859e-01,  5.29296875e-01],\n           [-4.82910156e-01, -4.83886719e-01,  1.43188477e-01, ...,\n            -4.76074219e-01, -5.41503906e-01, -2.03491211e-01]]],\n  \n  \n         ...,\n  \n  \n         [[[ 1.06625000e+02,  3.53320312e+00,  3.63769531e-02, ...,\n             3.97851562e+00,  8.36718750e+00,  1.01484375e+01],\n           [-2.26928711e-01, -4.73876953e-01, -2.22290039e-01, ...,\n             5.25781250e+00,  1.24765625e+01,  1.21718750e+01],\n           [ 5.62988281e-01, -2.62207031e-01, -2.75878906e-01, ...,\n             3.73242188e+00,  9.35156250e+00,  9.35156250e+00],\n           ...,\n           [ 3.90625000e-02,  2.64892578e-01,  8.23364258e-02, ...,\n            -1.20544434e-01,  2.22167969e-01,  1.08642578e-02],\n           [ 6.28906250e-01,  2.49023438e-01,  2.50244141e-01, ...,\n             2.63671875e-01,  1.51171875e+00,  5.91308594e-01],\n           [ 1.14257812e+00, -2.66845703e-01,  1.58691406e-02, ...,\n             9.62402344e-01,  7.26074219e-01,  7.10449219e-01]],\n  \n          [[ 1.17125000e+02, -2.77343750e-01,  4.62500000e+00, ...,\n             7.65625000e-01, -1.33300781e-01,  3.33984375e+00],\n           [-3.80615234e-01,  9.91210938e-01, -4.47509766e-01, ...,\n            -3.28125000e-01, -3.01513672e-01, -4.67285156e-01],\n           [-4.32861328e-01, -4.27246094e-01, -3.23486328e-01, ...,\n            -4.94140625e-01, -5.54687500e-01, -4.96826172e-01],\n           ...,\n           [-3.81347656e-01,  2.53906250e-01,  7.76367188e-01, ...,\n             1.59301758e-01,  1.38183594e+00,  1.51367188e+00],\n           [ 8.42285156e-02,  3.59375000e-01,  9.91699219e-01, ...,\n             9.51171875e-01,  3.00390625e+00,  2.76171875e+00],\n           [ 5.68847656e-01,  1.62353516e-01,  3.29589844e-01, ...,\n             2.30712891e-01,  4.21142578e-02,  8.84765625e-01]],\n  \n          [[ 4.28906250e+00, -4.77539062e-01, -5.46875000e-01, ...,\n             2.01367188e+00,  4.78906250e+00,  5.10546875e+00],\n           [ 1.64843750e+00, -3.73046875e-01, -4.76318359e-01, ...,\n             5.55078125e+00,  1.04765625e+01,  1.00468750e+01],\n           [-2.82714844e-01, -4.62402344e-01,  1.53808594e+00, ...,\n             4.18359375e+00,  8.37500000e+00,  8.14062500e+00],\n           ...,\n           [-2.53417969e-01, -1.45263672e-01,  3.93554688e-01, ...,\n            -2.26562500e-01, -4.26513672e-01, -2.43530273e-01],\n           [-4.79736328e-02, -3.14453125e-01, -6.54296875e-02, ...,\n            -1.40869141e-01, -4.65820312e-01, -1.93115234e-01],\n           [-1.28417969e-01, -4.87792969e-01,  3.74755859e-02, ...,\n            -1.74194336e-01, -2.94433594e-01, -2.15087891e-01]],\n  \n          ...,\n  \n          [[-5.36441803e-07, -1.31225586e-02, -4.63378906e-01, ...,\n            -5.29296875e-01, -4.75585938e-01, -3.62060547e-01],\n           [-2.41088867e-01,  7.32421875e+00,  8.17382812e-01, ...,\n            -4.41162109e-01, -1.63818359e-01, -1.38916016e-01],\n           [ 5.86547852e-02,  3.06396484e-01,  4.10888672e-01, ...,\n            -4.52148438e-01, -2.74414062e-01, -1.39282227e-01],\n           ...,\n           [-4.03320312e-01, -3.68164062e-01, -3.17871094e-01, ...,\n            -2.02758789e-01,  1.50268555e-01, -2.91748047e-01],\n           [-4.46777344e-01, -3.43505859e-01, -2.35473633e-01, ...,\n            -3.24951172e-01, -1.18164062e-01,  3.34472656e-02],\n           [-4.20410156e-01, -4.94140625e-01, -4.98291016e-01, ...,\n            -4.61425781e-01, -5.55664062e-01, -3.32031250e-01]],\n  \n          [[-1.55925751e-03, -2.77343750e-01, -4.07714844e-01, ...,\n            -3.02734375e-01, -1.09130859e-01, -8.87451172e-02],\n           [-4.67285156e-01, -2.70019531e-01, -2.85156250e-01, ...,\n            -3.18847656e-01, -1.35009766e-01, -4.03808594e-01],\n           [-1.69921875e-01, -3.34472656e-01, -5.23925781e-01, ...,\n            -4.28222656e-01, -5.40039062e-01, -4.73632812e-01],\n           ...,\n           [ 1.05273438e+00,  6.45019531e-01,  1.31250000e+00, ...,\n             4.82421875e-01,  3.63769531e-02,  8.89648438e-01],\n           [ 1.70312500e+00,  1.02111816e-01,  1.67187500e+00, ...,\n             2.09375000e+00, -4.52270508e-02,  2.24023438e+00],\n           [ 1.35009766e-01, -4.34570312e-01,  1.40625000e-01, ...,\n            -3.78906250e-01, -2.72216797e-01,  1.28417969e-01]],\n  \n          [[-3.23677063e-03, -2.38769531e-01, -4.50439453e-01, ...,\n            -4.05273438e-01, -1.91894531e-01, -1.65527344e-01],\n           [ 4.58203125e+00, -2.33306885e-02, -5.05859375e-01, ...,\n            -4.20166016e-01, -1.77978516e-01, -1.83105469e-01],\n           [ 2.90283203e-01, -2.57324219e-01, -3.49121094e-01, ...,\n            -4.85839844e-01, -3.36425781e-01, -2.36450195e-01],\n           ...,\n           [ 3.54003906e-02, -4.54345703e-01, -3.19335938e-01, ...,\n            -3.91357422e-01, -4.91943359e-01,  1.99121094e+00],\n           [ 1.75659180e-01, -5.03906250e-01, -4.30664062e-01, ...,\n            -4.85839844e-01, -4.27734375e-01,  2.66406250e+00],\n           [-4.27001953e-01, -5.38574219e-01, -4.61669922e-01, ...,\n            -7.22656250e-02, -3.51562500e-01, -4.16503906e-01]]],\n  \n  \n         [[[ 4.05937500e+01,  1.00000000e+00, -3.84277344e-01, ...,\n            -1.85791016e-01, -2.70263672e-01, -3.19824219e-02],\n           [-2.05932617e-01, -3.75976562e-01, -4.83398438e-01, ...,\n            -4.46533203e-01, -4.83398438e-01, -4.04785156e-01],\n           [ 4.34875488e-02, -3.03710938e-01, -3.66455078e-01, ...,\n            -4.26269531e-01, -3.21289062e-01, -3.02001953e-01],\n           ...,\n           [-6.94580078e-02, -2.16796875e-01, -3.26660156e-01, ...,\n            -2.49389648e-01, -1.26464844e-01, -2.45361328e-01],\n           [ 3.35205078e-01,  5.50537109e-02, -2.57324219e-01, ...,\n            -2.53417969e-01,  4.98657227e-02,  4.44335938e-02],\n           [ 8.89160156e-01, -4.11865234e-01, -3.71337891e-01, ...,\n            -4.75097656e-01, -4.33593750e-01, -2.61230469e-02]],\n  \n          [[ 4.52500000e+01, -5.42480469e-01,  1.59960938e+00, ...,\n             7.06054688e-01,  2.69921875e+00,  1.04101562e+00],\n           [-3.20556641e-01, -4.28466797e-02,  4.68505859e-01, ...,\n            -3.85131836e-02,  1.59570312e+00,  4.57031250e-01],\n           [-1.41357422e-01, -9.84191895e-03,  1.03515625e+00, ...,\n             8.22143555e-02,  6.36718750e-01, -1.98242188e-01],\n           ...,\n           [-2.63916016e-01, -1.20178223e-01, -9.91821289e-03, ...,\n             3.13476562e-01,  1.41113281e+00,  1.51977539e-01],\n           [ 2.82714844e-01, -5.90820312e-02,  2.32055664e-01, ...,\n             1.26074219e+00,  2.04687500e+00,  6.61132812e-01],\n           [ 1.56445312e+00, -1.62109375e-01,  2.98828125e-01, ...,\n             1.31738281e+00,  1.45605469e+00,  1.31738281e+00]],\n  \n          [[ 1.92187500e+00,  1.94091797e-02,  2.29370117e-01, ...,\n             1.40014648e-01, -1.09130859e-01, -3.29833984e-01],\n           [ 4.81689453e-01, -3.32519531e-01,  1.65161133e-01, ...,\n            -1.52832031e-01, -4.45556641e-01, -5.56152344e-01],\n           [-7.26318359e-02,  2.31933594e-03,  1.70117188e+00, ...,\n            -3.95019531e-01, -4.49218750e-01, -4.93652344e-01],\n           ...,\n           [-1.27685547e-01,  3.13110352e-02,  3.10791016e-01, ...,\n            -4.24804688e-01, -4.36767578e-01, -5.47851562e-01],\n           [-3.18847656e-01, -1.29394531e-01,  1.14746094e-01, ...,\n            -3.63525391e-01, -3.61328125e-01, -4.31152344e-01],\n           [-3.75976562e-01,  7.69042969e-02, -5.68847656e-02, ...,\n            -5.35156250e-01, -4.99023438e-01, -5.36621094e-01]],\n  \n          ...,\n  \n          [[-1.45626068e-03, -3.14453125e-01, -5.00488281e-01, ...,\n             1.84082031e-01,  6.15234375e-01, -5.03417969e-01],\n           [-4.05273438e-01,  2.31250000e+00, -1.56005859e-01, ...,\n             8.51440430e-02,  3.42041016e-01,  1.13281250e-01],\n           [-4.15527344e-01, -1.77490234e-01,  3.86718750e-01, ...,\n             1.10156250e+00,  7.51464844e-01, -1.70166016e-01],\n           ...,\n           [-4.06738281e-01, -2.41821289e-01, -3.50341797e-02, ...,\n             3.96484375e-01,  1.03613281e+00,  1.34033203e-01],\n           [-4.44824219e-01, -4.91699219e-01, -1.07055664e-01, ...,\n             3.36914062e-02,  3.33984375e-01, -1.97753906e-02],\n           [-4.25781250e-01, -5.18554688e-01, -5.30273438e-01, ...,\n            -3.29345703e-01,  6.34155273e-02, -5.09277344e-01]],\n  \n          [[-1.61743164e-01, -4.31640625e-01,  1.09558105e-01, ...,\n            -4.96582031e-01, -4.48242188e-01, -2.32055664e-01],\n           [ 2.72460938e-01, -4.97802734e-01,  1.80908203e-01, ...,\n            -2.72216797e-01, -5.16113281e-01,  4.85839844e-02],\n           [-3.01513672e-01, -2.35595703e-02,  6.31347656e-01, ...,\n            -2.12646484e-01, -2.00073242e-01,  6.48925781e-01],\n           ...,\n           [ 5.18066406e-01, -3.58398438e-01, -2.48291016e-01, ...,\n             8.21289062e-01,  2.19726562e-02,  8.75976562e-01],\n           [ 1.46582031e+00, -9.11865234e-02,  2.31079102e-01, ...,\n             2.07031250e+00,  1.77441406e+00,  2.43164062e+00],\n           [-2.04833984e-01, -5.41992188e-01, -4.23583984e-01, ...,\n            -4.56542969e-02, -1.53320312e-01,  2.63671875e-01]],\n  \n          [[-3.46069336e-02, -3.03222656e-01, -4.91699219e-01, ...,\n            -3.64990234e-01, -3.88427734e-01,  4.29687500e-01],\n           [ 2.74023438e+00, -2.95410156e-01, -3.30322266e-01, ...,\n            -8.11767578e-03, -2.67578125e-01,  3.34472656e-01],\n           [-1.87622070e-01, -4.89257812e-01, -3.98925781e-01, ...,\n             3.11279297e-03, -4.28710938e-01,  2.67578125e-01],\n           ...,\n           [ 2.43164062e-01, -5.18554688e-01, -4.35058594e-01, ...,\n            -5.30273438e-01, -5.26367188e-01,  3.23242188e-01],\n           [ 8.09326172e-02, -5.01953125e-01, -4.72167969e-01, ...,\n            -5.50781250e-01, -5.54199219e-01,  1.11328125e-01],\n           [-5.16113281e-01, -5.09277344e-01, -5.51757812e-01, ...,\n            -5.23437500e-01, -4.95361328e-01, -2.46582031e-02]]],\n  \n  \n         [[[ 2.79375000e+01,  1.63183594e+00, -1.02539062e-02, ...,\n             4.13281250e+00,  7.18359375e+00,  6.57031250e+00],\n           [ 1.98486328e-01, -7.08007812e-02, -3.69384766e-01, ...,\n             6.80468750e+00,  1.27812500e+01,  9.50000000e+00],\n           [ 1.79321289e-01, -1.37695312e-01, -2.26196289e-01, ...,\n             5.30468750e+00,  9.78125000e+00,  7.98437500e+00],\n           ...,\n           [-1.59912109e-01, -1.67114258e-01, -4.00390625e-01, ...,\n             1.04064941e-01, -8.14819336e-02, -2.27905273e-01],\n           [ 5.88378906e-01, -2.51007080e-02, -2.10205078e-01, ...,\n             4.65332031e-01,  6.67968750e-01,  5.83496094e-02],\n           [ 1.55859375e+00, -3.55712891e-01, -3.47167969e-01, ...,\n             5.08789062e-01,  1.24755859e-01,  2.45361328e-02]],\n  \n          [[ 3.17343750e+01, -4.92187500e-01,  8.68652344e-01, ...,\n             2.48291016e-01,  1.25976562e-01,  1.79101562e+00],\n           [ 2.38281250e-01, -2.34130859e-01, -3.43017578e-02, ...,\n            -5.20507812e-01, -5.17578125e-01, -4.96582031e-01],\n           [ 3.35693359e-03, -4.10644531e-01, -3.04443359e-01, ...,\n            -4.09179688e-01, -5.47851562e-01, -4.25781250e-01],\n           ...,\n           [ 1.53320312e-01,  9.61303711e-02,  1.92016602e-01, ...,\n             1.08007812e+00,  1.26953125e+00,  7.67089844e-01],\n           [ 6.98242188e-01,  1.93603516e-01,  4.79492188e-01, ...,\n             1.29003906e+00,  2.11718750e+00,  1.02050781e+00],\n           [ 2.23828125e+00,  1.19628906e-02,  5.42480469e-01, ...,\n             2.96875000e-01,  4.22363281e-01,  1.34375000e+00]],\n  \n          [[ 1.12890625e+00, -8.80126953e-02,  2.39379883e-01, ...,\n             3.08203125e+00,  3.27734375e+00,  2.47656250e+00],\n           [ 2.39013672e-01,  6.03027344e-02,  3.18847656e-01, ...,\n             7.57812500e+00,  9.40625000e+00,  6.25000000e+00],\n           [ 5.80566406e-01,  3.86718750e-01,  1.29589844e+00, ...,\n             5.44531250e+00,  7.64062500e+00,  6.19140625e+00],\n           ...,\n           [-1.61621094e-01, -7.53173828e-02,  9.63745117e-02, ...,\n            -3.45703125e-01, -4.65576172e-01, -4.96826172e-01],\n           [-2.74658203e-01, -4.26269531e-01, -1.10229492e-01, ...,\n            -2.41943359e-01, -4.32128906e-01, -4.05517578e-01],\n           [-3.17138672e-01, -4.33593750e-01, -3.20312500e-01, ...,\n            -9.40551758e-02, -3.46679688e-01, -4.05273438e-01]],\n  \n          ...,\n  \n          [[-1.16348267e-02, -4.84375000e-01, -4.66796875e-01, ...,\n             3.21044922e-02, -4.24316406e-01, -5.15136719e-01],\n           [-3.34472656e-01,  6.10351562e-01,  1.73583984e-01, ...,\n            -2.69531250e-01, -1.57958984e-01, -3.09082031e-01],\n           [-9.61914062e-02,  6.30371094e-01,  9.11865234e-02, ...,\n            -3.83300781e-01, -3.08837891e-01, -3.03466797e-01],\n           ...,\n           [-4.32617188e-01, -1.95556641e-01, -5.26123047e-02, ...,\n             6.21337891e-02,  6.09863281e-01, -9.65576172e-02],\n           [-4.35058594e-01, -2.76367188e-01, -2.91992188e-01, ...,\n            -3.05419922e-01,  1.49047852e-01, -1.72241211e-01],\n           [-4.22363281e-01, -4.38232422e-01, -5.56640625e-01, ...,\n            -4.78027344e-01, -4.41406250e-01, -4.12109375e-01]],\n  \n          [[-2.03735352e-01, -4.54101562e-01, -3.56933594e-01, ...,\n            -2.23510742e-01, -1.09924316e-01, -2.67822266e-01],\n           [-3.18847656e-01, -4.09667969e-01, -1.70654297e-01, ...,\n            -2.94921875e-01, -1.88964844e-01, -4.48730469e-01],\n           [-2.78320312e-01, -2.41821289e-01, -4.78759766e-01, ...,\n            -5.16601562e-01, -5.03906250e-01, -5.19531250e-01],\n           ...,\n           [ 4.40185547e-01, -1.69189453e-01,  1.88720703e-01, ...,\n             5.55664062e-01, -3.18115234e-01,  1.10742188e+00],\n           [ 1.15039062e+00, -4.40673828e-01,  1.04980469e+00, ...,\n             7.77832031e-01, -5.35888672e-02,  2.90234375e+00],\n           [-4.14794922e-01, -5.56152344e-01, -1.17309570e-01, ...,\n            -5.26367188e-01, -2.87841797e-01, -1.65283203e-01]],\n  \n          [[-4.37316895e-02, -2.59277344e-01, -4.18457031e-01, ...,\n            -2.80029297e-01, -2.42187500e-01, -3.39355469e-01],\n           [ 6.29882812e-01, -3.45703125e-01, -4.35546875e-01, ...,\n            -2.18750000e-01, -1.77001953e-01, -2.84667969e-01],\n           [-2.02392578e-01, -4.67773438e-01, -4.26269531e-01, ...,\n            -3.73779297e-01, -2.25097656e-01, -2.70751953e-01],\n           ...,\n           [ 1.26220703e-01, -4.96093750e-01, -4.85351562e-01, ...,\n            -2.67333984e-01, -5.38085938e-01,  4.71435547e-01],\n           [ 1.13281250e-01, -5.15136719e-01, -5.41015625e-01, ...,\n            -3.58886719e-01, -4.25781250e-01,  6.22558594e-01],\n           [-4.32373047e-01, -4.86328125e-01, -5.52734375e-01, ...,\n            -3.32519531e-01, -3.29589844e-01, -3.47900391e-01]]]],\n        shape=(16, 256, 40, 40), dtype=float32),\n  array([[[[ 1.40917969e+00, -1.39160156e-01, -4.31640625e-01, ...,\n            -5.22949219e-01, -4.74365234e-01, -4.83886719e-01],\n           [ 3.70849609e-01,  4.71923828e-01, -4.11132812e-01, ...,\n            -3.08105469e-01, -3.11767578e-01, -5.47363281e-01],\n           [-2.23510742e-01, -4.38964844e-01, -5.02929688e-01, ...,\n            -3.30810547e-01, -3.42285156e-01, -3.32031250e-01],\n           ...,\n           [ 1.08398438e+00,  1.03613281e+00,  1.00878906e+00, ...,\n             7.67089844e-01,  6.60156250e-01,  5.51269531e-01],\n           [ 7.23632812e-01,  1.21777344e+00,  1.09765625e+00, ...,\n             5.96679688e-01,  9.52148438e-01, -4.43115234e-02],\n           [-6.78710938e-02,  1.07788086e-01,  4.38232422e-02, ...,\n            -1.03271484e-01, -3.16650391e-01, -3.72558594e-01]],\n  \n          [[-2.22900391e-01,  2.10937500e-01, -5.30273438e-01, ...,\n            -5.48339844e-01, -1.33789062e-01, -5.11718750e-01],\n           [ 6.17187500e-01, -2.39257812e-01, -5.46875000e-01, ...,\n            -5.13671875e-01, -4.86816406e-01, -4.76318359e-01],\n           [-5.25878906e-01, -5.53710938e-01, -4.94873047e-01, ...,\n            -4.90722656e-01, -4.48242188e-01, -4.21386719e-01],\n           ...,\n           [ 5.59570312e-01,  7.80761719e-01,  2.86621094e-01, ...,\n             5.51757812e-01,  3.96972656e-01,  5.77636719e-01],\n           [ 2.55371094e-01,  5.11230469e-01,  2.17651367e-01, ...,\n             4.95361328e-01,  3.59375000e-01,  4.62158203e-01],\n           [ 5.67626953e-02,  4.08203125e-01, -2.69165039e-02, ...,\n            -5.07812500e-02,  2.55432129e-02, -3.60107422e-02]],\n  \n          [[ 1.11484375e+01,  8.50097656e-01,  8.06152344e-01, ...,\n             1.13476562e+00,  5.61523438e-01,  1.03613281e+00],\n           [ 3.92089844e-01,  4.11621094e-01,  8.47656250e-01, ...,\n             5.79101562e-01,  3.83544922e-01,  4.97314453e-01],\n           [ 2.70751953e-01,  7.30468750e-01,  9.75585938e-01, ...,\n             5.26367188e-01,  5.00488281e-01,  8.14453125e-01],\n           ...,\n           [-3.42773438e-01, -2.32788086e-01, -2.74902344e-01, ...,\n            -3.18847656e-01, -2.04589844e-01, -1.57714844e-01],\n           [-4.03564453e-01, -3.49365234e-01, -3.34472656e-01, ...,\n            -4.42138672e-01, -3.86230469e-01, -3.12255859e-01],\n           [-4.24804688e-01, -3.40820312e-01, -3.76220703e-01, ...,\n            -4.33105469e-01, -3.59863281e-01, -8.09936523e-02]],\n  \n          ...,\n  \n          [[ 7.32812500e+00, -3.60412598e-02,  1.24694824e-01, ...,\n             4.05029297e-01,  1.48925781e-02,  6.93359375e-01],\n           [ 4.92431641e-01,  5.48828125e-01,  3.11523438e-01, ...,\n             4.26513672e-01,  3.32031250e-01,  4.20166016e-01],\n           [ 9.86816406e-01, -1.02539062e-01,  1.33300781e-01, ...,\n            -3.34472656e-02,  1.12365723e-01,  1.48242188e+00],\n           ...,\n           [ 3.56445312e-01, -1.27441406e-01,  5.63964844e-02, ...,\n            -6.46972656e-03,  1.72119141e-01,  2.37426758e-01],\n           [-5.81054688e-02, -2.41088867e-01, -1.56738281e-01, ...,\n            -1.24145508e-01, -1.15600586e-01,  2.70996094e-02],\n           [-4.71923828e-01, -5.55664062e-01, -5.52734375e-01, ...,\n            -5.36621094e-01, -5.40039062e-01, -4.88281250e-01]],\n  \n          [[ 1.92285156e+00,  5.50292969e-01,  2.24609375e-02, ...,\n             2.59521484e-01,  1.39892578e-01, -2.20581055e-01],\n           [ 4.23828125e-01, -4.09179688e-01, -3.56445312e-01, ...,\n            -3.40820312e-01, -1.71142578e-01, -4.82177734e-01],\n           [ 4.41894531e-02, -3.73535156e-01, -4.44580078e-01, ...,\n            -3.46923828e-01, -1.68945312e-01,  7.47070312e-02],\n           ...,\n           [ 9.47265625e-01,  5.08789062e-01, -4.37011719e-01, ...,\n             6.66015625e-01,  2.65869141e-01,  4.86328125e-01],\n           [ 7.84179688e-01,  5.58593750e-01, -2.25341797e-01, ...,\n             4.69238281e-01,  4.39453125e-01,  3.29589844e-01],\n           [ 1.20996094e+00,  7.67089844e-01,  6.75048828e-02, ...,\n             5.27832031e-01,  3.51318359e-01,  4.70214844e-01]],\n  \n          [[-2.39746094e-01, -2.50976562e-01, -3.72558594e-01, ...,\n            -4.06982422e-01,  2.50976562e-01,  4.88769531e-01],\n           [-3.55957031e-01, -4.95117188e-01, -4.82421875e-01, ...,\n            -3.91601562e-01, -3.79882812e-01, -9.26513672e-02],\n           [-5.05859375e-01, -4.95361328e-01, -4.14550781e-01, ...,\n            -4.69238281e-01, -4.35791016e-01, -4.79980469e-01],\n           ...,\n           [-1.98608398e-01, -8.36181641e-02, -4.25292969e-01, ...,\n            -6.48193359e-02, -3.69628906e-01, -2.15087891e-01],\n           [-3.08837891e-01, -3.69384766e-01, -4.16015625e-01, ...,\n            -2.55371094e-01, -2.90039062e-01, -4.73144531e-01],\n           [-4.79980469e-01, -3.88671875e-01, -4.24316406e-01, ...,\n            -4.04296875e-01, -6.46972656e-02, -3.90136719e-01]]],\n  \n  \n         [[[ 2.46093750e+00, -1.26342773e-01, -5.05371094e-01, ...,\n            -5.52734375e-01, -5.13671875e-01, -5.50781250e-01],\n           [ 4.32373047e-01,  1.71630859e-01, -5.18554688e-01, ...,\n            -5.20507812e-01, -4.34326172e-01, -4.84619141e-01],\n           [-1.94335938e-01, -3.68164062e-01, -4.66552734e-01, ...,\n            -4.65332031e-01, -4.26269531e-01, -4.06494141e-01],\n           ...,\n           [ 7.73925781e-01,  7.90039062e-01,  7.96386719e-01, ...,\n             1.33300781e+00,  1.07519531e+00,  7.79296875e-01],\n           [ 2.19848633e-01,  6.38671875e-01,  6.28417969e-01, ...,\n             8.33007812e-01,  1.22851562e+00,  2.19482422e-01],\n           [-1.61132812e-01, -8.20312500e-02, -7.25097656e-02, ...,\n            -1.50878906e-01, -2.43652344e-01, -3.00292969e-01]],\n  \n          [[-2.06054688e-01,  4.72656250e-01, -5.37597656e-01, ...,\n            -5.12207031e-01, -5.10253906e-01, -5.26367188e-01],\n           [ 6.73828125e-01, -4.14794922e-01, -5.42968750e-01, ...,\n            -4.06494141e-01, -4.99023438e-01, -4.85351562e-01],\n           [-4.65332031e-01, -4.59716797e-01, -3.83789062e-01, ...,\n            -1.46484375e-01, -3.81835938e-01, -2.62451172e-01],\n           ...,\n           [ 6.21337891e-02,  5.47363281e-01,  9.81445312e-01, ...,\n             5.28320312e-01,  4.67285156e-01,  6.58203125e-01],\n           [ 3.69873047e-02,  4.51660156e-01,  6.88476562e-01, ...,\n             6.22070312e-01,  7.11425781e-01,  6.11816406e-01],\n           [ 5.54809570e-02,  1.06567383e-01, -1.29028320e-01, ...,\n            -6.72607422e-02,  6.30493164e-02,  1.85180664e-01]],\n  \n          [[ 1.47343750e+01,  1.25585938e+00,  1.36132812e+00, ...,\n             8.38378906e-01,  4.65332031e-01,  5.77636719e-01],\n           [ 2.83691406e-01,  3.12011719e-01,  1.28613281e+00, ...,\n             9.89257812e-01,  8.89648438e-01,  8.55468750e-01],\n           [ 7.41577148e-02,  4.60937500e-01,  8.34960938e-01, ...,\n             9.68750000e-01,  5.78613281e-01,  1.23437500e+00],\n           ...,\n           [-3.92822266e-01, -4.08691406e-01, -2.37060547e-01, ...,\n            -3.18359375e-01, -1.44897461e-01, -2.14599609e-01],\n           [-4.49218750e-01, -4.87304688e-01, -3.59130859e-01, ...,\n            -4.39453125e-01, -3.06884766e-01, -4.32128906e-01],\n           [-2.99804688e-01, -4.22363281e-01, -4.10644531e-01, ...,\n            -4.26269531e-01, -2.98339844e-01, -2.52929688e-01]],\n  \n          ...,\n  \n          [[ 8.68750000e+00, -2.43652344e-01,  1.74682617e-01, ...,\n             4.64355469e-01,  3.22998047e-01,  2.36450195e-01],\n           [ 1.33789062e+00,  2.92968750e-01,  2.00073242e-01, ...,\n            -1.37451172e-01,  9.93652344e-02,  4.44824219e-01],\n           [ 1.86230469e+00, -1.76513672e-01, -1.34521484e-01, ...,\n            -3.91113281e-01, -5.48095703e-02,  2.12890625e-01],\n           ...,\n           [ 6.40625000e-01,  2.85400391e-01,  3.06396484e-01, ...,\n             1.94580078e-01,  3.40820312e-01,  3.33251953e-01],\n           [-8.37402344e-02, -1.60400391e-01,  4.88281250e-04, ...,\n            -9.83886719e-02,  2.78320312e-02,  3.88183594e-02],\n           [-4.66308594e-01, -5.45898438e-01, -5.41992188e-01, ...,\n            -4.25781250e-01, -5.16113281e-01, -3.55224609e-01]],\n  \n          [[ 2.78515625e+00,  8.25195312e-01,  2.26074219e-01, ...,\n             8.20312500e-02,  1.90551758e-01, -1.37207031e-01],\n           [ 5.90820312e-01, -4.22851562e-01, -3.05175781e-01, ...,\n            -2.81250000e-01, -1.54785156e-01, -1.34643555e-01],\n           [ 2.09228516e-01, -1.65527344e-01, -3.31542969e-01, ...,\n            -2.49877930e-01, -1.64062500e-01,  4.90722656e-02],\n           ...,\n           [ 7.39257812e-01,  4.02343750e-01,  2.25830078e-01, ...,\n             8.40332031e-01,  7.04101562e-01,  1.00585938e+00],\n           [ 4.66064453e-01,  2.44873047e-01,  7.75146484e-02, ...,\n             3.22753906e-01,  4.75585938e-01,  4.51416016e-01],\n           [ 8.34472656e-01,  7.29003906e-01,  1.25610352e-01, ...,\n             4.40917969e-01,  2.77343750e-01,  4.03076172e-01]],\n  \n          [[-1.06933594e-01, -4.37011719e-02, -2.39501953e-01, ...,\n            -1.04919434e-01,  4.24804688e-01,  6.55517578e-02],\n           [-3.60351562e-01, -4.63378906e-01, -3.79882812e-01, ...,\n            -1.37451172e-01, -2.57324219e-01, -2.26562500e-01],\n           [-3.70605469e-01, -3.55957031e-01, -3.48144531e-01, ...,\n            -2.76611328e-01, -2.21435547e-01, -2.35839844e-01],\n           ...,\n           [-9.70458984e-02,  1.96533203e-01, -1.32690430e-01, ...,\n            -6.40869141e-02, -2.68066406e-01, -2.26318359e-01],\n           [-7.37915039e-02,  1.09069824e-01, -2.68066406e-01, ...,\n            -3.22998047e-01, -1.56494141e-01, -4.11132812e-01],\n           [ 3.20068359e-01,  8.59375000e-02, -1.97998047e-01, ...,\n            -2.71728516e-01,  5.96679688e-01,  7.28759766e-02]]],\n  \n  \n         [[[-5.04882812e-01, -4.24804688e-01, -3.22753906e-01, ...,\n            -5.09765625e-01, -2.68066406e-01, -6.30187988e-03],\n           [-9.71069336e-02,  1.28906250e-01, -3.11035156e-01, ...,\n            -1.58691406e-01, -2.18872070e-01, -1.07192993e-03],\n           [ 1.85546875e-02, -2.77832031e-01, -4.29687500e-01, ...,\n            -4.62158203e-01, -3.66455078e-01, -3.27392578e-01],\n           ...,\n           [ 2.65136719e-01,  1.65771484e-01,  2.14599609e-01, ...,\n            -1.75292969e-01, -2.42187500e-01,  6.33544922e-02],\n           [ 1.16943359e-01,  2.01904297e-01,  4.45800781e-01, ...,\n             2.41699219e-02, -6.05468750e-02,  1.55517578e-01],\n           [-3.32763672e-01, -3.45947266e-01, -4.24804688e-02, ...,\n            -1.58935547e-01, -3.01025391e-01, -2.56835938e-01]],\n  \n          [[-3.87695312e-01, -5.01953125e-01, -4.78515625e-01, ...,\n            -5.35156250e-01, -4.34570312e-01, -1.89208984e-01],\n           [-3.30810547e-02, -1.77246094e-01, -3.79150391e-01, ...,\n            -3.32275391e-01, -5.56640625e-01, -2.29248047e-01],\n           [-3.78417969e-01, -2.61718750e-01, -4.36035156e-01, ...,\n            -4.27246094e-01, -3.42041016e-01, -5.07812500e-01],\n           ...,\n           [-1.51855469e-01,  3.20800781e-01,  6.88964844e-01, ...,\n            -2.22412109e-01, -9.06982422e-02,  1.70166016e-01],\n           [-7.65380859e-02,  3.96728516e-01,  4.34082031e-01, ...,\n             3.77929688e-01,  3.17382812e-01,  3.38623047e-01],\n           [-3.24951172e-01, -8.09326172e-02, -2.34741211e-01, ...,\n             4.07714844e-02,  4.13574219e-01,  1.11267090e-01]],\n  \n          [[ 2.12695312e+00,  8.84765625e-01,  9.06250000e-01, ...,\n             1.19726562e+00,  4.16015625e+00,  1.00078125e+01],\n           [ 3.10058594e-01,  6.45996094e-01,  5.74218750e-01, ...,\n             8.41796875e-01,  3.41601562e+00,  1.26171875e+01],\n           [-1.30981445e-01,  5.90820312e-02,  3.26416016e-01, ...,\n             2.56347656e-01, -8.67919922e-02,  1.79394531e+00],\n           ...,\n           [-4.35546875e-01, -3.07617188e-01, -2.36328125e-01, ...,\n            -2.83203125e-01, -2.43774414e-01, -1.46240234e-01],\n           [-3.98437500e-01, -4.92675781e-01, -4.20410156e-01, ...,\n            -3.32763672e-01, -3.10058594e-01, -2.47314453e-01],\n           [-2.90039062e-01, -2.34985352e-01, -3.41796875e-01, ...,\n            -3.91845703e-01, -2.22656250e-01, -8.15429688e-02]],\n  \n          ...,\n  \n          [[ 4.29687500e-01, -1.57714844e-01,  8.47167969e-02, ...,\n             5.75683594e-01,  1.27246094e+00, -2.62451172e-02],\n           [-2.47070312e-01, -2.33642578e-01, -2.22656250e-01, ...,\n            -1.34033203e-01,  1.31835938e-01,  1.82373047e-01],\n           [ 2.52685547e-01,  1.76269531e-01,  2.92968750e-03, ...,\n            -1.67236328e-01, -2.25341797e-01, -2.70507812e-01],\n           ...,\n           [ 3.71337891e-01,  1.25732422e-01, -8.44726562e-02, ...,\n            -2.19726562e-03,  4.01855469e-01, -1.94091797e-02],\n           [-1.28173828e-01, -2.66113281e-01, -1.55517578e-01, ...,\n            -3.96972656e-01, -1.16394043e-01, -8.83789062e-02],\n           [-3.79882812e-01, -3.96972656e-01, -4.58007812e-01, ...,\n            -3.80859375e-01, -3.62792969e-01, -4.07226562e-01]],\n  \n          [[ 1.03222656e+00, -5.00488281e-02,  1.44165039e-01, ...,\n            -1.21948242e-01, -3.37646484e-01, -1.37207031e-01],\n           [ 3.93798828e-01,  1.04248047e-01, -1.34887695e-01, ...,\n             9.70458984e-02, -1.27685547e-01, -2.76367188e-01],\n           [ 1.91772461e-01, -1.61743164e-01, -3.18847656e-01, ...,\n            -1.59545898e-01,  8.86230469e-02, -1.41845703e-01],\n           ...,\n           [ 2.75634766e-01,  1.86645508e-01,  5.56335449e-02, ...,\n            -3.56201172e-01, -9.80224609e-02,  7.41699219e-01],\n           [ 2.71484375e-01,  1.77856445e-01, -1.48315430e-02, ...,\n            -3.20800781e-01,  1.56494141e-01,  7.60253906e-01],\n           [ 5.59082031e-01,  3.39843750e-01, -1.23901367e-01, ...,\n             7.94067383e-02,  4.61914062e-01,  1.19921875e+00]],\n  \n          [[-4.49218750e-01, -3.01513672e-01, -2.73925781e-01, ...,\n             9.28710938e-01,  1.19375000e+01,  1.90156250e+01],\n           [-3.61328125e-01, -4.93652344e-01, -4.39453125e-01, ...,\n             1.80908203e-01,  1.02109375e+01,  2.25937500e+01],\n           [-4.38476562e-01, -5.38085938e-01, -4.46289062e-01, ...,\n            -2.60986328e-01,  6.75292969e-01,  2.79101562e+00],\n           ...,\n           [ 7.12890625e-02,  7.86743164e-02,  6.45751953e-02, ...,\n             9.83398438e-01,  8.04199219e-01,  6.14257812e-01],\n           [ 2.67089844e-01,  1.94335938e-01,  1.40747070e-01, ...,\n             2.52685547e-02,  8.79394531e-01,  3.61816406e-01],\n           [ 1.83471680e-01,  4.74609375e-01,  2.48901367e-01, ...,\n            -4.51660156e-01, -2.79541016e-01, -2.92968750e-01]]],\n  \n  \n         ...,\n  \n  \n         [[[ 5.48828125e+00,  4.53948975e-03, -5.11230469e-01, ...,\n            -3.68164062e-01, -4.72167969e-01, -1.51611328e-01],\n           [ 1.42480469e+00,  2.66357422e-01, -1.35986328e-01, ...,\n            -6.14013672e-02,  5.66406250e-02, -1.61865234e-01],\n           [-2.49389648e-01, -2.60253906e-01, -1.40991211e-01, ...,\n            -1.96044922e-01, -3.79882812e-01, -4.55566406e-01],\n           ...,\n           [ 1.00488281e+00,  8.79394531e-01,  7.23144531e-01, ...,\n             6.78222656e-01,  5.74218750e-01,  5.48828125e-01],\n           [ 3.87939453e-01,  6.99218750e-01,  7.91015625e-01, ...,\n             7.76367188e-01,  8.73535156e-01,  9.02099609e-02],\n           [-2.34130859e-01,  1.14501953e-01,  5.48339844e-01, ...,\n             7.53173828e-02,  8.66699219e-03, -2.64648438e-01]],\n  \n          [[-1.48925781e-01,  1.84082031e+00, -3.85009766e-01, ...,\n            -5.33203125e-01, -1.31591797e-01, -4.63378906e-01],\n           [ 2.66601562e+00, -3.52294922e-01, -4.48730469e-01, ...,\n            -4.34570312e-01, -3.65722656e-01, -5.27343750e-01],\n           [-5.44921875e-01, -5.13671875e-01, -2.91992188e-01, ...,\n            -4.05761719e-01, -4.87792969e-01, -4.98046875e-01],\n           ...,\n           [-1.15966797e-03,  4.48242188e-01,  4.86328125e-01, ...,\n             5.02441406e-01,  2.52441406e-01,  2.33398438e-01],\n           [-5.63964844e-02,  6.24023438e-01,  7.80273438e-01, ...,\n             6.65527344e-01,  3.35205078e-01,  2.36816406e-01],\n           [-1.00341797e-01,  2.26928711e-01,  3.34472656e-01, ...,\n             4.78515625e-02,  1.55395508e-01,  2.66113281e-02]],\n  \n          [[ 2.61718750e+01,  1.99218750e+00,  1.37890625e+00, ...,\n             1.31445312e+00,  9.83886719e-01,  4.52343750e+00],\n           [ 2.99804688e-01,  1.85058594e-01,  4.24804688e-01, ...,\n             1.10546875e+00,  5.70312500e-01,  5.02343750e+00],\n           [-1.39526367e-01,  7.72705078e-02,  1.85180664e-01, ...,\n             5.86914062e-01,  1.67358398e-01,  1.34570312e+00],\n           ...,\n           [-2.18017578e-01, -2.61718750e-01, -2.41088867e-01, ...,\n            -1.07788086e-01, -1.72729492e-01, -1.02233887e-01],\n           [-3.55468750e-01, -4.07958984e-01, -3.89892578e-01, ...,\n            -1.61376953e-01, -3.12011719e-01, -3.29833984e-01],\n           [-2.48779297e-01, -2.38769531e-01, -3.17382812e-01, ...,\n            -2.74902344e-01, -2.90771484e-01, -2.33154297e-01]],\n  \n          ...,\n  \n          [[ 1.47031250e+01, -2.30834961e-01,  3.62304688e-01, ...,\n             1.27734375e+00,  1.65625000e+00,  1.26855469e+00],\n           [ 2.83203125e+00,  1.21289062e+00,  2.16308594e-01, ...,\n             7.02636719e-01,  4.81689453e-01,  2.43652344e-01],\n           [ 1.64257812e+00,  1.67480469e-01,  3.94042969e-01, ...,\n             9.60083008e-02,  5.94238281e-01, -2.07397461e-01],\n           ...,\n           [ 7.69042969e-01,  4.05029297e-01,  4.96826172e-02, ...,\n             3.72314453e-01,  3.36914062e-01,  7.15820312e-01],\n           [-1.11083984e-01, -1.62597656e-01, -4.88281250e-03, ...,\n             3.90625000e-02,  1.74560547e-02,  4.82177734e-03],\n           [-4.21875000e-01, -5.30273438e-01, -5.13183594e-01, ...,\n            -5.20507812e-01, -4.62646484e-01, -3.04199219e-01]],\n  \n          [[ 4.77343750e+00,  1.19238281e+00,  1.47460938e-01, ...,\n             3.65478516e-01, -3.65234375e-01, -8.88061523e-02],\n           [ 1.40722656e+00, -4.24804688e-01,  3.32519531e-01, ...,\n            -2.18627930e-01, -2.18139648e-01, -3.54980469e-01],\n           [ 3.80859375e-01, -3.13964844e-01,  4.22363281e-02, ...,\n            -2.22656250e-01, -1.14746094e-01,  6.12792969e-02],\n           ...,\n           [ 8.67187500e-01,  4.22363281e-01,  2.00805664e-01, ...,\n             4.94873047e-01,  3.39599609e-01,  7.17773438e-01],\n           [ 5.15136719e-01,  4.74609375e-01,  1.95556641e-01, ...,\n             4.86816406e-01,  7.02148438e-01,  5.51757812e-01],\n           [ 8.10058594e-01,  5.26855469e-01,  4.95361328e-01, ...,\n             3.76220703e-01,  6.64550781e-01,  8.32519531e-01]],\n  \n          [[ 2.09472656e-01, -1.04858398e-01, -2.34619141e-01, ...,\n            -1.60888672e-01,  2.39257812e+00,  7.12500000e+00],\n           [-3.32031250e-01, -4.80468750e-01, -2.59033203e-01, ...,\n            -2.31445312e-01,  1.00976562e+00,  7.44531250e+00],\n           [-4.62646484e-02, -3.26660156e-01, -2.30224609e-01, ...,\n            -2.24975586e-01, -1.20697021e-02, -2.99072266e-02],\n           ...,\n           [ 4.71191406e-02,  1.42089844e-01,  2.92236328e-01, ...,\n             3.03710938e-01,  7.11669922e-02,  8.85009766e-02],\n           [ 8.74023438e-02,  1.17614746e-01,  2.14965820e-01, ...,\n            -5.43212891e-02,  2.62695312e-01, -2.99316406e-01],\n           [ 3.63281250e-01,  1.77246094e-01,  1.64794922e-02, ...,\n            -1.79077148e-01,  6.07910156e-01,  1.31835938e-02]]],\n  \n  \n         [[[ 9.02832031e-01,  2.11791992e-02, -2.91259766e-01, ...,\n            -2.44506836e-01, -1.05773926e-01, -5.17578125e-01],\n           [ 4.12109375e-01,  9.51171875e-01,  3.75488281e-01, ...,\n             4.01611328e-01,  8.40820312e-01,  7.08007812e-01],\n           [ 3.07617188e-01,  3.82080078e-01,  8.55468750e-01, ...,\n             2.70263672e-01,  5.96191406e-01,  3.08349609e-01],\n           ...,\n           [ 1.42382812e+00,  1.37988281e+00,  1.41406250e+00, ...,\n             8.50097656e-01,  6.60644531e-01,  7.23632812e-01],\n           [ 1.01855469e+00,  1.26953125e+00,  1.25976562e+00, ...,\n             6.78710938e-01,  1.22167969e+00,  6.22558594e-01],\n           [ 2.83203125e-01,  1.95556641e-01,  2.38769531e-01, ...,\n             2.34619141e-01,  2.90527344e-01, -1.31225586e-02]],\n  \n          [[-1.23168945e-01,  9.50927734e-02, -4.33593750e-01, ...,\n            -1.20361328e-01,  1.36230469e-01, -2.37426758e-01],\n           [ 1.57592773e-01, -2.56103516e-01, -2.33398438e-01, ...,\n             5.73730469e-01,  1.04003906e+00,  1.25390625e+00],\n           [-3.67187500e-01, -2.76855469e-01,  3.32031250e-02, ...,\n            -2.87475586e-02,  2.51708984e-01,  2.44873047e-01],\n           ...,\n           [ 4.27734375e-01,  6.02539062e-01,  3.57910156e-01, ...,\n             9.64355469e-01,  6.85546875e-01,  9.11132812e-01],\n           [ 4.03076172e-01,  6.43554688e-01,  6.25000000e-01, ...,\n             8.96484375e-01,  6.56250000e-01,  7.60742188e-01],\n           [ 2.79785156e-01,  1.48803711e-01,  2.99682617e-02, ...,\n             3.94042969e-01,  5.32226562e-01,  4.20898438e-01]],\n  \n          [[ 9.54687500e+00,  1.02929688e+00,  1.29882812e+00, ...,\n             7.27050781e-01,  6.56250000e-01,  1.57617188e+00],\n           [ 1.83715820e-01,  4.50439453e-01,  9.27734375e-01, ...,\n             3.50585938e-01,  3.54980469e-01,  9.58007812e-01],\n           [-3.44848633e-02,  5.87402344e-01,  6.88476562e-01, ...,\n             2.46459961e-01,  9.39941406e-02,  4.59228516e-01],\n           ...,\n           [-3.98193359e-01, -3.73291016e-01, -3.52783203e-01, ...,\n            -1.00708008e-01, -2.56591797e-01, -2.14843750e-01],\n           [-4.07226562e-01, -4.76074219e-01, -3.44970703e-01, ...,\n            -3.65234375e-01, -3.52783203e-01, -2.60253906e-01],\n           [-3.65722656e-01, -4.01123047e-01, -3.19824219e-01, ...,\n            -3.24218750e-01, -2.87109375e-01, -1.13342285e-01]],\n  \n          ...,\n  \n          [[ 6.42187500e+00, -1.57958984e-01,  6.68945312e-01, ...,\n            -4.06982422e-01, -3.78662109e-01, -2.80029297e-01],\n           [ 1.30859375e+00,  3.74023438e-01,  5.34179688e-01, ...,\n             3.97949219e-01, -2.41455078e-01,  1.71386719e-01],\n           [ 9.19921875e-01,  6.08398438e-01,  4.85595703e-01, ...,\n             8.53515625e-01,  9.22851562e-01,  1.68359375e+00],\n           ...,\n           [ 3.84765625e-01,  6.22558594e-02,  1.33056641e-01, ...,\n            -1.32324219e-01,  2.83203125e-01,  2.81738281e-01],\n           [-2.08740234e-02, -3.49121094e-01, -6.89086914e-02, ...,\n            -3.51562500e-01, -2.76367188e-01, -1.04858398e-01],\n           [-4.83154297e-01, -4.77294922e-01, -5.45898438e-01, ...,\n            -4.02099609e-01, -3.88183594e-01, -4.73388672e-01]],\n  \n          [[ 1.71972656e+00,  7.83691406e-02, -9.42993164e-02, ...,\n             1.57226562e-01,  3.76464844e-01,  7.69531250e-01],\n           [ 5.96191406e-01, -2.47558594e-01, -2.56835938e-01, ...,\n            -9.85107422e-02,  1.05224609e-01,  6.49902344e-01],\n           [ 1.49047852e-01, -2.67578125e-01, -4.16015625e-01, ...,\n            -3.01269531e-01, -3.47900391e-02,  3.66699219e-01],\n           ...,\n           [ 8.45703125e-01,  1.11450195e-01, -3.75976562e-01, ...,\n             1.88598633e-01,  1.28784180e-01,  9.29687500e-01],\n           [ 7.67578125e-01,  2.57324219e-01, -3.67187500e-01, ...,\n             1.01562500e-01,  4.22363281e-01,  8.32519531e-01],\n           [ 1.08593750e+00,  6.53808594e-01, -9.68017578e-02, ...,\n             5.73242188e-01,  1.00292969e+00,  1.35742188e+00]],\n  \n          [[-1.26708984e-01, -1.83715820e-01, -1.84570312e-01, ...,\n            -5.26733398e-02,  4.21386719e-01, -3.46679688e-01],\n           [-4.63134766e-01, -3.30566406e-01, -3.16894531e-01, ...,\n             5.20019531e-02,  3.07617188e-01,  2.14843750e-02],\n           [-4.73632812e-01, -2.43652344e-01, -2.08251953e-01, ...,\n            -2.45361328e-01, -1.74560547e-01, -4.28466797e-01],\n           ...,\n           [ 3.00292969e-02,  4.52392578e-01,  3.18359375e-01, ...,\n             1.72119141e-01, -6.32324219e-02,  3.93066406e-02],\n           [ 1.48010254e-02,  6.59179688e-02, -1.46728516e-01, ...,\n            -1.96655273e-01,  6.46972656e-02, -3.26904297e-01],\n           [ 2.05932617e-01, -7.89794922e-02, -2.86376953e-01, ...,\n            -1.61499023e-01,  4.49462891e-01, -2.16796875e-01]]],\n  \n  \n         [[[ 5.24902344e-03, -2.84179688e-01, -5.19531250e-01, ...,\n            -4.45312500e-01, -5.38085938e-01, -1.77856445e-01],\n           [-9.71679688e-02,  3.72802734e-01, -3.81591797e-01, ...,\n            -4.37500000e-01, -2.85644531e-01, -1.13037109e-01],\n           [-1.57836914e-01, -3.20800781e-01, -3.65722656e-01, ...,\n            -5.29296875e-01, -4.08935547e-01, -5.01464844e-01],\n           ...,\n           [ 8.07128906e-01,  1.22460938e+00,  7.95898438e-01, ...,\n             9.95605469e-01,  6.87500000e-01,  5.04394531e-01],\n           [ 7.26074219e-01,  1.17968750e+00,  7.06054688e-01, ...,\n             8.61328125e-01,  7.26074219e-01,  8.66699219e-02],\n           [-4.29077148e-02, -3.83300781e-02,  6.33544922e-02, ...,\n             1.63574219e-02, -1.92260742e-01, -2.29980469e-01]],\n  \n          [[-1.44653320e-01, -2.81250000e-01, -5.45898438e-01, ...,\n            -5.17578125e-01, -3.38867188e-01, -4.51904297e-01],\n           [-4.48242188e-01, -3.86230469e-01, -5.55664062e-01, ...,\n            -5.21484375e-01, -4.91943359e-01, -4.51171875e-01],\n           [-5.56152344e-01, -5.33203125e-01, -5.51269531e-01, ...,\n            -4.35058594e-01, -4.25781250e-01, -4.79492188e-01],\n           ...,\n           [ 1.51123047e-01,  4.29443359e-01,  2.60009766e-01, ...,\n             5.29296875e-01,  5.01464844e-01,  6.36230469e-01],\n           [ 3.13964844e-01,  6.60156250e-01,  2.08740234e-01, ...,\n             6.29882812e-01,  6.39648438e-01,  7.16796875e-01],\n           [ 2.35595703e-01, -2.38037109e-02, -5.59692383e-02, ...,\n            -1.01440430e-01,  1.04553223e-01,  1.72729492e-01]],\n  \n          [[ 6.52343750e+00,  7.82714844e-01,  1.09375000e+00, ...,\n             6.52343750e-01,  8.70117188e-01,  3.87890625e+00],\n           [ 2.10327148e-01,  1.20727539e-01,  5.34179688e-01, ...,\n             3.34960938e-01,  2.42431641e-01,  4.44531250e+00],\n           [ 1.38183594e-01,  3.55224609e-01,  5.56152344e-01, ...,\n             6.07421875e-01,  2.66601562e-01,  1.09472656e+00],\n           ...,\n           [-3.70117188e-01, -2.55371094e-01, -1.17431641e-01, ...,\n            -3.28857422e-01, -1.67480469e-01, -2.12890625e-01],\n           [-4.18701172e-01, -4.79248047e-01, -3.20312500e-01, ...,\n            -3.94775391e-01, -3.36425781e-01, -2.79052734e-01],\n           [-3.71337891e-01, -4.61669922e-01, -3.85009766e-01, ...,\n            -4.48242188e-01, -2.34619141e-01, -1.17126465e-01]],\n  \n          ...,\n  \n          [[ 4.96875000e+00, -2.04711914e-01,  7.48046875e-01, ...,\n            -2.58789062e-02,  5.63476562e-01,  8.04443359e-02],\n           [ 1.45507812e-01,  2.72460938e-01,  3.38867188e-01, ...,\n             9.88769531e-02,  6.59667969e-01, -2.26684570e-01],\n           [ 2.71484375e-01, -3.41491699e-02, -3.65234375e-01, ...,\n            -2.69165039e-02, -2.44384766e-01,  1.35009766e-01],\n           ...,\n           [ 2.31201172e-01, -3.40576172e-02,  2.05322266e-01, ...,\n             6.28662109e-02,  2.31933594e-01,  4.02587891e-01],\n           [-6.82373047e-02, -2.58056641e-01, -2.26684570e-01, ...,\n            -5.59082031e-02,  1.74072266e-01,  2.32543945e-01],\n           [-3.04931641e-01, -4.61181641e-01, -4.87792969e-01, ...,\n            -5.34179688e-01, -5.20507812e-01, -3.98681641e-01]],\n  \n          [[ 1.30664062e+00, -2.44140625e-03,  6.00280762e-02, ...,\n             6.40869141e-02, -5.24414062e-01, -1.89941406e-01],\n           [ 4.48242188e-01, -2.81982422e-01, -2.90771484e-01, ...,\n            -3.94287109e-02, -3.76953125e-01, -3.30566406e-01],\n           [-6.43310547e-02, -2.55126953e-01, -9.80224609e-02, ...,\n            -1.74316406e-01,  6.05468750e-02, -4.88281250e-03],\n           ...,\n           [ 6.16210938e-01,  1.75537109e-01, -4.72656250e-01, ...,\n             7.23144531e-01,  2.18750000e-01,  6.69921875e-01],\n           [ 7.21191406e-01,  1.99218750e-01, -4.26269531e-01, ...,\n             6.04492188e-01,  3.08593750e-01,  5.17578125e-01],\n           [ 9.40429688e-01,  3.78417969e-01, -7.87353516e-02, ...,\n             6.37695312e-01,  4.47021484e-01,  6.68457031e-01]],\n  \n          [[-2.44140625e-01, -2.19238281e-01, -4.46777344e-01, ...,\n            -3.96118164e-02,  3.29296875e+00,  6.49218750e+00],\n           [-4.59472656e-01, -3.12500000e-01, -3.77929688e-01, ...,\n            -3.10791016e-01,  1.27441406e+00,  7.24609375e+00],\n           [-4.82177734e-01, -3.32275391e-01, -2.91748047e-01, ...,\n            -3.82324219e-01, -2.43896484e-01,  3.56445312e-02],\n           ...,\n           [-3.32031250e-01, -1.68212891e-01, -3.99414062e-01, ...,\n             4.41894531e-02, -2.89062500e-01, -2.40966797e-01],\n           [-2.56835938e-01, -3.04199219e-01, -5.02441406e-01, ...,\n            -1.63818359e-01, -1.11694336e-01, -4.79980469e-01],\n           [-1.50146484e-01, -2.13134766e-01, -4.42382812e-01, ...,\n            -2.91992188e-01,  2.35107422e-01, -3.94531250e-01]]]],\n        shape=(16, 256, 20, 20), dtype=float32)],\n array([[[-0.60068977,  0.513716  , -1.1040678 , -1.2216215 ],\n         [-0.343968  , -0.03207439, -1.1328764 , -1.4633207 ],\n         [-0.03830964, -0.07315105, -0.47564983, -0.5967436 ],\n         ...,\n         [ 0.9260357 , -0.01187384, -2.0810356 , -2.1987114 ],\n         [-0.7997015 , -0.38210106, -1.5387774 , -1.6432695 ],\n         [-1.392685  ,  0.84443617, -2.600545  , -2.8092852 ]],\n \n        [[-0.3481489 ,  0.23202473,  0.619565  ,  0.75433064],\n         [-0.07016999,  0.38277233, -1.0911283 , -1.1515532 ],\n         [ 1.7509639 ,  0.04848235, -1.4992094 , -1.4553862 ],\n         ...,\n         [ 1.0138773 , -0.7825984 , -0.5806303 , -1.5200834 ],\n         [ 1.8611258 , -0.993436  , -2.0912895 , -2.2739067 ],\n         [ 1.2960079 , -1.8724849 , -0.66314983, -2.8101225 ]],\n \n        [[-0.36490306,  0.6784371 ,  0.3881197 , -0.16559124],\n         [-0.07756084,  0.43008828, -1.6526518 , -2.4790678 ],\n         [ 0.8564371 ,  1.3187559 ,  0.08245564, -0.3726225 ],\n         ...,\n         [-1.895463  ,  1.5112808 , -2.1230278 , -2.3417778 ],\n         [-0.98055345,  3.4479795 , -2.3930473 , -2.8083305 ],\n         [-0.8422381 ,  3.9605565 , -2.8549614 , -3.1341362 ]],\n \n        ...,\n \n        [[ 0.0412802 ,  0.35574746, -0.61578655, -0.6997709 ],\n         [ 1.0051243 ,  0.9323038 , -0.73297405, -0.814517  ],\n         [-2.448524  , -0.5626954 , -1.8757963 , -2.2515287 ],\n         ...,\n         [-0.06913197,  0.29793727, -0.24371624, -0.56109905],\n         [ 2.7973728 , -1.9384222 , -2.418438  , -1.9789848 ],\n         [ 2.8367023 , -0.79235715, -2.3950005 , -2.675274  ]],\n \n        [[ 1.1868565 ,  0.84774864, -0.24078655,  0.12542439],\n         [ 0.14131725, -0.06814617, -0.12262249, -0.6431303 ],\n         [ 0.0378069 ,  0.06257927,  3.9847994 ,  2.8637056 ],\n         ...,\n         [-0.6013983 ,  1.2731605 , -3.4923906 , -3.2746172 ],\n         [ 1.3946815 ,  2.509956  , -3.2140703 , -3.43575   ],\n         [ 2.2232242 , -0.10849422, -1.5814848 ,  3.6371431 ]],\n \n        [[ 0.57590127,  0.2134608 ,  0.54144   , -0.02984905],\n         [-0.46696174,  0.64773643, -1.2701445 , -1.265872  ],\n         [-0.03830964,  0.24345958, -1.6300688 , -1.882144  ],\n         ...,\n         [ 0.9573476 , -0.12458105, -3.1247149 , -3.3752031 ],\n         [-2.596044  , -0.8853943 , -2.6491508 , -3.178936  ],\n         [ 0.34041375, -0.854953  , -1.3520317 , -2.980175  ]]],\n       shape=(16, 300, 4), dtype=float32),\n array([[[-2.5332031 ,  2.4726562 , -1.3320312 , ..., -1.2294922 ,\n          -2.3769531 , -2.3496094 ],\n         [-1.0371094 , -1.6806641 , -1.4648438 , ..., -1.1708984 ,\n           2.4453125 , -2.8476562 ],\n         [ 2.1835938 , -0.22460938, -1.2802734 , ..., -2.375     ,\n          -0.7504883 , -1.828125  ],\n         ...,\n         [-2.8300781 , -3.5332031 , -3.0410156 , ..., -3.7929688 ,\n          -3.75      , -2.8945312 ],\n         [-3.1621094 , -3.7207031 , -2.6640625 , ..., -3.8691406 ,\n          -3.2324219 , -3.9980469 ],\n         [-2.6640625 , -3.859375  , -2.8925781 , ..., -3.1191406 ,\n          -3.1914062 , -3.3847656 ]],\n \n        [[ 2.2753906 , -1.5878906 , -2.1289062 , ..., -1.1767578 ,\n          -2.1777344 , -2.3945312 ],\n         [-1.6640625 , -2.3691406 , -1.7783203 , ...,  1.5800781 ,\n          -2.5703125 , -2.3125    ],\n         [-2.3886719 , -2.6289062 , -1.6328125 , ...,  0.71191406,\n          -2.6210938 , -3.3554688 ],\n         ...,\n         [-2.65625   , -3.7226562 , -3.1640625 , ..., -3.8964844 ,\n          -4.140625  , -3.7578125 ],\n         [-2.6582031 , -3.8300781 , -3.        , ..., -4.609375  ,\n          -3.9765625 , -3.21875   ],\n         [-3.7597656 , -4.2421875 , -2.6582031 , ..., -3.5957031 ,\n          -4.859375  , -3.9726562 ]],\n \n        [[ 2.1269531 , -1.2539062 , -2.3046875 , ..., -3.4003906 ,\n          -2.6132812 , -2.2832031 ],\n         [-1.7568359 , -2.0839844 , -1.4296875 , ..., -1.8496094 ,\n           1.5722656 , -2.7070312 ],\n         [-1.1972656 , -1.1826172 , -1.9707031 , ..., -1.0957031 ,\n          -2.5644531 ,  1.2832031 ],\n         ...,\n         [-2.6347656 , -3.3886719 , -2.8671875 , ..., -3.171875  ,\n          -3.1445312 , -3.2636719 ],\n         [-2.6347656 , -5.453125  , -3.7871094 , ..., -3.0410156 ,\n          -3.4726562 , -3.8730469 ],\n         [-3.6582031 , -3.9804688 , -3.9316406 , ..., -2.6347656 ,\n          -3.2792969 , -3.1933594 ]],\n \n        ...,\n \n        [[ 2.7675781 , -1.2626953 , -1.484375  , ..., -1.8925781 ,\n          -2.0546875 , -2.0429688 ],\n         [-1.6533203 , -2.0214844 ,  0.9277344 , ..., -1.6445312 ,\n          -1.7568359 , -3.6464844 ],\n         [-3.6542969 , -3.0253906 , -0.90185547, ..., -1.8564453 ,\n          -2.8066406 , -3.8046875 ],\n         ...,\n         [-3.1347656 , -4.4179688 , -3.2304688 , ..., -4.2109375 ,\n          -4.7109375 , -4.2109375 ],\n         [-2.6347656 , -4.078125  , -3.4316406 , ..., -3.4355469 ,\n          -4.2617188 , -3.5       ],\n         [-3.5039062 , -3.40625   , -3.2265625 , ..., -2.6347656 ,\n          -4.03125   , -4.1796875 ]],\n \n        [[-1.0195312 ,  1.9882812 , -2.4589844 , ..., -1.5917969 ,\n          -2.6542969 , -1.8603516 ],\n         [-2.0644531 , -3.6269531 , -2.6445312 , ..., -3.3476562 ,\n           1.515625  , -3.6582031 ],\n         [ 0.515625  , -3.6933594 , -4.171875  , ..., -2.9316406 ,\n          -2.3808594 , -3.4433594 ],\n         ...,\n         [-2.9414062 , -2.6484375 , -2.9804688 , ..., -3.3320312 ,\n          -2.8300781 , -3.4277344 ],\n         [-3.0292969 , -3.5527344 , -3.4082031 , ..., -3.1699219 ,\n          -3.1386719 , -3.3847656 ],\n         [-2.7246094 , -3.8554688 , -3.6484375 , ..., -3.0136719 ,\n          -3.5605469 , -3.1855469 ]],\n \n        [[ 3.0976562 , -2.1972656 , -2.5058594 , ..., -3.0722656 ,\n          -2.9707031 , -1.7929688 ],\n         [-2.9433594 ,  1.9511719 , -1.1621094 , ..., -1.3125    ,\n          -2.0625    , -2.2597656 ],\n         [-1.3251953 , -1.9238281 , -1.1787109 , ..., -1.3095703 ,\n           1.5839844 , -3.1074219 ],\n         ...,\n         [-3.15625   , -2.8457031 , -2.6738281 , ..., -3.0253906 ,\n          -3.1855469 , -2.7832031 ],\n         [-3.3828125 , -3.9511719 , -2.9472656 , ..., -3.8398438 ,\n          -3.8457031 , -2.6601562 ],\n         [-3.0917969 , -4.1757812 , -2.6601562 , ..., -4.0625    ,\n          -3.8066406 , -3.3535156 ]]], shape=(16, 300, 7), dtype=float32),\n array([[[0.35418588, 0.62567717, 0.24897851, 0.22765122],\n         [0.41484594, 0.4919821 , 0.24363066, 0.18795997],\n         [0.49042374, 0.48172042, 0.38327986, 0.35508904],\n         ...,\n         [0.71627027, 0.4970316 , 0.11095376, 0.09986626],\n         [0.31008935, 0.40562025, 0.17671308, 0.16202067],\n         [0.19897944, 0.6993987 , 0.06910336, 0.05682448]],\n \n        [[0.41383135, 0.5577473 , 0.6501196 , 0.6801216 ],\n         [0.4824647 , 0.59454155, 0.25140586, 0.2402055 ],\n         [0.8520743 , 0.5121182 , 0.18254347, 0.18917401],\n         ...,\n         [0.73377824, 0.31376016, 0.35878757, 0.17944923],\n         [0.86542815, 0.27023393, 0.10994633, 0.09330718],\n         [0.7851624 , 0.13325445, 0.3400324 , 0.05677962]],\n \n        [[0.4097732 , 0.6633898 , 0.59582996, 0.45869657],\n         [0.48061952, 0.60589474, 0.16075088, 0.07733869],\n         [0.7019157 , 0.78897464, 0.5206022 , 0.40790752],\n         ...,\n         [0.13062283, 0.81925094, 0.10687871, 0.08772154],\n         [0.27278197, 0.96917087, 0.0837044 , 0.05687567],\n         [0.30106363, 0.9813037 , 0.05442542, 0.04172092]],\n \n        ...,\n \n        [[0.5103186 , 0.58801067, 0.3507403 , 0.33186302],\n         [0.7320649 , 0.71754247, 0.32454243, 0.30692878],\n         [0.07954655, 0.362924  , 0.13287246, 0.09521767],\n         ...,\n         [0.4827239 , 0.5739382 , 0.43937072, 0.3632932 ],\n         [0.9425337 , 0.12582129, 0.08177747, 0.1214271 ],\n         [0.9446272 , 0.31166276, 0.08355473, 0.06444824]],\n \n        [[0.76617837, 0.70009464, 0.44009256, 0.5313151 ],\n         [0.53527063, 0.48297003, 0.46938276, 0.34453928],\n         [0.50945055, 0.51563966, 0.98174334, 0.94602287],\n         ...,\n         [0.35402384, 0.78128326, 0.02952952, 0.03645231],\n         [0.80133855, 0.92483675, 0.03863965, 0.03119668],\n         [0.9023158 , 0.472903  , 0.1705853 , 0.9743479 ]],\n \n        [[0.6401237 , 0.55316347, 0.6321474 , 0.49253824],\n         [0.3853356 , 0.65650016, 0.21923253, 0.21996471],\n         [0.49042374, 0.56056607, 0.16382094, 0.1321428 ],\n         ...,\n         [0.72259045, 0.468895  , 0.04209923, 0.03307948],\n         [0.06939345, 0.2920612 , 0.06604137, 0.03996614],\n         [0.58429104, 0.2983949 , 0.2055384 , 0.04832958]]],\n       shape=(16, 300, 4), dtype=float32),\n array([[[-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         ...,\n         [-3.6152344, -4.5546875, -3.6074219, ..., -3.5117188,\n          -4.34375  , -3.8925781],\n         [-3.2871094, -4.4257812, -3.1738281, ..., -3.1972656,\n          -3.4785156, -3.2304688],\n         [-3.9316406, -4.1484375, -3.6230469, ..., -3.1328125,\n          -3.6933594, -3.4199219]],\n \n        [[-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         ...,\n         [-3.4492188, -4.7460938, -3.8046875, ..., -3.7148438,\n          -3.9394531, -4.4414062],\n         [-3.5410156, -4.65625  , -3.3476562, ..., -3.6933594,\n          -3.6347656, -3.65625  ],\n         [-3.7753906, -4.3632812, -3.5859375, ..., -3.578125 ,\n          -3.7226562, -3.8964844]],\n \n        [[-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         ...,\n         [-3.9921875, -4.5585938, -3.2402344, ..., -2.8867188,\n          -4.3085938, -2.3828125],\n         [-3.390625 , -3.4941406, -2.9140625, ..., -2.3085938,\n          -2.8964844, -2.0683594],\n         [-3.875    , -3.875    , -3.5078125, ..., -2.4902344,\n          -3.5371094, -2.2070312]],\n \n        ...,\n \n        [[-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         ...,\n         [-3.7167969, -4.390625 , -3.4804688, ..., -3.8300781,\n          -4.265625 , -4.21875  ],\n         [-3.5742188, -4.8242188, -3.3144531, ..., -3.8203125,\n          -3.5136719, -3.5605469],\n         [-3.8515625, -4.       , -3.2363281, ..., -3.0859375,\n          -3.3632812, -3.390625 ]],\n \n        [[-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         ...,\n         [-3.6484375, -4.7734375, -3.4140625, ..., -3.5800781,\n          -4.1054688, -3.8164062],\n         [-3.4667969, -4.53125  , -3.1523438, ..., -3.5234375,\n          -3.5605469, -3.421875 ],\n         [-3.3125   , -3.8652344, -3.3808594, ..., -2.9394531,\n          -3.4042969, -2.7871094]],\n \n        [[-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         [-4.0976562, -4.0585938, -3.140625 , ..., -4.3320312,\n          -4.9804688, -4.7734375],\n         ...,\n         [-3.4375   , -4.4570312, -3.6308594, ..., -3.5175781,\n          -3.7871094, -3.8691406],\n         [-3.0136719, -4.1171875, -2.7734375, ..., -2.9921875,\n          -3.1777344, -3.1738281],\n         [-3.65625  , -3.875    , -3.4433594, ..., -2.7070312,\n          -3.4804688, -3.2617188]]], shape=(16, 8400, 7), dtype=float32),\n array([[[ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         ...,\n         [ 1.6461055e+00,  2.4488101e+00, -1.0264311e+00, -1.7598295e+00],\n         [ 2.5371771e+00,  2.9717593e+00, -2.0606108e+00, -2.2246733e+00],\n         [ 3.5207095e+00,  3.1927066e+00, -2.8521147e+00, -2.5689116e+00]],\n \n        [[ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         ...,\n         [ 8.9024615e-01,  2.1011539e+00,  1.3714314e-01, -1.3413420e+00],\n         [ 2.5530767e+00,  3.0601382e+00, -2.0630522e+00, -2.1011381e+00],\n         [ 3.6566501e+00,  3.0039859e+00, -2.7466459e+00, -2.1094389e+00]],\n \n        [[ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         ...,\n         [ 1.7806270e+00,  3.0450015e+00, -8.6432171e-01, -2.3960600e+00],\n         [ 2.2803411e+00,  3.2603335e+00, -1.6995268e+00, -2.7876616e+00],\n         [ 3.3294253e+00,  3.4855533e+00, -2.6665678e+00, -2.9595366e+00]],\n \n        ...,\n \n        [[ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         ...,\n         [ 1.5496700e+00,  2.8477359e+00, -1.3123198e+00, -2.1773100e+00],\n         [ 2.5437384e+00,  3.3304019e+00, -2.5005522e+00, -2.6177397e+00],\n         [ 3.8924136e+00,  3.2820621e+00, -3.0737944e+00, -2.3110991e+00]],\n \n        [[ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         ...,\n         [ 1.3316524e+00,  1.6597476e+00, -5.1910686e-01, -7.2906780e-01],\n         [ 2.3318548e+00,  2.8159976e+00, -1.9385405e+00, -2.1719389e+00],\n         [ 3.4124331e+00,  3.1695132e+00, -2.8599272e+00, -2.7202787e+00]],\n \n        [[ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         [ 6.5503984e+04,  6.5503996e+04,  6.5503422e+04,  6.5503867e+04],\n         ...,\n         [ 1.5152462e+00,  2.3980289e+00, -1.2443266e+00, -1.6124907e+00],\n         [ 2.5473394e+00,  2.8394351e+00, -1.8757963e+00, -1.9175444e+00],\n         [ 3.5274234e+00,  3.2552066e+00, -2.8306303e+00, -2.5093412e+00]]],\n       shape=(16, 8400, 4), dtype=float32))\n\n\n\n# Get the logits\ntest_pred_logits = test_dataset_preds.predictions[0][1]\n\n# Get the boxes\ntest_pred_boxes = test_dataset_preds.predictions[0][2]\n\n# Get the label IDs\ntest_pred_label_ids = test_dataset_preds.label_ids\n\n# Check shapes\ntest_pred_logits.shape, test_pred_boxes.shape, len(test_pred_label_ids)\n\n((16, 300, 7), (16, 300, 4), 14)\n\n\n\nlen(processed_dataset[\"test\"])\n\n224\n\n\n\n%%time\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n# random_test_sample_outputs\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n[INFO] Making predictions on test item with index: 163\nCPU times: user 169 ms, sys: 54.5 ms, total: 223 ms\nWall time: 206 ms\n\n\n\n# image_processor.preprocess?\n\nTK - if your predictions aren‚Äôt the exact same, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.35, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=random_test_sample[\"labels\"][\"orig_size\"].unsqueeze(0) # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = half_boxes(random_test_sample_outputs_post_processed[0][\"boxes\"])\n\n# Create a list of labels to plot on the boxes \n# TK - Update the colours here\nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores:\")\nfor label in random_test_sample_labels_to_plot:\n    print(label)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_image(dataset[\"test\"][random_test_pred_index][\"image\"])),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\nUnused or unrecognized kwargs: masks_path, annotations.\n\n\n[INFO] Making predictions on test item with index: 189\n[INFO] Labels with scores:\nPred: bin (0.8102)\nPred: bin (0.784)\nPred: trash (0.6123)\nPred: not_trash (0.5516)\nPred: not_trash (0.4893)\nPred: trash (0.4776)\nPred: hand (0.4608)\n\n\n\n\n\n\n\n\n\n\nrandom_test_sample[\"labels\"][\"orig_size\"].unsqueeze(0)\n\ntensor([[1280,  960]])\n\n\n\nTK - nice!!! these boxes look far better than our randomly predicted boxes with an untrained model‚Ä¶\nTK - plot the boxes versus the ground truth (e.g.¬†ground truth = green, predictions = red)\n\n\n15.1 TK - Predict on image from filepath\n\n# Pred on image from pathname\nfrom pathlib import Path\nfrom PIL import Image\npath_to_test_image_folder = Path(\"data/trashify_test_images\")\ntest_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\ntest_image_targ_filepath = random.choice(test_image_filepaths)\n# test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\ntest_image_pil = Image.open(test_image_targ_filepath)\ntest_image_preprocessed = image_processor.preprocess(images=test_image_pil,\n                                                     return_tensors=\"pt\")\n\ndef get_image_dimensions_from_pil(image: Image.Image) -&gt; torch.tensor:\n    \"\"\"\n    Convert the dimensions of a PIL image to a PyTorch tensor in the order (height, width).\n\n    Args:\n        image (Image.Image): The input PIL image.\n\n    Returns:\n        torch.Tensor: A tensor containing the height and width of the image.\n    \"\"\"\n    # Get (width, height) of image (PIL.Image.size returns width, height)\n    width, height = image.size\n\n    # Convert to a tensor in the order (height, width)\n    image_dimensions_tensor = torch.tensor([height, width])\n\n    return image_dimensions_tensor\n\n# Get image original size\ntest_image_size = get_image_dimensions_from_pil(image=test_image_pil)\n\n# Make predictions on the preprocessed image\nrandom_test_sample_outputs = model(pixel_values=test_image_preprocessed[\"pixel_values\"].to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\nTHRESHOLD = 0.2\n\n# Post process the predictions\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=THRESHOLD,\n    target_sizes=[test_image_size] # needs to be same length as batch dimension of the logits (e.g. [[height, width]])\n)\n\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a lsit of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\"\n                                     for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(\"[INFO] Labels with scores:\")\nfor item in random_test_sample_labels_to_plot:\n    print(item)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=test_image_pil),                    \n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[105], line 6\n      4 path_to_test_image_folder = Path(\"data/trashify_test_images\")\n      5 test_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\n----&gt; 6 test_image_targ_filepath = random.choice(test_image_filepaths)\n      7 # test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\n      8 test_image_pil = Image.open(test_image_targ_filepath)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/random.py:373, in Random.choice(self, seq)\n    370 # As an accommodation for NumPy, we don't use \"if not seq\"\n    371 # because bool(numpy.array()) raises a ValueError.\n    372 if not len(seq):\n--&gt; 373     raise IndexError('Cannot choose from an empty sequence')\n    374 return seq[self._randbelow(len(seq))]\n\nIndexError: Cannot choose from an empty sequence"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "16 TK - Upload our trained model to Hugging Face Hub",
    "text": "16 TK - Upload our trained model to Hugging Face Hub\nTK - Let‚Äôs make our model available for others to use.\n\n# TK\n# Make extensions to make the model better... (e.g. data augmentation = harder training set = better overall validation loss)\n# Model with data augmentation\n# Model with longer training (e.g. 100 epochs) \n# Research eval_do_concat_batches=False/True & see what the results do...\n\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_save_path}\")\nmodel_v1_trainer.save_model(model_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_25_epochs_lr_1e-04\n\n\n\n# Push the model to the hub\n# Note: this will require you to have your Hugging Face account setup \nmodel_v1_trainer.push_to_hub(commit_message=\"upload trashify object detection model\",\n                    # token=None # Optional to add a token manually\n                    )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector/commit/ab273cec67e5124ac047dc1e068c379c718e6c37', commit_message='upload trashify object detection model', commit_description='', oid='ab273cec67e5124ac047dc1e068c379c718e6c37', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector'), pr_revision=None, pr_num=None)"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#creating-a-demo-of-our-model-with-gradio",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#creating-a-demo-of-our-model-with-gradio",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "17 Creating a demo of our model with Gradio",
    "text": "17 Creating a demo of our model with Gradio\n\n%%writefile demos/trashify_object_detector/README.md\n---\ntitle: Trashify Demo V1 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector V1 \n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - add links to resources to learn more\n\nOverwriting demos/trashify_object_detector/README.md\n\n\n\n%%writefile demos/trashify_object_detector/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local \nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector\"\n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V1\",\n    description=\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25],\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector/app.py\n\n\n\n17.1 TK - Upload demo to Hugging Face Spaces to get it live\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v1\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v1\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v1\n[INFO] Uploading demos/trashify_object_detector to repo: mrdbourke/trashify_demo_v1\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v1/tree/main/.\n\n\nTK - see the demo here: https://huggingface.co/spaces/mrdbourke/trashify_demo_v1\n\n\n17.2 TK - Testing the hosted demo\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v1.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"1000\"\n&gt;&lt;/iframe&gt;     \n''')"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---improve-our-model-with-data-augmentation",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---improve-our-model-with-data-augmentation",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "18 TK - Improve our model with data augmentation",
    "text": "18 TK - Improve our model with data augmentation\nUPTOHERE - Read for object detection augmentation (keep it simple) - Check out the papers for detection augmentation - Train a model with data augmentation - Compare the model‚Äôs metrics between data augmentation and no data augmentation\n\n18.1 Load dataset\n\nfrom datasets import load_dataset\n\n# load_dataset?\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\n\n# Split the data\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.6, seed=42) # split the test set into 40/60 validation/test\n\n# Create splits\ndataset[\"train\"] = dataset_split[\"train\"]\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\ndataset\n\n[INFO] Length of original dataset: 1128\n\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 135\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 204\n    })\n})\n\n\n\n# Get the categories from the dataset\n# Note: this requires the dataset to have been uploaded with this feature setup\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\n\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nid2label, label2id\n\n({0: 'bin',\n  1: 'hand',\n  2: 'not_bin',\n  3: 'not_hand',\n  4: 'not_trash',\n  5: 'trash',\n  6: 'trash_arm'},\n {'bin': 0,\n  'hand': 1,\n  'not_bin': 2,\n  'not_hand': 3,\n  'not_trash': 4,\n  'trash': 5,\n  'trash_arm': 6})\n\n\n\n# View a random sample\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 955,\n 'annotations': {'file_name': ['ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg'],\n  'image_id': [955, 955, 955, 955],\n  'category_id': [5, 1, 0, 4],\n  'bbox': [[464.79998779296875, 625.5999755859375, 68.30000305175781, 92.5],\n   [483.0, 686.2000122070312, 173.0, 247.3000030517578],\n   [102.80000305175781, 361.70001220703125, 813.5, 734.0],\n   [325.29998779296875,\n    716.5999755859375,\n    189.60000610351562,\n    215.3000030517578]],\n  'iscrowd': [0, 0, 0, 0],\n  'area': [6317.75, 42782.8984375, 597109.0, 40820.87890625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n\n\n18.2 Setup model\n\nfrom transformers import AutoModelForObjectDetection, AutoImageProcessor\n\n# Model config - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig \n# Model docs - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel \nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n\n# Set image size\nIMAGE_SIZE = 640 # other common image sizes include: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Get the image processor (this is required for prepraring images)\n# See docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height)\n    size={\"shortest_edge\": IMAGE_SIZE, \"longest_edge\": IMAGE_SIZE},\n    max_size=None # Note: this parameter is deprecated and will produce a warning if used during processing.\n)\n\n# Check out the image processor\nimage_processor\n\nConditionalDetrImageProcessor {\n  \"do_convert_annotations\": true,\n  \"do_normalize\": true,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"ConditionalDetrImageProcessor\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"size\": {\n    \"longest_edge\": 640,\n    \"shortest_edge\": 640\n  }\n}\n\n\n\n# First create a couple of dataclasses to store our data format\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n@dataclass\nclass SingleCOCOAnnotation:\n    \"An instance of a single COCO annotation. See COCO format: https://cocodataset.org/#format-data\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in format [x_top_left, y_top_left, width, height]\n    area: float = 0.0\n    iscrowd: int = 0\n\n@dataclass\nclass ImageCOCOAnnotations:\n    \"A collection of COCO annotations for a given image_id.\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in format \n) -&gt; dict:\n    # Turn input lists into a list of dicts\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # Return dictionary of annotations with format {\"image_id\": ..., \"annotations\": ...}\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\n# Let's try it out\nimage_id = 0\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 0,\n 'annotations': [{'image_id': 0,\n   'category_id': 0,\n   'bbox': [452.79998779296875,\n    446.6000061035156,\n    272.70001220703125,\n    388.20001220703125],\n   'area': 105862.140625,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [146.5, 487.5, 348.3999938964844, 424.79998779296875],\n   'area': 148000.3125,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [8.300000190734863, 522.5, 241.3000030517578, 505.0],\n   'area': 121856.5,\n   'iscrowd': 0}]}\n\n\n\n# Setup the model\n# TODO: Can functionize this to create a base model (e.g. a model with all the base settings/untrained weights) \ndef create_model():\n    model = AutoModelForObjectDetection.from_pretrained(\n                pretrained_model_name_or_path=MODEL_NAME,\n                label2id=label2id,\n                id2label=id2label,\n                ignore_mismatched_sizes=True,\n                backbone=\"resnet50\")\n    return model\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n\n18.3 tk - Setup and visualize transforms (augmentations)\n\nTK - explain simple augmentations:\n\nRandomHorizontalFlip\nColorJitter\n\nThat‚Äôs it‚Ä¶\nTailor the data augmentations to your own dataset/problem\n\n\n\n\nimport torch\nimport torchvision\n\nfrom torchvision.transforms import v2 \nfrom torchvision.transforms.v2.functional import to_pil_image, pil_to_tensor, pad\nfrom torchvision.utils import draw_bounding_boxes\n\n# Optional transform from here: https://arxiv.org/pdf/2012.07177\n# Scale jitter -&gt; pad -&gt; resize \n\ntrain_transforms = v2.Compose([\n    v2.ToImage(),\n    # v2.RandomResizedCrop(size=(640, 640), antialias=True),\n    # v2.Resize(size=(640, 640)),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.ScaleJitter(target_size=(640, 640)),\n    # PadToSize(target_height=640, target_width=640),\n    v2.RandomHorizontalFlip(p=0.5),\n    # v2.RandomPhotometricDistort(p=0.75),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.Resize(size=(640, 640)),\n    v2.ColorJitter(brightness=0.75, # randomly adjust the brightness \n                   contrast=0.75), # randomly alter the contrast\n    # v2.RandomPerspective(distortion_scale=0.3, \n    #                      p=0.3,\n    #                      fill=(123, 117, 104)), # fill with average colour\n    # v2.RandomZoomOut(side_range=(1.0, 1.5),\n    #                  fill=(123, 117, 104)),\n    v2.ToDtype(dtype=torch.float32, scale=True),\n\n    # v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    # sanitize boxes, recommended to be called at least once at the end of the transform pipeline\n    # https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes\n    v2.SanitizeBoundingBoxes(labels_getter=None) \n])\n\n\n\n18.4 TK - Visualize transforms\n\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\n\n# Perform transform on image\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_image_width, random_sample_image_height = random_sample[\"image\"].size\nrandom_sample_boxes_xywh = random_sample[\"annotations\"][\"bbox\"] # these are in XYWH format\nrandom_sample_boxes_xyxy = torchvision.ops.box_convert(boxes=torch.tensor(random_sample_boxes_xywh),\n                                                       in_fmt=\"xywh\",\n                                                       out_fmt=\"xyxy\")\n\n# Format boxes to be xyxy for transforms\nrandom_sample_boxes_xyxy = torchvision.tv_tensors.BoundingBoxes(\n    data=random_sample_boxes_xyxy,\n    format=\"XYXY\",\n    canvas_size=(random_sample_image_height, random_sample_image_width) # comes in the form height, width\n)\n\nrandom_sample_image_transformed, random_sample_boxes_transformed = train_transforms(random_sample_image,\n                                                                                    random_sample_boxes_xyxy)\n\n\nrandom_sample_original_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                       image=pil_to_tensor(pic=random_sample_image),                    \n                                                       boxes=random_sample_boxes_xyxy,\n                                                       labels=None,\n                                                       width=3))\nrandom_sample_original_image_with_boxes_size = (random_sample_original_image_with_boxes.size[1], random_sample_original_image_with_boxes.size[0])\n\n# Plot the predicted boxes on the random test image \nrandom_sample_transformed_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                          image=random_sample_image_transformed,                    \n                                                          boxes=random_sample_boxes_transformed,\n                                                          labels=None,\n                                                          width=3))\nrandom_sample_transformed_image_with_boxes_size = (random_sample_transformed_image_with_boxes.size[1], random_sample_transformed_image_with_boxes.size[0])\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Display image 1\naxes[0].imshow(random_sample_original_image_with_boxes)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image | Size: {random_sample_original_image_with_boxes_size} (hxw)\")\n\n# Display image 2\naxes[1].imshow(random_sample_transformed_image_with_boxes)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Transformed Image | Size: {random_sample_transformed_image_with_boxes_size} (hxw)\")\n\n# Show the plot\nplt.tight_layout()\nplt.show();\n\n\n\n\n\n\n\n\n\n\n18.5 TK - Create function to preprocess and transform batch of examples\n\nfrom torchvision import tv_tensors\n\ndef preprocess_and_transform_batch(examples,\n                                   image_processor,\n                                   transforms=None # Note: Could optionally add transforms (e.g. data augmentation) here \n                                   ):\n    \"\"\"\n    Function to preprocess batches of data.\n\n    Can optionally apply a transform later on.\n    \"\"\"\n    images = []\n    \n    coco_annotations = [] \n\n    for image, image_id, annotations_dict in zip(examples[\"image\"], examples[\"image_id\"], examples[\"annotations\"]):\n        # Note: may need to open image if it is an image path rather than PIL.Image\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n    \n        # Note: Could optionally apply a transform here.\n        if transforms:\n            width, height = image.size[0], image.size[1]\n            bbox_list = tv_tensors.BoundingBoxes(data=torch.tensor(bbox_list),\n                                                 format=\"XYWH\",\n                                                 canvas_size=(height, width)) # canvas_size = height, width\n            image, bbox_list = transforms(image, \n                                          bbox_list)\n\n        # Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # Add images/annotations to their respective lists\n        images.append(image)\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\",\n                                                    do_rescale=False if transforms else True,\n                                                    do_resize=True,\n                                                    do_pad=True)\n    \n    return preprocessed_batch\n\n\nfrom functools import partial\n\n# Make a transform for different splits\ntrain_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=train_transforms,\n    image_processor=image_processor\n)\n\nvalidation_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=None,\n    image_processor=image_processor\n)\n\n\nprocessed_dataset = dataset.copy()\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(train_transform_batch)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(validation_transform_batch)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(validation_transform_batch)\n\n\n# Create data_collate_function to collect samples into batches\n# TK - want to get a dictionary of {\"pixel_mask\": [batch_of_samples], \"labels\": [batch_of_samples], \"pixel_mask\": [batch_of_samples]}\ndef data_collate_function(batch):\n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in batch])\n\n    return collated_data\n\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\n\nfrom transformers import TrainingArguments, Trainer\n\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 without running out of memory\nBATCH_SIZE = 16\n\n# Disable warnings about `max_size` parameter being deprecated (this is okay)\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\n# Note: AdamW Optimizer is used by default\ntraining_args = TrainingArguments(\n    output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\", # Tk - make sure this is suitable for data aug model\n    num_train_epochs=25,\n    fp16=True,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=1e-4,\n    lr_scheduler_type=\"linear\", # default = \"linear\", can try others such as \"cosine\", \"constant\" etc\n    weight_decay=1e-4,\n    max_grad_norm=0.01,\n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False,\n    eval_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    logging_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    report_to=\"none\", # don't save experiments to a third party service\n    dataloader_num_workers=4,\n    warmup_ratio=0.05,\n    push_to_hub=False,\n    eval_do_concat_batches=False\n)\n\nmodel_v2_trainer = Trainer(\n    model=model_aug,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: add a metrics function, just see if model trains first\n)\n\nmodel_v2_results = model_v2_trainer.train()\n\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/accelerate/accelerator.py:488: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n  self.scaler = torch.cuda.amp.GradScaler(**kwargs)\n\n\n\n    \n      \n      \n      [1250/1250 08:19, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\n\n\n\n\n1\n100.473500\n8.029722\n\n\n2\n4.369000\n2.737582\n\n\n3\n2.551800\n2.183892\n\n\n4\n2.222600\n1.922801\n\n\n5\n1.990600\n1.740759\n\n\n6\n1.821900\n1.557272\n\n\n7\n1.697400\n1.477890\n\n\n8\n1.602700\n1.451024\n\n\n9\n1.551700\n1.371128\n\n\n10\n1.449100\n1.317680\n\n\n11\n1.433500\n1.281066\n\n\n12\n1.364500\n1.247493\n\n\n13\n1.331400\n1.206003\n\n\n14\n1.297300\n1.187397\n\n\n15\n1.250600\n1.179421\n\n\n16\n1.231900\n1.165661\n\n\n17\n1.147900\n1.129974\n\n\n18\n1.146600\n1.117911\n\n\n19\n1.113800\n1.109535\n\n\n20\n1.115300\n1.096120\n\n\n21\n1.089400\n1.078995\n\n\n22\n1.069100\n1.087004\n\n\n23\n1.061900\n1.080366\n\n\n24\n1.045900\n1.071728\n\n\n25\n1.036300\n1.070385\n\n\n\n\n\n\nTK - Note: You might get the following issue (negative bounding box coordinate predictions), can try again for more stable predictions (predictions are inherently random to begin with) or use a learning rate warmup to help stabilize predictions:\n\nValueError: boxes1 must be in [x0, y0, x1, y1] (corner) format, but got tensor([[ 0.5796, 0.5566, 0.9956, 0.9492], [ 0.5718, 0.0610, 0.7202, 0.1738], [ 0.8218, 0.5107, 0.9878, 0.6289], ‚Ä¶, [ 0.1379, 0.1403, 0.6709, 0.6138], [ 0.7471, 0.4319, 1.0088, 0.5864], [-0.0660, 0.2052, 0.2067, 0.5107]], device=‚Äòcuda:0‚Äô, dtype=torch.float16)\n\n\n\n18.6 TK - Save the trained model\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_v2_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_v2_save_path}\")\nmodel_v2_trainer.save_model(model_v2_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_25_epochs_lr_1e-04"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "19 TK - Upload Augmentation Model to Hugging Face Hub",
    "text": "19 TK - Upload Augmentation Model to Hugging Face Hub\n\n# Push the model to the Hugging Face Hub\n# TK Note: This will require you to have your Hugging Face account setup (e.g. see the setup guide, tk - link to setup guide)\n# TK - this will push to the parameter `output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\"`\nmodel_v2_trainer.push_to_hub(commit_message=\"upload trashify object detection model with data augmentation\"\n                             # token=None, # Optional to add token manually\n                            )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug/commit/2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', commit_message='upload trashify object detection model with data augmentation', commit_description='', oid='2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug'), pr_revision=None, pr_num=None)"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---compare-results-of-different-models",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---compare-results-of-different-models",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "20 TK - Compare results of different models",
    "text": "20 TK - Compare results of different models\nUPTOHERE - Showcase model 2 doing better because of augmentation (harder to learn)\n\nTK - Compare v1 model to v2\n\nTK - Get model_v1 results into a variable and save it for later\nCompare both of these as plots against each other, e.g.¬†have the training curves for aug/no_aug on one plot and the curves for validation data for aug/no_aug on another plot\n\nTK - offer extensions to improve the model\n\nTK - training model for longer, potentially using synthetic data‚Ä¶?\n\nTK - could I use 1000 high quality synthetic data samples to improve our model?\n\nTK - try use a different learning rate\n\n\n\n# TK - Turn this workflow into a function e.g. def get_history_from_trainer() -&gt; df/dict of history\ndef get_history_metrics_from_trainer(trainer):\n    trainer_history = trainer.state.log_history \n    trainer_history_metrics = trainer_history[:-1] # get everything except the training time metrics (we've seen these already)\n    trainer_history_training_time = trainer_history[-1]\n\n    model_train_loss = [item[\"loss\"] for item in trainer_history_metrics if \"loss\" in item.keys()]\n    model_eval_loss = [item[\"eval_loss\"] for item in trainer_history_metrics if \"eval_loss\" in item.keys()]\n    model_learning_rate = [item[\"learning_rate\"] for item in trainer_history_metrics if \"learning_rate\" in item.keys()] \n\n    return model_train_loss, model_eval_loss, model_learning_rate, trainer_history_training_time\n\nmodel_v1_train_loss, model_v1_eval_loss, model_v1_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v1_trainer)\nmodel_v2_train_loss, model_v2_eval_loss, model_v2_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v2_trainer)\n\n\nimport matplotlib.pyplot as plt\n\n# Plot model loss curves against each other for same model\n# Note: Start from index 1 onwards to remove large loss spike at beginning of training \nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nax[0].plot(model_v1_train_loss[1:], label=\"Model V1 Train Loss\")\nax[0].plot(model_v1_eval_loss[1:], label=\"Model V1 Eval Loss\")\nax[0].set_title(\"Model V1 Loss Curves\")\nax[0].set_ylabel(\"Loss\")\nax[0].set_xlabel(\"Epoch\")\nax[0].legend()\n\nax[1].plot(model_v2_train_loss[1:], label=\"Model V2 Train Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model V2 Eval Loss\")\nax[1].set_title(\"Model V2 Loss Curves\")\nax[1].set_ylabel(\"Loss\")\nax[1].set_xlabel(\"Epoch\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - notice the overfitting begin to happen with model v1 (no data augmentation) but model v2 has less overfitting and achieves a lower validation loss\n\nimport matplotlib.pyplot as plt\n\nplt.plot(model_v1_learning_rate, label=\"Model V1\")\nplt.plot(model_v2_learning_rate, label=\"Model V2\")\nplt.title(\"Model Learning Rate vs. Epoch\")\nplt.ylabel(\"Learning Rate\")\nplt.xlabel(\"Epoch\")\nplt.legend();\n\n\n\n\n\n\n\n\n\n# Plot loss values against each other\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nnum_epochs = range(0, len(model_v1_train_loss))\nax[0].plot(model_v1_train_loss[1:], label=\"Model 1 Training Loss\")\nax[0].plot(model_v2_train_loss[1:], label=\"Model 2 Training Loss\")\nax[0].set_title(\"Model Training Loss Curves\")\nax[0].set_ylabel(\"Training Loss\")\nax[0].set_xlabel(\"Epochs\")\nax[0].legend()\n\nax[1].plot(model_v1_eval_loss[1:], label=\"Model 1 Eval Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model 2 Eval Loss\")\nax[1].set_title(\"Model Eval Loss Curves\")\nax[1].set_ylabel(\"Eval Loss\")\nax[1].set_xlabel(\"Epochs\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - describe the loss curves here, model 2 curves may be higher for training loss but they really start to accelerate on the evaluation set towards the end"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---create-demo-with-augmentation-model",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---create-demo-with-augmentation-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "21 TK - Create demo with Augmentation Model",
    "text": "21 TK - Create demo with Augmentation Model\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/README.md\n---\ntitle: Trashify Demo V2 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V2\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V2\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The [model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) in V2 has been trained with data augmentation preprocessing (color jitter, horizontal flipping) to improve robustness. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model/app.py\n\n\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v2\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify V2 box detection model (with data augmentation) app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v2\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v2\n[INFO] Uploading demos/trashify_object_detector_data_aug_model to repo: mrdbourke/trashify_demo_v2\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v2/tree/main/.\n\n\n\n# Next:\n# Upload augmentation model to Hugging Face Hub ‚úÖ\n# Create demo for augmentation model ‚úÖ\n# Compare results from augmentation model to non-augmentation model ‚úÖ\n\n\n21.1 TK - Make a prediction on a random test sample with model using data aug model\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model_aug(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                       pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.25, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_test_sample[\"labels\"][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\nprint(f\"[INFO] Boxes:\")\nfor item in random_test_sample_pred_boxes:\n    print(item.detach().cpu())\nprint(f\"[INFO] Total preds: {len(random_test_sample_labels_to_plot)}\")\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Making predictions on test item with index: 163\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Boxes:\ntensor([  10.7812,  393.1250,  950.1562, 1160.6250])\ntensor([ 149.8828,  667.9688,  471.6797, 1018.2812])\ntensor([405.0000, 679.1406, 668.4375, 972.1094])\ntensor([248.2031, 472.6562, 675.7031, 994.8438])\ntensor([ 140.6250,  467.3438,  675.9375, 1002.6562])\ntensor([ 373.2422,  896.4844,  648.6328, 1063.5156])\ntensor([  10.3125,  667.9688,  472.0312, 1264.5312])\n[INFO] Total preds: 7"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "22 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)",
    "text": "22 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)\nUPTOHERE * Take preds from model v2 and perform NMS on them to see what happens * Need to calculate: * IoU (intersection over union) * Can write about these in a blog post as extension material * Test image index good to practice on: * 163, 108 * Create a demo which compares NMS-free boxes to boxes with NMS\n\n22.1 TK - NMS filtering logic to do\nTK - create a table of different items here\n\nSimplest filtering: keep only 1x class label with the highest score per image (e.g.¬†if there are two ‚Äúhand‚Äù predictions, keep only the highest scoring one) ‚úÖ\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\nGreedy IoU filtering: Filter boxes which have IoU &gt; 0.9 (big overlap) and keep the box with the higher score ‚úÖ\n\nTK - problem here is that it may filter heavily overlapping classes (e.g.¬†if there are many boxes of different classes clustered together because your objects overlap, such as on a plate of food, items may overlap)\n\nClass-aware IoU filtering: Filter boxes which have the same label and have IoU &gt; 0.5 and keep the box with the higher score\n\nOther potential NMS options: * Greedy NMS (good for distinct boxes, just take the highest scoring box per class) * Soft-NMS with linear penalty (good for boxes which may have overlap, e.g.¬†smaller boxes in clusters) * Class-aware NMS (only perform NMS on same class of boxes)\n\nSee this video here: https://youtu.be/VAo84c1hQX8?si=dYftsYADb9Kq-bul\nTK - show prediction with more boxes than ideal, then introduce NMS as a technique to fix the predictions (e.g.¬†on the same sample)\n\nTK - NMS doesn‚Äôt need an extra model, just a way to\n\nTK - test index 163 is a good example with many boxes that could be shortened to a few\n\n\n\n22.2 TK - Simple NMS - Keep only highest scoring class per prediction\nTK - This is the simplest method and simply iterates through the boxes and keep the highest scoring box per class (e.g.¬†if there are two ‚Äúhand‚Äù prediction boxes, only keep the higher scoring one).\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\n\n# Mask with simple NMS keep mask\nkeep_boxes, keep_labels, keep_scores = filter_highest_scoring_box_per_class(boxes=random_test_sample_pred_boxes,\n                                                                            labels=random_test_sample_pred_labels,\n                                                                            scores=random_test_sample_pred_scores)\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_scores))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes))\n\n7 7 7\n4 4 4\n\n\n\nkeep_boxes, keep_labels, keep_scores\n\n(tensor([[  10.7812,  393.1250,  950.1562, 1160.6250],\n         [ 149.8828,  667.9688,  471.6797, 1018.2812],\n         [ 405.0000,  679.1406,  668.4375,  972.1094],\n         [ 373.2422,  896.4844,  648.6328, 1063.5156]], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;),\n tensor([0, 1, 5, 4], device='cuda:0'),\n tensor([0.6625, 0.5412, 0.5007, 0.3237], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;))\n\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(\"Simple NMS - Only keep the highest scoring box per prediction\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: not_trash (0.3237)']\n\n\n\n\n\n\n\n\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\n\n22.3 TK - Greedy IoU Filtering - Intersection over Union - If a pair of boxes have an IoU over a certain threshold, keep the box with the higher score\n\nIoU in torchmetrics - https://lightning.ai/docs/torchmetrics/stable/detection/intersection_over_union.html\n\nTo calculate the Intersection over Union (IoU) between two bounding boxes:\n\nCoordinates of the intersection rectangle: \\[\nx_{\\text{left}} = \\max(x_{1A}, x_{1B})\n\\] \\[\ny_{\\text{top}} = \\max(y_{1A}, y_{1B})\n\\] \\[\nx_{\\text{right}} = \\min(x_{2A}, x_{2B})\n\\] \\[\ny_{\\text{bottom}} = \\min(y_{2A}, y_{2B})\n\\]\n\nWhere:\n\\[\n   \\text{A} = \\text{Box 1}\n\\] \\[\n   \\text{B} = \\text{Box 2}\n\\]\n\nWidth and height of the intersection: \\[\n\\text{intersection\\_width} = \\max(0, x_{\\text{right}} - x_{\\text{left}})\n\\] \\[\n\\text{intersection\\_height} = \\max(0, y_{\\text{bottom}} - y_{\\text{top}})\n\\]\nArea of Overlap: \\[\n\\text{Area of Overlap} = \\text{intersection\\_width} \\times \\text{intersection\\_height}\n\\]\nArea of Union: \\[\n\\text{Area of Union} = \\text{Area of Box 1} + \\text{Area of Box 2} - \\text{Area of Overlap}\n\\]\nIntersection over Union (IoU): $$ = / \n\n\n# IoU = Intersection / Union\n# Inserction =\n    # x_left = max(x1_A, x1_B)\n    # y_top = max(y1_A, y1_B)\n    # x_right = min(x2_A, x2_B)\n    # y_bottom = min(y2_A, x2_B)\n    # \n    # Where: \n        # A = Box 1\n        # B = Box 2\n    # intersection_width = max(0, x_right - x_left)\n    # interesection_height = max(0, y_bottom - y_top)\n    # area_intersection = intersection_width * intersection_height\n# Union = area_box_1 + area_box_2 - intersection\n\ndef intersection_over_union_score(box_1, box_2):\n    \"\"\"Calculates Intersection over Union (IoU) score for two given boxes in XYXY format.\"\"\"\n    assert len(box_1) == 4, f\"Box 1 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_1)}, see: {box_1}\"\n    assert len(box_2) == 4, f\"Box 2 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_2)}, see: {box_2}\"\n\n    x1_box_1, y1_box_1, x2_box_1, y2_box_1 = box_1[0], box_1[1], box_1[2], box_1[3]\n    x1_box_2, y1_box_2, x2_box_2, y2_box_2 = box_2[0], box_2[1], box_2[2], box_2[3]\n\n    # Get coordinates of overlapping box (note: there may not be any overlapping box)\n    x_left = torch.max(x1_box_1, x1_box_2)\n    y_top = torch.max(y1_box_1, y1_box_2)\n    x_right = torch.min(x2_box_1, x2_box_2)\n    y_bottom = torch.min(y2_box_1, y2_box_2)\n\n    # Calculate the intersection width and height (we take the max of 0 and the value to find non-overlapping boxes)\n    intersection_width = max(0, x_right - x_left)\n    intersection_height = max(0, y_bottom - y_top)\n\n    # Calculate the area of intersection (note: this will 0 if either width or height are 0)\n    area_of_intersection = intersection_height * intersection_width\n\n    # Calculate individual box areas\n    box_1_area = (x2_box_1 - x1_box_1) * (y2_box_1 - y1_box_1) # width * height \n    box_2_area = (x2_box_2 - x1_box_2) * (y2_box_2 - y1_box_2)\n\n    # Calcuate area of union (sum of box areas minus the intersection area)\n    area_of_union = box_1_area + box_2_area - area_of_intersection\n\n    # Calculate the IoU score\n    iou_score = area_of_intersection / area_of_union\n\n    return iou_score\n\n\niou_score_test_pred_boxes = intersection_over_union_score(box_1=random_test_sample_pred_boxes[4],\n                                                          box_2=random_test_sample_pred_boxes[3])\n\nprint(f\"[INFO] IoU Score: {iou_score_test_pred_boxes}\")\n\n\nrandom_test_sample_pred_boxes[0], random_test_sample_pred_boxes[1]\n\n[INFO] IoU Score: 0.7790185809135437\n\n\n(tensor([  10.7812,  393.1250,  950.1562, 1160.6250], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;),\n tensor([ 149.8828,  667.9688,  471.6797, 1018.2812], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;))\n\n\n\n# TK - for visualization purposes, write code to highlight the intersecting points on a box and print the IoU score in the middle of the box\n\n# IoU logic\n    # 1. General IoU threshold (removing boxes at a global level, regardless of label)\n        # -&gt; for box pairs with IoU &gt; 0.9, keep the higher scoring box \n    # 2. Label specific IoU threshold (only concern is comparing boxes with the same label)\n        # -&gt; for box pairs with same label and IoU &gt; 0.5, keep the higher scoring box\n\n\nkeep_boxes = []\nkeep_scores = []\nkeep_labels = []\n\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\nkeep_indexes = torch.ones(len(random_test_sample_pred_boxes), dtype=torch.bool)\n\niou_general_threshold = 0.9 # general threshold = remove the lower scoring box in box pairs with over iou_general_threshold regardless of the label\niou_class_level_threshold = 0.5 # remove overlapping similar classes\n\n# TODO: Add a clause here to include if class labels are the same, then filter based on the class-specifc IoU threshold\nfilter_global = True\nfilter_same_label = True\n\n# Count the total loops\ntotal_loops = 0\n\nfor i, box_A in enumerate(random_test_sample_pred_boxes):\n    if not keep_indexes[i]: # insert clause to prevent calculating on already filtered labels\n        continue \n\n    for j, box_B in enumerate(random_test_sample_pred_boxes):\n        if not keep_indexes[i]:\n            continue\n\n        # Only calculate IoU score if indexes aren't the same (saves comparing the same index boxes for unwanted calculations)\n        if (i != j): \n            iou_score = intersection_over_union_score(box_1=box_A, box_2=box_B)\n            print(f\"[INFO] IoU Score for box {(i, j)}: {iou_score}\")\n\n            if filter_global:\n                if iou_score &gt; iou_general_threshold:\n                    score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                    if score_A &gt; score_B:\n                        print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                        keep_indexes[j] = False\n                    else:\n                        print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                        keep_indexes[i] = False\n                \n            if filter_same_label:\n                if iou_score &gt; iou_class_level_threshold:\n                    i_label = random_test_sample_pred_labels[i]\n                    j_label = random_test_sample_pred_labels[j]\n                    if i_label == j_label:\n                        print(f\"Labels are equal: {i_label, j_label}\")\n                        score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                        if score_A &gt; score_B:\n                            print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                            keep_indexes[j] = False\n                        else:\n                            print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                            keep_indexes[i] = False\n\n        total_loops += 1\n                \nprint(keep_indexes)\n\nkeep_scores = random_test_sample_pred_scores[keep_indexes]\nkeep_labels = random_test_sample_pred_labels[keep_indexes]\nkeep_boxes = random_test_sample_pred_boxes[keep_indexes]\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_boxes))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes), sum(keep_indexes))\n\nprint(f\"[INFO] Number of total loops: {total_loops}, max possible loops: {len(random_test_sample_pred_boxes)**2}\")\n\n[INFO] IoU Score for box (0, 1): 0.156358003616333\n[INFO] IoU Score for box (0, 2): 0.10704872757196426\n[INFO] IoU Score for box (0, 3): 0.3096315264701843\n[INFO] IoU Score for box (0, 4): 0.3974636495113373\n[INFO] IoU Score for box (0, 5): 0.06380129605531693\n[INFO] IoU Score for box (0, 6): 0.2954297661781311\n[INFO] IoU Score for box (1, 0): 0.156358003616333\n[INFO] IoU Score for box (1, 2): 0.11466032266616821\n[INFO] IoU Score for box (1, 3): 0.2778415083885193\n[INFO] IoU Score for box (1, 4): 0.36936208605766296\n[INFO] IoU Score for box (1, 5): 0.08170551061630249\n[INFO] IoU Score for box (1, 6): 0.4092644155025482\n[INFO] IoU Score for box (2, 0): 0.10704872757196426\n[INFO] IoU Score for box (2, 1): 0.11466032266616821\n[INFO] IoU Score for box (2, 3): 0.34572935104370117\n[INFO] IoU Score for box (2, 4): 0.26932957768440247\n[INFO] IoU Score for box (2, 5): 0.17588727176189423\n[INFO] IoU Score for box (2, 6): 0.058975815773010254\n[INFO] IoU Score for box (3, 0): 0.3096315264701843\n[INFO] IoU Score for box (3, 1): 0.2778415083885193\n[INFO] IoU Score for box (3, 2): 0.34572935104370117\n[INFO] IoU Score for box (3, 4): 0.7790185809135437\nLabels are equal: (tensor(5, device='cuda:0'), tensor(5, device='cuda:0'))\n[INFO] Box to keep index: 3 -&gt; tensor([248.2031, 472.6562, 675.7031, 994.8438], device='cuda:0',\n       grad_fn=&lt;UnbindBackward0&gt;)\n[INFO] IoU Score for box (3, 5): 0.11186295002698898\n[INFO] IoU Score for box (3, 6): 0.1719416379928589\n[INFO] IoU Score for box (5, 0): 0.06380129605531693\n[INFO] IoU Score for box (5, 1): 0.08170551061630249\n[INFO] IoU Score for box (5, 2): 0.17588727176189423\n[INFO] IoU Score for box (5, 3): 0.11186295002698898\n[INFO] IoU Score for box (5, 4): 0.0963958203792572\n[INFO] IoU Score for box (5, 6): 0.05411146208643913\n[INFO] IoU Score for box (6, 0): 0.2954297661781311\n[INFO] IoU Score for box (6, 1): 0.4092644155025482\n[INFO] IoU Score for box (6, 2): 0.058975815773010254\n[INFO] IoU Score for box (6, 3): 0.1719416379928589\n[INFO] IoU Score for box (6, 4): 0.24588997662067413\n[INFO] IoU Score for box (6, 5): 0.05411146208643913\ntensor([ True,  True,  True,  True, False,  True,  True])\n7 7 7\n6 6 6 tensor(6)\n[INFO] Number of total loops: 42, max possible loops: 49\n\n\n\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(f\"Greedy IoU Filtering (General) - For boxes with IoU &gt; {iou_general_threshold}, keep the higher scoring box\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n\n\n\n\n\n\n\n\n\n\n# TK - more NMS logic:\n# If there are more than two hands, keep the one with the higher score..."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "23 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)",
    "text": "23 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)\nUPTOHERE:\n\nupload the demo to Hugging Face Spaces as Trashify V3\nMake sure the demo works\nGo back through the code and start tidying up/explaining things\n\nCreate a blog post to discuss different box formats in object detection\nCreate a blog post for NMS + IoU filtering (can create an IoU function that colours in the intersection parts)\nCreate an extension for longer training + synthetic data + evaluation metrics + deploying on transformers.js\n\n\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model_with_nms/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/README.md\n---\ntitle: Trashify Demo V3 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V3\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\ndef create_return_string(list_of_predicted_labels, target_items=[\"trash\", \"bin\", \"hand\"]):\n     # Setup blank string to print out\n    return_string = \"\"\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(list_of_predicted_labels) == 0) or not (any_in_list(list_a=target_items, list_b=list_of_predicted_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in list_of_predicted_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}). But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        return_string = f\"+1! Found the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}), thank you for cleaning up the area!\"\n\n    print(return_string)\n\n    return return_string\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Create a copy of the image to draw on it for NMS\n    image_nms = image.copy()\n    draw_nms = ImageDraw.Draw(image_nms)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    # TK - update this for NMS\n    class_name_text_labels_nms = []\n\n    # Get original boxes, scores, labels\n    original_boxes = results[\"boxes\"]\n    original_labels = results[\"labels\"]\n    original_scores = results[\"scores\"]\n\n    # Filter boxes and only keep 1x of each label with highest score\n    filtered_boxes, filtered_labels, filtered_scores = filter_highest_scoring_box_per_class(boxes=original_boxes,\n                                                                                            labels=original_labels,\n                                                                                            scores=original_scores)\n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(original_boxes, original_labels, original_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(filtered_boxes, filtered_labels, filtered_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels_nms.append(label_name)\n\n        # Draw the rectangle\n        draw_nms.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw_nms.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    \n    # Remove the draw each time\n    del draw\n    del draw_nms\n\n    # Create the return string\n    return_string = create_return_string(list_of_predicted_labels=class_name_text_labels)\n    return_string_nms = create_return_string(list_of_predicted_labels=class_name_text_labels_nms)\n    \n    return image, return_string, image_nms, return_string_nms\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output (no filtering)\"),\n        gr.Text(label=\"Text Output (no filtering)\"),\n        gr.Image(type=\"pil\", label=\"Image Output (with max score per class box filtering)\"),\n        gr.Text(label=\"Text Output (with max score per class box filtering)\")\n        \n    ],\n    title=\"üöÆ Trashify Object Detection Demo V3\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The model in V3 is [same model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) as in [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) (trained with data augmentation) but has an additional post-processing step (NMS or [Non Maximum Suppression](https://paperswithcode.com/method/non-maximum-suppression)) to filter classes for only the highest scoring box of each class. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/app.py\n\n\n\n23.1 TK - Upload our demo to the Hugging Face Hub\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model_with_nms\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v3\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model v3 app.py with NMS post processing\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v3\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v3\n[INFO] Uploading demos/trashify_object_detector_data_aug_model_with_nms to repo: mrdbourke/trashify_demo_v3\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v3/tree/main/.\n\n\n\n\n23.2 tK - Embed the Space to Test the Model\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"1000\"\n    height=\"1600\"\n&gt;&lt;/iframe&gt;     \n''')\n\n\n     \n\n\n\n# UPTOHERE\n# Next, focus on a single input -&gt; output ‚úÖ\n# Show case what an output from the model looks like untrained (e.g. plot the next boxes on it) ‚úÖ\n# After showcasing 1x prediction, move onto training a model and seeing if we can get it to improve ‚úÖ\n# Continually focus on 1 input, 1 output until we can scale up ‚úÖ\n# Create a demo of our model and upload it to Hugging Face ‚úÖ\n    # Add examples to test the demo ‚úÖ\n    # Write code to upload the demo to Hugging Face ‚úÖ\n# Create visualization of input and output of data augmentation ‚úÖ\n# Create demo of model with data augmentation ‚úÖ\n# Model 2: Try improve our model with data augmentation ‚úÖ\n    # Visualize data augmentation examples in and out of the model \n    # Note: looks like augmentation may hurt our results... ü§î, this is because our data is so similar, potentially could help with more diverse data, e.g. synthetic data \n    # Try in a demo and see how it works -&gt; Trashify Demo V2 ‚úÖ \n    # Extension: Also try a model training for longer \n# Model 3 (just improve with NMS): Create NMS option so only highest quality boxes are kept for each class ‚úÖ\n\n# Next:\n\n# Go through notebook and clean it up for \n# Once we've got a better performing model, introduce evaluation metrics\n# End: three models, three demos, one without data augmentation, one with it, one with NMS (post-processing) + can have as an extension to train the model for longer and see what happens\n\n# Extensions:\n# Train a model for longer and see if it improves (e.g. 72 epochs) \n\n# Workflow:\n# Untrained model -&gt; input/output -&gt; poor results (always visualize, visualize, visualize!)\n# Trained model -&gt; input/output -&gt; better results (always visualize, visualize, visualize!)\n\n# Outline:\n# Single input/output with untrained model (bad output)\n# Train model to improve on single input/output\n# Introduce evaluation metric\n# Introduce data augmentation, see D-FINE paper for data augmentation options (we can keep it simple)\n    # See: https://arxiv.org/pdf/2410.13842 \n    # \"The total batch size is 32 across all variants. Training schedules include 72 epochs with advanced augmentation (RandomPhotometricDistort, RandomZoomOut, RandomIoUCrop, and RMultiScaleInput)\n    # followed by 2 epochs without advanced augmentation for D-FINE-X and D-FINE-L, and 120 epochs with advanced augmentation followed by 4\n    # epochs without advanced augmentation for D-FINE-M and D-FINE-S (RT-DETRv2 Training Strategy (Lv et al., 2024) in Table 3)\"\n    # TODO: Read RT-DETRv2 training strategy from paper mentioned above\n    # TODO: Read PP-YOLO data augmentation paper (keep it simple to begin with, can increase when needed)\n# Create demo with Gradio\n# Create demo with Transformers.js, see: https://huggingface.co/docs/transformers.js/en/tutorials/vanilla-js"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#extensions-extra-curriculum",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#extensions-extra-curriculum",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "24 Extensions + Extra-Curriculum",
    "text": "24 Extensions + Extra-Curriculum\n\nExtension: possibly improve the model with synthetic data? e.g.¬†on classes/bins not visible in the model\nExtension: train the model for longer and see how it improves, this could be model v4\n\nBaselines:\n\nV1 = model no data augmentaiton\nV2 = model with data augmentation\nV3 = model with NMS (post processing)\n\nExtensions:\n\nV4 = model trained for longer with NMS\nV5 = synthetic data scaled up‚Ä¶?\n\n\nExtension: Zero-shot object detection - but what if I don‚Äôt have labels?\n\nThis could discuss the use of zero-shot object detection models such as GroundingDINO and OmDet\nSee OmDet - https://huggingface.co/omlab/omdet-turbo-swin-tiny-hf\nSee GroundingDINO - https://huggingface.co/docs/transformers/en/model_doc/grounding-dino\n\nExtension: Try to repeat the workflow we‚Äôve gone through with another model such as https://huggingface.co/IDEA-Research/dab-detr-resnet-50-dc5-pat3 (apparently it is slightly better performing on COCO too)\n\nOther models to try:\n\nRT-DETRv2 - https://huggingface.co/docs/transformers/main/en/model_doc/rt_detr_v2\n\nCode - https://github.com/lyuwenyu/RT-DETR"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#summary",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#summary",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "25 Summary",
    "text": "25 Summary\n\nBounding box formats: An important step in any object detection project is to figure out what format your bounding boxes are in."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#extra-resources",
    "href": "notebooks/hugging_face_object_detection_tutorial-try-RT_DETRv2.html#extra-resources",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "26 Extra resources",
    "text": "26 Extra resources\n\nA Guide to Bounding Box Formats and How to Draw Them by Daniel Bourke."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "",
    "text": "Details:\nIn progress:\nLater:\nSource code on GitHub | Online book version | Setup guide | Video Course (coming soon)\nTo postprocess the outputs of our model we can use the transformers.ConditionalDetrImageProcessor.post_process_object_detection() method.\nLet‚Äôs frist recompute the model‚Äôs outputs for our preprocessed single sample.\n# Recompute the random sample outputs with our preprocessed sample\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    pixel_mask=random_sample_preprocessed[\"pixel_mask\"],\n)\n\n# Inspect the output type\ntype(random_sample_outputs)\n\ntransformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput\nWonderful!\nWe get the exact output our post_process_object_detection() method is looking for.\nNow we can fill in the following parameters:\nYou can see what happens behind the scenes of post_process_object_detection in the source code.\n# Set the score threshold for postprocessing\nTHRESHOLD = 0.63\n\n# Post process a single output from our model\nrandom_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_sample_outputs,\n    threshold=THRESHOLD, # all boxes with scores under this value will be discarded (best to experiment with it)\n    target_sizes=[random_sample_preprocessed[\"labels\"][0][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\nrandom_sample_outputs_post_processed\n\n[{'scores': tensor([0.6873, 0.6778, 0.6749, 0.6703, 0.6695, 0.6675, 0.6619, 0.6613, 0.6600,\n          0.6593, 0.6584, 0.6583, 0.6580, 0.6571, 0.6547, 0.6547, 0.6540, 0.6515,\n          0.6509, 0.6501, 0.6498, 0.6496, 0.6494, 0.6485, 0.6482, 0.6481, 0.6480,\n          0.6449, 0.6447, 0.6447, 0.6447, 0.6442, 0.6440, 0.6438, 0.6433, 0.6432,\n          0.6427, 0.6415, 0.6411, 0.6410, 0.6406, 0.6405, 0.6402, 0.6401, 0.6399,\n          0.6398, 0.6397, 0.6397, 0.6390, 0.6386, 0.6369, 0.6367, 0.6359, 0.6356,\n          0.6349, 0.6345, 0.6345, 0.6339, 0.6339, 0.6337, 0.6328, 0.6327, 0.6320,\n          0.6314, 0.6306], grad_fn=&lt;IndexBackward0&gt;),\n  'labels': tensor([6, 6, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 2, 5, 5, 5, 1, 5, 1, 1, 5, 6, 6,\n          5, 5, 6, 6, 2, 6, 1, 6, 5, 5, 6, 6, 5, 6, 1, 5, 1, 1, 5, 1, 5, 5, 5, 5,\n          6, 5, 5, 5, 2, 6, 6, 6, 6, 6, 6, 5, 1, 5, 5, 6, 6]),\n  'boxes': tensor([[ 3.6761e+02,  8.5699e+02,  4.3183e+02,  9.0009e+02],\n          [ 3.2434e+02,  8.6282e+02,  3.8855e+02,  9.0922e+02],\n          [-2.3260e+00,  5.6636e+02,  9.5706e+02,  1.2709e+03],\n          [-1.1437e+01,  8.0576e+02,  9.4849e+02,  1.2622e+03],\n          [ 4.8886e+02,  6.2889e+02,  5.6475e+02,  6.9445e+02],\n          [ 4.9158e+02,  6.0618e+02,  5.8281e+02,  6.6693e+02],\n          [ 1.0376e+02,  1.2447e+03,  9.6211e+02,  1.2829e+03],\n          [ 4.0725e+02,  4.9339e+02,  7.5597e+02,  7.3908e+02],\n          [-4.8195e+00,  5.6055e+02,  4.6131e+02,  1.2653e+03],\n          [-4.4354e+01,  1.2581e+03,  9.1081e+02,  1.2815e+03],\n          [-1.2327e+01,  7.7361e+02,  9.4167e+02,  1.2647e+03],\n          [-1.7601e-01,  2.4475e+02,  4.4070e+02,  1.2581e+03],\n          [ 3.6985e+02,  6.4684e+02,  4.4108e+02,  7.0561e+02],\n          [ 3.7488e+02,  5.8198e+02,  5.5674e+02,  6.9419e+02],\n          [ 3.7574e+00,  4.9428e+02,  7.6330e+02,  1.2529e+03],\n          [ 1.4968e+02,  1.2528e+03,  9.2357e+02,  1.2818e+03],\n          [-3.3153e+00,  2.4853e+02,  4.5182e+02,  1.2649e+03],\n          [ 3.0744e+02,  6.2312e+02,  3.8313e+02,  7.1239e+02],\n          [ 2.6299e+00,  9.7695e+02,  4.4713e+02,  1.2724e+03],\n          [ 3.0184e+02,  5.9654e+02,  4.0631e+02,  7.1335e+02],\n          [ 3.1286e+02,  5.9699e+02,  4.0956e+02,  7.1813e+02],\n          [ 4.5764e+02,  5.7147e+02,  6.7813e+02,  6.9584e+02],\n          [ 3.0744e+02,  6.2312e+02,  3.8313e+02,  7.1239e+02],\n          [ 5.3407e+02,  6.1301e+02,  6.3483e+02,  7.0478e+02],\n          [ 4.4646e+00,  9.2248e+02,  3.0692e+02,  1.2576e+03],\n          [ 5.3460e+02,  2.4104e+02,  9.6840e+02,  9.1101e+02],\n          [ 5.2990e+02,  6.1388e+02,  6.2449e+02,  6.9470e+02],\n          [ 4.7577e+02,  3.4902e+02,  5.9699e+02,  4.0524e+02],\n          [ 3.1798e+02,  5.7804e+02,  5.6985e+02,  7.1746e+02],\n          [ 4.0234e+02,  5.7386e+02,  6.6655e+02,  7.1892e+02],\n          [ 2.5195e+02,  5.9767e+02,  3.7124e+02,  7.4247e+02],\n          [ 4.4421e+02,  6.3375e+02,  5.4019e+02,  6.9746e+02],\n          [ 1.8923e+00,  7.6294e+02,  6.6387e+02,  1.2638e+03],\n          [-4.0168e+00,  7.7000e+02,  4.3613e+02,  1.2619e+03],\n          [ 3.6253e+02,  6.3702e+02,  4.2957e+02,  7.1052e+02],\n          [ 8.4015e+01,  7.5204e+02,  3.9006e+02,  9.2645e+02],\n          [ 5.8749e+02,  1.2549e+03,  9.3796e+02,  1.2811e+03],\n          [ 5.4123e+02,  6.2732e+02,  6.2980e+02,  7.0457e+02],\n          [ 2.0096e+02,  8.0009e+02,  2.9176e+02,  8.8018e+02],\n          [ 1.2179e+02,  2.2926e+02,  8.1047e+02,  4.2693e+02],\n          [ 3.7488e+02,  5.8198e+02,  5.5674e+02,  6.9419e+02],\n          [ 2.6555e+02,  5.9132e+02,  3.9374e+02,  7.3951e+02],\n          [-3.4146e-01,  7.4765e+02,  5.8968e+02,  1.2629e+03],\n          [ 3.0042e+02,  5.9277e+02,  4.1310e+02,  7.2397e+02],\n          [ 2.8621e+02,  7.0827e+02,  9.3920e+02,  1.2241e+03],\n          [-6.9550e+00,  6.1946e+02,  4.3746e+02,  1.2668e+03],\n          [-1.1498e+01,  7.4551e+02,  9.4675e+02,  1.2633e+03],\n          [ 1.9504e+02,  2.9783e+02,  5.4496e+02,  4.4237e+02],\n          [ 4.1746e+02,  6.3480e+02,  5.4612e+02,  6.9784e+02],\n          [ 5.1952e+02,  1.2612e+03,  8.4501e+02,  1.2811e+03],\n          [ 3.9504e+02,  8.5966e+02,  9.5390e+02,  1.2720e+03],\n          [ 2.3368e+02,  1.2565e+03,  5.9090e+02,  1.2816e+03],\n          [ 3.9746e+02,  6.2830e+02,  5.3551e+02,  7.0473e+02],\n          [ 5.4564e+02,  6.1825e+02,  6.4145e+02,  7.0249e+02],\n          [ 4.0679e+02,  8.6530e+02,  6.3646e+02,  9.1152e+02],\n          [ 2.7693e+02,  9.9131e+02,  3.2949e+02,  1.0689e+03],\n          [ 2.9130e+02,  7.5203e+02,  4.3016e+02,  9.0857e+02],\n          [ 2.7494e+02,  5.9645e+02,  7.2545e+02,  8.7642e+02],\n          [ 3.1286e+02,  5.9699e+02,  4.0956e+02,  7.1813e+02],\n          [ 4.1429e+02,  2.3651e+02,  8.3910e+02,  8.7676e+02],\n          [ 3.4103e+02,  6.0317e+02,  4.1446e+02,  6.9848e+02],\n          [ 3.1765e+02,  2.3540e+02,  6.8351e+02,  3.3471e+02],\n          [-2.5344e-01,  7.8823e+02,  3.9546e+02,  1.2622e+03],\n          [ 7.0814e+02,  8.5948e+02,  7.6244e+02,  8.9554e+02],\n          [ 3.9746e+02,  6.2830e+02,  5.3551e+02,  7.0473e+02]],\n         grad_fn=&lt;IndexBackward0&gt;)}]\nPerfect!\nThis looks like something we can use.\nLet‚Äôs break down each of the keys in random_sample_outputs_post_processed.\nWe get three equal length tensors:"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---overview",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---overview",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "1 TK - Overview",
    "text": "1 TK - Overview\nTK - Make an intro about being on the Trashify üöÆ team with a mission to make the world a cleaner place, trashify = using ML to incentivize people to pick up trash in their local area\nWelcome to the Learn Hugging Face Object Detection project!\nInside this project, we‚Äôll learn bits and pieces about the Hugging Face ecosystem as well as how to build our own custom object detection model.\nWe‚Äôll start with a collection of images with bounding box files as our dataset, fine-tune an existing computer vision model to detect items in an image and then share our model as a demo others can use.\nTK image - update cover image for object detection  \n\nWe‚Äôre going to put on our internship hats and build a food not food text classification model using tools from the Hugging Face ecosystem.\n\n\n‚Äì&gt;\n\n\n\n\n\n\nNote\n\n\n\nFeel to keep reading through the notebook but if you‚Äôd like to run the code yourself, be sure to go through the setup guide first.\n\n\n\n1.1 TK - What we‚Äôre going to build\nWe‚Äôre going to be bulding Trashify üöÆ, an object detection model which incentivises people to pick up trash in their local area by detecting bin, trash, hand.\nIf all three items are detected, a person gets +1 point!\nFor example, say you were going for a walk around your neighbourhood and took a photo of yourself picking up a piece (with your hand or trash arm) of trash and putting it in the bin, you would get a point.\nWith this object detection model, you could deploy it to an application which would automatically detect the target classes and then save the result to an online leaderboard.\nThe incentive would be to score the most points, in turn, picking up the most piecces of trash, in a given area.\nMore specifically, we‚Äôre going to follow the following steps:\n\nData: Problem defintion and dataset preparation - Getting a dataset/setting up the problem space.\nModel: Finding, training and evaluating a model - Finding an object detection model suitable for our problem on Hugging Face and customizing it to our own dataset.\nDemo: Creating a demo and put our model into the real world - Sharing our trained model in a way others can access and use.\n\nBy the end of this project, you‚Äôll have a trained model and demo on Hugging Face you can share with others:\n\nfrom IPython.display import HTML \n\nHTML(\"\"\"\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"850\"\n&gt;&lt;/iframe&gt;\n\"\"\")\n\n\n\n\n\n\n\n1.2 TK - What is object detection?\nObject detection is the process of identifying and locating an item in an image.\nWhere item can mean almost anything.\nFor example:\n\nDetecting car licence plates in a video feed (videos are a series of images) for a parking lot entrance.\nDetecting delivery people walking towards your front door on a security camera.\nDetecting defects on a manufacturing line.\nDetecting pot holes in the road so repair works can automatically be scheduled.\nDetecting small pests (Varroa Mite) on the bodies of bees.\nDetecting weeds in a field so you know what to remove and what to keep.\n\n‚Äì\nTK - add examples of actual trash identification projects, see:\n\nGoogle using machine learning for trash identification ‚Äî https://sustainability.google/operating-sustainably/stories/circular-economy-marketplace/\nTrashify website for identifying trash ‚Äî https://www.trashify.tech/\nWaste management with deep learning ‚Äî https://www.sciencedirect.com/science/article/abs/pii/S0956053X23001915\nLabel Studio being used for labelling a trash dataset ‚Äî https://labelstud.io/blog/ameru-labeling-for-a-greener-world/\n\n‚Äì\n\n\n\n\n\n\nNote\n\n\n\nNote: Object detection is also sometimes referred to as image localization or object localization. For consistency, I will use the term object detection, however, either of these terms could substitute.\n\n\n\n\n\n* TK image - examples of where object detection is used\n\n\n\nImage classification deals with classifying an image as a whole into a single class, object detection endeavours to find the specific target item and where it is in an image.\nOne of the most common ways of showing where an item is in an image is by displaying a bounding box (a rectangle-like box around the target item).\nAn object detection model will often take an input image tensor in the shape [3, 640, 640] ([colour_channels, height, width]) and output a tensor in the form [class_name, x_min, y_min, x_max, y_max] or [class_name, x1, y1, x2, y2] (this is two ways to write the same example format, there are more formats, we‚Äôll see these below in Table¬†1).\nWhere:\n\nclass_name = The classification of the target item (e.g.¬†\"car\", \"person\", \"banana\", \"piece_of_trash\", this could be almost anything).\nx_min = The x value of the top left corner of the box.\ny_min = The y value of the top left corner of the box.\nx_max = The x value of the bottom right corner of the box.\ny_max = The y value of the bottom right corner of the box.\n\n‚Äì TK image ‚Äì example of a bounding box on an image\n\n\n\n\n\n\nObject detection bounding box formats\n\n\n\nWhen you get into the world of object detection, you will find that there are several different bounding box formats.\nThere are three major formats you should be familiar with: XYXY, XYWH, CXCYWH (there are more but these are the most common).\nKnowing which bounding box format you‚Äôre working with can be the difference between a good model and a very poor model (wrong bounding boxes = wrong outcome).\nWe‚Äôll get hands-on with a couple of these in this project.\nBut for an in-depth example of all three, I created a guide on different bounding box formats and how to draw them, reading this should give a good intuition behind each style of bounding box.\n\n\n\n\n1.3 TK - Why train your own object detection models?\nYou can customize pre-trained models for object detection as well as API-powered models and LLMs such as Gemini, LandingAI and DINO-X.\nDepending on your requirements, there are several pros and cons for using your own model versus using an API.\nTraining/fine-tuning your own model:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nControl: Full control over model lifecycle.\nCan be complex to get setup.\n\n\nNo usage limits (aside from compute constraints).\nRequires dedicated compute resources for training/inference.\n\n\nCan train once and deploy everywhere/whenever you want (for example, Tesla deploying a model to all self-driving cars).\nRequires maintenance over time to ensure performance remains up to par.\n\n\nPrivacy: Data can be kept in-house/app and doesn‚Äôt need to go to a third party.\nCan require longer development cycles compared to using existing APIs.\n\n\nSpeed: Customizing a small model for a specific use case often means it runs much faster on local hardware, for example, modern object detection models can achieve 70-100+ FPS (frames per second) on modern GPU hardware.\n\n\n\n\nUsing a pre-built model API:\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\nEase of use: often can be setup within a few lines of code.\nIf the model API goes down, your service goes down.\n\n\nNo maintenance of compute resources.\nData is required to be sent to a third-party for processing.\n\n\nAccess to the most advanced models.\nThe API may have usage limits per day/time period.\n\n\nCan scale if usage increases.\nCan be much slower than using dedicated models due to requiring an API call.\n\n\n\nFor this project, we‚Äôre going to focus on fine-tuning our own model.\n\n\n1.4 TK - Workflow we‚Äôre going to follow\nThe good news for us is that the Hugging Face ecosystem makes working on custom machine learning projects an absolute blast.\nAnd workflow is reproducible across several kinds of projects.\nStart with data (or skip this step and go straight to a model) -&gt; get/customize a model -&gt; build and share a demo.\nWith this in mind, our motto is data, model, demo!\nMore specifically, we‚Äôre going to follow the rough workflow of:\n\nCreate, preprocess and load data using Hugging Face Datasets.\nDefine the model we‚Äôd like use with transformers.AutoModelForObjectDetection (or another similar model class).\nDefine training arguments (these are hyperparameters for our model) with transformers.TrainingArguments.\nPass TrainingArguments from 3 and target datasets to an instance of transformers.Trainer.\nTrain the model by calling Trainer.train().\nSave the model (to our local machine or to the Hugging Face Hub).\nEvaluate the trained model by making and inspecting predctions on the test data.\nTurn the model into a shareable demo.\n\nI say rough because machine learning projects are often non-linear in nature.\nAs in, because machine learning projects involve many experiments, they can kind of be all over the place.\nBut this worfklow will give us some good guidelines to follow.\n\n\n\n\nA general Hugging Face workflow from idea to shared model and demo using tools from the Hugging Face ecosystem. You‚Äôll notice some of the steps don‚Äôt match with our workflow outline above. This is because the text-based workflow outline above breaks some of the steps down for educational purposes. These kind of workflows are not set in stone and are more of guide than specific directions. See information on each of the tools in the Hugging Face documentation."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---importing-necessary-libraries",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---importing-necessary-libraries",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "2 TK - Importing necessary libraries",
    "text": "2 TK - Importing necessary libraries\nLet‚Äôs get started!\nFirst, we‚Äôll import the required libraries.\nIf you‚Äôre running on your local computer, be sure to check out the getting setup guide to make sure you have everything you need.\nIf you‚Äôre using Google Colab, many of them the following libraries will be installed by default.\nHowever, we‚Äôll have to install a few extras to get everything working.\n\n\n\n\n\n\nNote\n\n\n\nIf you‚Äôre running on Google Colab, this notebook will work best with access to a GPU. To enable a GPU, go to Runtime ‚û°Ô∏è Change runtime type ‚û°Ô∏è Hardware accelerator ‚û°Ô∏è GPU.\n\n\nWe‚Äôll need to install the following libraries from the Hugging Face ecosystem:\n\ntransformers - comes pre-installed on Google Colab but if you‚Äôre running on your local machine, you can install it via pip install transformers.\ndatasets - a library for accessing and manipulating datasets on and off the Hugging Face Hub, you can install it via pip install datasets.\nevaluate - a library for evaluating machine learning model performance with various metrics, you can install it via pip install evaluate.\naccelerate - a library for training machine learning models faster, you can install it via pip install accelerate.\ngradio - a library for creating interactive demos of machine learning models, you can install it via pip install gradio.\n\nAnd the following library is not part of the Hugging Face ecosystem but it is helpful for evaluating our models:\n\ntorchmetrics - a library containing many evaluation metrics compatible with PyTorch/Transformers, you can install it via pip install torchmetrics.\n\nWe can also check the versions of our software with package_name.__version__.\n\n# Install/import dependencies (this is mostly for Google Colab, as the other dependences are available by default in Colab)\ntry:\n  import datasets, evaluate, accelerate\n  import gradio as gr\nexcept ModuleNotFoundError:\n  !pip install -U datasets evaluate accelerate gradio # -U stands for \"upgrade\" so we'll get the latest version by default\n  import datasets, evaluate, accelerate\n  import gradio as gr\n\nimport random\n\nimport numpy as np\n\nimport torch\nimport transformers\n\n# Required for evaluation\n# Can install with !pip install torchmetrics[detection]\nimport torchmetrics\nimport pycocotools\n\n# Check versions (as long as you've got the following versions or higher, you should be good)\nprint(f\"Using transformers version: {transformers.__version__}\")\nprint(f\"Using datasets version: {datasets.__version__}\")\nprint(f\"Using torch version: {torch.__version__}\")\nprint(f\"Using torchmetrics version: {torchmetrics.__version__}\")\n\nUsing transformers version: 4.48.3\nUsing datasets version: 3.1.0\nUsing torch version: 2.6.0+cu124\nUsing torchmetrics version: 1.4.1\n\n\nWonderful, as long as your versions are the same or higher to the versions above, you should be able to run the code below."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#getting-a-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#getting-a-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "3 Getting a dataset",
    "text": "3 Getting a dataset\nOkay, now we‚Äôre got the required libraries, let‚Äôs get a dataset.\nGetting a dataset is one of the most important things a machine learning project.\nThe dataset you often determines the type of model you use as well as the quality of the outputs of that model.\nMeaning, if you have a high quality dataset, chances are, your future model could also have high quality outputs.\nIt also means if your dataset is of poor quality, your model will likely also have poor quality outputs.\nFor an object detection problem, your dataset will likely come in the form of a group of images as well as a file with annotations belonging to those images.\nFor example, you might have the following setup:\nfolder_of_images/\n    image_1.jpeg\n    image_2.jpeg\n    image_3.jpeg\nannotations.json\nWhere the annotations.json contains details about the contains of each image:\n\n\nannotations.json\n\n[\n    {\n        'image_path': 'image_1.jpeg', \n        'image_id': 42,\n        'annotations': \n            {\n                'file_name': ['image_1.jpeg'],\n                'image_id': [42],\n                'category_id': [1],\n                'bbox': [\n                            [360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n                        ],\n                'area': [46390.9609375]\n            },\n        'label_source': 'manual_prodigy_label',\n        'image_source': 'manual_taken_photo'\n    },\n\n    ...(more labels down here)\n]\n\nDon‚Äôt worry too much about the exact meaning of everything in the above annotations.json file for now (this is only one example, there are many different ways object detection information could be displayed).\nThe main point is that each target image is paired with an assosciated label.\nNow like all good machine learning cooking shows, I‚Äôve prepared a dataset from earlier.\nTK image - dataset on Hugging Face\nIt‚Äôs stored on Hugging Face Datasets (also called the Hugging Face Hub) under the name mrdbourke/trashify_manual_labelled_images.\nThis is a dataset I‚Äôve collected manually by hand (yes, by picking up 1000+ pieces of trash and photographing it) as well as labelled by hand (by drawing boxes on each image with a labelling tool called Prodigy).\n\n3.1 Loading the dataset\nTo load a dataset stored on the Hugging Face Hub we can use the datasets.load_dataset(path=NAME_OR_PATH_OF_DATASET) function and pass it the name/path of the dataset we want to load.\nIn our case, our dataset name is mrdbourke/trashify_manual_labelled_images (you can also change this for your own dataset).\nAnd since our dataset is hosted on Hugging Face, when we run the following code for the first time, it will download it.\nIf your target dataset is quite large, this download may take a while.\nHowever, once the dataset is downloaded, subsequent reloads will be mush faster.\n\n\n\n\n\n\nGetting information about a function/method\n\n\n\nOne way to find out what a function or method does is to lookup the documentation.\nAnother way is to write the function/method name with a question mark afterwards.\nFor example:\nfrom datasets import load_dataset\n\nload_dataset?\nGive it a try.\nYou should see some helpful information about what inputs the method takes and how they are used.\n\n\nLet‚Äôs load our dataset and check it out.\n\nfrom datasets import load_dataset\n\n# Load our Trashify dataset\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nBeautiful!\nWe can see that there is a train split of the dataset already which currently contains all of the samples (1128 in total).\nThere are also some features that come with our dataset which are related to our object detection goal.\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\nprint(f\"[INFO] Dataset features:\") \n\nfrom pprint import pprint\n\npprint(dataset['train'].features)\n\n[INFO] Length of original dataset: 1128\n[INFO] Dataset features:\n{'annotations': Sequence(feature={'area': Value(dtype='float32', id=None),\n                                  'bbox': Sequence(feature=Value(dtype='float32',\n                                                                 id=None),\n                                                   length=4,\n                                                   id=None),\n                                  'category_id': ClassLabel(names=['bin',\n                                                                   'hand',\n                                                                   'not_bin',\n                                                                   'not_hand',\n                                                                   'not_trash',\n                                                                   'trash',\n                                                                   'trash_arm'],\n                                                            id=None),\n                                  'file_name': Value(dtype='string', id=None),\n                                  'image_id': Value(dtype='int64', id=None),\n                                  'iscrowd': Value(dtype='int64', id=None)},\n                         length=-1,\n                         id=None),\n 'image': Image(mode=None, decode=True, id=None),\n 'image_id': Value(dtype='int64', id=None),\n 'image_source': Value(dtype='string', id=None),\n 'label_source': Value(dtype='string', id=None)}\n\n\nNice!\nWe can see our dataset features contain the following fields:\n\nannotations - A sequence of values including a bbox field (short for bounding box) as well as category_id field which contains the target objects we‚Äôd like to identify in our images (['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nimage - This contains the target image assosciated with a given set of annotations (in our case, images and annotations have been uploaded to the Hugging Face Hub together).\nimage_id - A unique ID assigned to a given sample.\nimage_source - Where the image came from (all of our images have been manually collected).\nlabel_source - Where the image label came from (all of our images have been manually labelled).\n\n\n\n3.2 Viewing a single sample from our data\nNow we‚Äôve seen the features, let‚Äôs check out a single sample from our dataset.\nWe can index on a single sample of the \"train\" set just like indexing on a Python list.\n\n# View a single sample of the dataset\ndataset[\"train\"][42]\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 745,\n 'annotations': {'file_name': ['094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg',\n   '094f4f41-dc07-4704-96d7-8d5e82c9edb9.jpeg'],\n  'image_id': [745, 745, 745],\n  'category_id': [5, 1, 0],\n  'bbox': [[333.1000061035156,\n    611.2000122070312,\n    244.89999389648438,\n    321.29998779296875],\n   [504.0, 612.9000244140625, 451.29998779296875, 650.7999877929688],\n   [202.8000030517578,\n    366.20001220703125,\n    532.9000244140625,\n    555.4000244140625]],\n  'iscrowd': [0, 0, 0],\n  'area': [78686.3671875, 293706.03125, 295972.65625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nWe see a few more details here compared to just looking at the features.\nWe notice the image is a PIL.Image with size 960x1280 (width x height).\nAnd the file_name is a UUID (Universially Unique Identifier, made with uuid.uuid4()).\nThe bbox field in the annotations key contains a list of bounding boxes assosciated with the image.\nIn this case, there are 3 different bounding boxes.\nWith the category_id values of 5, 1, 0 (we‚Äôll map these to class names shortly).\nLet‚Äôs inspect a single bounding box.\n\ndataset[\"train\"][42][\"annotations\"][\"bbox\"][0]\n\n[333.1000061035156, 611.2000122070312, 244.89999389648438, 321.29998779296875]\n\n\nThis array gives us the coordinates of a single bounding box in the format XYWH.\nWhere:\n\nX is the x-coordinate of the top left corner of the box (333.1).\nY is the y-coordinate of the top left corner of the box (611.2).\nW is the width of the box (244.9).\nH is the height of the box (321.3).\n\nAll of these values are in absolute pixel values (meaning an x-coordinate of 333.1 is 333.1 pixels across on the x-axis).\nHow do I know this?\nI know this because I created the box labels and this is the default value Prodigy (the labelling tool I used) outputs boxes.\nHowever, if you were to come across another bouding box dataset, one of the first steps would be to figure out what format your bounding boxes are in.\nWe‚Äôll see more on bounding box formats shortly.\n\n\n3.3 Extracting the category names from our data\nBefore we start to visualize our sample image and bounding boxes, let‚Äôs extract the category names from our dataset.\nWe can do so by accessing the features attribute our of dataset and then following it through to find the category_id feature, this contains a list of our text-based class names.\n\n\n\n\n\n\nNote\n\n\n\nWhen working with different categories, it‚Äôs good practice to get a list or mapping (e.g.¬†a Python dictionary) from category name to ID and vice versa.\nFor example:\n# Category to ID\n{\"class_name\": 0}\n\n# ID to Category\n{0: \"class_name\"}\nNot all datasets will have this implemented in an easy to access way, so it might take a bit of research to get it created.\n\n\nLet‚Äôs access the class names in our dataset and save them to a variable categories.\n\n# Get the categories from the dataset\n# Note: This requires the dataset to have been uploaded with this information setup, not all datasets will have this available.\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\nBeautiful!\nWe get the following class names:\n\nbin - A rubbish bin or trash can.\nhand - A person‚Äôs hand.\nnot_bin - Negative version of bin for items that look like a bin but shouldn‚Äôt be identified as one.\nnot_hand - Negative version of hand for items that look like a hand but shouldn‚Äôt be identified as one.\nnot_trash - Negative version of trash for items that look like trash but shouldn‚Äôt be identified as it.\ntrash - An item of trash you might find on a walk such as an old plastic bottle, food wrapper, cigarette butt or used coffee cup.\ntrash_arm - A mechanical arm used for picking up trash.\n\nThe goal of our computer vision model will be: given an image, detect items belonging to these target classes if they are present.\n\n\n3.4 Creating a mapping from numbers to labels\nNow we‚Äôve got our text-based class names, let‚Äôs create a mapping from label to ID and ID to label.\nFor each of these, Hugging Face use the terminology label2id and id2label respectively.\n\n# Map ID's to class names and vice versa\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nprint(f\"Label to ID mapping:\\n{label2id}\\n\")\nprint(f\"ID to label mapping:\\n{id2label}\")\n# id2label, label2id\n\nLabel to ID mapping:\n{'bin': 0, 'hand': 1, 'not_bin': 2, 'not_hand': 3, 'not_trash': 4, 'trash': 5, 'trash_arm': 6}\n\nID to label mapping:\n{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash', 6: 'trash_arm'}\n\n\n\n\n3.5 Creating a colour palette\nOk we know which class name matches to which ID, now let‚Äôs create a dictionary of different colours we can use to display our bounding boxes.\nIt‚Äôs one thing to plot bounding boxes, it‚Äôs another thing to make them look nice.\nAnd we always want our plots looking nice!\nWe‚Äôll colour the positive classes bin, hand, trash, trash_arm in nice bright colours.\nAnd the negative classes not_bin, not_hand, not_trash in a light red colour to indicate they‚Äôre the negative versions.\nOur colour dictionary will map class_name -&gt; (red, green, blue) (or RGB) colour values.\n\n# Make colour dictionary\ncolour_palette = {\n    'bin': (0, 0, 224),         # Bright Blue (High contrast with greenery) in format (red, green, blue)\n    'not_bin': (255, 80, 80),   # Light Red to indicate negative class\n\n    'hand': (148, 0, 211),      # Dark Purple (Contrasts well with skin tones)\n    'not_hand': (255, 80, 80),  # Light Red to indicate negative class\n\n    'trash': (0, 255, 0),       # Bright Green (For trash-related items)\n    'not_trash': (255, 80, 80), # Light Red to indicate negative class\n\n    'trash_arm': (255, 140, 0), # Deep Orange (Highly visible)\n}\n\nLet‚Äôs check out what these colours look like!\nIt‚Äôs the ABV motto: Always Be Visualizing!\nWe can plot our colours with matplotlib.\nWe‚Äôll just have to write a small function to normalize our colour values from [0, 255] to [0, 1] (matplotlib expects our colour values to be between 0 and 1).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Normalize RGB values to 0-1 range\ndef normalize_rgb(rgb_tuple):\n    return tuple(x/255 for x in rgb_tuple)\n\n# Turn colors into normalized RGB values for matplotlib\ncolors_and_labels_rgb = [(key, normalize_rgb(value)) for key, value in colour_palette.items()]\n\n# Create figure and axis\nfig, ax = plt.subplots(1, 7, figsize=(8, 1))\n\n# Flatten the axis array for easier iteration\nax = ax.flatten()\n\n# Plot each color square\nfor idx, (label, color) in enumerate(colors_and_labels_rgb):\n    ax[idx].add_patch(plt.Rectangle(xy=(0, 0), \n                                    width=1, \n                                    height=1, \n                                    facecolor=color))\n    ax[idx].set_title(label)\n    ax[idx].set_xlim(0, 1)\n    ax[idx].set_ylim(0, 1)\n    ax[idx].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nSensational!\nNow we know what colours to look out for when we visualize our bounding boxes."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---plotting-a-single-image-and-visualizing-the-boxes",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "4 TK - Plotting a single image and visualizing the boxes",
    "text": "4 TK - Plotting a single image and visualizing the boxes\nOkay, okay, finally time to plot an image!\nLet‚Äôs take a random sample from our dataset and plot the image as well as the box on it.\nTo save some space in our notebook (plotting many images can increase the size of our notebook dramatically), we‚Äôll create two small helper functions:\n\nhalf_image - Halves the size of a given image.\nhalf_boxes - Divides the input coordinates of a given input box by 2.\n\nThese functions aren‚Äôt 100% necessary in our workflow.\nThey‚Äôre just to make the images slightly smaller so they fit better in the notebook.\n\nimport PIL\n\ndef half_image(image: PIL.Image) -&gt; PIL.Image:\n    \"\"\"\n    Resizes a given input image by half and returns the smaller version.\n    \"\"\"\n    return image.resize(size=(image.size[0] // 2, image.size[1] // 2))\n\ndef half_boxes(boxes):\n    \"\"\"\n    Halves an array/tensor of input boxes and returns them. Necessary for plotting them on a half-sized image.\n\n    For example:\n\n    boxes = [100, 100, 100, 100]\n    half_boxes = half_boxes(boxes)\n    print(half_boxes)\n\n    &gt;&gt;&gt; [50, 50, 50, 50]\n    \"\"\"\n    if isinstance(boxes, list):\n        # If boxes are list of lists, then we have multiple boxes\n        for box in boxes:\n            if isinstance(box, list):\n                return [[coordinate // 2 for coordinate in box] for box in boxes]\n            else:\n                return [coordinate // 2 for coordinate in boxes]         \n    \n    if isinstance(boxes, np.ndarray):\n        return (boxes // 2)\n    \n    if isinstance(boxes, torch.Tensor):\n        return (boxes // 2)\n\n# Test the functions \nimage_test = dataset[\"train\"][42][\"image\"]\nimage_test_half = half_image(image_test)\nprint(f\"[INFO] Original image size: {image_test.size} | Half image size: {image_test_half.size}\")\n\nboxes_test_list = [100, 100, 100, 100]\nprint(f\"[INFO] Original boxes: {boxes_test_list} | Half boxes: {half_boxes(boxes_test_list)}\")\n\nboxes_test_torch = torch.tensor([100.0, 100.0, 100.0, 100.0])\nprint(f\"[INFO] Original boxes: {boxes_test_torch} | Half boxes: {half_boxes(boxes_test_torch)}\")\n\n[INFO] Original image size: (960, 1280) | Half image size: (480, 640)\n[INFO] Original boxes: [100, 100, 100, 100] | Half boxes: [50, 50, 50, 50]\n[INFO] Original boxes: tensor([100., 100., 100., 100.]) | Half boxes: tensor([50., 50., 50., 50.])\n\n\nTo plot an image and its assosciated boxes, we‚Äôll do the following steps:\n\nSelect a random sample from the dataset.\nExtract the \"image\" (our image is in PIL format) and \"bbox\" keys from the random sample.\n\nWe can also optionally halve the size of our image/boxes to save space. In our case, we will halve our image and boxes.\n\nTurn the box coordinates into a torch.tensor (we‚Äôll be using torchvision utilities to plot the image and boxes).\nConvert the box format from XYXY to XYWH using torchvision.ops.box_convert (we do this because torchvision.utils.draw_bounding_boxes requires XYXY format as input).\nGet a list of label names (e.g.¬†\"bin\", \"trash\", etc) assosciated with each of the boxes as well as a list of colours to match (these will be from our colour_palette).\nDraw the boxes on the target image by:\n\nTurning the image into a tensor with torchvision.transforms.functional.pil_to_tensor.\nDraw the bounding boxes on our image tensor with torchvision.utils.draw_bounding_boxes.\nTurn the image and bounding box tensors back into a PIL image with torchvision.transforms.functional.pil_to_tensor.\n\n\nPhew!\nA fair few steps‚Ä¶\nBut we‚Äôve got this!\n\n\n\n\n\n\nNote\n\n\n\nIf the terms XYXY or XYWH or all of the drawing methods sound a bit confusing or intimidating, don‚Äôt worry, there‚Äôs a fair bit going on here.\nWe‚Äôll cover bounding box formats, such as XYXY shortly.\nIn the meantime, if you want to learn more about different bounding box formats and how to draw them, I wrote A Guide to Bounding Box Formats and How to Draw Them which you might find helpful.\n\n\n\n# Plotting a bounding box on a single image\nimport random\n\nimport torch\n\nfrom torchvision.ops import box_convert\nfrom torchvision.utils import draw_bounding_boxes\n\nfrom torchvision.transforms.functional import pil_to_tensor, to_pil_image \n\n# 1. Select a random sample from our dataset\nrandom_index = random.randint(0, len(dataset[\"train\"]))\nprint(f\"[INFO] Showing training sample from index: {random_index}\")\nrandom_sample = dataset[\"train\"][random_index]\n\n# 2. Get image and boxes from random sample\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_boxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Optional: Half the image and boxes for space saving (all of the following code will work with/without half size images)\nhalf_random_sample_image = half_image(random_sample_image)\nhalf_random_sample_boxes = half_boxes(random_sample_boxes)\n\n# 3. Turn box coordinates in a tensor\nboxes_xywh = torch.tensor(half_random_sample_boxes)\nprint(f\"Boxes in XYWH format: {boxes_xywh}\")\n\n# 4. Convert boxes from XYWH -&gt; XYXY \n# torchvision.utils.draw_bounding_boxes requires input boxes in XYXY format (X_min, y_min, X_max, y_max)\nboxes_xyxy = box_convert(boxes=boxes_xywh,\n                         in_fmt=\"xywh\",\n                         out_fmt=\"xyxy\")\nprint(f\"Boxes XYXY: {boxes_xyxy}\")\n\n# 5. Get label names of target boxes and colours to match\nrandom_sample_label_names = [categories.int2str(x) for x in random_sample[\"annotations\"][\"category_id\"]]\nrandom_sample_colours = [colour_palette[label_name] for label_name in random_sample_label_names]\nprint(f\"Label names: {random_sample_label_names}\")\nprint(f\"Colour names: {random_sample_colours}\")\n\n# 6. Draw the boxes on the image as a tensor and then turn it into a PIL image\nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_random_sample_image),\n        boxes=boxes_xyxy,\n        colors=random_sample_colours,\n        labels=random_sample_label_names,\n        width=2,\n        label_colors=random_sample_colours\n    )\n)\n\n[INFO] Showing training sample from index: 303\nBoxes in XYWH format: tensor([[261., 348., 212., 250.],\n        [189., 326., 107., 103.],\n        [121., 192., 215., 236.]])\nBoxes XYXY: tensor([[261., 348., 473., 598.],\n        [189., 326., 296., 429.],\n        [121., 192., 336., 428.]])\nLabel names: ['hand', 'trash', 'bin']\nColour names: [(148, 0, 211), (0, 255, 0), (0, 0, 224)]\n\n\n\n\n\n\n\n\n\nOutstanding!\nOur first official bounding boxes plotted on an image!\nNow the idea of Trashify üöÆ is coming to life.\nDepending on the random sample you‚Äôre looking at, you should see some combination of ['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm'].\nOur goal will be to build an object detection model to replicate these boxes on a given image.\n\n\n\n\n\n\nGetting familiar with a dataset: viewing 100 random samples\n\n\n\nWhenever working with a new dataset, I find it good practice to view 100+ random samples of the data.\nIn our case, this would mean viewing 100 random images with their bounding boxes drawn on them.\nDoing so starts to build your own intuition of the data.\nUsing this intuition, along with evaluation metrics, you can start to get a better idea of how your model might be performing later on.\nKeep this in mind for any new dataset or problem space you‚Äôre working on.\nStart by looking at 100+ random samples.\nAnd yes, generally more is better.\nSo you can practice by running the code cell above a number of times to see the different kinds of images and boxes in the dataset.\nCan you think of any scenarios which the dataset might be missing?"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#different-bounding-box-formats",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#different-bounding-box-formats",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "5 Different bounding box formats",
    "text": "5 Different bounding box formats\nWhen drawing our bounding box, we discussed the terms XYXY and XYWH.\nWell, we didn‚Äôt really discuss these at all‚Ä¶\nBut that‚Äôs why we‚Äôre here.\nOne of the most confusing things in the world of object detection is the different formats bounding boxes come in.\nAre your boxes in XYXY, XYWH or CXCYWH?\nAre they in absolute format?\nOr normalized format?\nPerhaps a table will help us.\nThe following table contains a non-exhaustive list of some of the most common bounding box formats you‚Äôll come across in the wild.\n\n\n\nTable¬†1: Different bounding box formats\n\n\n\n\n\nBox format\nDescription\nAbsolute Example\nNormalized Example\nSource\n\n\n\n\nXYXY\nDescribes the top left corner coordinates (x1, y1) as well as the bottom right corner coordinates of a box.  Also referred to as:  [x1, y1, x2, y2]  or  [x_min, y_min, x_max, y_max]\n[8.9, 275.3, 867.5, 964.0]\n[0.009, 0.215, 0.904, 0.753]\nPASCAL VOC Dataset uses the absolute version of this format, torchvision.utils.draw_bounding_boxes defaults to the absolute version of this format.\n\n\nXYWH\nDescribes the top left corner coordinates (x1, y1) as well as the width (box_width) and height (box_height) of the target box. The bottom right corners (x2, y2) are found by adding the width and height to the top left corner coordinates (x1 + box_width, y1 + box_height).  Also referred to as:  [x1, y1, box_width, box_height]  or  [x_min, y_min, box_width, box_height]\n[8.9, 275.3, 858.6, 688.7]\n[0.009, 0.215, 0.894, 0.538]\nThe COCO (Common Objects in Context) dataset uses the absolute version of this format, see the section under ‚Äúbbox‚Äù.\n\n\nCXCYWH\nDescribes the center coordinates of the bounding box (center_x, center_y) as well as the width (box_width) and height (box_height) of the target box.  Also referred to as:  [center_x, center_y, box_width, box_height]\n[438.2, 619.65, 858.6, 688.7]\n[0.456, 0.484, 0.894, 0.538]\nNormalized version introduced in the YOLOv3 (You Only Look Once) paper and is used by many later forms of YOLO.\n\n\n\n\n\n\n\n5.1 Absolute or normalized format?\nIn absolute coordinate form, bounding box values are in the same format as the width and height dimensions (e.g.¬†our image is 960x1280 pixels).\nFor example in XYXY format: [\"bin\", 8.9, 275.3, 867.5, 964.0]\nAn (x1, y1) (or (x_min, y_min)) coordinate of (8.9, 275.3) means the top left corner is 8.9 pixels in on the x-axis, and 275.3 pixels down on the y-axis.\nIn normalized coordinate form, values are between [0, 1] and are proportions of the image width and height.\nFor example in XYXY format: [\"bin\", 0.009, 0.215, 0.904, 0.753]\nA normalized (x1, y1) (or (x_min, y_min)) coordinate of (0.009, 0.215) means the top left corner is 0.009 * image_width pixels in on the x-axis and 0.215 * image_height down on the y-axis.\nTo convert absolute coordinates to normalized, you can divide x-axis values by the image width and y-axis values by the image height.\n\\[\nx_{\\text{normalized}} = \\frac{x_{\\text{absolute}}}{\\text{image\\_width}} \\quad y_{\\text{normalized}} = \\frac{y_{\\text{absolute}}}{\\text{image\\_height}}\n\\]\n\n\n5.2 Which bounding box format should you use?\nThe bounding box format you use will depend on the framework, model and existing data you‚Äôre trying to use.\nFor example, the take the following frameworks:\n\nPyTorch - If you‚Äôre using PyTorch pre-trained models, for example, torchvision.models.detection.fasterrcnn_resnet50_fpn, you‚Äôll want absolute XYXY ([x1, y1, x2, y2]) format.\nHugging Face Transformers - If you‚Äôre using a Hugging Face Transformers model such as Conditional DETR, you‚Äôll want to take note that outputs from the model can be of one type (e.g.¬†CXCYWH) but they can be post-processed into another type (e.g.¬†absolute XYXY).\nUltralytics YOLO - If you‚Äôre using a YOLO-like model such as Ultralytics YOLO, you‚Äôll want normalized CXCYWH ([center_x, center_y, width, height]) format.\nGoogle Gemini - If you‚Äôre using Google Gemini to predict bounding boxes on your images, then you‚Äôll want to pay attention to the special [y_min, x_min, y_max, x_max] (YXYX) normalized coordinates.\n\nOr if you note that someone has said their model is pre-trained on the COCO dataset, chances are the data has been formatted in XYWH format (see Table¬†1).\n\n\n\n\n\n\nNote\n\n\n\nFor more on different bounding box formats and how to draw them, see A Guide to Bounding Box Formats and How to Draw Them.\n\n\n\n# TK - should I functionize the plotting of boxes and image so we can do input/output with tensors + data augmentations on that (E.g. original: image, augmented: image),\n# - is this needed?"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#getting-an-object-detection-model",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#getting-an-object-detection-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "6 Getting an object detection model",
    "text": "6 Getting an object detection model\nThere are two main ways of getting an object detection model:\n\nBuilding it yourself. For example, constructing it layer by layer, testing it and training it on your target problem.\nUsing an existing one. For example, find an existing model on a problem space similar to your own and then adapt it via transfer learning (TK - add link to glossary) to your own task.\n\nIn our case, we‚Äôre going to focus on the latter.\nWe‚Äôll be taking a pre-trained object detection model and fine-tuning it on our Trashify üöÆ dataset so it outputs the boxes and labels we‚Äôre after.\n\n6.1 Places to get object detection models\nInstead of building your own machine learning model from scratch, it‚Äôs common practice to take an existing model that works on similar problem space to yours and then fine-tune (TK - add link to glossary) it to your own use case.\nThere are several places to get object detection models:\n\n\n\nTable¬†2: Places to get pre-trained object detection models\n\n\n\n\n\nLocation\nDescription\n\n\n\n\nHugging Face Hub\nOne the best places on the internet to find open-source machine learning models of nearly any kind. You can find pre-trained object detection models here such as facebook/detr-resnet-50, a model from Facebook (Meta) and microsoft/conditional-detr-resnet-50, a model from Microsoft and the model we‚Äôre going to use as our base model. Many of the models are permissively licensed, meaning you can use them for your own projects.\n\n\ntorchvision\nPyTorch‚Äôs built-in domain library for computer vision has several pre-trained object detection models which you can use in your own workflows.\n\n\npaperswithcode.com/task/object-detection\nWhilst not a direct place to download object detection models from, paperswithcode contains benchmarks for many machine learning tasks (including object detection) which shows the current state of the art (best performing) models and usually includes links to where to get the code.\n\n\nDetectron2\nDetectron2 is an open-source library to help with many of the tasks in detecting items in images. Inside you‚Äôll find several pre-trained and adaptable models as well as utilities such as data loaders for object detection and segmentation tasks.\n\n\nYOLO Series\nA running series of ‚ÄúYou Only Look Once‚Äù models. Usually, the higher the number, the better performing. For example, YOLOv11 by Ultralytics should outperform YOLOv10, however, this often requires testing on your own dataset. Beware of the license, it is under the AGPL-3.0 license which may cause issues in some organizations.\n\n\nmmdetection library\nAn open-source library from the OpenMMLab which contains many different open-source models as well as detection-specific utilties.\n\n\n\n\n\n\nWhen you find a pre-trained object detection model, you‚Äôll often see statements such as:\n\nConditional DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images).\nSource: https://huggingface.co/microsoft/conditional-detr-resnet-50\n\nThis means the model has already been trained on the COCO object detection dataset which contains 118,000 images and 80 classes such as [\"cake\", \"person\", \"skateboard\"...].\nThis is a good thing.\nIt means that the model should have a fairly good starting point when we try to adapt it to our own project.\n\n\n6.2 Downloading our model from Hugging Face\nFor our Trashify üöÆ project we‚Äôre going to be using the pre-trained object detection model microsoft/conditional-detr-resnet-50 which was originally introduced in the paper Conditional DETR for Fast Training Convergence.\n\n\n\n\n\n\nNote\n\n\n\nThe term ‚ÄúDETR‚Äù stands for ‚ÄúDEtection TRansformer‚Äù.\nWhere ‚ÄúTransformer‚Äù refers to the Transformer neural network architecture, specifically the Vision Transformer (or ViT) rather than the Hugging Face transformers library (quite confusing, yes).\nSo DETR means ‚Äúperforming detection with the Transformer architecture‚Äù.\nAnd the ‚ÄúResNet‚Äù part stands for ‚ÄúResidual Neural Network‚Äù which is a common computer vision backbone. The ‚Äú50‚Äù refers to the number of layers in the network. Saying ‚ÄúResNet-50‚Äù means the 50 layer version of ResNet. ResNet-101 and ResNet-18 are two other larger and smaller variants.\n\n\nTo use this model, there are some helpful documentation resources we should be aware of:\n\n\n\nTable¬†3: Model documentation resources\n\n\n\n\n\nResource\nDescription\n\n\n\n\nConditional DETR documentation\nContains detailed information on each of the transformers.ConditionalDetr classes.\n\n\ntransformers.ConditionalDetrConfig\nContains the configuration settings for our model such as number of layers and other hyperparameters.\n\n\ntransformers.ConditionalDetrImageProcessor\nContains several preprocessing on post processing functions and settings for data going into and out of our model. Here we can set values such as size in the preprocess method which will resize our images to a certain size. We can also use the post_process_object_detection method to process the raw outputs of our model into a more usable format.\n\n\ntransformers.ConditionalDetrModelForObjectdetection\nThis will enable us to load the Conditional DETR model weights and enable to pass data through them via the forward method.\n\n\ntransformers.AutoImageProcessor\nThis will enable us to create an instance of transformers.ConditionalDetrImageProcessor by passing the model name microsoft/conditional-detr-resnet-50 to the from_pretrained method. Hugging Face Transformers uses several Auto Classes for various problem spaces and models.\n\n\ntransformers.AutoModelForObjectDetection\nEnables us to load the model architecture and weights for the Conditional DETR architecture by passing the model name microsoft/conditional-detr-resnet-50 to the from_pretrained method.\n\n\n\n\n\n\nWe‚Äôll get hands-on which each of these throughout the project.\nFor now, if you‚Äôd like to read up more on each, I‚Äôd highly recommend it.\nKnowing how to navigate and read through a framework‚Äôs documentation is a very helpful skill to have.\n\n\n\n\n\n\nNote\n\n\n\nThere are other object detection models we could try on the Hugging Face Hub such as facebook/detr-resnet-50 or IDEA-Research/dab-detr-resnet-50-dc5-pat3.\nFor now, we‚Äôll stick with microsoft/conditional-detr-resnet-50.\nIt‚Äôs easy to get stuck figuring out which model to use instead of just trying one and seeing how it goes.\nBest to get something small working with one model and try another one later as part of a series of experiments to try and improve your results.\n\n\nWe can load our model with transformers.AutoModelForObjectDetection.from_pretrained and passing in the following parameters:\n\npretrained_model_name_or_path - Our target model, which can be a local path or Hugging Face model name (e.g.¬†microsoft/conditional-detr-resnet-50).\nlabel2id - A dictionary mapping our class names/labels to their numerical ID, this is so our model will know how many classes to output.\nid2label - A dictionary mapping numerical IDs to our class names/labels, so our model will know how many classes we‚Äôre working with and what their IDs are.\nignore_mismatched_sizes=True (default) - We‚Äôll set this to True so that our model can be instatiated with a varying number of classes compared to what it may have been trained on (e.g.¬†if our model was trained on the 91 classes from COCO, we only need 7).\nbackbone=\"resnet50\" (default) - We‚Äôll tell our model what kind of computer vision backbone to use for extracting features from our images.\n\nSee the full documentation for a full list of parameters we can use.\nLet‚Äôs create a model!\n\nfrom transformers import AutoModelForObjectDetection\n\nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n\nmodel = AutoModelForObjectDetection.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    label2id=label2id,\n    id2label=id2label,\n    # Original model was trained with a different number of output classes to ours\n    # So we'll ignore any mismatched sizes (e.g. 91 vs. 7)\n    # Try turning this to False and see what happens\n    ignore_mismatched_sizes=True, \n    backbone=\"resnet50\"\n)\n\n# Uncomment to see full model archietecture\n# model\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nBeautiful!\nWe‚Äôve got a model ready.\nYou might‚Äôve noticed a warning about the model needing to be trained on a down-stream task:\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match: - class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated - class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\nThis is because our model has a different number of target classes (7 in total) comapred to the original model (91 in total, from the COCO dataset).\nSo in order to get this pretrained model to work on our dataset, we‚Äôll need to fine-tune it.\nYou might also notice that if you set ignore_mismatched_sizes=False, you‚Äôll get an error:\n\nRuntimeError: Error(s) in loading state_dict for ConditionalDetrForObjectDetection: size mismatch for class_labels_classifier.weight: copying a param with shape torch.Size([91, 256]) from checkpoint, the shape in current model is torch.Size([7, 256]). size mismatch for class_labels_classifier.bias: copying a param with shape torch.Size([91]) from checkpoint, the shape in current model is torch.Size([7]). You may consider adding ignore_mismatched_sizes=True in the model from_pretrained method.\n\nThis is a similar warning to the one above.\nKeep this is mind for when you‚Äôre working with pretrained models.\nIf you are using data slightly different to what the model was trained on, you may need to alter the setup hyperparameters as well as fine-tune it on your own data.\n\n\n6.3 Inspecting our model‚Äôs layers\nWe can inspect the full model architecture by running print(model) (I‚Äôve commented this out for brevity).\nAnd if you do so, you‚Äôll see a large list of layers which combine to contribute to make the overall model.\nThe following subset of layers has been truncated for brevity.\n# Shortened version of the model architecture, print the full model to see all layers\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n              ...\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d())))\n            ...\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n              ...\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True))))\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(...)\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)))\n      (ref_point_head): MLP(\n        ...\n      ))))\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)))))\nIf we check out a few of our model‚Äôs layers, we can see that it is a combination of convolutional, attention, MLP (multi-layer perceptron) and linear layers.\nI‚Äôll leave exploring each of these layer types for extra-curriculum.\nFor now, think of them as progressively pattern extractors.\nWe‚Äôll feed our input image into our model and layer by layer it will manipulate the pixel values to try and extract patterns in a way so that its internal parameters matches the image to its input annotations.\nMore specifically, if we dive into the final two layer sections:\n\nclass_labels_classifier = classification head with out_features=7 (one for each of our labels, 'bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']).\nbbox_predictor = regression head with out_features=4 (one for each of our bbox coordinates, e.g.¬†[center_x, center_y, width, height]).\n\n\nprint(f\"[INFO] Final classification layer: {model.class_labels_classifier}\\n\")\nprint(f\"[INFO] Final box regression layer: {model.bbox_predictor}\")\n\n[INFO] Final classification layer: Linear(in_features=256, out_features=7, bias=True)\n\n[INFO] Final box regression layer: ConditionalDetrMLPPredictionHead(\n  (layers): ModuleList(\n    (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n    (2): Linear(in_features=256, out_features=4, bias=True)\n  )\n)\n\n\nThese two layers are what are going to output the final predictions of our model in structure similar to our annotations.\nThe class_labels_classifier will output the predicted class label of a given bounding box output from bbox_predictor.\nIn essence, we are trying to get all of the pretrained patterns (also called parameters/weights & biases) of the previous layers to conform to the ideal outputs we‚Äôd like at the end.\n\n\n6.4 Counting the number of parameters in our model\nParameters are individual values which contribute to a model‚Äôs final output.\nParameters are also referred to as weights and biases.\nYou can think of these individual weights as small pushes and pulls on the input data to get it to match the input annotations.\nIf our weights were perfect, we could input an image and always get back the correct bounding boxes and class labels.\nIt‚Äôs very unlikely to ever have perfect weights (unless your dataset is very small) but we can make them quite good (and useful).\nWhen you have a good set of weights, this is known as a good representation.\nRight now, our weights have been trained on COCO, a collection of 91 different common objects.\nSo they have a fairly good representation of detecting general common objects, however, we‚Äôd like to fine-tune these weights to detect our target objects.\nImportantly, our model will not be starting from scratch when it begins to train.\nIt will instead take off from its existing knowledge of detecting common objects in images and try to adhere to our task.\nWhen it comes to parameters and weights, generally, more is better.\nMeaning the more parameters your model has, the better representation it can learn.\nFor example, ResNet50 (our computer vision backbone) has ~25 million parameters, about 100 MB in float32 precision or 50MB in float16 precision.\nWhereas a model such as Llama-3.1-405B has ~405 billion parameters, about 1.45 TB in float32 precision or 740 GB in float16 precision, about 16,000x more than ResNet50.\nHowever, as we can see having more parameters comes with the tradeoff of size and latency.\nFor each new parameter requires to be stored and it also adds an extra computation unit to your model.\nIn the case of Trashify, since we‚Äôd like our model to run on-device (e.g.¬†make predictions live on an iPhone), we‚Äôd opt for the smallest number of parameters we could get acceptable results from.\nIf performance is your number 1 criteria and size and latency don‚Äôt matter, then you‚Äôd likely opt for the model with the largest number of parameters (though always evaluate these models on your own data, larger models are generally better, not always better).\nSince our model is built using PyTorch, let‚Äôs write a small function to count the number of:\n\nTrainable parameters (parameters which will be tweaked during training)\nNon-trainable parameters (parameters which will not be tweaked during training)\nTotal parameters (trainable parameters + non-trainable parameters)\n\n\n# Count the number of parameters in the model\ndef count_parameters(model):\n    \"\"\"Takes in a PyTorch model and returns the number of parameters.\"\"\"\n    trainable_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)\n    non_trainable_parameters = sum(p.numel() for p in model.parameters() if not p.requires_grad)\n    total_parameters = sum(p.numel() for p in model.parameters())\n    print(f\"Total parameters: {total_parameters:,}\")\n    print(f\"Trainable parameters (will be updated): {trainable_parameters:,}\")\n    print(f\"Non-trainable parameters (will not be updated): {non_trainable_parameters:,}\")\n\ncount_parameters(model)\n\nTotal parameters: 43,396,813\nTrainable parameters (will be updated): 43,174,413\nNon-trainable parameters (will not be updated): 222,400\n\n\nCool!\nIt looks like our model has a total of 43,396,813 parameters, of which, most of them are trainable.\nThis means that when we fine-tune our model later on, we‚Äôll be tweaking the majority of the parameters to try and represent our data.\nIn practice, this is known as full fine-tuning, trying to fine-tune a large portion of the model to our data.\nThere are other methods for fine-tuning, such as feature extraction (where you only fine-tune the final layers of the model) and partial fine-tuning (where you fine-tune a portion of the model).\nAnd even methods such as LoRA (Low-Rank Adaptation) which fine-tunes an adaptor matrix as a compliment to the model‚Äôs parameters.\n\n\n6.5 Creating a function to build our model\nSince machine learning is very experimental, we may want to create multiple instances of our model to test various things.\nSo let‚Äôs functionize the creation of a new model with parameters for our target model name, id2label and label2id dictionaries.\n\nfrom transformers import AutoModelForObjectDetection\n\n# Setup the model\ndef create_model(pretrained_model_name_or_path: str = MODEL_NAME, \n                 label2id: dict = label2id, \n                 id2label: dict = id2label):\n    \"\"\"Creates and returns an instance of AutoModelForObjectDetection.\n    \n    Args: \n        pretrained_model_name_or_path (str): The name or path of the pretrained model to load. \n            Defaults to MODEL_NAME.\n        label2id (dict): A dictionary mapping class labels to IDs. Defaults to label2id.\n        id2label (dict): A dictionary mapping class IDs to labels. Defaults to id2label.\n    \n    Returns:\n        AutoModelForObjectDetection: A pretrained model for object detection with number of output\n            classes equivalent to len(label2id).\n    \"\"\"\n    model = AutoModelForObjectDetection.from_pretrained(\n        pretrained_model_name_or_path=MODEL_NAME,\n        label2id=label2id,\n        id2label=id2label,\n        ignore_mismatched_sizes=True, # default\n        backbone=\"resnet50\", # default \n    )\n    return model\n\nPerfect!\nAnd to make sure our function works‚Ä¶\n\n# Create a new model instance\nmodel = create_model()\n# model\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\n\n\n6.6 Trying to pass a single sample through our model (part 1)\nOkay, now we‚Äôve got a model, let‚Äôs put some data through it!\nWhen we call our model, because it‚Äôs a PyTorch Module (torch.nn.Module) it will by default run the forward method.\nIn PyTorch, forward overrides the special __call__ method on functions.\nSo we can pass data into our model by running:\nmodel(input_data)\nWhich is equivalent to running:\nmodel.forward(input_data)\nTo see what happens when we call our model, let‚Äôs inspect the forward method‚Äôs docstring with model.forward?.\n\n# What happens when we call our model?\n# Note: for PyTorch modules, `forward` overrides the __call__ method, \n# so calling the model is equivalent to calling the forward method.\nmodel.forward?\n\n\n\nOutput of model.forward?\n\nSignature:\nmodel.forward(\n    pixel_values: torch.FloatTensor,\n    pixel_mask: Optional[torch.LongTensor] = None,\n    decoder_attention_mask: Optional[torch.LongTensor] = None,\n    encoder_outputs: Optional[torch.FloatTensor] = None,\n    inputs_embeds: Optional[torch.FloatTensor] = None,\n    decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n    labels: Optional[List[dict]] = None,\n    output_attentions: Optional[bool] = None,\n    output_hidden_states: Optional[bool] = None,\n    return_dict: Optional[bool] = None,\n) -&gt; Union[Tuple[torch.FloatTensor], transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput]\nDocstring:\nThe [`ConditionalDetrForObjectDetection`] forward method, overrides the `__call__` special method.\n\n&lt;Tip&gt;\n\nAlthough the recipe for forward pass needs to be defined within this function, one should call the [`Module`]\ninstance afterwards instead of this since the former takes care of running the pre and post processing steps while\nthe latter silently ignores them.\n\n&lt;/Tip&gt;\n\nArgs:\n    pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)`):\n        Pixel values. Padding will be ignored by default should you provide it.\n\n        Pixel values can be obtained using [`AutoImageProcessor`]. See [`ConditionalDetrImageProcessor.__call__`]\n        for details.\n\n    pixel_mask (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*):\n        Mask to avoid performing attention on padding pixel values. Mask values selected in `[0, 1]`:\n\n        - 1 for pixels that are real (i.e. **not masked**),\n        - 0 for pixels that are padding (i.e. **masked**).\n\n        [What are attention masks?](../glossary#attention-mask)\n\n    decoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, num_queries)`, *optional*):\n        Not used by default. Can be used to mask object queries.\n    encoder_outputs (`tuple(tuple(torch.FloatTensor)`, *optional*):\n        Tuple consists of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)\n        `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) is a sequence of\n        hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.\n    inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you\n        can choose to directly pass a flattened representation of an image.\n    decoder_inputs_embeds (`torch.FloatTensor` of shape `(batch_size, num_queries, hidden_size)`, *optional*):\n        Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an\n        embedded representation.\n    output_attentions (`bool`, *optional*):\n        Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n        tensors for more detail.\n    output_hidden_states (`bool`, *optional*):\n        Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n        more detail.\n    return_dict (`bool`, *optional*):\n        Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\n    labels (`List[Dict]` of len `(batch_size,)`, *optional*):\n        Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the\n        following 2 keys: 'class_labels' and 'boxes' (the class labels and bounding boxes of an image in the batch\n        respectively). The class labels themselves should be a `torch.LongTensor` of len `(number of bounding boxes\n        in the image,)` and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image, 4)`.\n\n\n    Returns:\n        [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or `tuple(torch.FloatTensor)`: A [`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`] or a tuple of\n        `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`) comprising various\n        elements depending on the configuration ([`ConditionalDetrConfig`]) and inputs.\n\n        - **loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` are provided)) -- Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a\n          bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized\n          scale-invariant IoU loss.\n        - **loss_dict** (`Dict`, *optional*) -- A dictionary containing the individual losses. Useful for logging.\n        - **logits** (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes + 1)`) -- Classification logits (including no-object) for all queries.\n        - **pred_boxes** (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`) -- Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These\n          values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding\n          possible padding). You can use [`~ConditionalDetrImageProcessor.post_process_object_detection`] to retrieve the\n          unnormalized bounding boxes.\n        - **auxiliary_outputs** (`list[Dict]`, *optional*) -- Optional, only returned when auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)\n          and labels are provided. It is a list of dictionaries containing the two above keys (`logits` and\n          `pred_boxes`) for each decoder layer.\n        - **last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the decoder of the model.\n        - **decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the decoder at the output of each\n          layer plus the initial embedding outputs.\n        - **decoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n        - **cross_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the decoder's cross-attention layer, after the attention softmax,\n          used to compute the weighted average in the cross-attention heads.\n        - **encoder_last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*) -- Sequence of hidden-states at the output of the last layer of the encoder of the model.\n        - **encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`) -- Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n          shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the encoder at the output of each\n          layer plus the initial embedding outputs.\n        - **encoder_attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`) -- Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n          sequence_length)`. Attentions weights of the encoder, after the attention softmax, used to compute the\n          weighted average in the self-attention heads.\n  \n\n    Examples:\n\n    ```python\n    &gt;&gt;&gt; from transformers import AutoImageProcessor, AutoModelForObjectDetection\n    &gt;&gt;&gt; from PIL import Image\n    &gt;&gt;&gt; import requests\n\n    &gt;&gt;&gt; url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n    &gt;&gt;&gt; image = Image.open(requests.get(url, stream=True).raw)\n\n    &gt;&gt;&gt; image_processor = AutoImageProcessor.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n    &gt;&gt;&gt; model = AutoModelForObjectDetection.from_pretrained(\"microsoft/conditional-detr-resnet-50\")\n\n    &gt;&gt;&gt; inputs = image_processor(images=image, return_tensors=\"pt\")\n\n    &gt;&gt;&gt; outputs = model(**inputs)\n\n    &gt;&gt;&gt; # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n    &gt;&gt;&gt; target_sizes = torch.tensor([image.size[::-1]])\n    &gt;&gt;&gt; results = image_processor.post_process_object_detection(outputs, threshold=0.5, target_sizes=target_sizes)[\n    ...     0\n    ... ]\n    &gt;&gt;&gt; for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n    ...     box = [round(i, 2) for i in box.tolist()]\n    ...     print(\n    ...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n    ...         f\"{round(score.item(), 3)} at location {box}\"\n    ...     )\n    Detected remote with confidence 0.833 at location [38.31, 72.1, 177.63, 118.45]\n    Detected cat with confidence 0.831 at location [9.2, 51.38, 321.13, 469.0]\n    Detected cat with confidence 0.804 at location [340.3, 16.85, 642.93, 370.95]\n    Detected remote with confidence 0.683 at location [334.48, 73.49, 366.37, 190.01]\n    Detected couch with confidence 0.535 at location [0.52, 1.19, 640.35, 475.1]\n    ```\nFile:      ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py\nType:      method\n\nRunning model.forward? we can see that our model wants to take in pixel_values as well as a pixel_mask as arguments.\nWhat happens if we try to pass in a single image from our random_sample?\nLet‚Äôs try!\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs good practice to try and pass a single sample through your model as soon as possible to see what happens.\nIf we‚Äôre lucky, it‚Äôll work.\nIf we‚Äôre really lucky, we‚Äôll get an error message saying why it didn‚Äôt work (this is usually the case because rarely does raw data flow through a model without being preprocessed first).\n\n\nWe‚Äôll do so by setting pixel_values to our random_sample[\"image\"] and pixel_mask=None.\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(pixel_values=random_sample[\"image\"],\n                              pixel_mask=None)\nrandom_sample_outputs\n\n\n\nOutput of random_sample_outputs\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[34], line 2\n      1 # Do a single forward pass with the model\n----&gt; 2 random_sample_outputs = model(pixel_values=random_sample[\"image\"],\n      3                               pixel_mask=None)\n      4 random_sample_outputs\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1739, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1737     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1738 else:\n-&gt; 1739     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1750, in Module._call_impl(self, *args, **kwargs)\n   1745 # If we don't have any hooks, we want to skip the rest of the logic in\n   1746 # this function, and just call forward.\n   1747 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1748         or _global_backward_pre_hooks or _global_backward_hooks\n   1749         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1750     return forward_call(*args, **kwargs)\n   1752 result = None\n   1753 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py:1717, in ConditionalDetrForObjectDetection.forward(self, pixel_values, pixel_mask, decoder_attention_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, labels, output_attentions, output_hidden_states, return_dict)\n   1714 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n   1716 # First, sent images through CONDITIONAL_DETR base model to obtain encoder + decoder outputs\n-&gt; 1717 outputs = self.model(\n   1718     pixel_values,\n   1719     pixel_mask=pixel_mask,\n   1720     decoder_attention_mask=decoder_attention_mask,\n   1721     encoder_outputs=encoder_outputs,\n   1722     inputs_embeds=inputs_embeds,\n   1723     decoder_inputs_embeds=decoder_inputs_embeds,\n   1724     output_attentions=output_attentions,\n   1725     output_hidden_states=output_hidden_states,\n   1726     return_dict=return_dict,\n   1727 )\n   1729 sequence_output = outputs[0]\n   1731 # class logits + predicted bounding boxes\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1739, in Module._wrapped_call_impl(self, *args, **kwargs)\n   1737     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1738 else:\n-&gt; 1739     return self._call_impl(*args, **kwargs)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/torch/nn/modules/module.py:1750, in Module._call_impl(self, *args, **kwargs)\n   1745 # If we don't have any hooks, we want to skip the rest of the logic in\n   1746 # this function, and just call forward.\n   1747 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks\n   1748         or _global_backward_pre_hooks or _global_backward_hooks\n   1749         or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1750     return forward_call(*args, **kwargs)\n   1752 result = None\n   1753 called_always_called_hooks = set()\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/modeling_conditional_detr.py:1521, in ConditionalDetrModel.forward(self, pixel_values, pixel_mask, decoder_attention_mask, encoder_outputs, inputs_embeds, decoder_inputs_embeds, output_attentions, output_hidden_states, return_dict)\n   1516 output_hidden_states = (\n   1517     output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n   1518 )\n   1519 return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n-&gt; 1521 batch_size, num_channels, height, width = pixel_values.shape\n   1522 device = pixel_values.device\n   1524 if pixel_mask is None:\n\nAttributeError: 'Image' object has no attribute 'shape'\n\nOh no!‚Ä¶ I mean‚Ä¶ Oh, yes!\nWe get an error:\n\nAttributeError: ‚ÄòImage‚Äô object has no attribute ‚Äòshape‚Äô\n\nHmmm‚Ä¶ it seems we‚Äôve tried to pass a PIL.Image to our model rather than a torch.FloatTensor of shape (batch_size, num_channels, height, width).\nIt looks like our input data might require some preprocessing before we can pass it to our model."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#aside-processor-to-model-pattern",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#aside-processor-to-model-pattern",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "7 Aside: Processor to Model Pattern",
    "text": "7 Aside: Processor to Model Pattern\nMany Hugging Face data loading and modelling workflows as well as machine learning workflows in general follow the pattern of:\n\nData -&gt; Preprocessor -&gt; Model\n\nTK image - can we make data -&gt; preprocessor -&gt; model look better? potentially a flow chart?\nMeaning, the raw input data gets preprocessed or transformed in some way before being passed to a model.\nPreprocessors and models are often loaded with an Auto Class.\nAn Auto Class pairs a preprocessor and model based on their model name or key.\nFor example:\nfrom transformers import AutoProcessor, AutoModel\n\n# Load raw data\nraw_data = load_data()\n\n# Define target model name\nMODEL_NAME = \"...\"\n\n# Load preprocessor and model (these two are often paired)\npreprocessor = AutoProcessor.from_pretrained(MODEL_NAME)\nmodel = AutoModel.from_pretrained(MODEL_NAME)\n\n# Preprocess data\npreprocessed_data = preprocessor.preprocess(raw_data)\n\n# Pass preprocessed data to model\noutput = model(preprocessed_data)\nThis is the same for our Trashify üöÆ project.\nWe‚Äôve got our raw data (images and bounding boxes), however, they need to be preprocessed in order for our model to be able to handle them.\nPreviously we tried to pass a sample of raw data to our model and this errored.\nWe can fix this by first preprocessing our raw data with our model‚Äôs pair preprocessor and then passing to our model again."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#loading-our-models-processor",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#loading-our-models-processor",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "8 Loading our model‚Äôs processor",
    "text": "8 Loading our model‚Äôs processor\nTime to get our raw data ready for our model!\nTo begin, let‚Äôs load our model‚Äôs processor.\nWe‚Äôll use this to prepare our input images for the model.\nTo do so, we‚Äôll use transformers.AutoImageProcessor and pass our target model name to the from_pretrained method.\n\nfrom transformers import AutoImageProcessor\n\nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n# MODEL_NAME = \"facebook/detr-resnet-50\" # Could also use this model as an another experiment\n\n# Load the image processor\nimage_processor = AutoImageProcessor.from_pretrained(pretrained_model_name_or_path=MODEL_NAME)\n\n# Check out the image processor\nimage_processor\n\nUsing a slow image processor as `use_fast` is unset and a slow processor was saved with this model. `use_fast=True` will be the default behavior in v4.48, even if the model was saved with a slow processor. This will result in minor differences in outputs. You'll still be able to use a slow processor with `use_fast=False`.\n\n\nConditionalDetrImageProcessor {\n  \"do_convert_annotations\": true,\n  \"do_normalize\": true,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"ConditionalDetrImageProcessor\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"size\": {\n    \"longest_edge\": 1333,\n    \"shortest_edge\": 800\n  }\n}\n\n\nOk, a few things going on here.\nThese parameters will transform our input images before we pass them to our model.\nOne of the first things to see is the image_processor is expecting our bounding boxes to be in COCO (or coco_detection) format (this is the default).\nWe‚Äôll see what this looks like later on but our processor wants this format because that‚Äôs the format our model has been trained on (it‚Äôs generally best practice to input data to a model in the same way its been trained on, otherwise you might get poor results).\nAnother thing to notice is that our input images will be resized to the values of the size parameter.\nIn our case, it‚Äôs currently:\n\"size\": {\n    \"longest_edge\": 1333,\n    \"shortest_edge\": 800\n}\nWhich means that the longest edge will have size less or equal to 1333 and the shortest edge less or equal to 800.\nFor simplicity, we‚Äôll change this shortly to make both sides the same size.\nYou can read more about what each of these does in the transformers.ConditionalDetrImageProcessor documentation.\nLet‚Äôs update our instance of transformers.ConditionalDetrImageProcessor with a few custom parameters:\n\ndo_convert_annotations=True - This is the default and it will convert our boxes to the format CXCYWH or (center_x, center_y, width, height) (see Table¬†1) in the range [0, 1].\nsize - We‚Äôll update the size dictionary so all of our images have \"longest_edge\": 640 and \"shortest_edge: 640\". We‚Äôll use a value of 640 which is a common size in world of object detection. But there are also other sizes such as 300x300, 480x480, 512x512, 800x800 and more.\n\n\n\n\n\n\n\nNote\n\n\n\nDepending on what task you‚Äôre working on, you might want to tweak the image resolution you‚Äôre working with.\nFor example, I like this quote from Lucas Beyer, a former research scientist at DeepMind and engineer at OpenAI:\n\nMy conservative claim is that you can always stretch to a square, and for:\nnatural images, meaning most photos, 224px¬≤ is enough; text in photos, phone screens, diagrams and charts, 448px¬≤ is enough; desktop screens and single-page documents, 896px¬≤ is enough.\n\nTypically, in the case of object detection, you‚Äôll want to use a higher value.\nBut this is another thing that is open to experimentation.\n\n\n\n# Set image size\nIMAGE_SIZE = 640 # we could try other sizes here: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Create a new instance of the image processor with the desired image size\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height) in range [0, 1]\n    size={\"shortest_edge\": IMAGE_SIZE, \n          \"longest_edge\": IMAGE_SIZE}\n)\n\n# Optional: View the docstring of our image_processor.preprocess function\n# image_processor.preprocess?\n\n# Check out our new image processor size\nimage_processor.size\n\n{'shortest_edge': 640, 'longest_edge': 640}\n\n\nBeautiful!\nNow our images will be resized to a square of size 640x640 when we pass them to our model.\nHow about we try to preprocess our random_sample?\nTo do so, we can pass its \"image\" key and \"annotations\" key to our image_processor‚Äôs preprocess method.\nLet‚Äôs try!\n\n# Try to process a single image and annotation pair (spoiler: this will error)\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample[\"annotations\"])\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[23], line 2\n      1 # Try to process a single image and annotation pair (spoiler: this will error)\n----&gt; 2 random_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n      3                                                         annotations=random_sample[\"annotations\"])\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/image_processing_conditional_detr.py:1422, in ConditionalDetrImageProcessor.preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, resample, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, format, return_tensors, data_format, input_data_format, pad_size, **kwargs)\n   1420 format = AnnotationFormat(format)\n   1421 if annotations is not None:\n-&gt; 1422     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n   1424 if (\n   1425     masks_path is not None\n   1426     and format == AnnotationFormat.COCO_PANOPTIC\n   1427     and not isinstance(masks_path, (pathlib.Path, str))\n   1428 ):\n   1429     raise ValueError(\n   1430         \"The path to the directory containing the mask PNG files should be provided as a\"\n   1431         f\" `pathlib.Path` or string object, but is {type(masks_path)} instead.\"\n   1432     )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:851, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    849 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    850     if not valid_coco_detection_annotations(annotations):\n--&gt; 851         raise ValueError(\n    852             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    853             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    854             \"being a list of annotations in the COCO format.\"\n    855         )\n    857 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    858     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nOh no!\nWe get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\n\n8.1 Preprocessing a single image\nOkay so it turns out that our annotations aren‚Äôt in the format that the preprocess method was expecting.\nSince our pre-trained model was trained on the COCO dataset, the preprocess method expects input data to be in line with the COCO format.\nWe can fix this later on by adjusting our annotations.\nHow about we try to preprocess just a single image instead?\n\n# Preprocess our target sample\nrandom_sample_preprocessed_image_only = image_processor.preprocess(images=random_sample[\"image\"],\n                                                                   annotations=None, # no annotations this time \n                                                                   return_tensors=\"pt\") # return as PyTorch tensors\n\n# Uncomment to see the full output\n# print(random_sample_preprocessed_image_only)\n\n# Print out the keys of the preprocessed image\nprint(random_sample_preprocessed_image_only.keys())\n\ndict_keys(['pixel_values', 'pixel_mask'])\n\n\nNice! It looks like the preprocess method works on a single image.\nAnd it seems like we get a dictionary output with the following keys:\n\npixel_values - the processed pixel values of the input image.\npixel_mask - a mask multiplier for the pixel values as to whether they should be paid attention to or not (a value of 0 means the pixel value should be ignored by the model and a value of 1 means the pixel value should be paid attention to by the model).\n\nIn our case, all values of the pixel_mask are 1 since we‚Äôre not using any masks.\nLet‚Äôs check.\nPS Do you remember where we needed these keys? pixel_values and pixel_mask? Hint: it‚Äôs the reverse of drawrof.ledom.\n\n# Check all values of the pixel_mask are 1\ntorch.all(random_sample_preprocessed_image_only[\"pixel_mask\"][0]) == 1\n\ntensor(True)\n\n\nBeautiful!\nNow how about we inspect our processed image‚Äôs shape?\n\n# Uncomment to inspect all preprocessed pixel values\n# print(random_sample_preprocessed_image_only[\"pixel_values\"][0])\n\nprint(f\"[INFO] Original image shape: {random_sample['image'].size} -&gt; [width, height]\")\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed_image_only['pixel_values'].shape} -&gt; [batch_size, colour_channles, height, width]\")\n\n[INFO] Original image shape: (960, 1280) -&gt; [width, height]\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channles, height, width]\n\n\nOk wonderful, it looks like our image has been downsized to [3, 640, 480] (1 item in the batch, 3 colour channels, 640 pixels high, 480 pixels wide).\nThis is down from its original size of [960, 1280] (1280 pixels high, 960 pixels wide).\n\n\n\n\n\n\nNote\n\n\n\nThe order of image dimensions can differ between libraries and frameworks.\nFor example, image tensors in PyTorch typically follow the format [colour_channels, height, width] whereas in TensorFlow they follow [height, width, colour_channels].\nAnd in PIL, the format is [width, height].\nAs you can imagine, this can get confusing.\nHowever, with some practice, you‚Äôll be able to decipher which is which.\nAnd if your images and bounding boxes start looking strange, perhaps checking the image dimension and format can help.\n\n\n\n\n8.2 Trying to pass a single sample through our model (part 2)\nThis is exciting!\nWe‚Äôve processed an image into the format our model is expecting.\nHow about we try another forward by calling model.forward(pixel_values, pixel_mask)?\nWhich is the same as calling model(pixel_values, pixel_mask).\n\n# Do a single forward pass with the model\nrandom_sample_outputs = model(\n    pixel_values=random_sample_preprocessed_image_only[\"pixel_values\"], # model expects input [batch_size, color_channels, height, width]\n    pixel_mask=random_sample_preprocessed_image_only[\"pixel_mask\"],\n)\n\n# Inspect the outputs\nrandom_sample_outputs\n\nConditionalDetrObjectDetectionOutput(loss=None, loss_dict=None, logits=tensor([[[ 0.0191, -0.3138,  0.2364,  ..., -0.2737,  0.5557,  0.1909],\n         [-0.2840,  0.1010, -0.0071,  ..., -0.0811,  0.2860,  0.4713],\n         [-0.3578, -0.0956,  0.0890,  ..., -0.1747,  0.5014,  0.2122],\n         ...,\n         [-0.1888,  0.2145, -0.1513,  ..., -0.1566,  0.3148,  0.6567],\n         [-0.3112, -0.2042,  0.1620,  ..., -0.1127,  0.4702,  0.1951],\n         [-0.2286,  0.0096,  0.1171,  ..., -0.0110,  0.2533,  0.2914]]],\n       grad_fn=&lt;ViewBackward0&gt;), pred_boxes=tensor([[[0.7720, 0.7841, 0.4369, 0.4181],\n         [0.6230, 0.0157, 0.1583, 0.0291],\n         [0.9215, 0.5953, 0.1522, 0.5364],\n         ...,\n         [0.4322, 0.3452, 0.3073, 0.0810],\n         [0.8817, 0.5128, 0.2336, 0.4650],\n         [0.0209, 0.2736, 0.0437, 0.0845]]], grad_fn=&lt;SigmoidBackward0&gt;), auxiliary_outputs=None, last_hidden_state=tensor([[[ 3.0995e-01, -2.8195e-01,  1.3918e-01,  ..., -1.0474e+00,\n          -1.8078e-01, -1.4166e-01],\n         [ 5.0366e-01,  8.0006e-01,  1.0269e-01,  ..., -1.2190e-01,\n           2.0341e-04, -7.6179e-02],\n         [ 2.3062e-01, -3.1305e-01,  7.1144e-01,  ..., -8.3987e-01,\n           9.5993e-02,  3.7449e-01],\n         ...,\n         [ 4.6039e-01, -2.7041e-01,  8.5784e-02,  ..., -8.2888e-01,\n           2.8623e-02,  2.5036e-01],\n         [ 2.2030e-01, -5.3533e-01,  1.1861e+00,  ..., -8.5282e-01,\n           1.3450e-01,  4.5381e-02],\n         [-7.1936e-02,  4.1854e-01,  2.4578e-01,  ..., -4.6031e-01,\n          -1.7375e-02,  6.2242e-01]]], grad_fn=&lt;NativeLayerNormBackward0&gt;), decoder_hidden_states=None, decoder_attentions=None, cross_attentions=None, encoder_last_hidden_state=tensor([[[-0.3355,  0.4098, -0.4113,  ..., -0.5291,  0.4614,  0.3075],\n         [ 0.1341,  0.4465, -0.1237,  ...,  0.2310,  0.1609,  0.2928],\n         [ 0.0802,  0.4274, -0.0941,  ...,  0.1417,  0.1202,  0.2076],\n         ...,\n         [ 0.0189,  0.3260,  0.0940,  ...,  0.2572,  0.0996,  0.4894],\n         [ 0.1347,  0.4065,  0.0926,  ...,  0.5180,  0.0742,  0.3520],\n         [-0.0438,  0.2280,  0.0611,  ..., -0.2758,  0.0559,  0.2397]]],\n       grad_fn=&lt;NativeLayerNormBackward0&gt;), encoder_hidden_states=None, encoder_attentions=None)\n\n\nNice!\nIt looks like it worked!\nOur model processed our random_sample_preprocessed_image_only[\"pixel_values\"] and returned a ConditionalDetrObjectDetectionOutput object as output.\nLet‚Äôs inspect the keys() method of this output and see what they are.\n\n# Check the keys of the output\nrandom_sample_outputs.keys()\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'encoder_last_hidden_state'])\n\n\nBreaking these down:\n\nlogits - The raw outputs from the model, these are the classification logits we can later apply a softmax function/sigmoid function to to get prediction probabilties.\npred_boxes - Normalized box coordinates in CXCYWH ((center_x, center_y, width, height)) format.\nlast_hidden_state - Last hidden state of the last decoder layer of the model.\nencoder_last_hidden_state - Last hidden state of the last encoder layer of the model.\n\nHow about we inspect the shape attribute of the logits?\n\n# Inspect logits output shape\noutput_logits = random_sample_outputs.logits\nprint(f\"[INFO] Output logits shape: {output_logits.shape} -&gt; [1 image, 300 boxes, 7 classes]\")\n\n[INFO] Output logits shape: torch.Size([1, 300, 7]) -&gt; [1 image, 300 boxes, 7 classes]\n\n\nNice!\nWe get an output from our model that coincides with the shape of our data.\nThe final value of 7 in the output_logits tensor is equivalent to the number of classes we have.\nAnd the 300 is the number of boxes our model predicts for each image (this is defined by the num_queries parameter of the transformers.ConditionalDetrConfig, where num_queries=300 is the default).\n\n# Inspect predicted boxes output shape\noutput_pred_boxes = random_sample_outputs.pred_boxes\nprint(f\"[INFO] Output predicted boxes shape: {output_pred_boxes.shape} -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\")\n\n[INFO] Output predicted boxes shape: torch.Size([1, 300, 4]) -&gt; [1 image, 300 boxes, 4 coordinates (center_x, center_y, width, height)]\n\n\nReading the documentation for the forward method, we can determine the output format of our models predicted boxes:\n\nReturns:\npred_boxes (torch.FloatTensor of shape (batch_size, num_queries, 4)) ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding). You can use post_process_object_detection() to retrieve the unnormalized bounding boxes.\n\nThis is good to know!\nIt means that the raw output boxes from our model come in normalized CXCYWH format (see Table¬†1 for more).\nHow about we inspect a single box?\n\n# Single example predicted bounding box coordinates\nprint(f\"[INFO] Example output box: {output_pred_boxes[:, 0, :][0].detach()} -&gt; (center_x, center_y, width, height)\")\n\n[INFO] Example output box: tensor([0.7720, 0.7841, 0.4369, 0.4181]) -&gt; (center_x, center_y, width, height)\n\n\nExcellent!\nWe can process these boxes and logits later on into different formats using the transformers.ConditionalDetrImageProcessor.post_process_object_detection method.\nFor now, let‚Äôs figure out how to preprocess our annotations."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#preprocessing-our-annotations",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#preprocessing-our-annotations",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "9 Preprocessing our annotations",
    "text": "9 Preprocessing our annotations\nOne of the most tricky parts of any machine learning problem is getting your data in the right format.\nWe‚Äôve done it for our images.\nNow let‚Äôs do it for our annotations.\n\n9.1 Trying to preprocess a single annotation\nRecall in a previous section we tried to preprocess a single image and its annotation.\nAnd we got an error.\nLet‚Äôs make sure we‚Äôre not crazy and this is still the case.\n\n# Preprocess a single image and annotation pair\nimage_processor.preprocess(\n    images=random_sample[\"image\"], \n    annotations=random_sample[\"annotations\"]\n)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[32], line 2\n      1 # Preprocess a single image and annotation pair\n----&gt; 2 image_processor.preprocess(\n      3     images=random_sample[\"image\"], \n      4     annotations=random_sample[\"annotations\"]\n      5 )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/models/conditional_detr/image_processing_conditional_detr.py:1422, in ConditionalDetrImageProcessor.preprocess(self, images, annotations, return_segmentation_masks, masks_path, do_resize, size, resample, do_rescale, rescale_factor, do_normalize, do_convert_annotations, image_mean, image_std, do_pad, format, return_tensors, data_format, input_data_format, pad_size, **kwargs)\n   1420 format = AnnotationFormat(format)\n   1421 if annotations is not None:\n-&gt; 1422     validate_annotations(format, SUPPORTED_ANNOTATION_FORMATS, annotations)\n   1424 if (\n   1425     masks_path is not None\n   1426     and format == AnnotationFormat.COCO_PANOPTIC\n   1427     and not isinstance(masks_path, (pathlib.Path, str))\n   1428 ):\n   1429     raise ValueError(\n   1430         \"The path to the directory containing the mask PNG files should be provided as a\"\n   1431         f\" `pathlib.Path` or string object, but is {type(masks_path)} instead.\"\n   1432     )\n\nFile ~/miniconda3/envs/ai/lib/python3.11/site-packages/transformers/image_utils.py:851, in validate_annotations(annotation_format, supported_annotation_formats, annotations)\n    849 if annotation_format is AnnotationFormat.COCO_DETECTION:\n    850     if not valid_coco_detection_annotations(annotations):\n--&gt; 851         raise ValueError(\n    852             \"Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts \"\n    853             \"(batch of images) with the following keys: `image_id` and `annotations`, with the latter \"\n    854             \"being a list of annotations in the COCO format.\"\n    855         )\n    857 if annotation_format is AnnotationFormat.COCO_PANOPTIC:\n    858     if not valid_coco_panoptic_annotations(annotations):\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: `image_id` and `annotations`, with the latter being a list of annotations in the COCO format.\n\n\n\nWonderful!\nWe‚Äôre not crazy‚Ä¶\nBut we still get an error:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nIn this section, we‚Äôre going to fix it.\n\n\n9.2 Discussing the format our annotations need to be in\nAccording the error we got in the previous segment, the transformers.ConditionalDetrImageProcessor.preprocess method expects input annotations in COCO format.\nIn the documentation we can read that the annotations parameter taks in a list of dictionaries with the following keys:\n\n\"image_id\" (int): The image id.\n\"annotations\" (List[Dict]): List of annotations for an image. Each annotation should be a dictionary. An image can have no annotations, in which case the list should be empty.\n\nAs for the \"annotations\" field, this should be a list of dictionaries containing individual annotations in COCO format:\n# COCO format, see: https://cocodataset.org/#format-data  \n[{\n    \"image_id\": 42,\n    \"annotations\": [{\n        \"id\": 123456,\n        \"category_id\": 1,\n        \"iscrowd\": 0,\n        \"segmentation\": [\n            [42.0, 55.6, ... 99.3, 102.3]\n        ],\n        \"image_id\": 42, # this matches the 'image_id' field above\n        \"area\": 135381.07,\n        \"bbox\": [523.70,\n                 545.09,\n                 402.79,\n                 336.11]\n    },\n    # Next annotation in the same format as the previous one (one annotation per dict).\n    # For example, if an image had 4 bounding boxes, there would be a list of 4 dictionaries\n    # each containing a single annotation.\n    ...]\n}]\nLet‚Äôs breakdown each of the fields in the COCO annotation:\n\n\n\nTable¬†4: COCO data format keys breakdown\n\n\n\n\n\n\n\n\n\n\n\nField\nRequirement\nData Type\nDescription\n\n\n\n\nimage_id (top-level)\nRequired\nInteger\nID of the target image.\n\n\nannotations\nRequired\nList[Dict]\nList of dictionaries with one box annotation per dict. Can be empty if there are no boxes.\n\n\nid\nNot required\nInteger\nID of the particular annotation.\n\n\ncategory_id\nRequired\nInteger\nID of the class the box relates to (e.g.¬†{0: 'bin', 1: 'hand', 2: 'not_bin', 3: 'not_hand', 4: 'not_trash', 5: 'trash'}).\n\n\nsegmentation\nNot required\nList or None\nSegmentation mask related to an annotation instance. Focus is on boxes, not segmentation.\n\n\nimage_id (inside annotations field)\nRequired\nInteger\nID of the target image the particular box relates to, should match image_id on the top-level field.\n\n\narea\nNot required\nFloat\nArea of the target bounding box (e.g.¬†box height * width).\n\n\nbbox\nRequired\nList[Float]\nCoordinates of the target bounding box in XYWH ([x, y, width, height]) format. (x, y) are the top left corner coordinates, width and height are dimensions.\n\n\nis_crowd\nNot required\nInt\nBoolean flag (0 or 1) to indicate whether or not an object is multiple (a crowd) of the same thing. For example, a crowd of ‚Äúpeople‚Äù or a group of ‚Äúapples‚Äù rather than a single apple.\n\n\n\n\n\n\nAnd now our annotation data comes in the format:\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 292,\n 'annotations': {'file_name': ['00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg',\n   '00347467-13f1-4cb9-94aa-4e4369457e0c.jpeg'],\n  'image_id': [292, 292],\n  'category_id': [1, 0],\n  'bbox': [[523.7000122070312,\n    545.0999755859375,\n    402.79998779296875,\n    336.1000061035156],\n   [10.399999618530273,\n    163.6999969482422,\n    943.4000244140625,\n    1101.9000244140625]],\n  'iscrowd': [0, 0],\n  'area': [135381.078125, 1039532.4375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\nHow about we write some code to convert our current annotation format to COCO format?\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs common practice to get a dataset in a certain format and then have to preprocess it into another format before you can use it with a model.\nWe‚Äôre getting hands-on and practicing here so when it comes to working on converting another dataset, you‚Äôve already had some practice.\n\n\n\n\n9.3 Creating dataclasses to represent the COCO bounding box format\nLet‚Äôs write some code to transform our existing annotation data into the format required by transformers.ConditionalDetrImageProcessor.preprocess.\nWe‚Äôll start by creating two Python dataclasses to house our desired COCO annotation format.\nTo do this we‚Äôll:\n\nCreate SingleCOCOAnnotation which contains the format structure of a single COCO annotation.\nCreate ImageCOCOAnnotations which contains all of the annotations for a given image in COCO format. This may be a single instance of SingleCOCOAnnotation or multiple.\n\nWe‚Äôll decorate both of these with the @dataclass decorator.\nUsing a @dataclass gives several benefits:\n\nType hints - we can define the types of objects we want in the class definition, for example, we want image_id to be an int.\nHelpful built-in methods - we can use methods such as asdict to convert our @dataclass into a dictionary (COCO wants lists of dictionaries).\nData validation - we can use methods such as __post_init__ to run checks on our @dataclass as it‚Äôs initialized, for example, we always want the length of bbox to be 4 (bounding box coordinates in XYWH format).\n\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n# 1. Create a dataclass for a single COCO annotation\n@dataclass\nclass SingleCOCOAnnotation:\n    \"\"\"An instance of a single COCO annotation. \n    \n    Represent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \n    in an image. \n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotation belongs to.\n        category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n        bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n        area: Area of the target bounding box. Defaults to 0.0.\n        iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n            apples rather than a single apple. Defaults to 0.\n    \"\"\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n    area: float = 0.0\n    iscrowd: int = 0\n\n    # Make sure the bbox is always a list of 4 values (XYWH format)\n    def __post_init__(self):\n        if len(self.bbox) != 4:\n            raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\n\n# 2. Create a dataclass for a collection of COCO annotations for a single image\n@dataclass\nclass ImageCOCOAnnotations:\n    \"\"\"A collection of COCO annotations for a single image_id.\n\n    Attributes:\n        image_id: Unique integer identifier for the image which the annotations belong to.\n        annotations: List of SingleCOCOAnnotation instances.\n    \"\"\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\nBeautiful!\nLet‚Äôs now inspect our SingleCOCOAnnotation dataclass.\nWe can use the SingleCOCOAnnotation? syntax to view the docstring of the class.\n\n# One of the benefits of using a dataclass is that we can inspect the attributes with the `?` syntax\nSingleCOCOAnnotation?\n\nInit signature:\nSingleCOCOAnnotation(\n    image_id: int,\n    category_id: int,\n    bbox: List[float],\n    area: float = 0.0,\n    iscrowd: int = 0,\n) -&gt; None\nDocstring:     \nAn instance of a single COCO annotation. \n\nRepresent a COCO-formatted (see: https://cocodataset.org/#format-data) single instance of an object \nin an image. \n\nAttributes:\n    image_id: Unique integer identifier for the image which the annotation belongs to.\n    category_id: Integer identifier for the target object label/category (e.g. \"0\" for \"bin\").\n    bbox: List of floats containing target bounding box coordinates in absolute XYWH format ([x_top_left, y_top_left, width, height]).\n    area: Area of the target bounding box. Defaults to 0.0.\n    iscrowd: Boolean flag (0 or 1) indicating whether the target is a crowd of objects, for example, a group of \n        apples rather than a single apple. Defaults to 0.\nType:           type\nSubclasses:     \n\n\nWe can also see the error handling of our __post_init__ method in action by trying to create an instance of SingleCOCOAnnotation with an incorrect number of bbox values.\n\n# Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100]) # missing a 4th value\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[35], line 2\n      1 # Let's try our SingleCOCOAnnotation dataclass (this will error since the bbox doesn't have 4 values)\n----&gt; 2 SingleCOCOAnnotation(image_id=42, \n      3                      category_id=0, \n      4                      bbox=[100, 100, 100]) # missing a 4th value\n\nFile &lt;string&gt;:8, in __init__(self, image_id, category_id, bbox, area, iscrowd)\n\nCell In[33], line 29, in SingleCOCOAnnotation.__post_init__(self)\n     27 def __post_init__(self):\n     28     if len(self.bbox) != 4:\n---&gt; 29         raise ValueError(f\"bbox must contain exactly 4 values, current length: {len(self.bbox)}\")\n\nValueError: bbox must contain exactly 4 values, current length: 3\n\n\n\nAnd now if we pass the correct number of values to our SingleCOCOAnnotation, it should work.\n\nSingleCOCOAnnotation(image_id=42, \n                     category_id=0, \n                     bbox=[100, 100, 100, 100]) # correct number of values\n\nSingleCOCOAnnotation(image_id=42, category_id=0, bbox=[100, 100, 100, 100], area=0.0, iscrowd=0)\n\n\n\n\n9.4 Creating a function to format our annotations as COCO format\nNow we‚Äôve got the COCO data format in our SingleCOCOAnnotation and ImageCOCOAnnotation dataclasses, let‚Äôs write a function to take our existing image annotations and format them in COCO style.\nOur format_image_annotations_as_coco function will:\n\nTake in an image_id to represent a unique identifier for the image as well as lists of category integers, area values and bounding box coordinates.\nPerform a list comprehension on a zipped version of each category, area and bounding box coordinate value in the input lists creating an instance of SingleCOCOAnnotation as a dictionary (using the asdict method) each time, this will give us a list of SingleCOCOAnnotation formatted dictionaries.\nReturn a dictionary version of ImageCOCOAnnotations using asdict passing it the image_id as well as list of SingleCOCOAnnotation dictionaries from 2.\n\nWhy does our function take in lists of categories, areas and bounding boxes?\nBecause that‚Äôs the current format our existing annotations are in (how we downloaded them from Hugging Face in the beginning).\nLet‚Äôs do it!\n\n# 1. Take in a unique image_id as well as lists of categories, areas, and bounding boxes\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in XYWH format ([x_top_left, y_top_left, width, height])\n) -&gt; dict:\n    \"\"\"Formats lists of image annotations into COCO format.\n    \n    Takes in parallel lists of categories, areas, and bounding boxes and\n    then formats them into a COCO-style dictionary of annotations.\n\n    Args:\n        image_id: Unique integer identifier for an image.\n        categories: List of integer category IDs for each annotation.\n        areas: List of float areas for each annotation.\n        bboxes: List of tuples containing bounding box coordinates in XYWH format \n            ([x_top_left, y_top_left, width, height]).\n    \n    Returns:\n        A dictionary of image annotations in COCO format with the following structure:\n        {\n            \"image_id\": int,\n            \"annotations\": [\n                {\n                    \"image_id\": int,\n                    \"category_id\": int,\n                    \"bbox\": List[float],\n                    \"area\": float\n                },\n                ...more annotations here\n            ]\n        }\n    \n    Note:\n        All input lists much be the same length and in the same order.\n        Otherwise, there will be mismatched annotations.\n    \"\"\"\n    \n    # 2. Turn input lists into a list of dicts in SingleCOCOAnnotation format\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # 3. Return a of annotations with format {\"image_id\": ..., \"annotations\": [...]} (required COCO format)\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\nNice!\nHaving those pre-built dataclasses makes everything else fall into place.\nNow let‚Äôs try our format_image_annotations_as_coco function on a new not so random_sample (we‚Äôll make a random_sample with a known index for reproducibility).\nFirst, we‚Äôll remind ourselves what our random_sample looks like.\n\n# Create a not so random sample and inspect it \nrandom_sample = dataset[\"train\"][77]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 558,\n 'annotations': {'file_name': ['13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg',\n   '13df7e4a-1a5c-4da9-a5d3-204b6119670c.jpeg'],\n  'image_id': [558, 558, 558],\n  'category_id': [5, 0, 1],\n  'bbox': [[261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125]],\n  'iscrowd': [0, 0, 0],\n  'area': [39323.33984375, 500634.0, 187150.734375]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nOk wonderful, looks like we can extract the image_id, category_id bbox and area fields from our random_sample to get the required inputs to our format_image_annotations_as_coco function.\nLet‚Äôs try it out.\n\n# Extract image_id, categories, areas, and bboxes from the random sample\nrandom_sample_image_id = random_sample[\"image_id\"]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\n# Format the random sample annotations as COCO format\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=random_sample_image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 558,\n 'annotations': [{'image_id': 558,\n   'category_id': 5,\n   'bbox': [261.8999938964844, 734.5, 181.8000030517578, 216.3000030517578],\n   'area': 39323.33984375,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 0,\n   'bbox': [99.80000305175781, 215.1999969482422, 730.0, 685.7999877929688],\n   'area': 500634.0,\n   'iscrowd': 0},\n  {'image_id': 558,\n   'category_id': 1,\n   'bbox': [0.0, 769.2999877929688, 367.8999938964844, 508.70001220703125],\n   'area': 187150.734375,\n   'iscrowd': 0}]}\n\n\nWoohoo!\nLooks like we may have just fixed our ValueError from before:\n\nValueError: Invalid COCO detection annotations. Annotations must a dict (single image) or list of dicts (batch of images) with the following keys: image_id and annotations, with the latter being a list of annotations in the COCO format.\n\nOur COCO formatted annotations have the image_id and annotations keys and our annotations are a list of annotations in COCO format.\nPerfect!\n\n\n9.5 Preprocess a single image and set of COCO format annotations\nNow we‚Äôve preprocessed our annotations to be in COCO format, we can use them with transformers.ConditionalDetrImageProcessor.preprocess.\nLet‚Äôs pass our random_sample image and COCO formatted annotations to the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nThe default value for the parameter do_convert_annotations of the preprocess method is True.\nThis means our boxes will go into the preprocess method in absolute XYWH format (the format we downloaded them in) and will be returned in normalized CXCYWH (or (center_x, center_y, width, height)) format.\nWhenever you perform adjustments or preprocessing steps on your annotations, it‚Äôs always good to keep track of the format that they are in, otherwise it can lead to unexpected bugs later on.\n\n\n\n# Preprocess random sample image and assosciated annotations\nrandom_sample_preprocessed = image_processor.preprocess(images=random_sample[\"image\"],\n                                                        annotations=random_sample_coco_annotations,\n                                                        do_convert_annotations=True, # defaults to True, this will convert our annotations to normalized CXCYWH format\n                                                        return_tensors=\"pt\" # can return as tensors or not, \"pt\" returns as PyTorch tensors\n                                                        ) \n\nThe `max_size` parameter is deprecated and will be removed in v4.26. Please specify in `size['longest_edge'] instead`.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen processing our single image and annotation, you may see a warning similar to the following:\n\nThe max_size parameter is deprecated and will be removed in v4.26. Please specify in size['longest_edge'] instead.\n\nIf you are not using the max_size parameter and are using a version of transformers &gt; 4.26, you can ignore this or disable it (as shown below).\n\n\n\n# Optional: Disable warnings about `max_size` parameter being deprecated\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\nExcellent!\nIt looks like the preprocess method worked on our single sample.\nLet‚Äôs inspect the keys() method of our random_sample_preprocessed.\n\n# Check the keys of our preprocessed example\nrandom_sample_preprocessed.keys()\n\ndict_keys(['pixel_values', 'pixel_mask', 'labels'])\n\n\nWonderful, we get a preprocessed image and labels:\n\npixel_values = preprocessed pixels (the preprocessed image).\npixel_mask = whether or not to mask the pixels (e.g.¬†0 = mask, 1 = no mask, in our case, all values will be 1 since we want the model to see all pixels).\nlabels = preprocessed labels (the preprocessed annotations).\n\n\n# Inspect preprocessed image shape\nprint(f\"[INFO] Preprocessed image shape: {random_sample_preprocessed['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Preprocessed image shape: torch.Size([1, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nSince we only passed a single sample to preprocess, we get back a batch size of 1.\nNow how do our labels look?\n\n# Inspect the preprocessed labels (our boxes and other metadata)\npprint(random_sample_preprocessed[\"labels\"])\n\n[{'area': tensor([  9830.8350, 125158.5000,  46787.6836]),\n  'boxes': tensor([[0.3675, 0.6583, 0.1894, 0.1690],\n        [0.4842, 0.4360, 0.7604, 0.5358],\n        [0.1916, 0.7997, 0.3832, 0.3974]]),\n  'class_labels': tensor([5, 0, 1]),\n  'image_id': tensor([558]),\n  'iscrowd': tensor([0, 0, 0]),\n  'orig_size': tensor([1280,  960]),\n  'size': tensor([640, 480])}]\n\n\nLet‚Äôs break this down:\n\narea - An array/tensor of floats containing the area (box_width * box_height) of our boxes.\nboxes - An array/tensor containing all of the bounding boxes for our image in normalized CXCYWH ((center_x, center_y, width, height)) format.\nclass_labels - An array/tensor of integer labels assosciated with each box (e.g.¬†tensor([5, 1, 0, 0, 4]) -&gt; ['trash', 'hand', 'bin', 'bin', 'not_trash']).\nimage_id - A unique integer identifier for our target image.\nis_crowd - An array/tensor of a boolean value (0 or 1) for whether an annotation is a group or not.\norig_size - An array/tensor containing the original size in (height, width) format (this is important for drawing conversion factors when using originally sized images).\nsize - An array/tensor with the current size in (height, width) format of the processed image tensor contained within random_sample_preprocessed[\"pixel_values\"].\n\nWoohoo!\nWe‚Äôve done it!\nWe‚Äôve officially preprocessed a single sample of our own data, both the image and its annotation pair.\nWe‚Äôll write some code later on to scale this up to our whole dataset.\nFor now, let‚Äôs see what it looks like postprocessing a single output."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#postprocessing-a-single-output",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#postprocessing-a-single-output",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "10 Postprocessing a single output",
    "text": "10 Postprocessing a single output\nWe‚Äôve got our inputs processed and successfully passed them through our model.\nHow about we postprocess the outputs of our model?\nDoing so will make our model‚Äôs outputs far more usable."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#going-end-to-end-on-a-single-sample",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#going-end-to-end-on-a-single-sample",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "11 Going end-to-end on a single sample",
    "text": "11 Going end-to-end on a single sample\nWhen working on a new problem or with a custom dataset and an existing model, it‚Äôs good practice to go end-to-end on a single sample.\nFor example, preprocess one of your samples, pass it through the model and then postprocess it (just like we‚Äôre in the middle of doing here).\nBeing able to go end-to-end on a single sample will help you see the overall process and discover any bugs that may hinder you later on."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#aside-bounding-box-formats-in-and-out-of-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "12 Aside: Bounding box formats in and out of our model",
    "text": "12 Aside: Bounding box formats in and out of our model\nWe‚Äôve done a fair bit of data transformation to get our data ready to go into our model and we‚Äôve also taken a fair few steps to postprocess it into a usable format.\nThis is often a standard practice in many machine learning workflows.\nMuch of the work before ever training a model is preparing the data for the model.\nAnd much of the work after training a model is preparing the data for your use case.\nThe following table highlights the different states our bounding boxes go in and out of.\nTK image - turn this into a nice image of the workflow\n\n\n\nStep\nBox format\nScale\nGoes into\n\n\n\n\nStarting data (default downloaded from Hugging Face)\nXYWH or [x1, y1, width, height]\nAbsolute\npreprocess() method\n\n\nOut of preprocess()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\nmodel.forward()\n\n\nOut of model.forward()\nCXCYWH or [center_x, center_y, width, height]\nNormalized\npost_process_object_detection()\n\n\nOut of post_process_object_detection()\nXYXY or [x_top_left, y_top_left, x_bottom_right, y_bottom_right]\nAbsolute (in relation to the target_sizes parameter).\nPlotting or display function.\n\n\n\nKeeping track of these input and output formats is helpful for knowing the state of your data.\nBut remember, just because our current workflow is like this, doesn‚Äôt mean all future workflows you work on will have the same transformation steps."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---preparing-data-at-scale",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---preparing-data-at-scale",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "13 TK - Preparing data at scale",
    "text": "13 TK - Preparing data at scale\nWe‚Äôve performed preprocessing and postprocessing steps on a single data sample.\nHowever, in practice, we‚Äôll likely want to work with many more samples.\nOur model is hungry for more data.\nSo let‚Äôs step it up a notch and write some code that‚Äôs capable of preprocessing many samples to pass to our model.\nWe‚Äôll break it down into three subsections:\n\nSplitting the data into training, validation and test sets. We‚Äôll train our model on the training set and check its performance on the validation and test sets (our model won‚Äôt see any of these samples during training). We perform these splits before preprocessing the samples in them in case we‚Äôd like to perform different preprocessing steps depending on the split. For example, we may want to use data augmentation on the training set and not use it on the testing set.\nPreprocessing multiple samples at a time by iterating over groups of samples. Rather than preprocess a single sample at a time, we‚Äôll write code capable of processing lists of examples simultaneously.\nCollate samples into batches so our model can view multiple samples simultaneously. Rather than performing a forward pass on a single sample at a time, we‚Äôll pass batches of data to the model. For example, we may pass 32 samples (image and label pairs) at a time to our model for it to try and learn the patterns between them. We use batches of data rather than the whole dataset as it‚Äôs often much more memory efficient. If you have a really large dataset, all of your samples may not fit into memory at once, so in practice, you break it up into smaller batches of samples.\n\nLet‚Äôs start by splitting the data into different sets.\n\n13.1 Splitting the data into training and test sets\nRight now our data is all in one big group.\nHowever, it‚Äôs best practice to split our data into two (or three) different sets:\n\nTraining set (~70-80% of data) - This is the data the model will learn from, all samples in this set are seen by the model during training.\nValidation set (~5-20% of data) - This is the data we can fine-tune our model‚Äôs hyperparameters on, all samples in this set are not seen by the model during training.\nTest set (~5-20% of data) - This is the data we will evaluate what our model has learned after going through the training set, all samples in this set are not seen by the model during training.\n\nUsing the analogy of a student at univeristy, the training set would be the course materials throughout the semester, the validation set would be the practice exam and the test set would be the final exam.\nIf a student doesn‚Äôt perform well on the final exam, then we would usually say perhaps the course materials weren‚Äôt of the highest quality.\nThis is similar to our machine learning workflow.\nIn an ideal world, the samples in the training set are sufficiently representative of those in the test set and in turn, sufficiently representative of samples in the wild.\nBefore we split our dataset into different sets, let‚Äôs remind ourselves of what it looks like.\n\n# Original dataset (only a \"train\" split)\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 1128\n    })\n})\n\n\nWonderful! Right now, we‚Äôve only got one split, \"train\".\nTo make our required splits, we can call the train_test_split() method on our dataset and pass in the size of the split we‚Äôd like via the test_size parameter.\nFor example, test_size=0.3 means 30% of the data will go to the test set and 70% will go to the training set.\nWe‚Äôll make the following splits:\n\n70% of data to training set.\n~10% of data to validation set.\n~20% of data to testing set.\n\nTo do so, we‚Äôll call train_test_split() twice with different amounts:\n\nFirst on dataset[\"train\"] with test_size=0.3 to make the 70/30 training/test split, we‚Äôll save this split to the variable dataset_split.\nNext on dataset_split[\"test\"] with test_size=0.66 to make the 66/33 test/validation split, we‚Äôll set this variable to dataset_test_val_split.\n\nOnce we‚Äôve done this, we‚Äôll reassign all of the splits back to our original dataset.\nWe‚Äôll also set seed=42 for reproducibility.\nLet‚Äôs do it!\nTK image - make an image of these workflows to make it easier to understand\n\n# 1. Split the data into \"train\" and \"test\" splits\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\n\n# 2. Split the test split into \"test\" and \"validation\" splits\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.66, seed=42) # split the test set into 40/60 validation/test\n\n# Create \"train\" split from 1.\ndataset[\"train\"] = dataset_split[\"train\"]\n\n# Create a \"validation\" and \"test\" split from 2.\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\n# View the dataset (now with splits)\ndataset\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 115\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 224\n    })\n})\n\n\nPerfect!\nNow we‚Äôve got three splits of our dataset to work with.\nWe‚Äôll make sure our model never sees the validation and test splits during training, so when evaluate it we know that it‚Äôs only seeing new samples.\n\n\n13.2 TK - Writing a function for preprocessing multiple samples at a time\nUPTOHERE - preprocessing multiple samples at a time\nWe‚Äôve preprocessed and passed one sample through our model, new let‚Äôs do the same for multiple samples.\nWe‚Äôre going to work towards having a function that can go from a group or batch of samples (images and their annotations) and return them in preprocessed form (via transformers.ConditionalDetrImageProcessor.preprocess) ready to be used with our model.\nLet‚Äôs first remind ourselves of what a single unprocessed sample looks like.\n\n# Get one sample from the training dataset \none_sample = dataset[\"train\"][42]\none_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 663,\n 'annotations': {'file_name': ['1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg',\n   '1d2ea64a-0296-403d-93cd-31e3f116c995.jpeg'],\n  'image_id': [663, 663],\n  'category_id': [1, 5],\n  'bbox': [[413.29998779296875,\n    529.7000122070312,\n    343.6000061035156,\n    687.0999755859375],\n   [435.8999938964844, 463.0, 77.19999694824219, 99.9000015258789]],\n  'iscrowd': [0, 0],\n  'area': [236087.5625, 7712.27978515625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\nAwesome, we get an image in PIL.Image.Image form as well as a single dictionary of annotations.\nHow about if we were to inspect a group of three samples?\n\n# Get three samples from the training set\ngroup_of_samples = dataset[\"train\"][0:3]\n\n# Uncomment for full output (commented for brevity)\n# group_of_samples \n\n\n\nOutput of random_samples\n\nSignature:\n{'image': [&lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n  &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;],\n 'image_id': [69, 1027, 1092],\n 'annotations': [{'file_name': ['c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg',\n    'c56fee61-959c-44b8-ada2-807d2ff45f90.jpeg'],\n   'image_id': [69, 69, 69, 69, 69, 69, 69, 69],\n   'category_id': [5, 0, 1, 4, 4, 4, 4, 4],\n   'bbox': [[360.20001220703125, 528.5, 177.1999969482422, 261.79998779296875],\n    [298.29998779296875,\n     495.1000061035156,\n     381.1000061035156,\n     505.70001220703125],\n    [81.5999984741211,\n     592.0999755859375,\n     358.79998779296875,\n     316.29998779296875],\n    [1.2999999523162842,\n     776.7000122070312,\n     193.8000030517578,\n     211.89999389648438],\n    [301.1000061035156, 60.79999923706055, 146.89999389648438, 115.0],\n    [501.0, 75.9000015258789, 24.200000762939453, 71.19999694824219],\n    [546.4000244140625,\n     54.70000076293945,\n     130.3000030517578,\n     115.0999984741211],\n    [862.9000244140625,\n     41.099998474121094,\n     75.69999694824219,\n     80.19999694824219]],\n   'iscrowd': [0, 0, 0, 0, 0, 0, 0, 0],\n   'area': [46390.9609375,\n    192722.265625,\n    113488.4375,\n    41066.21875,\n    16893.5,\n    1723.0400390625,\n    14997.5302734375,\n    6071.14013671875]},\n  {'file_name': ['b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg',\n    'b664785b-f8b6-4dd2-9ede-d89c07564812.jpeg'],\n   'image_id': [1027, 1027, 1027, 1027, 1027],\n   'category_id': [5, 4, 1, 0, 0],\n   'bbox': [[378.29998779296875, 657.5, 139.8000030517578, 165.10000610351562],\n    [463.29998779296875, 754.5, 39.400001525878906, 30.299999237060547],\n    [451.20001220703125,\n     734.7999877929688,\n     109.19999694824219,\n     163.8000030517578],\n    [140.39999389648438, 400.29998779296875, 460.8999938964844, 491.5],\n    [2.299999952316284,\n     322.29998779296875,\n     201.6999969482422,\n     429.20001220703125]],\n   'iscrowd': [0, 0, 0, 0, 0],\n   'area': [23080.98046875,\n    1193.8199462890625,\n    17886.9609375,\n    226532.34375,\n    86569.640625]},\n  {'file_name': ['d822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg',\n    'd822c383-f53a-4a2e-b2f2-3eac55c0e515.jpeg'],\n   'image_id': [1092, 1092, 1092, 1092],\n   'category_id': [2, 5, 1, 0],\n   'bbox': [[97.80000305175781, 93.30000305175781, 177.5, 101.5999984741211],\n    [342.20001220703125, 572.5999755859375, 350.0, 344.20001220703125],\n    [185.1999969482422, 803.0, 304.3999938964844, 371.6000061035156],\n    [219.39999389648438, 259.1000061035156, 598.7000122070312, 584.5]],\n   'iscrowd': [0, 0, 0, 0],\n   'area': [18034.0, 120470.0, 113115.0390625, 349940.15625]}],\n 'label_source': ['manual_prodigy_label',\n  'manual_prodigy_label',\n  'manual_prodigy_label'],\n 'image_source': ['manual_taken_photo',\n  'manual_taken_photo',\n  'manual_taken_photo']}\n\nOkay, now we get a list of image objects as well as a list of annotation dictionaries and more in the format:\n{\n    \"image\": [&lt;PIL.Image.Image&gt;, &lt;PIL.Image.Image&gt;, ...],\n    \"image_id\": [int, int, ...],\n    \"annotations\": [\n        {\n            \"file_name\": [str, str, ...],\n            \"image_id\": [int, int, ...],\n            \"category_id\": [int, int, ...],\n            \"bbox\": [[float, float, float, float], ...],\n            \"iscrowd\": [int, int, ...],\n            \"area\": [float, float, ...]\n        },\n        {...},\n        {...}\n    ],\n    \"label_source\": [str, str, ...],\n    \"image_source\": [str, str, ...]\n}\nKnowing this structure, we‚Äôll want to write a function capable of taking it as input and then preparing it for the preprocess method.\n\n\n\n\n\n\nNote\n\n\n\nOur data is in this structure (a dictionary of lists, rather than a list of dictionaries) because it is built on Hugging Face Datasets and Hugging Face Datasets is built on Apache Arrow.\nAnd Apache Arrow is column-orientated in nature.\nSo instead of our dataset being represented as many rows (list of dictionaries), it is represented as many columns (dictionary of lists).\n\n\nThe preprocess method expects a list of images as well as COCO formatted annotations as input.\nSo to create our preprocess_batch function we‚Äôll:\n\nTake in a list of examples (these will be in the format above), an image_processor and optional transforms (we don‚Äôt need to pass these in for now but it‚Äôs good to have the option).\nCreate empty lists of images and coco_annotations we‚Äôll fill throughout the rest of the function.\nExtract the image, image_id and annotations_dict from our list of input examples.\nCreate lists of annotations attributes such as bbox, category_id and area (these are required for our format_image_annotations_as_coco function.\nOptionally perform transforms/augmentations on the image and related boxes (because in object detection if you transform an image, should transform the related boxes as well).\nConvert the annotations into COCO format using the format_image_annotations_as_coco helper function we created earlier.\nAppend the images and COCO formatted annotations to the empty lists created in 2.\nPass the list of images and COCO formatted annotations to the image_processor.preprocess method to get the preprocessed batch.\nReturn the preprocessed batch.\n\nLet‚Äôs do it!\n\n# 1. Take in a list of examples, image processor and optional transforms\ndef preprocess_batch(examples, \n                     image_processor,\n                     transforms=None, # Note: Could optionally add transforms (e.g. data augmentation) here \n                     ):\n    \"\"\"\n    Preprocesses a batch of image data with annotations for object detection models.\n\n    This function takes a batch of examples in a custom dataset format, extracts images and\n    their corresponding annotations, and converts them into a format suitable for model training\n    or inference using the provided image processor.\n\n    Args:\n        examples (dict): A dictionary containing the batch data with the following structure:\n            - \"image\" (List[PIL.Image.Image]): List of PIL Image objects\n            - \"image_id\" (List[int]): List of unique image identifiers\n            - \"annotations\" (List[dict]): List of annotation dictionaries, where each contains:\n                - \"file_name\" (List[str]): List of image filenames\n                - \"image_id\" (List[int]): List of image identifiers\n                - \"category_id\" (List[int]): List of object category IDs\n                - \"bbox\" (List[List[float]]): List of bounding boxes as [x, y, width, height]\n                - \"iscrowd\" (List[int]): List of crowd indicators (0 or 1)\n                - \"area\" (List[float]): List of object areas\n            - \"label_source\" (List[str]): List of label sources\n            - \"image_source\" (List[str]): List of image sources\n\n        image_processor: An image processor object to preprocess images for model input.\n            For example, can be `transformers.ConditionalDetrImageProcessor`.\n\n        transforms (optional): Image and annotations transforms for data augmentation.\n            Defaults to None.\n\n    Returns:\n        dict: Preprocessed batch with images and annotations converted to tensors\n            in the format required for a `transformers.ConditionalDetrForObjectDetection` model.\n\n    Note:\n        The `format_image_annotations_as_coco` function converts the input annotation format to COCO\n        format before applying the image_processor. This is required as the image_processor is designed\n        to handle COCO format annotations. \n    \"\"\"\n    # 2. Create empty lists to store images and annotations\n    images = []\n    coco_annotations = [] \n\n    # 3. Extract the image, image_id and annotations from the examples\n    for image, image_id, annotations_dict in zip(examples[\"image\"], \n                                                 examples[\"image_id\"], \n                                                 examples[\"annotations\"]):\n\n        # 4. Create lists of annotation attributes\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n\n        ###\n        # 5. Note: Could optionally apply a transform/augmentation here.\n        if transforms:\n            # Perform transform on image/boxes\n            pass\n        ###\n\n        # 6. Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # 7. Add images/annotations to their respective lists\n        images.append(image) # Note: may need to open image if it is an image path rather than PIL.Image\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # 8. Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\")\n\n    # 9. Return the preprocessed batch\n    return preprocessed_batch\n\nNice!\nNow how about we test it out on our group_of_samples?\n\npreprocessed_samples = preprocess_batch(examples=group_of_samples,\n                                        image_processor=image_processor)\n\npreprocessed_samples.keys()\n\ndict_keys(['pixel_values', 'pixel_mask', 'labels'])\n\n\nPerfect, we get the same keys() as with our single sample.\nExcept this time, we‚Äôve got multiple samples, let‚Äôs check the shape.\n\n# Check the shape of our preprocessed samples\nprint(f\"[INFO] Shape of preprocessed samples: {preprocessed_samples['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Shape of preprocessed samples: torch.Size([3, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\nWonderful, our batch of three samples have been preprocessed and are ready for input to our model.\n\n\n13.3 Applying our preprocessing function to each data split\nWe‚Äôve seen our preprocess_batch function in action on a small group of samples.\nNow let‚Äôs apply it to our different data splits.\nTo do so, we can call the with_transform() method on our target dataset split and pass it our desired transform.\nUsing with_transform() means our transformations will be applied on-the-fly when we call on our split datasets.\nBecause the with_transform() method expects a callable with a single argument (the input examples), we‚Äôll turn our preprocess_batch into a Python partial function.\nDoing this will mean we can prefill the image_processor and optionally the transforms parameter of our preprocess_batch function meaning it will only take examples as input, this is inline with the with_transform() method.\n\n# Create a partial function for preprocessing\nfrom functools import partial\n\n# Note: Could create separate preprocess functions with different inputs depending on the split \n# (e.g. use data augmentation on training but not on validation/test)\npreprocess_batch_partial = partial(preprocess_batch,\n                                   image_processor=image_processor,\n                                   transforms=None) # could use transforms here if wanted\n\n# Inspect the preprocess_batch_partial function\n# preprocess_batch_partial\n\nBeautiful, now let‚Äôs pass the preprocess_batch_partial function to the with_transform() method on each of our data splits.\n\n# Create a copy of the original dataset \n# (we don't need to do this, this is just so we can inspect the original dataset later on)\nprocessed_dataset = dataset.copy()\n\n# Apply the preprocessing function to the datasets (the preprocessing will happen on the fly, e.g. when the dataset is called rather than in-place)\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(transform=preprocess_batch_partial)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(transform=preprocess_batch_partial)\n\nNow when we get (via __getitem__) one of our samples from a processed_dataset split, it will be preprocessed on the fly.\n\n# Get an item from the dataset (in will be preprocessed as we get it)\nprocessed_dataset[\"train\"][42]\n\n{'pixel_values': tensor([[[-1.7583, -1.1247, -1.0390,  ..., -0.6965, -0.7822, -0.4568],\n          [-0.9877, -1.4158, -0.9363,  ..., -0.3712, -0.1143, -0.0801],\n          [-0.9363, -0.9877, -1.0048,  ...,  0.9646,  0.3652, -0.1828],\n          ...,\n          [ 0.0398, -0.7479, -1.1418,  ..., -0.9192, -1.1075, -1.3987],\n          [-0.0116,  0.2796, -1.0733,  ..., -1.3644, -1.4843, -1.1760],\n          [-0.7308,  0.1939, -0.7479,  ..., -1.2274, -1.6555, -1.4672]],\n \n         [[-1.6155, -0.9678, -0.8978,  ..., -0.6176, -0.7227, -0.3550],\n          [-0.8277, -1.2829, -0.7927,  ..., -0.2850, -0.0399,  0.0126],\n          [-0.7927, -0.8452, -0.8803,  ...,  1.0805,  0.4503, -0.0924],\n          ...,\n          [ 0.0476, -0.7752, -1.1954,  ..., -0.7402, -0.8978, -1.1429],\n          [-0.0224,  0.2402, -1.1429,  ..., -1.1779, -1.2129, -0.8803],\n          [-0.7752,  0.1527, -0.8277,  ..., -0.9853, -1.3529, -1.1429]],\n \n         [[-1.6476, -1.0376, -1.0724,  ..., -1.0550, -1.1944, -1.0027],\n          [-0.9678, -1.3513, -1.0376,  ..., -0.7587, -0.5495, -0.6193],\n          [-0.9504, -1.0027, -1.1421,  ...,  0.6008, -0.1138, -0.7064],\n          ...,\n          [-0.4101, -0.9504, -1.2467,  ..., -1.1596, -1.2119, -1.4733],\n          [-0.5321, -0.0615, -1.2119,  ..., -1.5081, -1.5604, -1.2990],\n          [-1.1944, -0.2532, -0.9156,  ..., -1.4210, -1.7522, -1.5779]]]),\n 'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([663]), 'class_labels': tensor([1, 5]), 'boxes': tensor([[0.6095, 0.6822, 0.3579, 0.5368],\n         [0.4943, 0.4007, 0.0804, 0.0780]]), 'area': tensor([59021.8906,  1928.0699]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\nAnd the same happens when we get multiple (a batch) samples!\n\n# Now when we call one or more of our samples, the preprocessing will take place\nbatch_size_to_get = 32\nprint(f\"[INFO] Shape of preprocessed images: {processed_dataset['train'][:batch_size_to_get]['pixel_values'].shape} -&gt; [batch_size, colour_channels, height, width]\")\n\n[INFO] Shape of preprocessed images: torch.Size([32, 3, 640, 480]) -&gt; [batch_size, colour_channels, height, width]\n\n\n\n# We can pass these straight to our model! (note: may take a while if it's on CPU)\n# model(processed_dataset[\"train\"][:batch_size_to_get][\"pixel_values\"]) # uncomment to view output\n\n\n\n13.4 Creating a collation function\nWe now preprocess multiple samples at once.\nTime to create a collation function which will tell our model trainer how to stack these samples together into batches.\nWe do this because processing more samples at once (e.g.¬†32 samples in a batch) in a batch is generally more efficient than one sample at a time or trying to process all samples at once.\nOur collation function will be used for the data_collator parameter in our transformers.Trainer instance later on.\nThe input to our data collation function will be the output of image_processor.preprocess() (a preprocessed sample).\nAnd the output will be passed as a batch (we‚Äôll define the batch size later on) to our model‚Äôs forward() method.\n\n\n\n\n\n\nNote\n\n\n\nWhat batch size should I use?\nYou should generally use the batch size which uses the maximum amount of GPU memory you have.\nFor example, if you have 16GB of GPU memory and a batch size of 32 only uses 8GB of that memory, you should try doubling the batch size to 64.\nThe ideal batch size for a given dataset/model/hardware is often discovered in an iterative process.\n\n\n\nfrom typing import List, Dict, Any\n\ndef data_collate_function(preprocessed_batch: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    \"\"\"Stacks together groups of preprocessed samples into batches for our model.\n\n    Args:\n        preprocessed_batch: A list of dictionaries where each dictionary represnets a preprocessed sample.\n\n    Returns:\n        collated_data: A dictionary containing the batched data ready in the format our model\n            is expecting. The dictionary has the following keys: \n                - \"pixel_values\": A stacked tensor of preprocessed pixel values.\n                - \"labels\": A list of label dictionaries.\n                - \"pixel_mask\": (Optional) A stacked tensor of pixel masks (this will be present \n                    only if the input contains a \"pixel_mask\" key.\n    \"\"\"\n    # Create an empty dictionary (our model wants a dictionary input) \n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in preprocessed_batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in preprocessed_batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in preprocessed_batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in preprocessed_batch])\n\n    return collated_data\n\nExcellent! Now let‚Äôs try out our data collation function.\n\n%%time\n\n# Try data_collate_function \nexample_collated_data_batch = data_collate_function(processed_dataset[\"train\"].select(range(32)))\nexample_collated_data_batch.keys()\n\nCPU times: user 2.95 s, sys: 347 ms, total: 3.3 s\nWall time: 1.68 s\n\n\ndict_keys(['pixel_values', 'labels', 'pixel_mask'])\n\n\nPerfect! Looks like it worked. We‚Äôve now got a batch of preprocessed images and label pairs.\nLet‚Äôs check the shapes.\n\n# Check shapes of batched preprocessed samples\nprint(f\"[INFO] Batch of pixel value shapes: {example_collated_data_batch['pixel_values'].shape}\")\nprint(f\"[INFO] Batch of labels: {example_collated_data_batch['labels']}\")\nif \"pixel_mask\" in example_collated_data_batch:\n    print(f\"[INFO] Batch of pixel masks: {example_collated_data_batch['pixel_mask'].shape}\")\n\n[INFO] Batch of pixel value shapes: torch.Size([32, 3, 640, 480])\n[INFO] Batch of labels: [{'size': tensor([640, 480]), 'image_id': tensor([69]), 'class_labels': tensor([5, 0, 1, 4, 4, 4, 4, 4]), 'boxes': tensor([[0.4675, 0.5152, 0.1846, 0.2045],\n        [0.5092, 0.5843, 0.3970, 0.3951],\n        [0.2719, 0.5861, 0.3738, 0.2471],\n        [0.1023, 0.6896, 0.2019, 0.1655],\n        [0.3902, 0.0924, 0.1530, 0.0898],\n        [0.5345, 0.0871, 0.0252, 0.0556],\n        [0.6370, 0.0877, 0.1357, 0.0899],\n        [0.9383, 0.0634, 0.0789, 0.0627]]), 'area': tensor([11597.7402, 48180.5664, 28372.1094, 10266.5547,  4223.3750,   430.7600,\n         3749.3826,  1517.7850]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1027]), 'class_labels': tensor([5, 4, 1, 0, 0]), 'boxes': tensor([[0.4669, 0.5782, 0.1456, 0.1290],\n        [0.5031, 0.6013, 0.0410, 0.0237],\n        [0.5269, 0.6380, 0.1138, 0.1280],\n        [0.3863, 0.5047, 0.4801, 0.3840],\n        [0.1074, 0.4195, 0.2101, 0.3353]]), 'area': tensor([ 5770.2451,   298.4550,  4471.7402, 56633.0859, 21642.4102]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1092]), 'class_labels': tensor([2, 5, 1, 0]), 'boxes': tensor([[0.1943, 0.1126, 0.1849, 0.0794],\n        [0.5387, 0.5818, 0.3646, 0.2689],\n        [0.3515, 0.7725, 0.3171, 0.2903],\n        [0.5404, 0.4307, 0.6236, 0.4566]]), 'area': tensor([ 4508.5000, 30117.5000, 28278.7598, 87485.0391]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([228]), 'class_labels': tensor([0]), 'boxes': tensor([[0.5187, 0.5418, 0.4982, 0.5698]]), 'area': tensor([87218.0078]), 'iscrowd': tensor([0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([511]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5284, 0.5886, 0.2903, 0.3347],\n        [0.7784, 0.7873, 0.4400, 0.4222]]), 'area': tensor([29848.7695, 57066.2383]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([338]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4990, 0.5424, 0.2227, 0.1716],\n        [0.5455, 0.5335, 0.3754, 0.3595],\n        [0.7111, 0.6979, 0.3313, 0.2838]]), 'area': tensor([11742.9648, 41455.0117, 28882.3496]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([405]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.4952, 0.6559, 0.6088, 0.4872],\n        [0.2074, 0.7760, 0.4117, 0.4459],\n        [0.4132, 0.5714, 0.0663, 0.0580]]), 'area': tensor([91107.9609, 56385.1602,  1179.7800]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([3]), 'class_labels': tensor([0, 5, 1, 4, 4, 4]), 'boxes': tensor([[0.5020, 0.4466, 0.6579, 0.5829],\n        [0.5148, 0.5684, 0.2288, 0.1367],\n        [0.7040, 0.7836, 0.4468, 0.4219],\n        [0.3160, 0.8416, 0.3991, 0.2993],\n        [0.4095, 0.0661, 0.0888, 0.0666],\n        [0.7489, 0.1356, 0.3843, 0.2637]]), 'area': tensor([117809.1875,   9607.5000,  57901.5000,  36691.4023,   1814.7600,\n         31125.9375]), 'iscrowd': tensor([0, 0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([182]), 'class_labels': tensor([0, 1, 5]), 'boxes': tensor([[0.5786, 0.5016, 0.5992, 0.4539],\n        [0.6307, 0.7197, 0.4165, 0.3323],\n        [0.4415, 0.6429, 0.1546, 0.2070]]), 'area': tensor([83547.7969, 42508.7344,  9827.7900]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([640]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.5314, 0.6391, 0.2920, 0.4553],\n        [0.7088, 0.7733, 0.5596, 0.4422],\n        [0.5282, 0.5060, 0.5678, 0.4612]]), 'area': tensor([40839.7109, 76013.7969, 80443.1328]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1126]), 'class_labels': tensor([5, 1, 0, 0, 4]), 'boxes': tensor([[0.4897, 0.6114, 0.2720, 0.2612],\n        [0.6082, 0.7287, 0.2006, 0.2145],\n        [0.4549, 0.5349, 0.4550, 0.3859],\n        [0.1698, 0.4514, 0.3276, 0.2998],\n        [0.6611, 0.1925, 0.4202, 0.1516]]), 'area': tensor([21821.4316, 13217.1748, 53944.8008, 30168.4121, 19574.9844]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([902]), 'class_labels': tensor([5, 1, 0, 4]), 'boxes': tensor([[0.5237, 0.4816, 0.0443, 0.0498],\n        [0.6509, 0.3957, 0.2670, 0.1695],\n        [0.3200, 0.4485, 0.6094, 0.6062],\n        [0.6201, 0.1730, 0.1955, 0.0725]]), 'area': tensor([   676.8125,  13904.2754, 113490.0000,   4354.6401]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([166]), 'class_labels': tensor([5, 1, 0, 4, 0]), 'boxes': tensor([[0.4320, 0.5441, 0.2114, 0.1963],\n        [0.2735, 0.6612, 0.3580, 0.2412],\n        [0.5321, 0.5080, 0.3639, 0.3277],\n        [0.1142, 0.7866, 0.2067, 0.1561],\n        [0.7246, 0.4182, 0.2477, 0.2401]]), 'area': tensor([12742.1201, 26533.6406, 36624.1055,  9910.0801, 18268.9844]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([409]), 'class_labels': tensor([0, 4, 4, 5, 1]), 'boxes': tensor([[0.3715, 0.6465, 0.7429, 0.5014],\n        [0.5047, 0.6748, 0.2114, 0.1916],\n        [0.1167, 0.7180, 0.2303, 0.1904],\n        [0.4180, 0.6086, 0.0883, 0.0780],\n        [0.3020, 0.6926, 0.3045, 0.2649]]), 'area': tensor([114432.9375,  12437.7695,  13470.5176,   2117.8799,  24779.7324]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([504]), 'class_labels': tensor([1, 0]), 'boxes': tensor([[0.2105, 0.6075, 0.3550, 0.2591],\n        [0.4267, 0.5508, 0.5474, 0.3703]]), 'area': tensor([28260.8398, 62271.7500]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1012]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.4518, 0.4870, 0.5355, 0.5652],\n        [0.9084, 0.5812, 0.1724, 0.4217]]), 'area': tensor([92987.8359, 22334.2246]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([769]), 'class_labels': tensor([6, 5, 0, 2]), 'boxes': tensor([[0.7015, 0.4236, 0.5892, 0.0759],\n        [0.4368, 0.4307, 0.1043, 0.1327],\n        [0.2781, 0.5959, 0.3932, 0.4465],\n        [0.6999, 0.3721, 0.5797, 0.7238]]), 'area': tensor([ 13744.0801,   4249.2451,  53935.3125, 128899.3125]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([510]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.3557, 0.4248, 0.2382, 0.1798],\n        [0.6917, 0.7145, 0.6135, 0.5677]]), 'area': tensor([ 13155.9678, 106991.8516]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([429]), 'class_labels': tensor([4, 0, 1, 5]), 'boxes': tensor([[0.4661, 0.8003, 0.4432, 0.1715],\n        [0.4992, 0.6146, 0.9984, 0.6917],\n        [0.2310, 0.6193, 0.3612, 0.2520],\n        [0.4227, 0.5342, 0.0790, 0.0650]]), 'area': tensor([ 23349.3125, 212163.9688,  27969.4199,   1576.6400]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([714]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.3350, 0.6024, 0.2067, 0.2968],\n        [0.2292, 0.7662, 0.4445, 0.4472],\n        [0.5794, 0.6870, 0.6228, 0.5439]]), 'area': tensor([ 18843.0391,  61060.7695, 104064.4922]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([301]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4706, 0.5429, 0.0994, 0.0970],\n        [0.2963, 0.6009, 0.3128, 0.2155],\n        [0.4525, 0.4761, 0.8737, 0.6209]]), 'area': tensor([  2959.7849,  20713.1934, 166669.5625]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([816]), 'class_labels': tensor([6, 5, 0]), 'boxes': tensor([[0.7607, 0.7381, 0.4707, 0.3945],\n        [0.5418, 0.5427, 0.1593, 0.1055],\n        [0.4945, 0.5723, 0.5662, 0.4344]]), 'area': tensor([57052.3750,  5160.3750, 75560.3984]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([392]), 'class_labels': tensor([5, 1, 4, 4, 4]), 'boxes': tensor([[0.4599, 0.6063, 0.0836, 0.0493],\n        [0.2533, 0.7866, 0.5063, 0.4221],\n        [0.5349, 0.6495, 0.7540, 0.5713],\n        [0.8369, 0.9173, 0.3234, 0.1632],\n        [0.5333, 0.9232, 0.1924, 0.1514]]), 'area': tensor([  1266.7325,  65646.4531, 132310.6406,  16215.8623,   8948.7148]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([439]), 'class_labels': tensor([5, 0, 1]), 'boxes': tensor([[0.4638, 0.6099, 0.2429, 0.3724],\n        [0.4283, 0.5034, 0.4528, 0.3891],\n        [0.7492, 0.6229, 0.4982, 0.4316]]), 'area': tensor([27791.6094, 54120.1484, 66053.2266]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([319]), 'class_labels': tensor([5, 1, 0, 4, 4]), 'boxes': tensor([[0.4927, 0.4708, 0.1688, 0.0946],\n        [0.7135, 0.5453, 0.3644, 0.2980],\n        [0.4998, 0.5359, 0.6276, 0.4492],\n        [0.5456, 0.8173, 0.1482, 0.1584],\n        [0.4667, 0.9237, 0.1009, 0.1277]]), 'area': tensor([ 4904.5498, 33353.4297, 86609.3750,  7214.6099,  3960.7876]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1106]), 'class_labels': tensor([5, 1, 4, 0]), 'boxes': tensor([[0.4597, 0.4787, 0.1184, 0.0961],\n        [0.5932, 0.6244, 0.2401, 0.2405],\n        [0.6587, 0.7589, 0.2219, 0.1490],\n        [0.3902, 0.5373, 0.7309, 0.5996]]), 'area': tensor([  3496.2749,  17742.7383,  10154.7754, 134638.6875]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([763]), 'class_labels': tensor([0, 0, 0, 5, 1]), 'boxes': tensor([[0.4510, 0.5231, 0.5637, 0.4548],\n        [0.7868, 0.4366, 0.4092, 0.3365],\n        [0.2204, 0.4396, 0.3318, 0.3187],\n        [0.5497, 0.5397, 0.2101, 0.0714],\n        [0.6421, 0.6682, 0.3070, 0.2901]]), 'area': tensor([78758.1328, 42294.7383, 32479.0371,  4608.8452, 27355.5273]), 'iscrowd': tensor([0, 0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([379]), 'class_labels': tensor([5, 1]), 'boxes': tensor([[0.5053, 0.5406, 0.5852, 0.7876],\n        [0.7293, 0.6370, 0.5284, 0.4556]]), 'area': tensor([141587.6406,  73964.3438]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([394]), 'class_labels': tensor([1, 5, 0]), 'boxes': tensor([[0.2053, 0.7470, 0.4101, 0.4966],\n        [0.4299, 0.5713, 0.1728, 0.0933],\n        [0.4994, 0.6560, 0.9984, 0.6693]]), 'area': tensor([ 62568.7734,   4952.1152, 205286.7344]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([665]), 'class_labels': tensor([0, 2]), 'boxes': tensor([[0.5282, 0.6071, 0.4164, 0.3630],\n        [0.6520, 0.8419, 0.5095, 0.2905]]), 'area': tensor([46425.1562, 45461.8438]), 'iscrowd': tensor([0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([362]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4643, 0.5164, 0.3293, 0.3087],\n        [0.6197, 0.7712, 0.7412, 0.4446],\n        [0.4982, 0.5305, 0.9742, 0.8731]]), 'area': tensor([ 31222.7773, 101242.8906, 261294.8750]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}, {'size': tensor([640, 480]), 'image_id': tensor([1019]), 'class_labels': tensor([5, 1, 0]), 'boxes': tensor([[0.4699, 0.5841, 0.2358, 0.3263],\n        [0.5916, 0.6374, 0.2653, 0.2050],\n        [0.4858, 0.5195, 0.6066, 0.5119]]), 'area': tensor([23641.8203, 16708.3203, 95380.7422]), 'iscrowd': tensor([0, 0, 0]), 'orig_size': tensor([1280,  960])}]\n[INFO] Batch of pixel masks: torch.Size([32, 640, 480])\n\n\nNow let‚Äôs try to pass the \"pixel_values\" through our model.\n\n%%time \n\n# Try pass a batch through our model (note: this will be relatively slow if our model is on the CPU)\nmodel = create_model()\n\n# example_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\nexample_batch_outputs = model(example_collated_data_batch[\"pixel_values\"])\n# example_batch_outputs # uncomment for full output\nexample_batch_outputs.keys()\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nCPU times: user 1min 18s, sys: 27 s, total: 1min 45s\nWall time: 8.01 s\n\n\nodict_keys(['logits', 'pred_boxes', 'last_hidden_state', 'encoder_last_hidden_state'])\n\n\n\n# We get 300 predictions per image in our batch, each with a logit value for each of the classes in our dataset \nexample_batch_outputs.logits.shape\n\ntorch.Size([32, 300, 7])\n\n\nThis is what will happen during training, our model will continually go over batches (the size of these batches will be defined by us) over data and try to match its own predictions with the ground truth labels.\nIn summary, we‚Äôve created two major steps:\n\npreprocess_batch - Preprocesses single or groups of samples into the specific format required by our model.\ndata_collate_function - Stacks together groups/batches of samples to be passed to our model‚Äôs forward() method."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---setting-up-trainingarguments-and-a-trainer-instance-to-train-our-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "14 TK - Setting up TrainingArguments and a Trainer instance to train our model",
    "text": "14 TK - Setting up TrainingArguments and a Trainer instance to train our model\nData ready and prepared, time to train a model!\nWe‚Äôll use transformers.TrainingArguments to set various hyperparameters for our model (many of these will be set by default, however, we can tweak them to our liking).\nWe‚Äôll also create an instance of transformers.Trainer which we can pass our preprocessed datasets for it to train/evaluate on.\nTo train a model, we‚Äôll go through the following steps:\n\nCreate a fresh instance of our model using the create_model() function.\nMake a directory for saving our trained models to.\nDefine our model‚Äôs hyperparameters using transformers.TrainingArguments, we‚Äôll take many of these settings from the assosciated research papers that introduced the models.\nCreate an instance of transformers.Trainer and pass it our training arguments from 2 as well as our preprocessed data.\nCall transformers.Trainer.train() to train the model from 1 on our own data.\n\nLet‚Äôs do it!\n\n# 1. Create a model instance \nmodel = create_model()\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nModel ready, let‚Äôs now create a folder where we can save our trained models to.\n\nfrom pathlib import Path\n\n# 2. Make a models directory for saving models\nmodels_dir = Path(\"models\")\nmodels_dir.mkdir(parents=True, exist_ok=True)\n\nPerfect! Time to setup our model‚Äôs hyperparameters with transformers.TrainingArguments.\n\n14.1 Setting up our TrainingArguments\nThe transformers.TrainingArguments class holds many of the hyperparameters/settings for training our model.\nMany of them are set by default in the transformers.ConditionalDetrConfig class.\nHowever, we can tweak any of them to our own liking.\nWhere do we get the settings from?\nThe original Conditional DETR for fast training convergence paper states that all hyperparameters are the same as the original DETR (End-to-End Object Detection with Transformers).\nWe can even dig into related papers such as DETRs Beat YOLOs on Real-time Object Detection and find the hyperaparameter settings as well.\nThe main hyperparameters we are going to set are:\n\n\n\nHyperparameter\nValue\nWhat does it do?\n\n\n\n\nper_device_train_batch_size, per_device_eval_batch_size\n16, 32 or larger (hardware dependent)\nDefines the number of samples passed to our model at one time. For example, if batch size is 16, our model will see 16 samples at a time. It‚Äôs usually best practice to set this value to the highest your hardware can handle.\n\n\nlearning_rate\n0.0001 (as per the listed papers)\nDefines the multiplier on the size of gradient updates during training. Too high and gradients will explode, too low and gradients won‚Äôt update, both lead to poor training results. The papers mention two different learning rates for the backbone and the detection head, I tried these and got poor results (likely because of our smaller dataset), a single learning rate for the whole network turned out to be better.\n\n\nweight_decay\n0.0001 (as per the listed papers)\nPrevents model weights from getting too large by applying a small decay penalty over time. This prevents a single weight providing too much information. In essence, the model is forced to learn smaller, simpler weights to represent the data. A form of regularization (overfitting prevention). See more at paperswithcode.com/method/weight-decay.\n\n\nmax_grad_norm\n0.1 (as per the listed papers)\nPrevents gradients from getting too large during training. This will help to ensure stable training. See more at paperswithcode.com/method/gradient-clipping.\n\n\nnum_train_epochs\n25 (depends on training data and available time)\nDefines how many laps of the data your model will do. For example, setting epochs to 25 means the model will do 25 laps of the training data to learn different patterns. In practice, I‚Äôve found this value to be a good starting point for our dataset and also because we are fine-tuning rather than training from scratch. However, if you had more data you might want to do more epochs (when training from scratch, the papers did 300 epochs).\n\n\nwarmup_ratio\n0.05\nPercentage of total training steps to take learning rate from 0 to to the set value (e.g.¬†0.0001). Can help with training stability in the early training steps of the model by not doing too large updates when first starting out. The papers state 2000 warmup steps, however, in practice I found this to be too many for our smaller dataset.\n\n\ndataloader_num_workers\n4 (hardware dependent)\nNumber of workers to load data from the CPU to the GPU. Higher is generally better if it is available, however, it can often cap out. Experimentally I‚Äôve found that 0.5 * os.cpu_count() generally works well.\n\n\n\nTK image - showcase different papers referencing the hyperparameters for the models\nIt‚Äôs important to note that all of these values can be experimented with.\nAnd just because a research paper mentions a specific value, doesn‚Äôt mean you have to use.\nFor example, all the mentioned research papers tend to focus on training a model from scratch on the COCO dataset (330k images, 80 classes).\nWhich is a much larger dataset with more classes than our dataset (1k images, 7 classes) which we are trying to fine-tune an existing model on rather than train from scratch.\nThere are many more possible arguments/settings we‚Äôve left out in the above table but if you‚Äôd like to explore these, I‚Äôd encourage you to check out the documentation for transformers.TrainingArguments.\n\nfrom transformers import TrainingArguments\n\n# Hardware dependent hyperparameters\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 \n# without running out of memory\nBATCH_SIZE = 32\nDATALOADER_NUM_WORKERS = 4 # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0 \n\n# Set number of epochs to how many laps you'd like to do over the data\nNUM_EPOCHS = 25\n\n# Setup hyperameters for training from the DETR paper(s)\nLEARNING_RATE = 1e-4\nWEIGHT_DECAY = 1e-4\nMAX_GRAD_NORM = 0.1 \nWARMUP_RATIO = 0.05 # learning rate warmup from 0 to learning_rate as a ratio of total steps (e.g. 0.05 = 5% of total steps)\n\n# Create directory to save models to \nOUTPUT_DIR = Path(models_dir, \"detr_finetuned_trashify_box_detector_v1\")\nprint(f\"[INFO] Saving model to: {OUTPUT_DIR}\")\n\n# Create TrainingArguments to pass to Trainer\ntraining_args = TrainingArguments(\n    output_dir=OUTPUT_DIR,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=LEARNING_RATE,\n    weight_decay=WEIGHT_DECAY,\n    max_grad_norm=MAX_GRAD_NORM,\n    num_train_epochs=NUM_EPOCHS,\n    lr_scheduler_type=\"linear\",\n    warmup_ratio=WARMUP_RATIO, \n    # warmup_steps=2000, # number of warmup steps from 0 to learning_rate (overrides warmup_ratio, found this to be too long for our dataset)\n    logging_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    fp16=True, # use mixed precision training\n    dataloader_num_workers=DATALOADER_NUM_WORKERS, # note: if you're on Google Colab, you may have to lower this to os.cpu_count() or to 0\n    eval_strategy=\"epoch\",\n    load_best_model_at_end=True, \n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False, # want to minimize eval_loss (e.g. lower is better)\n    report_to=\"none\", # don't save experiments to a third party service\n    push_to_hub=False,\n    eval_do_concat_batches=False,\n)\n\n[INFO] Saving model to: models/detr_finetuned_trashify_box_detector_v1\n\n\n\n\n14.2 TK - Optional: Setting up an optimizer for multiple learning rates\nIn the papers that mentioned the DETR model we‚Äôre using, they state that they used a different learning rate value for the backbone (learning_rate=1e-5) as well as the object detection head (learning_rate=1e-4).\nTo set this up ourselves, we can extract which parameters of our model belong to the backbone as well as which don‚Äôt.\nTo find the backbone parameters, we can loop through our model‚Äôs named_parameters() method and filter for any which contain the string \"backbone\" in their name.\nWe‚Äôll append these to a list called backbone_parameters and assume any that don‚Äôt have \"backbone\" in their name are not part of the model‚Äôs backbone.\nWe can use these two lists of parameters to pass to torch.optim.AdamW with different learning rate values for each.\n\n\n\n\n\n\nNote\n\n\n\nIn my experiments with our smaller dataset size (~1100 images), I found that setting two different learning rates for the backbone and the object detection head led to poorer performance than just setting a single learning rate for the whole model.\nThe code below is an example of how to create a custom optimizer with different learning rates for different parts of the model.\nHowever, in our actual training code, we‚Äôll use a single learning rate for the whole model.\n\n\nWe can then subclass transformers.Trainer and update the method create_optimizer() to use our custom optimizer.\n\nfrom transformers import Trainer\n\n# Create lists for different kinds of parameters\nbackbone_parameters = []\nother_parameters = []\n\n# Can loop through model parameters and extract different model sections\nfor name, param in model.model.named_parameters(): \n    if \"backbone\" in name:\n        # print(f\"Backbone parameter: {name}\")\n        backbone_parameters.append(param)\n    else:\n        # print(f\"Other parameter: {name}\")\n        other_parameters.append(param)\n\nprint(f\"[INFO] Number of backbone parameter modules: {len(backbone_parameters)}\")\nprint(f\"[INFO] Number of other parameter modules: {len(other_parameters)}\")\n\n# Setup a custom subclass of Trainer to use different learning rates for different parts of the model\nclass CustomTrainer(Trainer):\n    def create_optimizer(self):\n        self.optimizer = torch.optim.AdamW([\n            {\"params\": backbone_parameters, \"lr\": 1e-4},\n            {\"params\": other_parameters, \"lr\": 1e-4}\n        ], weight_decay=0.0001)\n        return self.optimizer\n\n[INFO] Number of backbone parameter modules: 53\n[INFO] Number of other parameter modules: 315\n\n\nAwesome!\nNow if we wanted to use our custom optimizer, we could use CustomTrainer instead of Trainer.\n\n\n14.3 TK - Training our model with Trainer\nUPTOHERE:\n\ntraining a model‚Ä¶ (e.g.¬†calling trainer.train())\nevaluating our model with an evaluation metric\nwe should make a simple mAP metric to evaluate our model (can also evaluate during training)\nI should read up on the mAP metric and take the long road to evaluate our model so I can learn how to do it‚Ä¶\nNext: read up on mAP metric and implement a small example in Google Colab with a demo box?\n\nEvaluation function is comprised of the following:\n\nSee the code on GitHub: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160\nMean Average Precision metric from TorchMetrics: https://lightning.ai/docs/torchmetrics/stable/detection/mean_average_precision.html\n\nSee a blog post for mAP: https://jonathan-hui.medium.com/map-mean-average-precision-for-object-detection-45c121a31173\n\ntransformersEvalPrediction (these come out of the Trainer.evaluate method) - https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction\n\nSee Trainer.evaluate - https://huggingface.co/docs/transformers/en/main_classes/trainer#transformers.Trainer.evaluate\n\n\n\nimport numpy as np\n\nfrom typing import Optional, Mapping\n\nfrom transformers import EvalPrediction\n\nfrom torchvision.ops import box_convert\n\nfrom torchmetrics.detection.mean_ap import MeanAveragePrecision\n\ndef convert_bbox_cxcywh_to_xyxy_absolute(boxes, image_size_target):\n    # Convert normalized CXCYWH (output of model) -&gt; absolute XYXY format (required for evaluation)\n    boxes = box_convert(boxes=boxes, in_fmt=\"cxcywh\", out_fmt=\"xyxy\")\n\n    # Convert normalized box coordinates to absolute pixel values based on the target size \n    image_size_target_height = image_size_target[0]\n    image_size_target_width = image_size_target[1]\n    boxes = boxes * torch.tensor([image_size_target_width, image_size_target_height, image_size_target_width, image_size_target_height])\n\n    return boxes\n\n@dataclass\nclass ModelOutput:\n    logits: torch.Tensor\n    pred_boxes: torch.Tensor\n\n# Source is slightly modified version of: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160  \n@torch.no_grad()\ndef compute_metrics(\n    evaluation_results: EvalPrediction, # these come out of the Trainer.evaluate method, see: https://huggingface.co/docs/transformers/en/internal/trainer_utils#transformers.EvalPrediction \n    image_processor: AutoImageProcessor,\n    threshold: float = 0.0,\n    id2label: Optional[Mapping[int, str]] = None,\n) -&gt; Mapping[str, float]:\n    \"\"\"\n    Compute mean average mAP, mAR and their variants for the object detection task.\n\n    Args:\n        evaluation_results (EvalPrediction): Predictions and targets from evaluation.\n        threshold (float, optional): Threshold to filter predicted boxes by confidence. Defaults to 0.0.\n        id2label (Optional[dict], optional): Mapping from class id to class name. Defaults to None.\n\n    Returns:\n        Mapping[str, float]: Metrics in a form of dictionary {&lt;metric_name&gt;: &lt;metric_value&gt;}\n    \"\"\"\n\n    predictions, targets = evaluation_results.predictions, evaluation_results.label_ids\n\n    # For metric computation we need to provide:\n    #  - targets in a form of list of dictionaries with keys \"boxes\", \"labels\"\n    #  - predictions in a form of list of dictionaries with keys \"boxes\", \"scores\", \"labels\"\n\n    image_sizes = []\n    post_processed_targets = []\n    post_processed_predictions = []\n\n    # Collect targets in the required format for metric computation\n    for batch in targets:\n        # collect image sizes, we will need them for predictions post processing\n        batch_image_sizes = torch.tensor(np.array([x[\"orig_size\"] for x in batch])) # turn into a list of numpy arrays first, then tensors\n        image_sizes.append(batch_image_sizes)\n        # collect targets in the required format for metric computation\n        # boxes were converted to YOLO format needed for model training\n        # here we will convert them to Pascal VOC format (x_min, y_min, x_max, y_max)\n        for image_target in batch:\n            boxes = torch.tensor(image_target[\"boxes\"])\n            boxes = convert_bbox_cxcywh_to_xyxy_absolute(boxes, image_target[\"orig_size\"])\n            labels = torch.tensor(image_target[\"class_labels\"])\n            post_processed_targets.append({\"boxes\": boxes, \"labels\": labels})\n\n    # Collect predictions in the required format for metric computation,\n    # model produce boxes in YOLO format, then image_processor convert them to Pascal VOC format\n    for batch, target_sizes in zip(predictions, image_sizes):\n        batch_logits, batch_boxes = batch[1], batch[2]\n        output = ModelOutput(logits=torch.tensor(batch_logits), pred_boxes=torch.tensor(batch_boxes))\n        post_processed_output = image_processor.post_process_object_detection(\n            output, threshold=threshold, target_sizes=target_sizes\n        )\n        post_processed_predictions.extend(post_processed_output)\n\n    # Compute metrics\n    metric = MeanAveragePrecision(box_format=\"xyxy\", class_metrics=True)\n    metric.update(post_processed_predictions, post_processed_targets)\n    metrics = metric.compute()\n\n    # Replace list of per class metrics with separate metric for each class\n    classes = metrics.pop(\"classes\")\n    map_per_class = metrics.pop(\"map_per_class\")\n    # Optional: mAR@100 per class\n    mar_100_per_class = metrics.pop(\"mar_100_per_class\")\n    # for class_id, class_map, class_mar in zip(classes, map_per_class, mar_100_per_class):\n    for class_id, class_map in zip(classes, map_per_class):\n        class_name = id2label[class_id.item()] if id2label is not None else class_id.item()\n        metrics[f\"map_{class_name}\"] = class_map\n        # Optional: mAR@100 per class\n        # metrics[f\"mar_100_{class_name}\"] = class_mar\n\n    metrics = {k: round(v.item(), 4) for k, v in metrics.items()}\n\n    return metrics\n\n# Create a partial function for our compute_metrics function (we'll pass this to compute_metrics in Trainer)\neval_compute_metrics_fn = partial(\n        compute_metrics, image_processor=image_processor, id2label=id2label, threshold=0.0\n)\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\nfrom transformers import Trainer\n\nmodel_v1_trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    # data_collator=DefaultDataCollator(),\n    # tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: TK - can add a metrics function, just see if model trains first, see here for an example: https://github.com/huggingface/transformers/blob/336dc69d63d56f232a183a3e7f52790429b871ef/examples/pytorch/object-detection/run_object_detection.py#L160 \n    compute_metrics=eval_compute_metrics_fn\n)\n\nmodel_v1_results = model_v1_trainer.train()\n\n\n    \n      \n      \n      [625/625 05:10, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\nMap\nMap 50\nMap 75\nMap Small\nMap Medium\nMap Large\nMar 1\nMar 10\nMar 100\nMar Small\nMar Medium\nMar Large\nMap Bin\nMap Hand\nMap Not Bin\nMap Not Hand\nMap Not Trash\nMap Trash\nMap Trash Arm\n\n\n\n\n1\n0.490000\n0.899411\n0.335500\n0.507100\n0.366300\n0.000000\n0.123000\n0.353700\n0.465700\n0.623900\n0.638600\n0.000000\n0.339800\n0.685600\n0.732400\n0.544500\n0.031600\n-1.000000\n0.170800\n0.519100\n0.014400\n\n\n2\n0.558800\n0.917622\n0.324900\n0.483000\n0.369700\n0.000000\n0.129400\n0.345400\n0.454700\n0.619900\n0.635500\n0.000000\n0.322200\n0.685400\n0.712900\n0.550700\n0.027200\n-1.000000\n0.138200\n0.492700\n0.027900\n\n\n3\n0.660700\n0.921021\n0.324800\n0.493400\n0.344100\n0.000000\n0.106200\n0.342600\n0.345800\n0.621500\n0.632100\n0.000000\n0.304500\n0.679100\n0.711100\n0.579100\n0.027200\n-1.000000\n0.135900\n0.490600\n0.004600\n\n\n4\n0.623200\n0.923380\n0.316600\n0.495800\n0.341800\n0.000000\n0.119500\n0.336000\n0.419700\n0.596800\n0.613700\n0.000000\n0.323900\n0.659000\n0.670800\n0.554500\n0.008000\n-1.000000\n0.137600\n0.517100\n0.011600\n\n\n5\n0.612300\n0.942651\n0.318500\n0.488000\n0.346100\n0.025200\n0.113500\n0.334900\n0.443900\n0.604900\n0.625800\n0.025000\n0.287500\n0.667200\n0.698100\n0.516100\n0.019300\n-1.000000\n0.138900\n0.517600\n0.020800\n\n\n6\n0.616500\n0.880774\n0.344300\n0.518000\n0.384700\n0.025200\n0.194500\n0.367600\n0.419200\n0.607700\n0.628300\n0.025000\n0.376700\n0.663900\n0.692400\n0.547100\n0.018000\n-1.000000\n0.167300\n0.526100\n0.115200\n\n\n7\n0.585200\n0.889534\n0.338500\n0.508900\n0.367500\n0.000000\n0.138900\n0.361800\n0.418100\n0.615800\n0.628100\n0.000000\n0.319300\n0.677900\n0.697400\n0.555500\n0.049900\n-1.000000\n0.178600\n0.538200\n0.011500\n\n\n8\n0.560300\n0.875824\n0.337400\n0.493500\n0.367200\n0.000000\n0.262000\n0.355000\n0.455300\n0.643400\n0.670300\n0.000000\n0.392000\n0.713100\n0.725200\n0.610500\n0.010300\n-1.000000\n0.145200\n0.517700\n0.015300\n\n\n9\n0.526100\n0.892347\n0.360500\n0.536600\n0.410800\n0.000000\n0.120800\n0.381900\n0.480700\n0.637800\n0.652200\n0.000000\n0.330100\n0.701900\n0.718200\n0.553300\n0.018000\n-1.000000\n0.186000\n0.538700\n0.149100\n\n\n10\n0.505600\n0.884946\n0.403700\n0.606400\n0.474600\n0.000000\n0.114400\n0.423400\n0.489500\n0.638400\n0.647300\n0.000000\n0.302300\n0.697300\n0.727600\n0.548300\n0.023000\n-1.000000\n0.180500\n0.526100\n0.416800\n\n\n11\n0.504500\n0.903649\n0.415400\n0.663700\n0.451900\n0.075200\n0.139100\n0.436700\n0.482600\n0.603600\n0.625900\n0.075000\n0.313100\n0.674900\n0.695600\n0.523800\n0.020200\n-1.000000\n0.195300\n0.524300\n0.533300\n\n\n12\n0.503900\n0.890297\n0.399900\n0.628000\n0.374800\n0.000000\n0.220100\n0.420500\n0.459000\n0.612700\n0.630700\n0.000000\n0.319900\n0.677600\n0.735300\n0.558200\n0.019700\n-1.000000\n0.188100\n0.547400\n0.350900\n\n\n13\n0.476500\n0.873800\n0.419200\n0.658900\n0.393700\n0.125700\n0.243700\n0.440900\n0.475300\n0.618700\n0.638400\n0.125000\n0.337500\n0.687400\n0.741500\n0.552800\n0.020600\n-1.000000\n0.225600\n0.533100\n0.441700\n\n\n14\n0.461000\n0.901136\n0.426300\n0.662200\n0.392400\n0.000000\n0.207500\n0.449000\n0.471300\n0.612900\n0.635200\n0.000000\n0.335200\n0.675500\n0.727700\n0.535800\n0.023500\n-1.000000\n0.203500\n0.525500\n0.542100\n\n\n15\n0.457700\n0.899627\n0.434000\n0.662200\n0.462000\n0.000000\n0.222300\n0.457200\n0.473500\n0.624600\n0.646300\n0.000000\n0.338600\n0.692100\n0.718300\n0.528700\n0.022100\n-1.000000\n0.209900\n0.535800\n0.589100\n\n\n16\n0.431600\n0.888973\n0.438200\n0.672900\n0.461700\n0.075700\n0.183500\n0.458600\n0.461800\n0.613300\n0.630600\n0.075000\n0.282400\n0.673800\n0.735500\n0.568400\n0.021100\n-1.000000\n0.188900\n0.537100\n0.577900\n\n\n17\n0.420700\n0.890830\n0.433000\n0.659500\n0.488200\n0.000000\n0.230400\n0.452700\n0.483600\n0.640300\n0.656300\n0.000000\n0.351100\n0.698100\n0.739700\n0.542000\n0.022700\n-1.000000\n0.222700\n0.537800\n0.533000\n\n\n18\n0.406400\n0.893966\n0.428500\n0.618600\n0.502400\n0.000000\n0.119200\n0.450600\n0.450900\n0.636300\n0.659500\n0.000000\n0.320500\n0.705600\n0.733200\n0.561800\n0.015100\n-1.000000\n0.231600\n0.526900\n0.502500\n\n\n19\n0.382300\n0.870108\n0.463000\n0.663800\n0.535300\n0.075700\n0.190200\n0.485600\n0.495200\n0.643900\n0.667600\n0.075000\n0.293700\n0.715200\n0.744100\n0.563600\n0.014300\n-1.000000\n0.235300\n0.529400\n0.691100\n\n\n20\n0.383700\n0.871244\n0.452100\n0.672000\n0.552500\n0.050500\n0.213100\n0.474800\n0.490400\n0.635200\n0.646100\n0.050000\n0.289200\n0.698200\n0.748300\n0.551600\n0.018200\n-1.000000\n0.216500\n0.533700\n0.644200\n\n\n21\n0.368200\n0.895647\n0.439900\n0.670900\n0.453300\n0.025200\n0.209300\n0.462800\n0.484700\n0.628400\n0.644600\n0.025000\n0.300000\n0.696700\n0.727800\n0.558800\n0.015800\n-1.000000\n0.217500\n0.531100\n0.588400\n\n\n22\n0.362500\n0.903232\n0.455300\n0.675500\n0.551500\n0.025200\n0.111900\n0.478600\n0.484000\n0.635400\n0.654100\n0.025000\n0.356800\n0.703800\n0.742600\n0.543100\n0.016000\n-1.000000\n0.234700\n0.539800\n0.655400\n\n\n23\n0.355600\n0.898629\n0.455000\n0.677200\n0.540500\n0.000000\n0.251400\n0.478200\n0.495000\n0.637900\n0.649400\n0.000000\n0.338100\n0.701300\n0.741100\n0.554900\n0.018200\n-1.000000\n0.222700\n0.537800\n0.655400\n\n\n24\n0.348400\n0.901535\n0.453100\n0.676100\n0.538700\n0.000000\n0.248700\n0.477100\n0.499200\n0.631700\n0.650700\n0.000000\n0.339800\n0.703100\n0.740500\n0.548700\n0.016400\n-1.000000\n0.224100\n0.533500\n0.655400\n\n\n25\n0.339800\n0.898824\n0.453800\n0.674100\n0.537100\n0.025200\n0.247900\n0.477300\n0.499300\n0.632700\n0.649300\n0.025000\n0.336900\n0.702300\n0.742400\n0.547600\n0.016300\n-1.000000\n0.225400\n0.535900\n0.655400\n\n\n\n\n\n\nUPTOHERE:\n\ngoing through training steps and making sure we end with a model training\nPlot the loss curves + mAP curves (make sure the loss going down, mAP going up)\nTK - if your loss values aren‚Äôt the exact same, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar (e.g.¬†loss going down)\nnotes on training:\n\n25 epochs gets good baseline results\n50 epochs (longer training) gets better results but takes 2x the time (this is a good extension for someone to try)\n\n\n\n# # 25 epochs\n# # Epoch   Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# # 1   12.257200   4.579205    0.000700    0.003100    0.000300    0.000000    0.001100    0.000700    0.005600    0.011000    0.044300    0.000000    0.014800    0.043800    0.003100    0.000000    0.000000    -1.000000   0.000000    0.001000    0.000100\n# # 2   3.214800    2.093854    0.012600    0.027700    0.009400    0.000000    0.002300    0.012900    0.027500    0.091400    0.136600    0.000000    0.056800    0.142000    0.066100    0.001500    0.000000    -1.000000   0.001600    0.006700    0.000000\n# # 3   2.031300    1.615478    0.022200    0.054700    0.017600    0.000000    0.005100    0.022500    0.051500    0.157800    0.202400    0.000000    0.052300    0.204500    0.107500    0.007300    0.000000    -1.000000   0.000300    0.018000    0.000000\n# # 4   1.750000    1.561830    0.060300    0.118400    0.057600    0.000000    0.007500    0.063100    0.097500    0.253500    0.302300    0.000000    0.237500    0.306400    0.228100    0.055700    0.000000    -1.000000   0.001500    0.076500    0.000000\n# # 5   1.617800    1.382881    0.064500    0.121800    0.061400    0.000000    0.006800    0.066900    0.130900    0.292900    0.348300    0.000000    0.105700    0.360300    0.209900    0.087600    0.000000    No Log  0.002600    0.086600    0.000000\n# # 6   1.510300    1.307172    0.072900    0.132500    0.068500    0.000000    0.009700    0.075700    0.151900    0.299400    0.352800    0.000000    0.112500    0.361600    0.199800    0.117100    0.000000    -1.000000   0.002400    0.118200    0.000000\n# # 7   1.405600    1.251348    0.079900    0.130500    0.078700    0.000000    0.017500    0.083700    0.175700    0.310100    0.365800    0.000000    0.056800    0.383100    0.223800    0.048100    0.000000    No Log  0.002600    0.204600    0.000000\n# # 8   1.331100    1.159470    0.113300    0.180400    0.120800    0.000000    0.028400    0.116000    0.210500    0.345200    0.392100    0.000000    0.130700    0.403300    0.313500    0.154200    0.000000    No Log  0.006600    0.205600    0.000000\n# # 9   1.221300    1.101122    0.144700    0.227600    0.156400    0.025200    0.019500    0.148800    0.232200    0.385000    0.416300    0.025000    0.134100    0.433900    0.377000    0.264400    0.000000    No Log  0.012300    0.214600    0.000000\n# # 10  1.179900    1.075704    0.163600    0.247600    0.181500    0.000000    0.038200    0.168100    0.231600    0.387100    0.434300    0.000000    0.164800    0.455400    0.457000    0.255800    0.000000    -1.000000   0.017300    0.251400    0.000000\n# # 11  1.145600    1.023341    0.204600    0.295000    0.230600    0.050500    0.039500    0.211200    0.257700    0.425600    0.457900    0.050000    0.142000    0.487100    0.557100    0.334300    0.000600    -1.000000   0.026500    0.309000    0.000000\n# # 12  1.136500    1.016237    0.217600    0.319900    0.244700    0.000000    0.035900    0.225000    0.253500    0.431300    0.457300    0.000000    0.202300    0.487200    0.585900    0.347900    0.000700    -1.000000   0.027600    0.343800    0.000000\n# # 13  1.117300    0.968450    0.238400    0.348400    0.265800    0.000000    0.046200    0.247500    0.274400    0.443500    0.471100    0.000000    0.294300    0.504300    0.583500    0.394100    0.000400    -1.000000   0.036700    0.415800    0.000000\n# # 14  1.022700    0.964383    0.259700    0.384800    0.289100    0.000000    0.067500    0.269300    0.274300    0.475400    0.498700    0.000000    0.267000    0.544700    0.637500    0.454800    0.002400    -1.000000   0.039700    0.424200    0.000000\n# # 15  1.039000    0.985401    0.260200    0.394400    0.283300    0.000000    0.049100    0.269700    0.286400    0.515200    0.536000    0.000000    0.185200    0.590000    0.621600    0.450200    0.005300    -1.000000   0.042100    0.441800    0.000500\n# # 16  1.012600    0.940276    0.269900    0.411300    0.311300    0.000000    0.073900    0.279600    0.289500    0.504500    0.526500    0.000000    0.272700    0.576900    0.634600    0.460400    0.004900    -1.000000   0.053900    0.465300    0.000000\n# # 17  0.928400    0.934266    0.276900    0.413600    0.309300    0.000000    0.070100    0.290400    0.297700    0.590600    0.609800    0.000000    0.308500    0.659700    0.661100    0.472700    0.006000    -1.000000   0.066200    0.452900    0.002500\n# # 18  0.939700    0.919036    0.277800    0.417400    0.313000    0.000000    0.082100    0.288300    0.290600    0.634400    0.652700    0.000000    0.318700    0.697400    0.638400    0.485200    0.005000    -1.000000   0.061900    0.470600    0.006000\n# # 19  0.860800    0.921640    0.279500    0.424300    0.308700    0.000000    0.068900    0.291900    0.306400    0.627100    0.648800    0.000000    0.263100    0.700300    0.646300    0.490200    0.007300    -1.000000   0.069300    0.459000    0.004700\n# # 20  0.888200    0.908211    0.290500    0.435600    0.329600    0.025200    0.066200    0.303200    0.309100    0.641300    0.660500    0.025000    0.282400    0.711400    0.660700    0.519400    0.006700    -1.000000   0.079200    0.471500    0.005800\n# # 21  0.865500    0.907514    0.289400    0.429000    0.333000    0.000000    0.080400    0.302600    0.303400    0.650900    0.669600    0.000000    0.304000    0.720300    0.667100    0.504400    0.006100    -1.000000   0.071600    0.480000    0.007100\n# # 22  0.841000    0.897333    0.296700    0.437500    0.335400    0.000000    0.087800    0.311200    0.307200    0.651100    0.664800    0.000000    0.281800    0.718600    0.671300    0.534000    0.005100    -1.000000   0.073900    0.488800    0.006800\n# # 23  0.821500    0.895820    0.299100    0.441800    0.339100    0.000000    0.087100    0.313200    0.314600    0.651800    0.670400    0.000000    0.336900    0.718500    0.670900    0.548300    0.005400    -1.000000   0.074900    0.488800    0.006400\n# # 24  0.798200    0.892997    0.296100    0.441700    0.335200    0.000000    0.075000    0.310400    0.310500    0.638100    0.656000    0.000000    0.306800    0.705000    0.670700    0.534100    0.005300    -1.000000   0.076800    0.483200    0.006700\n# # 25  0.786300    0.894873    0.296400    0.442700    0.335400    0.000000    0.075000    0.311800    0.309700    0.635700    0.655900    0.000000    0.293700    0.707600    0.671900    0.535700    0.005100    -1.000000   0.076700    0.482500    0.006400\n\n# # 50 epochs\n# Epoch Training Loss   Validation Loss Map Map 50  Map 75  Map Small   Map Medium  Map Large   Mar 1   Mar 10  Mar 100 Mar Small   Mar Medium  Mar Large   Map Bin Map Hand    Map Not Bin Map Not Hand    Map Not Trash   Map Trash   Map Trash Arm\n# 1 61.998300   29.889622   0.000300    0.001000    0.000100    0.000000    0.000000    0.000500    0.002800    0.011600    0.029300    0.000000    0.000000    0.030400    0.000500    0.000400    0.000000    -1.000000   0.000000    0.000600    0.000000\n# 2 11.920100   3.913074    0.000000    0.000100    0.000000    0.000000    0.000000    0.000000    0.000000    0.000700    0.000700    0.000000    0.000000    0.000800    0.000000    0.000000    0.000000    No Log  0.000000    0.000100    0.000000\n# 3 2.872600    1.999650    0.017200    0.042100    0.012400    0.000000    0.004700    0.017500    0.029800    0.148200    0.201100    0.000000    0.036400    0.206600    0.081900    0.005500    0.000000    -1.000000   0.000300    0.015400    0.000000\n# 4 2.044500    1.702604    0.019800    0.050300    0.013200    0.000000    0.004700    0.020800    0.051700    0.157200    0.222200    0.000000    0.033000    0.228900    0.038300    0.044200    0.000000    -1.000000   0.000100    0.036300    0.000000\n# 5 1.773500    1.489281    0.033800    0.075200    0.028200    0.000000    0.010100    0.035100    0.081800    0.210300    0.265600    0.000000    0.064800    0.272200    0.106600    0.047500    0.000000    No Log  0.000700    0.047800    0.000000\n# 6 1.651000    1.427438    0.055900    0.104200    0.057300    0.000000    0.012600    0.056700    0.117200    0.257700    0.323200    0.000000    0.072700    0.330300    0.178000    0.098700    0.000000    No Log  0.000000    0.058800    0.000000\n# 7 1.555300    1.418692    0.062700    0.115600    0.059800    0.000000    0.018700    0.063600    0.124000    0.273100    0.320400    0.000000    0.044300    0.328100    0.158000    0.141500    0.000000    -1.000000   0.000100    0.076300    0.000000\n# 8 1.488100    1.246883    0.067600    0.117500    0.065600    0.000000    0.021800    0.068800    0.155800    0.306300    0.359700    0.000000    0.088600    0.375000    0.198000    0.094800    0.000000    No Log  0.001500    0.111000    0.000000\n# 9 1.410900    1.337418    0.068200    0.128300    0.065800    0.000000    0.019200    0.068700    0.161000    0.282400    0.334600    0.000000    0.108000    0.340400    0.197300    0.139100    0.000000    No Log  0.000700    0.072200    0.000000\n# 10    1.405900    1.198891    0.097000    0.160900    0.100100    0.000000    0.020400    0.099000    0.201600    0.327300    0.374400    0.000000    0.127300    0.384000    0.243500    0.221500    0.000000    No Log  0.001900    0.115300    0.000000\n# 11    1.339600    1.184751    0.093200    0.147700    0.100400    0.000000    0.023500    0.095200    0.199100    0.342100    0.393800    0.000000    0.089800    0.412500    0.233400    0.193300    0.000000    No Log  0.005000    0.127800    0.000000\n# 12    1.322600    1.155094    0.129100    0.203800    0.138700    0.000000    0.013500    0.131800    0.229300    0.355500    0.403500    0.000000    0.109100    0.422200    0.378100    0.266500    0.000000    -1.000000   0.006700    0.123400    0.000000\n# 13    1.328200    1.137684    0.124100    0.190000    0.129300    0.000000    0.013200    0.127800    0.224100    0.372900    0.419500    0.000000    0.106800    0.442500    0.330900    0.229900    0.000000    No Log  0.010100    0.173800    0.000000\n# 14    1.207300    1.071396    0.163700    0.243600    0.174900    0.000000    0.036600    0.167900    0.241100    0.390200    0.431400    0.000000    0.125000    0.457400    0.425600    0.336300    0.000000    No Log  0.013100    0.207000    0.000000\n# 15    1.230200    1.066224    0.176400    0.271200    0.190900    0.000000    0.044600    0.180000    0.242400    0.379000    0.424400    0.000000    0.119300    0.446900    0.477700    0.363600    0.000000    No Log  0.010100    0.207200    0.000000\n# 16    1.216300    1.033326    0.212500    0.331700    0.217800    0.000000    0.050400    0.217400    0.256500    0.406400    0.438000    0.000000    0.331800    0.461300    0.539800    0.450800    0.000000    -1.000000   0.018300    0.265900    0.000000\n# 17    1.102900    0.971974    0.242100    0.366900    0.271200    0.000000    0.061100    0.249300    0.283700    0.445900    0.472900    0.000000    0.286400    0.505500    0.601400    0.480600    0.000800    -1.000000   0.046000    0.324100    0.000000\n# 18    1.118400    0.970455    0.259500    0.387200    0.285700    0.000000    0.092200    0.266500    0.292000    0.451300    0.478300    0.000000    0.301100    0.511800    0.607900    0.504600    0.000700    -1.000000   0.043900    0.399800    0.000000\n# 19    1.042000    0.967601    0.259800    0.395300    0.279900    0.000000    0.076400    0.267100    0.287500    0.507200    0.530000    0.000000    0.220500    0.569900    0.596500    0.509700    0.002400    -1.000000   0.048600    0.400700    0.001000\n# 20    1.064600    0.944465    0.273800    0.412100    0.298800    0.025200    0.087900    0.282700    0.291900    0.532800    0.558100    0.025000    0.266500    0.595900    0.630500    0.485800    0.002400    -1.000000   0.078400    0.443900    0.002100\n# 21    1.028700    0.944142    0.281000    0.419900    0.313000    0.000000    0.085900    0.291500    0.334500    0.611100    0.634500    0.000000    0.323900    0.672900    0.650000    0.486900    0.004900    -1.000000   0.064900    0.473900    0.005300\n# 22    0.997400    0.932104    0.284800    0.432100    0.309500    0.075700    0.082800    0.294500    0.307500    0.623800    0.642300    0.075000    0.280100    0.680400    0.662000    0.490000    0.005500    -1.000000   0.070900    0.474300    0.006200\n# 23    0.976200    0.916920    0.296600    0.447800    0.331300    0.050500    0.106500    0.307100    0.440900    0.608600    0.625300    0.050000    0.296000    0.661600    0.652400    0.522800    0.005000    -1.000000   0.086600    0.506100    0.006700\n# 24    0.910200    0.926796    0.302600    0.454600    0.333800    0.000000    0.100200    0.312900    0.394900    0.614900    0.632800    0.000000    0.296600    0.673000    0.676300    0.529700    0.004300    -1.000000   0.093100    0.507500    0.005100\n# 25    0.856500    0.927848    0.298400    0.452700    0.333100    0.025200    0.102300    0.309900    0.305100    0.596100    0.628000    0.025000    0.294900    0.665000    0.659500    0.518100    0.004400    -1.000000   0.094800    0.508600    0.005200\n# 26    0.775300    0.911072    0.299500    0.458800    0.331300    0.025200    0.104800    0.311200    0.309600    0.596300    0.625900    0.025000    0.329000    0.663900    0.669500    0.537500    0.004000    -1.000000   0.077300    0.503100    0.005500\n# 27    0.750800    0.904915    0.304500    0.449700    0.336000    0.041700    0.116300    0.314500    0.365000    0.611300    0.642400    0.050000    0.311900    0.677100    0.681200    0.524300    0.004000    -1.000000   0.077200    0.532100    0.007900\n# 28    0.719000    0.896321    0.302000    0.445200    0.328900    0.050500    0.105400    0.313600    0.402800    0.601200    0.632200    0.050000    0.341500    0.670200    0.690700    0.518200    0.005000    -1.000000   0.089500    0.500900    0.007500\n# 29    0.696800    0.876628    0.312700    0.465100    0.339100    0.025200    0.110800    0.325400    0.324300    0.636000    0.651200    0.025000    0.314200    0.687500    0.702100    0.528600    0.004600    -1.000000   0.107600    0.524600    0.008700\n# 30    0.673600    0.893076    0.306200    0.459600    0.340800    0.000000    0.105400    0.319800    0.397700    0.622300    0.637500    0.000000    0.248300    0.686800    0.684300    0.527800    0.005400    -1.000000   0.104100    0.507100    0.008400\n# 31    0.656000    0.880665    0.317400    0.466100    0.355800    0.101000    0.127100    0.331400    0.407000    0.640700    0.653900    0.100000    0.283000    0.699900    0.715900    0.525300    0.007600    -1.000000   0.107800    0.540300    0.007500\n# 32    0.641600    0.881308    0.319100    0.469200    0.351600    0.050500    0.116600    0.335300    0.419000    0.631700    0.646500    0.050000    0.302300    0.687800    0.694800    0.541000    0.008700    -1.000000   0.115100    0.538300    0.016900\n# 33    0.630900    0.872384    0.321800    0.483500    0.348600    0.025200    0.118400    0.337300    0.375800    0.631200    0.642800    0.025000    0.321000    0.686500    0.713900    0.543200    0.006600    -1.000000   0.125400    0.534800    0.006800\n# 34    0.601500    0.867039    0.322600    0.474200    0.365000    0.025200    0.122200    0.338900    0.374300    0.636800    0.654000    0.025000    0.390900    0.689400    0.714800    0.531500    0.006300    -1.000000   0.127600    0.548800    0.006700\n# 35    0.589100    0.865702    0.325600    0.477700    0.359800    0.012600    0.124500    0.340300    0.419100    0.631200    0.640800    0.025000    0.342000    0.679900    0.713000    0.555900    0.008400    -1.000000   0.127000    0.537900    0.011500\n# 36    0.570200    0.863400    0.329900    0.487600    0.367800    0.000000    0.120900    0.344800    0.413700    0.626100    0.635300    0.000000    0.330700    0.676700    0.732300    0.562100    0.008200    -1.000000   0.135800    0.531900    0.009000\n# 37    0.572800    0.867819    0.334600    0.490000    0.375500    0.000000    0.124800    0.350600    0.406900    0.620100    0.634700    0.000000    0.353400    0.679100    0.724500    0.571400    0.011300    -1.000000   0.144700    0.547700    0.007600\n# 38    0.551600    0.878277    0.328400    0.489500    0.356200    0.025200    0.115700    0.344700    0.419600    0.624900    0.637700    0.025000    0.373900    0.678300    0.715600    0.558400    0.006800    -1.000000   0.154000    0.527100    0.008400\n# 39    0.544900    0.875394    0.327500    0.482600    0.367100    0.075700    0.130200    0.344400    0.379400    0.629200    0.641100    0.075000    0.383000    0.676000    0.723600    0.541600    0.008400    -1.000000   0.146200    0.536900    0.008500\n# 40    0.526600    0.868821    0.330400    0.486800    0.360500    0.050000    0.143700    0.346700    0.380400    0.628400    0.638700    0.050000    0.355700    0.676300    0.723500    0.542100    0.011400    -1.000000   0.160700    0.534000    0.010600\n# 41    0.517000    0.870999    0.335300    0.491700    0.364400    0.025200    0.114200    0.352700    0.433600    0.626100    0.634300    0.025000    0.331800    0.669300    0.731000    0.554100    0.012400    -1.000000   0.160300    0.541300    0.012600\n# 42    0.495300    0.876202    0.334900    0.492200    0.367800    0.012600    0.123700    0.352400    0.455700    0.621900    0.637400    0.025000    0.359100    0.677800    0.728100    0.557000    0.018100    -1.000000   0.155300    0.536000    0.015200\n# 43    0.494200    0.860925    0.337400    0.497000    0.368300    0.050000    0.122900    0.354100    0.426900    0.619600    0.634000    0.050000    0.375600    0.667600    0.736100    0.546500    0.015700    -1.000000   0.163500    0.551300    0.011600\n# 44    0.490000    0.880336    0.336900    0.498100    0.373100    0.000000    0.118500    0.355300    0.449600    0.625400    0.633400    0.000000    0.312500    0.673300    0.728800    0.546800    0.027900    -1.000000   0.160900    0.539500    0.017500\n# 45    0.476800    0.873949    0.338300    0.497100    0.370800    0.000000    0.122000    0.357300    0.448100    0.621400    0.632500    0.000000    0.343200    0.672700    0.724400    0.557100    0.022300    -1.000000   0.168200    0.541900    0.015900\n# 46    0.476600    0.881447    0.335800    0.494500    0.368600    0.000000    0.119000    0.353900    0.455400    0.621800    0.637500    0.000000    0.305700    0.681400    0.729700    0.550700    0.020600    -1.000000   0.163800    0.533800    0.016400\n# 47    0.468400    0.881990    0.334900    0.498200    0.366200    0.000000    0.119200    0.354700    0.449900    0.616500    0.630500    0.000000    0.325600    0.674500    0.723700    0.545300    0.022100    -1.000000   0.173100    0.530000    0.015300\n# 48    0.463700    0.880277    0.337800    0.497900    0.371900    0.000000    0.122900    0.356800    0.460000    0.625600    0.633100    0.000000    0.322200    0.674500    0.724000    0.555300    0.021900    -1.000000   0.175600    0.533600    0.016500\n# 49    0.458200    0.878279    0.338000    0.495400    0.369900    0.000000    0.123000    0.356500    0.461000    0.629700    0.637300    0.000000    0.336400    0.677500    0.727100    0.553400    0.018100    -1.000000   0.174100    0.538700    0.016400\n# 50    0.453200    0.873663    0.340100    0.499100    0.372300    0.000000    0.122000    0.359300    0.462100    0.630300    0.639900    0.000000    0.373300    0.678000    0.729100    0.553300    0.028000    -1.000000   0.173400    0.538800    0.017700\n\n\nTK - Plot loss curves\nTK - Note: May get an error at the beginning where a box is predicted a negative output. This will break training as boxes are expected to be positive floats."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---making-predictions-on-the-test-dataset",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---making-predictions-on-the-test-dataset",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "15 TK - Making predictions on the test dataset",
    "text": "15 TK - Making predictions on the test dataset\nNotes: - Predicting on the whole test dataset only returns a single batch - e.g.¬†test_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"]) - Can just predict on samples individually?\n\nprocessed_dataset[\"test\"][0]\n\n{'pixel_values': tensor([[[-0.9705, -0.7308, -0.9705,  ..., -1.8953, -1.8268, -1.3130],\n          [-1.2959, -0.9363, -0.3883,  ..., -1.8953, -1.7240, -0.5596],\n          [-1.4843, -1.1418, -0.1999,  ..., -1.8782, -1.2788, -0.5424],\n          ...,\n          [ 1.3242,  1.3242,  1.3413,  ..., -0.6452, -0.2856, -0.9877],\n          [ 1.3070,  1.3584,  1.4098,  ..., -0.8678,  0.0398, -0.4911],\n          [ 1.2728,  1.3413,  1.4098,  ..., -0.9705,  0.1768, -0.1657]],\n \n         [[-0.5476, -0.3550, -0.6527,  ..., -1.7031, -1.6155, -1.0903],\n          [-0.8803, -0.5476, -0.0399,  ..., -1.6856, -1.5280, -0.3200],\n          [-1.0728, -0.7402,  0.1527,  ..., -1.6506, -1.0553, -0.3025],\n          ...,\n          [-1.7031, -1.7031, -1.6856,  ..., -0.3901,  0.0301, -0.7227],\n          [-1.7206, -1.6681, -1.6155,  ..., -0.6176,  0.3803, -0.1800],\n          [-1.7556, -1.6856, -1.6155,  ..., -0.7052,  0.5203,  0.1527]],\n \n         [[-1.0550, -0.7064, -0.8284,  ..., -1.6824, -1.5953, -1.0201],\n          [-1.3861, -0.9504, -0.2881,  ..., -1.6999, -1.4559, -0.2532],\n          [-1.6476, -1.1944, -0.1661,  ..., -1.6650, -1.0376, -0.2881],\n          ...,\n          [-1.2641, -1.2641, -1.2467,  ..., -0.9504, -0.8284, -1.2293],\n          [-1.2816, -1.2293, -1.1770,  ..., -1.1596, -0.5321, -1.0027],\n          [-1.3164, -1.2467, -1.1770,  ..., -1.3513, -0.4973, -0.8981]]]),\n 'pixel_mask': tensor([[1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         ...,\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1],\n         [1, 1, 1,  ..., 1, 1, 1]]),\n 'labels': {'size': tensor([640, 480]), 'image_id': tensor([61]), 'class_labels': tensor([4, 5, 1, 0]), 'boxes': tensor([[0.2104, 0.8563, 0.2855, 0.2720],\n         [0.4194, 0.4927, 0.2398, 0.1785],\n         [0.3610, 0.6227, 0.2706, 0.2330],\n         [0.4974, 0.4785, 0.3829, 0.3820]]), 'area': tensor([23860.4043, 13150.1748, 19368.0898, 44929.9102]), 'iscrowd': tensor([0, 0, 0, 0]), 'orig_size': tensor([1280,  960])}}\n\n\n\n# Make predictions with trainer containing trained model\ntest_dataset_preds = model_v1_trainer.predict(test_dataset=processed_dataset[\"test\"])\n# test_dataset_preds\n\n\n\n\n\nprocessed_dataset[\"test\"]\n\n(224, 5)\n\n\n\ntest_dataset_preds.predictions[0]\n\n{'loss_ce': array(0.25415522, dtype=float32),\n 'loss_bbox': array(0.05280206, dtype=float32),\n 'loss_giou': array(0.15111981, dtype=float32),\n 'cardinality_error': array(289.375, dtype=float32)}\n\n\n\n# Get the logits\ntest_pred_logits = test_dataset_preds.predictions[0][1]\n\n# Get the boxes\ntest_pred_boxes = test_dataset_preds.predictions[0][2]\n\n# Get the label IDs\ntest_pred_label_ids = test_dataset_preds.label_ids\n\n# Check shapes\ntest_pred_logits.shape, test_pred_boxes.shape, len(test_pred_label_ids)\n\n((32, 300, 7), (32, 300, 4), 7)\n\n\n\nlen(processed_dataset[\"test\"])\n\n224\n\n\n\n%%time\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n# random_test_sample_outputs\n\n[INFO] Making predictions on test item with index: 163\nCPU times: user 47.5 ms, sys: 0 ns, total: 47.5 ms\nWall time: 48.3 ms\n\n\n\n# image_processor.preprocess?\n\nTK - if your predictions aren‚Äôt the exact same, this is because of the randomness of machine learning, what‚Äôs important is that the direction is similar\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.2, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_test_sample[\"labels\"][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = half_boxes(random_test_sample_outputs_post_processed[0][\"boxes\"])\n\n# Create a list of labels to plot on the boxes \n# TK - Update the colours here\nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores:\")\nfor label in random_test_sample_labels_to_plot:\n    print(label)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=half_image(dataset[\"test\"][random_test_pred_index][\"image\"])),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Making predictions on test item with index: 28\n[INFO] Labels with scores:\nPred: not_trash (0.2721)\nPred: hand (0.2676)\nPred: bin (0.2572)\nPred: bin (0.2484)\nPred: not_trash (0.2415)\nPred: trash (0.2251)\nPred: not_trash (0.2224)\nPred: hand (0.2137)\n\n\n\n\n\n\n\n\n\n\nTK - nice!!! these boxes look far better than our randomly predicted boxes with an untrained model‚Ä¶\nTK - plot the boxes versus the ground truth (e.g.¬†ground truth = green, predictions = red)\n\n\n15.1 TK - Predict on image from filepath\n\n# Pred on image from pathname\nfrom pathlib import Path\nfrom PIL import Image\npath_to_test_image_folder = Path(\"data/trashify_test_images\")\ntest_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\ntest_image_targ_filepath = random.choice(test_image_filepaths)\n# test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\ntest_image_pil = Image.open(test_image_targ_filepath)\ntest_image_preprocessed = image_processor.preprocess(images=test_image_pil,\n                                                     return_tensors=\"pt\")\n\ndef get_image_dimensions_from_pil(image: Image.Image) -&gt; torch.tensor:\n    \"\"\"\n    Convert the dimensions of a PIL image to a PyTorch tensor in the order (height, width).\n\n    Args:\n        image (Image.Image): The input PIL image.\n\n    Returns:\n        torch.Tensor: A tensor containing the height and width of the image.\n    \"\"\"\n    # Get (width, height) of image (PIL.Image.size returns width, height)\n    width, height = image.size\n\n    # Convert to a tensor in the order (height, width)\n    image_dimensions_tensor = torch.tensor([height, width])\n\n    return image_dimensions_tensor\n\n# Get image original size\ntest_image_size = get_image_dimensions_from_pil(image=test_image_pil)\n\n# Make predictions on the preprocessed image\nrandom_test_sample_outputs = model(pixel_values=test_image_preprocessed[\"pixel_values\"].to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                   pixel_mask=None)\n\nTHRESHOLD = 0.2\n\n# Post process the predictions\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=THRESHOLD,\n    target_sizes=[test_image_size] # needs to be same length as batch dimension of the logits (e.g. [[height, width]])\n)\n\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a lsit of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\"\n                                     for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(\"[INFO] Labels with scores:\")\nfor item in random_test_sample_labels_to_plot:\n    print(item)\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=test_image_pil),                    \n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[105], line 6\n      4 path_to_test_image_folder = Path(\"data/trashify_test_images\")\n      5 test_image_filepaths = list(path_to_test_image_folder.rglob(\"*.jp*g\"))\n----&gt; 6 test_image_targ_filepath = random.choice(test_image_filepaths)\n      7 # test_image_targ_filepath = \"data/trashify_test_images/IMG_6692.jpeg\"\n      8 test_image_pil = Image.open(test_image_targ_filepath)\n\nFile ~/miniconda3/envs/ai/lib/python3.11/random.py:373, in Random.choice(self, seq)\n    370 # As an accommodation for NumPy, we don't use \"if not seq\"\n    371 # because bool(numpy.array()) raises a ValueError.\n    372 if not len(seq):\n--&gt; 373     raise IndexError('Cannot choose from an empty sequence')\n    374 return seq[self._randbelow(len(seq))]\n\nIndexError: Cannot choose from an empty sequence"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---upload-our-trained-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "16 TK - Upload our trained model to Hugging Face Hub",
    "text": "16 TK - Upload our trained model to Hugging Face Hub\nTK - Let‚Äôs make our model available for others to use.\n\n# TK\n# Make extensions to make the model better... (e.g. data augmentation = harder training set = better overall validation loss)\n# Model with data augmentation\n# Model with longer training (e.g. 100 epochs) \n# Research eval_do_concat_batches=False/True & see what the results do...\n\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_save_path}\")\nmodel_v1_trainer.save_model(model_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_no_aug_25_epochs_lr_1e-04\n\n\n\n# Push the model to the hub\n# Note: this will require you to have your Hugging Face account setup \nmodel_v1_trainer.push_to_hub(commit_message=\"upload trashify object detection model\",\n                    # token=None # Optional to add a token manually\n                    )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector/commit/ab273cec67e5124ac047dc1e068c379c718e6c37', commit_message='upload trashify object detection model', commit_description='', oid='ab273cec67e5124ac047dc1e068c379c718e6c37', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector'), pr_revision=None, pr_num=None)"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#creating-a-demo-of-our-model-with-gradio",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#creating-a-demo-of-our-model-with-gradio",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "17 Creating a demo of our model with Gradio",
    "text": "17 Creating a demo of our model with Gradio\n\n%%writefile demos/trashify_object_detector/README.md\n---\ntitle: Trashify Demo V1 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector V1 \n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - add links to resources to learn more\n\nOverwriting demos/trashify_object_detector/README.md\n\n\n\n%%writefile demos/trashify_object_detector/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local \nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector\"\n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V1\",\n    description=\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25],\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector/app.py\n\n\n\n17.1 TK - Upload demo to Hugging Face Spaces to get it live\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v1\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v1\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v1\n[INFO] Uploading demos/trashify_object_detector to repo: mrdbourke/trashify_demo_v1\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v1/tree/main/.\n\n\nTK - see the demo here: https://huggingface.co/spaces/mrdbourke/trashify_demo_v1\n\n\n17.2 TK - Testing the hosted demo\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v1.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"1000\"\n&gt;&lt;/iframe&gt;     \n''')"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---improve-our-model-with-data-augmentation",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---improve-our-model-with-data-augmentation",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "18 TK - Improve our model with data augmentation",
    "text": "18 TK - Improve our model with data augmentation\nUPTOHERE - Read for object detection augmentation (keep it simple) - Check out the papers for detection augmentation - Train a model with data augmentation - Compare the model‚Äôs metrics between data augmentation and no data augmentation\n\n18.1 Load dataset\n\nfrom datasets import load_dataset\n\n# load_dataset?\ndataset = load_dataset(path=\"mrdbourke/trashify_manual_labelled_images\")\n\nprint(f\"[INFO] Length of original dataset: {len(dataset['train'])}\")\n\n# Split the data\ndataset_split = dataset[\"train\"].train_test_split(test_size=0.3, seed=42) # split the dataset into 70/30 train/test\ndataset_test_val_split = dataset_split[\"test\"].train_test_split(test_size=0.6, seed=42) # split the test set into 40/60 validation/test\n\n# Create splits\ndataset[\"train\"] = dataset_split[\"train\"]\ndataset[\"validation\"] = dataset_test_val_split[\"train\"]\ndataset[\"test\"] = dataset_test_val_split[\"test\"]\n\ndataset\n\n[INFO] Length of original dataset: 1128\n\n\nDatasetDict({\n    train: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 789\n    })\n    validation: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 135\n    })\n    test: Dataset({\n        features: ['image', 'image_id', 'annotations', 'label_source', 'image_source'],\n        num_rows: 204\n    })\n})\n\n\n\n# Get the categories from the dataset\n# Note: this requires the dataset to have been uploaded with this feature setup\ncategories = dataset[\"train\"].features[\"annotations\"].feature[\"category_id\"]\n\n# Get the names attribute\ncategories.names\n\n['bin', 'hand', 'not_bin', 'not_hand', 'not_trash', 'trash', 'trash_arm']\n\n\n\nid2label = {i: class_name for i, class_name in enumerate(categories.names)}\nlabel2id = {value: key for key, value in id2label.items()}\n\nid2label, label2id\n\n({0: 'bin',\n  1: 'hand',\n  2: 'not_bin',\n  3: 'not_hand',\n  4: 'not_trash',\n  5: 'trash',\n  6: 'trash_arm'},\n {'bin': 0,\n  'hand': 1,\n  'not_bin': 2,\n  'not_hand': 3,\n  'not_trash': 4,\n  'trash': 5,\n  'trash_arm': 6})\n\n\n\n# View a random sample\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample\n\n{'image': &lt;PIL.Image.Image image mode=RGB size=960x1280&gt;,\n 'image_id': 955,\n 'annotations': {'file_name': ['ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg',\n   'ed8cb1ab-2882-4ab7-a839-c53fa2908a72.jpeg'],\n  'image_id': [955, 955, 955, 955],\n  'category_id': [5, 1, 0, 4],\n  'bbox': [[464.79998779296875, 625.5999755859375, 68.30000305175781, 92.5],\n   [483.0, 686.2000122070312, 173.0, 247.3000030517578],\n   [102.80000305175781, 361.70001220703125, 813.5, 734.0],\n   [325.29998779296875,\n    716.5999755859375,\n    189.60000610351562,\n    215.3000030517578]],\n  'iscrowd': [0, 0, 0, 0],\n  'area': [6317.75, 42782.8984375, 597109.0, 40820.87890625]},\n 'label_source': 'manual_prodigy_label',\n 'image_source': 'manual_taken_photo'}\n\n\n\n\n18.2 Setup model\n\nfrom transformers import AutoModelForObjectDetection, AutoImageProcessor\n\n# Model config - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig \n# Model docs - https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel \nMODEL_NAME = \"microsoft/conditional-detr-resnet-50\"\n\n# Set image size\nIMAGE_SIZE = 640 # other common image sizes include: 300x300, 480x480, 512x512, 640x640, 800x800 (best to experiment and see which works best)\n\n# Get the image processor (this is required for prepraring images)\n# See docs: https://huggingface.co/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrImageProcessor.preprocess\nimage_processor = AutoImageProcessor.from_pretrained(\n    pretrained_model_name_or_path=MODEL_NAME,\n    format=\"coco_detection\", # this is the default\n    do_convert_annotations=True, # defaults to True, converts boxes to (center_x, center_y, width, height)\n    size={\"shortest_edge\": IMAGE_SIZE, \"longest_edge\": IMAGE_SIZE},\n    max_size=None # Note: this parameter is deprecated and will produce a warning if used during processing.\n)\n\n# Check out the image processor\nimage_processor\n\nConditionalDetrImageProcessor {\n  \"do_convert_annotations\": true,\n  \"do_normalize\": true,\n  \"do_pad\": true,\n  \"do_rescale\": true,\n  \"do_resize\": true,\n  \"format\": \"coco_detection\",\n  \"image_mean\": [\n    0.485,\n    0.456,\n    0.406\n  ],\n  \"image_processor_type\": \"ConditionalDetrImageProcessor\",\n  \"image_std\": [\n    0.229,\n    0.224,\n    0.225\n  ],\n  \"pad_size\": null,\n  \"resample\": 2,\n  \"rescale_factor\": 0.00392156862745098,\n  \"size\": {\n    \"longest_edge\": 640,\n    \"shortest_edge\": 640\n  }\n}\n\n\n\n# First create a couple of dataclasses to store our data format\nfrom dataclasses import dataclass, asdict\nfrom typing import List, Tuple\n\n@dataclass\nclass SingleCOCOAnnotation:\n    \"An instance of a single COCO annotation. See COCO format: https://cocodataset.org/#format-data\"\n    image_id: int\n    category_id: int\n    bbox: List[float] # bboxes in format [x_top_left, y_top_left, width, height]\n    area: float = 0.0\n    iscrowd: int = 0\n\n@dataclass\nclass ImageCOCOAnnotations:\n    \"A collection of COCO annotations for a given image_id.\"\n    image_id: int\n    annotations: List[SingleCOCOAnnotation]\n\ndef format_image_annotations_as_coco(\n        image_id: int,\n        categories: List[int],\n        areas: List[float],\n        bboxes: List[Tuple[float, float, float, float]] # bboxes in format \n) -&gt; dict:\n    # Turn input lists into a list of dicts\n    coco_format_annotations = [\n        asdict(SingleCOCOAnnotation(\n            image_id=image_id,\n            category_id=category,\n            bbox=list(bbox),\n            area=area,\n        ))\n        for category, area, bbox in zip(categories, areas, bboxes)\n    ]\n\n    # Return dictionary of annotations with format {\"image_id\": ..., \"annotations\": ...}\n    return asdict(ImageCOCOAnnotations(image_id=image_id,\n                                       annotations=coco_format_annotations))\n\n# Let's try it out\nimage_id = 0\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\nrandom_sample_categories = random_sample[\"annotations\"][\"category_id\"]\nrandom_sample_areas = random_sample[\"annotations\"][\"area\"]\nrandom_sample_bboxes = random_sample[\"annotations\"][\"bbox\"]\n\nrandom_sample_coco_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                  categories=random_sample_categories,\n                                                                  areas=random_sample_areas,\n                                                                  bboxes=random_sample_bboxes)\nrandom_sample_coco_annotations\n\n{'image_id': 0,\n 'annotations': [{'image_id': 0,\n   'category_id': 0,\n   'bbox': [452.79998779296875,\n    446.6000061035156,\n    272.70001220703125,\n    388.20001220703125],\n   'area': 105862.140625,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [146.5, 487.5, 348.3999938964844, 424.79998779296875],\n   'area': 148000.3125,\n   'iscrowd': 0},\n  {'image_id': 0,\n   'category_id': 0,\n   'bbox': [8.300000190734863, 522.5, 241.3000030517578, 505.0],\n   'area': 121856.5,\n   'iscrowd': 0}]}\n\n\n\n# Setup the model\n# TODO: Can functionize this to create a base model (e.g. a model with all the base settings/untrained weights) \ndef create_model():\n    model = AutoModelForObjectDetection.from_pretrained(\n                pretrained_model_name_or_path=MODEL_NAME,\n                label2id=label2id,\n                id2label=id2label,\n                ignore_mismatched_sizes=True,\n                backbone=\"resnet50\")\n    return model\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n\n18.3 tk - Setup and visualize transforms (augmentations)\n\nTK - explain simple augmentations:\n\nRandomHorizontalFlip\nColorJitter\n\nThat‚Äôs it‚Ä¶\nTailor the data augmentations to your own dataset/problem\n\n\n\n\nimport torch\nimport torchvision\n\nfrom torchvision.transforms import v2 \nfrom torchvision.transforms.v2.functional import to_pil_image, pil_to_tensor, pad\nfrom torchvision.utils import draw_bounding_boxes\n\n# Optional transform from here: https://arxiv.org/pdf/2012.07177\n# Scale jitter -&gt; pad -&gt; resize \n\ntrain_transforms = v2.Compose([\n    v2.ToImage(),\n    # v2.RandomResizedCrop(size=(640, 640), antialias=True),\n    # v2.Resize(size=(640, 640)),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.ScaleJitter(target_size=(640, 640)),\n    # PadToSize(target_height=640, target_width=640),\n    v2.RandomHorizontalFlip(p=0.5),\n    # v2.RandomPhotometricDistort(p=0.75),\n    # v2.RandomShortestSize(min_size=480, max_size=640),\n    # v2.Resize(size=(640, 640)),\n    v2.ColorJitter(brightness=0.75, # randomly adjust the brightness \n                   contrast=0.75), # randomly alter the contrast\n    # v2.RandomPerspective(distortion_scale=0.3, \n    #                      p=0.3,\n    #                      fill=(123, 117, 104)), # fill with average colour\n    # v2.RandomZoomOut(side_range=(1.0, 1.5),\n    #                  fill=(123, 117, 104)),\n    v2.ToDtype(dtype=torch.float32, scale=True),\n\n    # v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    # sanitize boxes, recommended to be called at least once at the end of the transform pipeline\n    # https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes\n    v2.SanitizeBoundingBoxes(labels_getter=None) \n])\n\n\n\n18.4 TK - Visualize transforms\n\nimport random\nrandom_idx = random.randint(0, len(dataset[\"train\"]))\nrandom_sample = dataset[\"train\"][random_idx]\n\n# Perform transform on image\nrandom_sample_image = random_sample[\"image\"]\nrandom_sample_image_width, random_sample_image_height = random_sample[\"image\"].size\nrandom_sample_boxes_xywh = random_sample[\"annotations\"][\"bbox\"] # these are in XYWH format\nrandom_sample_boxes_xyxy = torchvision.ops.box_convert(boxes=torch.tensor(random_sample_boxes_xywh),\n                                                       in_fmt=\"xywh\",\n                                                       out_fmt=\"xyxy\")\n\n# Format boxes to be xyxy for transforms\nrandom_sample_boxes_xyxy = torchvision.tv_tensors.BoundingBoxes(\n    data=random_sample_boxes_xyxy,\n    format=\"XYXY\",\n    canvas_size=(random_sample_image_height, random_sample_image_width) # comes in the form height, width\n)\n\nrandom_sample_image_transformed, random_sample_boxes_transformed = train_transforms(random_sample_image,\n                                                                                    random_sample_boxes_xyxy)\n\n\nrandom_sample_original_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                       image=pil_to_tensor(pic=random_sample_image),                    \n                                                       boxes=random_sample_boxes_xyxy,\n                                                       labels=None,\n                                                       width=3))\nrandom_sample_original_image_with_boxes_size = (random_sample_original_image_with_boxes.size[1], random_sample_original_image_with_boxes.size[0])\n\n# Plot the predicted boxes on the random test image \nrandom_sample_transformed_image_with_boxes = to_pil_image(pic=draw_bounding_boxes(\n                                                          image=random_sample_image_transformed,                    \n                                                          boxes=random_sample_boxes_transformed,\n                                                          labels=None,\n                                                          width=3))\nrandom_sample_transformed_image_with_boxes_size = (random_sample_transformed_image_with_boxes.size[1], random_sample_transformed_image_with_boxes.size[0])\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# Display image 1\naxes[0].imshow(random_sample_original_image_with_boxes)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image | Size: {random_sample_original_image_with_boxes_size} (hxw)\")\n\n# Display image 2\naxes[1].imshow(random_sample_transformed_image_with_boxes)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Transformed Image | Size: {random_sample_transformed_image_with_boxes_size} (hxw)\")\n\n# Show the plot\nplt.tight_layout()\nplt.show();\n\n\n\n\n\n\n\n\n\n\n18.5 TK - Create function to preprocess and transform batch of examples\n\nfrom torchvision import tv_tensors\n\ndef preprocess_and_transform_batch(examples,\n                                   image_processor,\n                                   transforms=None # Note: Could optionally add transforms (e.g. data augmentation) here \n                                   ):\n    \"\"\"\n    Function to preprocess batches of data.\n\n    Can optionally apply a transform later on.\n    \"\"\"\n    images = []\n    \n    coco_annotations = [] \n\n    for image, image_id, annotations_dict in zip(examples[\"image\"], examples[\"image_id\"], examples[\"annotations\"]):\n        # Note: may need to open image if it is an image path rather than PIL.Image\n        bbox_list = annotations_dict[\"bbox\"]\n        category_list = annotations_dict[\"category_id\"]\n        area_list = annotations_dict[\"area\"]\n    \n        # Note: Could optionally apply a transform here.\n        if transforms:\n            width, height = image.size[0], image.size[1]\n            bbox_list = tv_tensors.BoundingBoxes(data=torch.tensor(bbox_list),\n                                                 format=\"XYWH\",\n                                                 canvas_size=(height, width)) # canvas_size = height, width\n            image, bbox_list = transforms(image, \n                                          bbox_list)\n\n        # Format the annotations into COCO format\n        cooc_format_annotations = format_image_annotations_as_coco(image_id=image_id,\n                                                                   categories=category_list,\n                                                                   areas=area_list,\n                                                                   bboxes=bbox_list)\n        \n        # Add images/annotations to their respective lists\n        images.append(image)\n        coco_annotations.append(cooc_format_annotations)\n\n    \n    # Apply the image processor to lists of images and annotations\n    preprocessed_batch = image_processor.preprocess(images=images,\n                                                    annotations=coco_annotations,\n                                                    return_tensors=\"pt\",\n                                                    do_rescale=False if transforms else True,\n                                                    do_resize=True,\n                                                    do_pad=True)\n    \n    return preprocessed_batch\n\n\nfrom functools import partial\n\n# Make a transform for different splits\ntrain_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=train_transforms,\n    image_processor=image_processor\n)\n\nvalidation_transform_batch = partial(\n    preprocess_and_transform_batch,\n    transforms=None,\n    image_processor=image_processor\n)\n\n\nprocessed_dataset = dataset.copy()\nprocessed_dataset[\"train\"] = dataset[\"train\"].with_transform(train_transform_batch)\nprocessed_dataset[\"validation\"] = dataset[\"validation\"].with_transform(validation_transform_batch)\nprocessed_dataset[\"test\"] = dataset[\"test\"].with_transform(validation_transform_batch)\n\n\n# Create data_collate_function to collect samples into batches\n# TK - want to get a dictionary of {\"pixel_mask\": [batch_of_samples], \"labels\": [batch_of_samples], \"pixel_mask\": [batch_of_samples]}\ndef data_collate_function(batch):\n    collated_data = {} \n\n    # Stack together a collection of pixel_values tensors\n    collated_data[\"pixel_values\"] = torch.stack([sample[\"pixel_values\"] for sample in batch])\n\n    # Get the labels (these are dictionaries so no need to use torch.stack)\n    collated_data[\"labels\"] = [sample[\"labels\"] for sample in batch]\n\n    # If there is a pixel_mask key, return the pixel_mask's as well\n    if \"pixel_mask\" in batch[0]:\n        collated_data[\"pixel_mask\"] = torch.stack([sample[\"pixel_mask\"] for sample in batch])\n\n    return collated_data\n\n\nmodel_aug = create_model()\nmodel_aug\n\nSome weights of ConditionalDetrForObjectDetection were not initialized from the model checkpoint at microsoft/conditional-detr-resnet-50 and are newly initialized because the shapes did not match:\n- class_labels_classifier.bias: found shape torch.Size([91]) in the checkpoint and torch.Size([7]) in the model instantiated\n- class_labels_classifier.weight: found shape torch.Size([91, 256]) in the checkpoint and torch.Size([7, 256]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\n\nConditionalDetrForObjectDetection(\n  (model): ConditionalDetrModel(\n    (backbone): ConditionalDetrConvModel(\n      (conv_encoder): ConditionalDetrConvEncoder(\n        (model): FeatureListNet(\n          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n          (bn1): ConditionalDetrFrozenBatchNorm2d()\n          (act1): ReLU(inplace=True)\n          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n          (layer1): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer2): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer3): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (3): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (4): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (5): Bottleneck(\n              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n          (layer4): Sequential(\n            (0): Bottleneck(\n              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n              (downsample): Sequential(\n                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n                (1): ConditionalDetrFrozenBatchNorm2d()\n              )\n            )\n            (1): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n            (2): Bottleneck(\n              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn1): ConditionalDetrFrozenBatchNorm2d()\n              (act1): ReLU(inplace=True)\n              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn2): ConditionalDetrFrozenBatchNorm2d()\n              (drop_block): Identity()\n              (act2): ReLU(inplace=True)\n              (aa): Identity()\n              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn3): ConditionalDetrFrozenBatchNorm2d()\n              (act3): ReLU(inplace=True)\n            )\n          )\n        )\n      )\n      (position_embedding): ConditionalDetrSinePositionEmbedding()\n    )\n    (input_projection): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n    (query_position_embeddings): Embedding(300, 256)\n    (encoder): ConditionalDetrEncoder(\n      (layers): ModuleList(\n        (0-5): 6 x ConditionalDetrEncoderLayer(\n          (self_attn): DetrAttention(\n            (k_proj): Linear(in_features=256, out_features=256, bias=True)\n            (v_proj): Linear(in_features=256, out_features=256, bias=True)\n            (q_proj): Linear(in_features=256, out_features=256, bias=True)\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n    )\n    (decoder): ConditionalDetrDecoder(\n      (layers): ModuleList(\n        (0): ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n        (1-5): 5 x ConditionalDetrDecoderLayer(\n          (sa_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_qpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (sa_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (self_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (ca_qcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_proj): None\n          (ca_kcontent_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_kpos_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_v_proj): Linear(in_features=256, out_features=256, bias=True)\n          (ca_qpos_sine_proj): Linear(in_features=256, out_features=256, bias=True)\n          (encoder_attn): ConditionalDetrAttention(\n            (out_proj): Linear(in_features=256, out_features=256, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=256, out_features=2048, bias=True)\n          (fc2): Linear(in_features=2048, out_features=256, bias=True)\n          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n      (query_scale): MLP(\n        (layers): ModuleList(\n          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n        )\n      )\n      (ref_point_head): MLP(\n        (layers): ModuleList(\n          (0): Linear(in_features=256, out_features=256, bias=True)\n          (1): Linear(in_features=256, out_features=2, bias=True)\n        )\n      )\n    )\n  )\n  (class_labels_classifier): Linear(in_features=256, out_features=7, bias=True)\n  (bbox_predictor): ConditionalDetrMLPPredictionHead(\n    (layers): ModuleList(\n      (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)\n      (2): Linear(in_features=256, out_features=4, bias=True)\n    )\n  )\n)\n\n\n\n# Note: Depending on the size/speed of your GPU, this may take a while\n\nfrom transformers import TrainingArguments, Trainer\n\n# Set the batch size according to the memory you have available on your GPU\n# e.g. on my NVIDIA RTX 4090 with 24GB of VRAM, I can use a batch size of 32 without running out of memory\nBATCH_SIZE = 16\n\n# Disable warnings about `max_size` parameter being deprecated (this is okay)\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"The `max_size` parameter is deprecated*\")\n\n# Note: AdamW Optimizer is used by default\ntraining_args = TrainingArguments(\n    output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\", # Tk - make sure this is suitable for data aug model\n    num_train_epochs=25,\n    fp16=True,\n    per_device_train_batch_size=BATCH_SIZE,\n    per_device_eval_batch_size=BATCH_SIZE,\n    learning_rate=1e-4,\n    lr_scheduler_type=\"linear\", # default = \"linear\", can try others such as \"cosine\", \"constant\" etc\n    weight_decay=1e-4,\n    max_grad_norm=0.01,\n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False,\n    eval_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    logging_strategy=\"epoch\",\n    save_total_limit=2,\n    remove_unused_columns=False,\n    report_to=\"none\", # don't save experiments to a third party service\n    dataloader_num_workers=4,\n    warmup_ratio=0.05,\n    push_to_hub=False,\n    eval_do_concat_batches=False\n)\n\nmodel_v2_trainer = Trainer(\n    model=model_aug,\n    args=training_args,\n    train_dataset=processed_dataset[\"train\"],\n    eval_dataset=processed_dataset[\"validation\"],\n    tokenizer=image_processor,\n    data_collator=data_collate_function,\n    # compute_metrics=None # TODO: add a metrics function, just see if model trains first\n)\n\nmodel_v2_results = model_v2_trainer.train()\n\n/home/daniel/miniconda3/envs/ai/lib/python3.11/site-packages/accelerate/accelerator.py:488: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n  self.scaler = torch.cuda.amp.GradScaler(**kwargs)\n\n\n\n    \n      \n      \n      [1250/1250 08:19, Epoch 25/25]\n    \n    \n\n\n\nEpoch\nTraining Loss\nValidation Loss\n\n\n\n\n1\n100.473500\n8.029722\n\n\n2\n4.369000\n2.737582\n\n\n3\n2.551800\n2.183892\n\n\n4\n2.222600\n1.922801\n\n\n5\n1.990600\n1.740759\n\n\n6\n1.821900\n1.557272\n\n\n7\n1.697400\n1.477890\n\n\n8\n1.602700\n1.451024\n\n\n9\n1.551700\n1.371128\n\n\n10\n1.449100\n1.317680\n\n\n11\n1.433500\n1.281066\n\n\n12\n1.364500\n1.247493\n\n\n13\n1.331400\n1.206003\n\n\n14\n1.297300\n1.187397\n\n\n15\n1.250600\n1.179421\n\n\n16\n1.231900\n1.165661\n\n\n17\n1.147900\n1.129974\n\n\n18\n1.146600\n1.117911\n\n\n19\n1.113800\n1.109535\n\n\n20\n1.115300\n1.096120\n\n\n21\n1.089400\n1.078995\n\n\n22\n1.069100\n1.087004\n\n\n23\n1.061900\n1.080366\n\n\n24\n1.045900\n1.071728\n\n\n25\n1.036300\n1.070385\n\n\n\n\n\n\nTK - Note: You might get the following issue (negative bounding box coordinate predictions), can try again for more stable predictions (predictions are inherently random to begin with) or use a learning rate warmup to help stabilize predictions:\n\nValueError: boxes1 must be in [x0, y0, x1, y1] (corner) format, but got tensor([[ 0.5796, 0.5566, 0.9956, 0.9492], [ 0.5718, 0.0610, 0.7202, 0.1738], [ 0.8218, 0.5107, 0.9878, 0.6289], ‚Ä¶, [ 0.1379, 0.1403, 0.6709, 0.6138], [ 0.7471, 0.4319, 1.0088, 0.5864], [-0.0660, 0.2052, 0.2067, 0.5107]], device=‚Äòcuda:0‚Äô, dtype=torch.float16)\n\n\n\n18.6 TK - Save the trained model\n\n# Save the model\nfrom datetime import datetime\n\n# TODO: update this save path so we know when the model was saved and what its parameters were\ntraining_epochs_ = training_args.num_train_epochs\nlearning_rate_ = \"{:.0e}\".format(training_args.learning_rate)\n\nmodel_v2_save_path = f\"models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_{training_epochs_}_epochs_lr_{learning_rate_}\"\nprint(f\"[INFO] Saving model to: {model_v2_save_path}\")\nmodel_v2_trainer.save_model(model_v2_save_path)\n\n[INFO] Saving model to: models/learn_hf_microsoft_detr_finetuned_trashify_box_dataset_only_manual_data_with_aug_25_epochs_lr_1e-04"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---upload-augmentation-model-to-hugging-face-hub",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "19 TK - Upload Augmentation Model to Hugging Face Hub",
    "text": "19 TK - Upload Augmentation Model to Hugging Face Hub\n\n# Push the model to the Hugging Face Hub\n# TK Note: This will require you to have your Hugging Face account setup (e.g. see the setup guide, tk - link to setup guide)\n# TK - this will push to the parameter `output_dir=\"detr_finetuned_trashify_box_detector_with_data_aug\"`\nmodel_v2_trainer.push_to_hub(commit_message=\"upload trashify object detection model with data augmentation\"\n                             # token=None, # Optional to add token manually\n                            )\n\n\n\n\n\n\n\n\n\n\nCommitInfo(commit_url='https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug/commit/2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', commit_message='upload trashify object detection model with data augmentation', commit_description='', oid='2f5f3ed0a205b13ddf2a0e3b76120412e33b0861', pr_url=None, repo_url=RepoUrl('https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug', endpoint='https://huggingface.co', repo_type='model', repo_id='mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug'), pr_revision=None, pr_num=None)"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---compare-results-of-different-models",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---compare-results-of-different-models",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "20 TK - Compare results of different models",
    "text": "20 TK - Compare results of different models\nUPTOHERE - Showcase model 2 doing better because of augmentation (harder to learn)\n\nTK - Compare v1 model to v2\n\nTK - Get model_v1 results into a variable and save it for later\nCompare both of these as plots against each other, e.g.¬†have the training curves for aug/no_aug on one plot and the curves for validation data for aug/no_aug on another plot\n\nTK - offer extensions to improve the model\n\nTK - training model for longer, potentially using synthetic data‚Ä¶?\n\nTK - could I use 1000 high quality synthetic data samples to improve our model?\n\nTK - try use a different learning rate\n\n\n\n# TK - Turn this workflow into a function e.g. def get_history_from_trainer() -&gt; df/dict of history\ndef get_history_metrics_from_trainer(trainer):\n    trainer_history = trainer.state.log_history \n    trainer_history_metrics = trainer_history[:-1] # get everything except the training time metrics (we've seen these already)\n    trainer_history_training_time = trainer_history[-1]\n\n    model_train_loss = [item[\"loss\"] for item in trainer_history_metrics if \"loss\" in item.keys()]\n    model_eval_loss = [item[\"eval_loss\"] for item in trainer_history_metrics if \"eval_loss\" in item.keys()]\n    model_learning_rate = [item[\"learning_rate\"] for item in trainer_history_metrics if \"learning_rate\" in item.keys()] \n\n    return model_train_loss, model_eval_loss, model_learning_rate, trainer_history_training_time\n\nmodel_v1_train_loss, model_v1_eval_loss, model_v1_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v1_trainer)\nmodel_v2_train_loss, model_v2_eval_loss, model_v2_learning_rate, _ = get_history_metrics_from_trainer(trainer=model_v2_trainer)\n\n\nimport matplotlib.pyplot as plt\n\n# Plot model loss curves against each other for same model\n# Note: Start from index 1 onwards to remove large loss spike at beginning of training \nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nax[0].plot(model_v1_train_loss[1:], label=\"Model V1 Train Loss\")\nax[0].plot(model_v1_eval_loss[1:], label=\"Model V1 Eval Loss\")\nax[0].set_title(\"Model V1 Loss Curves\")\nax[0].set_ylabel(\"Loss\")\nax[0].set_xlabel(\"Epoch\")\nax[0].legend()\n\nax[1].plot(model_v2_train_loss[1:], label=\"Model V2 Train Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model V2 Eval Loss\")\nax[1].set_title(\"Model V2 Loss Curves\")\nax[1].set_ylabel(\"Loss\")\nax[1].set_xlabel(\"Epoch\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - notice the overfitting begin to happen with model v1 (no data augmentation) but model v2 has less overfitting and achieves a lower validation loss\n\nimport matplotlib.pyplot as plt\n\nplt.plot(model_v1_learning_rate, label=\"Model V1\")\nplt.plot(model_v2_learning_rate, label=\"Model V2\")\nplt.title(\"Model Learning Rate vs. Epoch\")\nplt.ylabel(\"Learning Rate\")\nplt.xlabel(\"Epoch\")\nplt.legend();\n\n\n\n\n\n\n\n\n\n# Plot loss values against each other\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nnum_epochs = range(0, len(model_v1_train_loss))\nax[0].plot(model_v1_train_loss[1:], label=\"Model 1 Training Loss\")\nax[0].plot(model_v2_train_loss[1:], label=\"Model 2 Training Loss\")\nax[0].set_title(\"Model Training Loss Curves\")\nax[0].set_ylabel(\"Training Loss\")\nax[0].set_xlabel(\"Epochs\")\nax[0].legend()\n\nax[1].plot(model_v1_eval_loss[1:], label=\"Model 1 Eval Loss\")\nax[1].plot(model_v2_eval_loss[1:], label=\"Model 2 Eval Loss\")\nax[1].set_title(\"Model Eval Loss Curves\")\nax[1].set_ylabel(\"Eval Loss\")\nax[1].set_xlabel(\"Epochs\")\nax[1].legend();\n\n\n\n\n\n\n\n\ntk - describe the loss curves here, model 2 curves may be higher for training loss but they really start to accelerate on the evaluation set towards the end"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---create-demo-with-augmentation-model",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---create-demo-with-augmentation-model",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "21 TK - Create demo with Augmentation Model",
    "text": "21 TK - Create demo with Augmentation Model\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/README.md\n---\ntitle: Trashify Demo V2 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V2\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    for box, score, label in zip(results[\"boxes\"], results[\"scores\"], results[\"labels\"]):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # Remove the draw each time\n    del draw\n\n    # Setup blank string to print out\n    return_string = \"\"\n\n    # Setup list of target items to discover\n    target_items = [\"trash\", \"bin\", \"hand\"]\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(class_name_text_labels) == 0) or not (any_in_list(list_a=target_items, list_b=class_name_text_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return image, return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in class_name_text_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {class_name_text_labels}. But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=class_name_text_labels):\n        return_string = f\"+1! Found the following items: {class_name_text_labels}, thank you for cleaning up the area!\"\n\n    print(return_string)\n    \n    return image, return_string\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output\"),\n        gr.Text(label=\"Text Output\")\n    ],\n    title=\"üöÆ Trashify Object Detection Demo V2\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The [model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) in V2 has been trained with data augmentation preprocessing (color jitter, horizontal flipping) to improve robustness. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model/app.py\n\n\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v2\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify V2 box detection model (with data augmentation) app.py\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v2\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v2\n[INFO] Uploading demos/trashify_object_detector_data_aug_model to repo: mrdbourke/trashify_demo_v2\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v2/tree/main/.\n\n\n\n# Next:\n# Upload augmentation model to Hugging Face Hub ‚úÖ\n# Create demo for augmentation model ‚úÖ\n# Compare results from augmentation model to non-augmentation model ‚úÖ\n\n\n21.1 TK - Make a prediction on a random test sample with model using data aug model\n\n# Get a random sample from the test preds\nrandom_test_pred_index = random.randint(0, len(processed_dataset[\"test\"]))\nprint(f\"[INFO] Making predictions on test item with index: {random_test_pred_index}\")\n\nrandom_test_sample = processed_dataset[\"test\"][random_test_pred_index]\n\n# # Do a single forward pass with the model\nrandom_test_sample_outputs = model_aug(pixel_values=random_test_sample[\"pixel_values\"].unsqueeze(0).to(\"cuda\"), # model expects input [batch_size, color_channels, height, width]\n                                       pixel_mask=None)\n\n# Post process a random item from test preds\nrandom_test_sample_outputs_post_processed = image_processor.post_process_object_detection(\n    outputs=random_test_sample_outputs,\n    threshold=0.25, # prediction probability threshold for boxes (note: boxes from an untrained model will likely be bad)\n    target_sizes=[random_test_sample[\"labels\"][\"orig_size\"]] # original input image size (or whichever target size you'd like), required to be same number of input items in a list\n)\n\n# Plot the random sample test preds\n# Extract scores, labels and boxes\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\nprint(f\"[INFO] Boxes:\")\nfor item in random_test_sample_pred_boxes:\n    print(item.detach().cpu())\nprint(f\"[INFO] Total preds: {len(random_test_sample_labels_to_plot)}\")\n\n# Plot the predicted boxes on the random test image \nto_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n[INFO] Making predictions on test item with index: 163\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Boxes:\ntensor([  10.7812,  393.1250,  950.1562, 1160.6250])\ntensor([ 149.8828,  667.9688,  471.6797, 1018.2812])\ntensor([405.0000, 679.1406, 668.4375, 972.1094])\ntensor([248.2031, 472.6562, 675.7031, 994.8438])\ntensor([ 140.6250,  467.3438,  675.9375, 1002.6562])\ntensor([ 373.2422,  896.4844,  648.6328, 1063.5156])\ntensor([  10.3125,  667.9688,  472.0312, 1264.5312])\n[INFO] Total preds: 7"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---model-v3---cleaning-up-predictions-with-nms-non-max-suppression",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "22 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)",
    "text": "22 TK - Model V3 - Cleaning up predictions with NMS (Non-max Suppression)\nUPTOHERE * Take preds from model v2 and perform NMS on them to see what happens * Need to calculate: * IoU (intersection over union) * Can write about these in a blog post as extension material * Test image index good to practice on: * 163, 108 * Create a demo which compares NMS-free boxes to boxes with NMS\n\n22.1 TK - NMS filtering logic to do\nTK - create a table of different items here\n\nSimplest filtering: keep only 1x class label with the highest score per image (e.g.¬†if there are two ‚Äúhand‚Äù predictions, keep only the highest scoring one) ‚úÖ\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\nGreedy IoU filtering: Filter boxes which have IoU &gt; 0.9 (big overlap) and keep the box with the higher score ‚úÖ\n\nTK - problem here is that it may filter heavily overlapping classes (e.g.¬†if there are many boxes of different classes clustered together because your objects overlap, such as on a plate of food, items may overlap)\n\nClass-aware IoU filtering: Filter boxes which have the same label and have IoU &gt; 0.5 and keep the box with the higher score\n\nOther potential NMS options: * Greedy NMS (good for distinct boxes, just take the highest scoring box per class) * Soft-NMS with linear penalty (good for boxes which may have overlap, e.g.¬†smaller boxes in clusters) * Class-aware NMS (only perform NMS on same class of boxes)\n\nSee this video here: https://youtu.be/VAo84c1hQX8?si=dYftsYADb9Kq-bul\nTK - show prediction with more boxes than ideal, then introduce NMS as a technique to fix the predictions (e.g.¬†on the same sample)\n\nTK - NMS doesn‚Äôt need an extra model, just a way to\n\nTK - test index 163 is a good example with many boxes that could be shortened to a few\n\n\n\n22.2 TK - Simple NMS - Keep only highest scoring class per prediction\nTK - This is the simplest method and simply iterates through the boxes and keep the highest scoring box per class (e.g.¬†if there are two ‚Äúhand‚Äù prediction boxes, only keep the higher scoring one).\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\n\n# Mask with simple NMS keep mask\nkeep_boxes, keep_labels, keep_scores = filter_highest_scoring_box_per_class(boxes=random_test_sample_pred_boxes,\n                                                                            labels=random_test_sample_pred_labels,\n                                                                            scores=random_test_sample_pred_scores)\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_scores))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes))\n\n7 7 7\n4 4 4\n\n\n\nkeep_boxes, keep_labels, keep_scores\n\n(tensor([[  10.7812,  393.1250,  950.1562, 1160.6250],\n         [ 149.8828,  667.9688,  471.6797, 1018.2812],\n         [ 405.0000,  679.1406,  668.4375,  972.1094],\n         [ 373.2422,  896.4844,  648.6328, 1063.5156]], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;),\n tensor([0, 1, 5, 4], device='cuda:0'),\n tensor([0.6625, 0.5412, 0.5007, 0.3237], device='cuda:0',\n        grad_fn=&lt;IndexBackward0&gt;))\n\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(\"Simple NMS - Only keep the highest scoring box per prediction\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: not_trash (0.3237)']\n\n\n\n\n\n\n\n\n\nTK - problem with simple filtering is that it might take out a box that would‚Äôve been helpful, it also assumes that there‚Äôs little false positives (e.g.¬†each box is predicting the class that it should predict)\n\n\n22.3 TK - Greedy IoU Filtering - Intersection over Union - If a pair of boxes have an IoU over a certain threshold, keep the box with the higher score\n\nIoU in torchmetrics - https://lightning.ai/docs/torchmetrics/stable/detection/intersection_over_union.html\n\nTo calculate the Intersection over Union (IoU) between two bounding boxes:\n\nCoordinates of the intersection rectangle: \\[\nx_{\\text{left}} = \\max(x_{1A}, x_{1B})\n\\] \\[\ny_{\\text{top}} = \\max(y_{1A}, y_{1B})\n\\] \\[\nx_{\\text{right}} = \\min(x_{2A}, x_{2B})\n\\] \\[\ny_{\\text{bottom}} = \\min(y_{2A}, y_{2B})\n\\]\n\nWhere:\n\\[\n   \\text{A} = \\text{Box 1}\n\\] \\[\n   \\text{B} = \\text{Box 2}\n\\]\n\nWidth and height of the intersection: \\[\n\\text{intersection\\_width} = \\max(0, x_{\\text{right}} - x_{\\text{left}})\n\\] \\[\n\\text{intersection\\_height} = \\max(0, y_{\\text{bottom}} - y_{\\text{top}})\n\\]\nArea of Overlap: \\[\n\\text{Area of Overlap} = \\text{intersection\\_width} \\times \\text{intersection\\_height}\n\\]\nArea of Union: \\[\n\\text{Area of Union} = \\text{Area of Box 1} + \\text{Area of Box 2} - \\text{Area of Overlap}\n\\]\nIntersection over Union (IoU): $$ = / \n\n\n# IoU = Intersection / Union\n# Inserction =\n    # x_left = max(x1_A, x1_B)\n    # y_top = max(y1_A, y1_B)\n    # x_right = min(x2_A, x2_B)\n    # y_bottom = min(y2_A, x2_B)\n    # \n    # Where: \n        # A = Box 1\n        # B = Box 2\n    # intersection_width = max(0, x_right - x_left)\n    # interesection_height = max(0, y_bottom - y_top)\n    # area_intersection = intersection_width * intersection_height\n# Union = area_box_1 + area_box_2 - intersection\n\ndef intersection_over_union_score(box_1, box_2):\n    \"\"\"Calculates Intersection over Union (IoU) score for two given boxes in XYXY format.\"\"\"\n    assert len(box_1) == 4, f\"Box 1 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_1)}, see: {box_1}\"\n    assert len(box_2) == 4, f\"Box 2 should have four elements in the format [x_1, y_1, x_2, y_2] but has: {len(box_2)}, see: {box_2}\"\n\n    x1_box_1, y1_box_1, x2_box_1, y2_box_1 = box_1[0], box_1[1], box_1[2], box_1[3]\n    x1_box_2, y1_box_2, x2_box_2, y2_box_2 = box_2[0], box_2[1], box_2[2], box_2[3]\n\n    # Get coordinates of overlapping box (note: there may not be any overlapping box)\n    x_left = torch.max(x1_box_1, x1_box_2)\n    y_top = torch.max(y1_box_1, y1_box_2)\n    x_right = torch.min(x2_box_1, x2_box_2)\n    y_bottom = torch.min(y2_box_1, y2_box_2)\n\n    # Calculate the intersection width and height (we take the max of 0 and the value to find non-overlapping boxes)\n    intersection_width = max(0, x_right - x_left)\n    intersection_height = max(0, y_bottom - y_top)\n\n    # Calculate the area of intersection (note: this will 0 if either width or height are 0)\n    area_of_intersection = intersection_height * intersection_width\n\n    # Calculate individual box areas\n    box_1_area = (x2_box_1 - x1_box_1) * (y2_box_1 - y1_box_1) # width * height \n    box_2_area = (x2_box_2 - x1_box_2) * (y2_box_2 - y1_box_2)\n\n    # Calcuate area of union (sum of box areas minus the intersection area)\n    area_of_union = box_1_area + box_2_area - area_of_intersection\n\n    # Calculate the IoU score\n    iou_score = area_of_intersection / area_of_union\n\n    return iou_score\n\n\niou_score_test_pred_boxes = intersection_over_union_score(box_1=random_test_sample_pred_boxes[4],\n                                                          box_2=random_test_sample_pred_boxes[3])\n\nprint(f\"[INFO] IoU Score: {iou_score_test_pred_boxes}\")\n\n\nrandom_test_sample_pred_boxes[0], random_test_sample_pred_boxes[1]\n\n[INFO] IoU Score: 0.7790185809135437\n\n\n(tensor([  10.7812,  393.1250,  950.1562, 1160.6250], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;),\n tensor([ 149.8828,  667.9688,  471.6797, 1018.2812], device='cuda:0',\n        grad_fn=&lt;SelectBackward0&gt;))\n\n\n\n# TK - for visualization purposes, write code to highlight the intersecting points on a box and print the IoU score in the middle of the box\n\n# IoU logic\n    # 1. General IoU threshold (removing boxes at a global level, regardless of label)\n        # -&gt; for box pairs with IoU &gt; 0.9, keep the higher scoring box \n    # 2. Label specific IoU threshold (only concern is comparing boxes with the same label)\n        # -&gt; for box pairs with same label and IoU &gt; 0.5, keep the higher scoring box\n\n\nkeep_boxes = []\nkeep_scores = []\nkeep_labels = []\n\nrandom_test_sample_pred_scores = random_test_sample_outputs_post_processed[0][\"scores\"]\nrandom_test_sample_pred_labels = random_test_sample_outputs_post_processed[0][\"labels\"]\nrandom_test_sample_pred_boxes = random_test_sample_outputs_post_processed[0][\"boxes\"]\n\nkeep_indexes = torch.ones(len(random_test_sample_pred_boxes), dtype=torch.bool)\n\niou_general_threshold = 0.9 # general threshold = remove the lower scoring box in box pairs with over iou_general_threshold regardless of the label\niou_class_level_threshold = 0.5 # remove overlapping similar classes\n\n# TODO: Add a clause here to include if class labels are the same, then filter based on the class-specifc IoU threshold\nfilter_global = True\nfilter_same_label = True\n\n# Count the total loops\ntotal_loops = 0\n\nfor i, box_A in enumerate(random_test_sample_pred_boxes):\n    if not keep_indexes[i]: # insert clause to prevent calculating on already filtered labels\n        continue \n\n    for j, box_B in enumerate(random_test_sample_pred_boxes):\n        if not keep_indexes[i]:\n            continue\n\n        # Only calculate IoU score if indexes aren't the same (saves comparing the same index boxes for unwanted calculations)\n        if (i != j): \n            iou_score = intersection_over_union_score(box_1=box_A, box_2=box_B)\n            print(f\"[INFO] IoU Score for box {(i, j)}: {iou_score}\")\n\n            if filter_global:\n                if iou_score &gt; iou_general_threshold:\n                    score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                    if score_A &gt; score_B:\n                        print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                        keep_indexes[j] = False\n                    else:\n                        print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                        keep_indexes[i] = False\n                \n            if filter_same_label:\n                if iou_score &gt; iou_class_level_threshold:\n                    i_label = random_test_sample_pred_labels[i]\n                    j_label = random_test_sample_pred_labels[j]\n                    if i_label == j_label:\n                        print(f\"Labels are equal: {i_label, j_label}\")\n                        score_A, score_B = random_test_sample_pred_scores[i], random_test_sample_pred_scores[j]\n                        if score_A &gt; score_B:\n                            print(f\"[INFO] Box to keep index: {i} -&gt; {box_A}\")\n                            keep_indexes[j] = False\n                        else:\n                            print(f\"[INFO] Box to keep index: {j} -&gt; {box_B}\")\n                            keep_indexes[i] = False\n\n        total_loops += 1\n                \nprint(keep_indexes)\n\nkeep_scores = random_test_sample_pred_scores[keep_indexes]\nkeep_labels = random_test_sample_pred_labels[keep_indexes]\nkeep_boxes = random_test_sample_pred_boxes[keep_indexes]\n\nprint(len(random_test_sample_pred_boxes), len(random_test_sample_pred_labels), len(random_test_sample_pred_boxes))\nprint(len(keep_scores), len(keep_labels), len(keep_boxes), sum(keep_indexes))\n\nprint(f\"[INFO] Number of total loops: {total_loops}, max possible loops: {len(random_test_sample_pred_boxes)**2}\")\n\n[INFO] IoU Score for box (0, 1): 0.156358003616333\n[INFO] IoU Score for box (0, 2): 0.10704872757196426\n[INFO] IoU Score for box (0, 3): 0.3096315264701843\n[INFO] IoU Score for box (0, 4): 0.3974636495113373\n[INFO] IoU Score for box (0, 5): 0.06380129605531693\n[INFO] IoU Score for box (0, 6): 0.2954297661781311\n[INFO] IoU Score for box (1, 0): 0.156358003616333\n[INFO] IoU Score for box (1, 2): 0.11466032266616821\n[INFO] IoU Score for box (1, 3): 0.2778415083885193\n[INFO] IoU Score for box (1, 4): 0.36936208605766296\n[INFO] IoU Score for box (1, 5): 0.08170551061630249\n[INFO] IoU Score for box (1, 6): 0.4092644155025482\n[INFO] IoU Score for box (2, 0): 0.10704872757196426\n[INFO] IoU Score for box (2, 1): 0.11466032266616821\n[INFO] IoU Score for box (2, 3): 0.34572935104370117\n[INFO] IoU Score for box (2, 4): 0.26932957768440247\n[INFO] IoU Score for box (2, 5): 0.17588727176189423\n[INFO] IoU Score for box (2, 6): 0.058975815773010254\n[INFO] IoU Score for box (3, 0): 0.3096315264701843\n[INFO] IoU Score for box (3, 1): 0.2778415083885193\n[INFO] IoU Score for box (3, 2): 0.34572935104370117\n[INFO] IoU Score for box (3, 4): 0.7790185809135437\nLabels are equal: (tensor(5, device='cuda:0'), tensor(5, device='cuda:0'))\n[INFO] Box to keep index: 3 -&gt; tensor([248.2031, 472.6562, 675.7031, 994.8438], device='cuda:0',\n       grad_fn=&lt;UnbindBackward0&gt;)\n[INFO] IoU Score for box (3, 5): 0.11186295002698898\n[INFO] IoU Score for box (3, 6): 0.1719416379928589\n[INFO] IoU Score for box (5, 0): 0.06380129605531693\n[INFO] IoU Score for box (5, 1): 0.08170551061630249\n[INFO] IoU Score for box (5, 2): 0.17588727176189423\n[INFO] IoU Score for box (5, 3): 0.11186295002698898\n[INFO] IoU Score for box (5, 4): 0.0963958203792572\n[INFO] IoU Score for box (5, 6): 0.05411146208643913\n[INFO] IoU Score for box (6, 0): 0.2954297661781311\n[INFO] IoU Score for box (6, 1): 0.4092644155025482\n[INFO] IoU Score for box (6, 2): 0.058975815773010254\n[INFO] IoU Score for box (6, 3): 0.1719416379928589\n[INFO] IoU Score for box (6, 4): 0.24588997662067413\n[INFO] IoU Score for box (6, 5): 0.05411146208643913\ntensor([ True,  True,  True,  True, False,  True,  True])\n7 7 7\n6 6 6 tensor(6)\n[INFO] Number of total loops: 42, max possible loops: 49\n\n\n\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n# tensor([ True,  True,  True,  True,  True, False,  True, False])\n\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(random_test_sample_pred_labels, random_test_sample_pred_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_original = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=random_test_sample_pred_boxes,\n        labels=random_test_sample_labels_to_plot,\n        width=3\n    )\n)\n\n### Create image with filtered boxes\n\n# Create a list of labels to plot on the boxes \nrandom_test_sample_labels_to_plot_filtered = [f\"Pred: {id2label[label_pred.item()]} ({round(score_pred.item(), 4)})\" \n                  for label_pred, score_pred in zip(keep_labels, keep_scores)]\n\nprint(f\"[INFO] Labels with scores: {random_test_sample_labels_to_plot_filtered}\")\n\n# Plot the predicted boxes on the random test image \ntest_image_with_preds_filtered = to_pil_image(\n    pic=draw_bounding_boxes(\n        image=pil_to_tensor(pic=dataset[\"test\"][random_test_pred_index][\"image\"]),\n        boxes=keep_boxes,\n        labels=random_test_sample_labels_to_plot_filtered,\n        width=3\n    )\n)\n\n# Visualize the transformed image \nimport matplotlib.pyplot as plt\n\n# Create a figure with two subplots\nfig, axes = plt.subplots(1, 2, figsize=(20, 10))\n\n# Display image 1\naxes[0].imshow(test_image_with_preds_original)\naxes[0].axis(\"off\")  # Hide axes\naxes[0].set_title(f\"Original Image Preds (total: {len(random_test_sample_pred_boxes)})\")\n\n# Display image 2\naxes[1].imshow(test_image_with_preds_filtered)\naxes[1].axis(\"off\")  # Hide axes\naxes[1].set_title(f\"Filtered Image Preds (total: {len(keep_boxes)})\")\n\n# Show the plot\nplt.suptitle(f\"Greedy IoU Filtering (General) - For boxes with IoU &gt; {iou_general_threshold}, keep the higher scoring box\")\nplt.tight_layout()\nplt.show();\n\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: trash (0.396)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n[INFO] Labels with scores: ['Pred: bin (0.6625)', 'Pred: hand (0.5412)', 'Pred: trash (0.5007)', 'Pred: trash (0.4147)', 'Pred: not_trash (0.3237)', 'Pred: hand (0.2799)']\n\n\n\n\n\n\n\n\n\n\n# TK - more NMS logic:\n# If there are more than two hands, keep the one with the higher score..."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#tk---create-a-demo-with-simple-nms-filtering-only-keep-the-highest-scoring-boxes-per-image",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "23 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)",
    "text": "23 TK - Create a Demo with Simple NMS Filtering (only keep the highest scoring boxes per image)\nUPTOHERE:\n\nupload the demo to Hugging Face Spaces as Trashify V3\nMake sure the demo works\nGo back through the code and start tidying up/explaining things\n\nCreate a blog post to discuss different box formats in object detection\nCreate a blog post for NMS + IoU filtering (can create an IoU function that colours in the intersection parts)\nCreate an extension for longer training + synthetic data + evaluation metrics + deploying on transformers.js\n\n\n\n# Make directory for demo\nfrom pathlib import Path\n\ntrashify_data_aug_model_dir = Path(\"demos/trashify_object_detector_data_aug_model_with_nms/\")\ntrashify_data_aug_model_dir.mkdir(exist_ok=True)\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\ntimm\ngradio\ntorch\ntransformers\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/requirements.txt\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/README.md\n---\ntitle: Trashify Demo V3 üöÆ\nemoji: üóëÔ∏è\ncolorFrom: purple\ncolorTo: blue\nsdk: gradio\nsdk_version: 4.40.0\napp_file: app.py\npinned: false\nlicense: apache-2.0\n---\n\n# üöÆ Trashify Object Detector Demo V3\n\nObject detection demo to detect `trash`, `bin`, `hand`, `trash_arm`, `not_trash`, `not_bin`, `not_hand`. \n\nUsed as example for encouraging people to cleanup their local area.\n\nIf `trash`, `hand`, `bin` all detected = +1 point.\n\n## Dataset\n\nAll Trashify models are trained on a custom hand-labelled dataset of people picking up trash and placing it in a bin.\n\nThe dataset can be found on Hugging Face as [`mrdbourke/trashify_manual_labelled_images`](https://huggingface.co/datasets/mrdbourke/trashify_manual_labelled_images).\n\n## Demos\n\n* [V1](https://huggingface.co/spaces/mrdbourke/trashify_demo_v1) = Fine-tuned DETR model trained *without* data augmentation.\n* [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) = Fine-tuned DETR model trained *with* data augmentation.\n* [V3](https://huggingface.co/spaces/mrdbourke/trashify_demo_v3) = Fine-tuned DETR model trained *with* data augmentation (same as V2) with an NMS (Non Maximum Suppression) post-processing step.\n\nTK - finish the README.md + update with links to materials\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/README.md\n\n\n\n%%writefile demos/trashify_object_detector_data_aug_model_with_nms/app.py\nimport gradio as gr\nimport torch\nfrom PIL import Image, ImageDraw, ImageFont\n\nfrom transformers import AutoImageProcessor\nfrom transformers import AutoModelForObjectDetection\n\n# Note: Can load from Hugging Face or can load from local.\n# You will have to replace {mrdbourke} for your own username if the model is on your Hugging Face account.\nmodel_save_path = \"mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug\" \n\n# Load the model and preprocessor\nimage_processor = AutoImageProcessor.from_pretrained(model_save_path)\nmodel = AutoModelForObjectDetection.from_pretrained(model_save_path)\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel = model.to(device)\n\n# Get the id2label dictionary from the model\nid2label = model.config.id2label\n\n# Set up a colour dictionary for plotting boxes with different colours\ncolor_dict = {   \n    \"bin\": \"green\",\n    \"trash\": \"blue\",\n    \"hand\": \"purple\",\n    \"trash_arm\": \"yellow\",\n    \"not_trash\": \"red\",\n    \"not_bin\": \"red\",\n    \"not_hand\": \"red\",\n}\n\n# Create helper functions for seeing if items from one list are in another \ndef any_in_list(list_a, list_b):\n    \"Returns True if any item from list_a is in list_b, otherwise False.\"\n    return any(item in list_b for item in list_a)\n\ndef all_in_list(list_a, list_b):\n    \"Returns True if all items from list_a are in list_b, otherwise False.\"\n    return all(item in list_b for item in list_a)\n\ndef filter_highest_scoring_box_per_class(boxes, labels, scores):\n    \"\"\"\n    Perform NMS (Non-max Supression) to only keep the top scoring box per class.\n\n    Args:\n        boxes: tensor of shape (N, 4)\n        labels: tensor of shape (N,)\n        scores: tensor of shape (N,)\n    Returns:\n        boxes: tensor of shape (N, 4) filtered for max scoring item per class\n        labels: tensor of shape (N,) filtered for max scoring item per class\n        scores: tensor of shape (N,) filtered for max scoring item per class\n    \"\"\"\n    # Start with a blank keep mask (e.g. all False and then update the boxes to keep with True)\n    keep_mask = torch.zeros(len(boxes), dtype=torch.bool)\n\n    # For each unique class\n    for class_id in labels.unique():\n        # Get the indicies for the target class\n        class_mask = labels == class_id\n\n        # If any of the labels match the current class_id\n        if class_mask.any():\n            # Find the index of highest scoring box for this specific class\n            class_scores = scores[class_mask]\n            highest_score_idx = class_scores.argmax()\n\n            # Convert back to the original index\n            original_idx = torch.where(class_mask)[0][highest_score_idx]\n\n            # Update the index in the keep mask to keep the highest scoring box \n            keep_mask[original_idx] = True\n        \n    return boxes[keep_mask], labels[keep_mask], scores[keep_mask]\n\ndef create_return_string(list_of_predicted_labels, target_items=[\"trash\", \"bin\", \"hand\"]):\n     # Setup blank string to print out\n    return_string = \"\"\n\n    # If no items detected or trash, bin, hand not in list, return notification \n    if (len(list_of_predicted_labels) == 0) or not (any_in_list(list_a=target_items, list_b=list_of_predicted_labels)):\n        return_string = f\"No trash, bin or hand detected at confidence threshold {conf_threshold}. Try another image or lowering the confidence threshold.\"\n        return return_string\n\n    # If there are some missing, print the ones which are missing\n    elif not all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        missing_items = []\n        for item in target_items:\n            if item not in list_of_predicted_labels:\n                missing_items.append(item)\n        return_string = f\"Detected the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}). But missing the following in order to get +1: {missing_items}. If this is an error, try another image or altering the confidence threshold. Otherwise, the model may need to be updated with better data.\"\n        \n    # If all 3 trash, bin, hand occur = + 1\n    if all_in_list(list_a=target_items, list_b=list_of_predicted_labels):\n        return_string = f\"+1! Found the following items: {list_of_predicted_labels} (total: {len(list_of_predicted_labels)}), thank you for cleaning up the area!\"\n\n    print(return_string)\n\n    return return_string\n\ndef predict_on_image(image, conf_threshold):\n    with torch.no_grad():\n        inputs = image_processor(images=[image], return_tensors=\"pt\")\n        outputs = model(**inputs.to(device))\n\n        target_sizes = torch.tensor([[image.size[1], image.size[0]]]) # height, width \n\n        results = image_processor.post_process_object_detection(outputs,\n                                                                threshold=conf_threshold,\n                                                                target_sizes=target_sizes)[0]\n    # Return all items in results to CPU\n    for key, value in results.items():\n        try:\n            results[key] = value.item().cpu() # can't get scalar as .item() so add try/except block\n        except:\n            results[key] = value.cpu()\n\n    # Can return results as plotted on a PIL image (then display the image)\n    draw = ImageDraw.Draw(image)\n\n    # Create a copy of the image to draw on it for NMS\n    image_nms = image.copy()\n    draw_nms = ImageDraw.Draw(image_nms)\n\n    # Get a font from ImageFont\n    font = ImageFont.load_default(size=20)\n\n    # Get class names as text for print out\n    class_name_text_labels = []\n\n    # TK - update this for NMS\n    class_name_text_labels_nms = []\n\n    # Get original boxes, scores, labels\n    original_boxes = results[\"boxes\"]\n    original_labels = results[\"labels\"]\n    original_scores = results[\"scores\"]\n\n    # Filter boxes and only keep 1x of each label with highest score\n    filtered_boxes, filtered_labels, filtered_scores = filter_highest_scoring_box_per_class(boxes=original_boxes,\n                                                                                            labels=original_labels,\n                                                                                            scores=original_scores)\n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(original_boxes, original_labels, original_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels.append(label_name)\n\n        # Draw the rectangle\n        draw.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    # TODO: turn this into a function so it's cleaner?\n    for box, label, score in zip(filtered_boxes, filtered_labels, filtered_scores):\n        # Create coordinates\n        x, y, x2, y2 = tuple(box.tolist())\n\n        # Get label_name\n        label_name = id2label[label.item()]\n        targ_color = color_dict[label_name]\n        class_name_text_labels_nms.append(label_name)\n\n        # Draw the rectangle\n        draw_nms.rectangle(xy=(x, y, x2, y2), \n                       outline=targ_color,\n                       width=3)\n        \n        # Create a text string to display\n        text_string_to_show = f\"{label_name} ({round(score.item(), 3)})\"\n\n        # Draw the text on the image\n        draw_nms.text(xy=(x, y),\n                  text=text_string_to_show,\n                  fill=\"white\",\n                  font=font)\n    \n    \n    # Remove the draw each time\n    del draw\n    del draw_nms\n\n    # Create the return string\n    return_string = create_return_string(list_of_predicted_labels=class_name_text_labels)\n    return_string_nms = create_return_string(list_of_predicted_labels=class_name_text_labels_nms)\n    \n    return image, return_string, image_nms, return_string_nms\n\n# Create the interface\ndemo = gr.Interface(\n    fn=predict_on_image,\n    inputs=[\n        gr.Image(type=\"pil\", label=\"Target Image\"),\n        gr.Slider(minimum=0, maximum=1, value=0.25, label=\"Confidence Threshold\")\n    ],\n    outputs=[\n        gr.Image(type=\"pil\", label=\"Image Output (no filtering)\"),\n        gr.Text(label=\"Text Output (no filtering)\"),\n        gr.Image(type=\"pil\", label=\"Image Output (with max score per class box filtering)\"),\n        gr.Text(label=\"Text Output (with max score per class box filtering)\")\n        \n    ],\n    title=\"üöÆ Trashify Object Detection Demo V3\",\n    description=\"\"\"Help clean up your local area! Upload an image and get +1 if there is all of the following items detected: trash, bin, hand.\n\n    The model in V3 is [same model](https://huggingface.co/mrdbourke/detr_finetuned_trashify_box_detector_with_data_aug) as in [V2](https://huggingface.co/spaces/mrdbourke/trashify_demo_v2) (trained with data augmentation) but has an additional post-processing step (NMS or [Non Maximum Suppression](https://paperswithcode.com/method/non-maximum-suppression)) to filter classes for only the highest scoring box of each class. \n    \"\"\",\n    # Examples come in the form of a list of lists, where each inner list contains elements to prefill the `inputs` parameter with\n    examples=[\n        [\"examples/trashify_example_1.jpeg\", 0.25],\n        [\"examples/trashify_example_2.jpeg\", 0.25],\n        [\"examples/trashify_example_3.jpeg\", 0.25]\n    ],\n    cache_examples=True\n)\n\n# Launch the demo\ndemo.launch()\n\nOverwriting demos/trashify_object_detector_data_aug_model_with_nms/app.py\n\n\n\n23.1 TK - Upload our demo to the Hugging Face Hub\n\n# 1. Import the required methods for uploading to the Hugging Face Hub\nfrom huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file, # for uploading a single file (if necessary)\n    upload_folder # for uploading multiple files (in a folder)\n)\n\n# 2. Define the parameters we'd like to use for the upload\nLOCAL_DEMO_FOLDER_PATH_TO_UPLOAD = \"demos/trashify_object_detector_data_aug_model_with_nms\" # TK - update this path \nHF_TARGET_SPACE_NAME = \"trashify_demo_v3\"\nHF_REPO_TYPE = \"space\" # we're creating a Hugging Face Space\nHF_SPACE_SDK = \"gradio\"\nHF_TOKEN = \"\" # optional: set to your Hugging Face token (but I'd advise storing this as an environment variable as previously discussed)\n\n# 3. Create a Space repository on Hugging Face Hub \nprint(f\"[INFO] Creating repo on Hugging Face Hub with name: {HF_TARGET_SPACE_NAME}\")\ncreate_repo(\n    repo_id=HF_TARGET_SPACE_NAME,\n    # token=HF_TOKEN, # optional: set token manually (though it will be automatically recognized if it's available as an environment variable)\n    repo_type=HF_REPO_TYPE,\n    private=False, # set to True if you don't want your Space to be accessible to others\n    space_sdk=HF_SPACE_SDK,\n    exist_ok=True, # set to False if you want an error to raise if the repo_id already exists \n)\n\n# 4. Get the full repository name (e.g. {username}/{model_id} or {username}/{space_name})\nfull_hf_repo_name = get_full_repo_name(model_id=HF_TARGET_SPACE_NAME)\nprint(f\"[INFO] Full Hugging Face Hub repo name: {full_hf_repo_name}\")\n\n# 5. Upload our demo folder\nprint(f\"[INFO] Uploading {LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD} to repo: {full_hf_repo_name}\")\nfolder_upload_url = upload_folder(\n    repo_id=full_hf_repo_name,\n    folder_path=LOCAL_DEMO_FOLDER_PATH_TO_UPLOAD,\n    path_in_repo=\".\", # upload our folder to the root directory (\".\" means \"base\" or \"root\", this is the default)\n    # token=HF_TOKEN, # optional: set token manually\n    repo_type=HF_REPO_TYPE,\n    commit_message=\"Uploading Trashify box detection model v3 app.py with NMS post processing\"\n)\nprint(f\"[INFO] Demo folder successfully uploaded with commit URL: {folder_upload_url}\")\n\n[INFO] Creating repo on Hugging Face Hub with name: trashify_demo_v3\n[INFO] Full Hugging Face Hub repo name: mrdbourke/trashify_demo_v3\n[INFO] Uploading demos/trashify_object_detector_data_aug_model_with_nms to repo: mrdbourke/trashify_demo_v3\n[INFO] Demo folder successfully uploaded with commit URL: https://huggingface.co/spaces/mrdbourke/trashify_demo_v3/tree/main/.\n\n\n\n\n23.2 tK - Embed the Space to Test the Model\n\nfrom IPython.display import HTML\n\n\n# You can get embeddable HTML code for your demo by clicking the \"Embed\" button on the demo page\nHTML(data='''\n&lt;iframe\n    src=\"https://mrdbourke-trashify-demo-v3.hf.space\"\n    frameborder=\"0\"\n    width=\"1000\"\n    height=\"1600\"\n&gt;&lt;/iframe&gt;     \n''')\n\n\n     \n\n\n\n# UPTOHERE\n# Next, focus on a single input -&gt; output ‚úÖ\n# Show case what an output from the model looks like untrained (e.g. plot the next boxes on it) ‚úÖ\n# After showcasing 1x prediction, move onto training a model and seeing if we can get it to improve ‚úÖ\n# Continually focus on 1 input, 1 output until we can scale up ‚úÖ\n# Create a demo of our model and upload it to Hugging Face ‚úÖ\n    # Add examples to test the demo ‚úÖ\n    # Write code to upload the demo to Hugging Face ‚úÖ\n# Create visualization of input and output of data augmentation ‚úÖ\n# Create demo of model with data augmentation ‚úÖ\n# Model 2: Try improve our model with data augmentation ‚úÖ\n    # Visualize data augmentation examples in and out of the model \n    # Note: looks like augmentation may hurt our results... ü§î, this is because our data is so similar, potentially could help with more diverse data, e.g. synthetic data \n    # Try in a demo and see how it works -&gt; Trashify Demo V2 ‚úÖ \n    # Extension: Also try a model training for longer \n# Model 3 (just improve with NMS): Create NMS option so only highest quality boxes are kept for each class ‚úÖ\n\n# Next:\n\n# Go through notebook and clean it up for \n# Once we've got a better performing model, introduce evaluation metrics\n# End: three models, three demos, one without data augmentation, one with it, one with NMS (post-processing) + can have as an extension to train the model for longer and see what happens\n\n# Extensions:\n# Train a model for longer and see if it improves (e.g. 72 epochs) \n\n# Workflow:\n# Untrained model -&gt; input/output -&gt; poor results (always visualize, visualize, visualize!)\n# Trained model -&gt; input/output -&gt; better results (always visualize, visualize, visualize!)\n\n# Outline:\n# Single input/output with untrained model (bad output)\n# Train model to improve on single input/output\n# Introduce evaluation metric\n# Introduce data augmentation, see D-FINE paper for data augmentation options (we can keep it simple)\n    # See: https://arxiv.org/pdf/2410.13842 \n    # \"The total batch size is 32 across all variants. Training schedules include 72 epochs with advanced augmentation (RandomPhotometricDistort, RandomZoomOut, RandomIoUCrop, and RMultiScaleInput)\n    # followed by 2 epochs without advanced augmentation for D-FINE-X and D-FINE-L, and 120 epochs with advanced augmentation followed by 4\n    # epochs without advanced augmentation for D-FINE-M and D-FINE-S (RT-DETRv2 Training Strategy (Lv et al., 2024) in Table 3)\"\n    # TODO: Read RT-DETRv2 training strategy from paper mentioned above\n    # TODO: Read PP-YOLO data augmentation paper (keep it simple to begin with, can increase when needed)\n# Create demo with Gradio\n# Create demo with Transformers.js, see: https://huggingface.co/docs/transformers.js/en/tutorials/vanilla-js"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#extensions-extra-curriculum",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#extensions-extra-curriculum",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "24 Extensions + Extra-Curriculum",
    "text": "24 Extensions + Extra-Curriculum\n\nExtension: possibly improve the model with synthetic data? e.g.¬†on classes/bins not visible in the model\nExtension: train the model for longer and see how it improves, this could be model v4\n\nBaselines:\n\nV1 = model no data augmentaiton\nV2 = model with data augmentation\nV3 = model with NMS (post processing)\n\nExtensions:\n\nV4 = model trained for longer with NMS\nV5 = synthetic data scaled up‚Ä¶?\n\n\nExtension: Zero-shot object detection - but what if I don‚Äôt have labels?\n\nThis could discuss the use of zero-shot object detection models such as GroundingDINO and OmDet\nSee OmDet - https://huggingface.co/omlab/omdet-turbo-swin-tiny-hf\nSee GroundingDINO - https://huggingface.co/docs/transformers/en/model_doc/grounding-dino\n\nExtension: Try to repeat the workflow we‚Äôve gone through with another model such as https://huggingface.co/IDEA-Research/dab-detr-resnet-50-dc5-pat3 (apparently it is slightly better performing on COCO too)\n\nOther models to try:\n\nRT-DETRv2 (spoiler: this model works better than ConditionalDETR ;P) - https://huggingface.co/docs/transformers/main/en/model_doc/rt_detr_v2\n\nCode - https://github.com/lyuwenyu/RT-DETR"
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#summary",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#summary",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "25 Summary",
    "text": "25 Summary\n\nBounding box formats: An important step in any object detection project is to figure out what format your bounding boxes are in."
  },
  {
    "objectID": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#extra-resources",
    "href": "notebooks/hugging_face_object_detection_tutorial_ORIGINAL_with_extensions.html#extra-resources",
    "title": "[Work in Progress] Object Detection with Hugging Face Transformers Tutorial",
    "section": "26 Extra resources",
    "text": "26 Extra resources\n\nA Guide to Bounding Box Formats and How to Draw Them by Daniel Bourke."
  },
  {
    "objectID": "notebooks/scratch_pad.html",
    "href": "notebooks/scratch_pad.html",
    "title": "Learn Hugging Face ü§ó",
    "section": "",
    "text": "Steps:\n\nNeed to feed lists of images as well as coco annotations to image_processor.preprocess\nimage_processor.preprocess can handle multiple samples at a time (rather than just one)\n\npreprocess_batch steps:\n\nCreate empty lists of images/coco_annotations to feed into image_processor.preprocess\nExtract image, image_id and annotations dictionary from input examples\nCollect annotations attributes such as bbox\nOptionally perform transforms on the image/bboxes (for object detection if you‚Äôre transforming the image, you need to do the same with the boxes)\nConvert annotations into COCO format using our format_image_annotations_as_coco function\nAppend images/COCO formatted annotations to empty lists\npass the images + coco formatted annotations to preprocess method to get a preprocessed batch\n\nthis is the same output as our original preprocessed sample, except now with multiple samples\n\n\ndocstring for the function:\ndef preprocess_batch(examples, \n                     image_processor,\n                     transforms=None, # Note: Could optionally add transforms (e.g. data augmentation) here \n                     ):\n    \"\"\"\n    Preprocesses a batch of image data with annotations for object detection models.\n    \n    This function takes a batch of examples in a custom dataset format, extracts images and their\n    corresponding annotations, and converts them into a format suitable for model training or inference using the provided image processor.\n    \n    Args:\n        examples (dict): A dictionary containing the batch data with the following structure:\n            - \"image\" (List[PIL.Image.Image]): List of PIL Image objects\n            - \"image_id\" (List[int]): List of unique image identifiers\n            - \"annotations\" (List[dict]): List of annotation dictionaries, where each contains:\n                - \"file_name\" (List[str]): List of image filenames\n                - \"image_id\" (List[int]): List of image identifiers\n                - \"category_id\" (List[int]): List of object category IDs\n                - \"bbox\" (List[List[float]]): List of bounding boxes as [x, y, width, height]\n                - \"iscrowd\" (List[int]): List of crowd indicators (0 or 1)\n                - \"area\" (List[float]): List of object areas\n            - \"label_source\" (List[str]): List of label sources\n            - \"image_source\" (List[str]): List of image sources\n        \n        image_processor: An image processor object that handles normalization, resizing, and\n                         formatting of images and annotations for model input.\n        \n        transforms (optional): Image and annotation transforms for data augmentation.\n                              Defaults to None.\n    \n    Returns:\n        dict: Preprocessed batch with images and annotations converted to tensors\n              in the format required by the model.\n    \n    Note:\n        The function converts the custom annotation format to COCO format before\n        applying the image processor. Data augmentation can be optionally applied\n        by providing a transforms object.\n    \"\"\"\n\n\n\n Back to top"
  }
]